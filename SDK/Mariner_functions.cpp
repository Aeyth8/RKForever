#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mariner

#include "Basic.hpp"

#include "Mariner_classes.hpp"
#include "Mariner_parameters.hpp"


namespace SDK
{

// Function Mariner.MangoPlayerManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoPlayerManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoPlayerManager* UMangoPlayerManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoPlayerManager", "Get");

	Params::MangoPlayerManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.DeleteProfile
// (Final, Native, Public, BlueprintCallable)

void UMangoPlayerManager::DeleteProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "DeleteProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPlayerManager.SetActiveBlastPassSplashViewed
// (Final, Native, Public, BlueprintCallable)

void UMangoPlayerManager::SetActiveBlastPassSplashViewed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "SetActiveBlastPassSplashViewed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPlayerManager.SetLocalProfileAdvertStateActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPlayerManager::SetLocalProfileAdvertStateActive(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "SetLocalProfileAdvertStateActive");

	Params::MangoPlayerManager_SetLocalProfileAdvertStateActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPlayerManager.SetNewsViewed
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            NewsCmsId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::SetNewsViewed(const struct FGuid& NewsCmsId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "SetNewsViewed");

	Params::MangoPlayerManager_SetNewsViewed Parms{};

	Parms.NewsCmsId = std::move(NewsCmsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetActiveAccountName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UMangoPlayerManager::GetActiveAccountName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetActiveAccountName");

	Params::MangoPlayerManager_GetActiveAccountName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetActiveBlastPassProgression
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoBlastPassProgression       OutProgression                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetActiveBlastPassProgression(struct FMangoBlastPassProgression* OutProgression) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetActiveBlastPassProgression");

	Params::MangoPlayerManager_GetActiveBlastPassProgression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProgression != nullptr)
		*OutProgression = std::move(Parms.OutProgression);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetAllEquippedEmotesByType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoItem>               OutItems                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetAllEquippedEmotesByType(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, TArray<struct FMangoItem>* OutItems) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetAllEquippedEmotesByType");

	Params::MangoPlayerManager_GetAllEquippedEmotesByType Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.Profile = std::move(Profile);
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItems != nullptr)
		*OutItems = std::move(Parms.OutItems);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetBlastPassProgression
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoBlastPassDefinition        Definition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoBlastPassProgression       OutProgression                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetBlastPassProgression(const struct FMangoBlastPassDefinition& Definition, struct FMangoBlastPassProgression* OutProgression) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetBlastPassProgression");

	Params::MangoPlayerManager_GetBlastPassProgression Parms{};

	Parms.Definition = std::move(Definition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProgression != nullptr)
		*OutProgression = std::move(Parms.OutProgression);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetCharacterProgressionForLocalProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoCharacterProgression       OutProgression                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetCharacterProgressionForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass, struct FMangoCharacterProgression* OutProgression) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetCharacterProgressionForLocalProfile");

	Params::MangoPlayerManager_GetCharacterProgressionForLocalProfile Parms{};

	Parms.CharacterClass = CharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProgression != nullptr)
		*OutProgression = std::move(Parms.OutProgression);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetCharacterProgressionForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoCharacterProgression       OutProgression                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetCharacterProgressionForProfile(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, struct FMangoCharacterProgression* OutProgression) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetCharacterProgressionForProfile");

	Params::MangoPlayerManager_GetCharacterProgressionForProfile Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProgression != nullptr)
		*OutProgression = std::move(Parms.OutProgression);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetCMSNameForSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>SkinCollection                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const class FText UMangoPlayerManager::GetCMSNameForSkinCollection(TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> SkinCollection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetCMSNameForSkinCollection");

	Params::MangoPlayerManager_GetCMSNameForSkinCollection Parms{};

	Parms.SkinCollection = SkinCollection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedCharacterItemForLocalProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetEquippedCharacterItemForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedCharacterItemForLocalProfile");

	Params::MangoPlayerManager_GetEquippedCharacterItemForLocalProfile Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedCharacterItemForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetEquippedCharacterItemForProfile(const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, bool bRanked, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedCharacterItemForProfile");

	Params::MangoPlayerManager_GetEquippedCharacterItemForProfile Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.Profile = std::move(Profile);
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedProfileItem
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetEquippedProfileItem(const struct FMangoProfile& Profile, EMangoItemType ItemType, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedProfileItem");

	Params::MangoPlayerManager_GetEquippedProfileItem Parms{};

	Parms.Profile = std::move(Profile);
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedProfileItemForLocalProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetEquippedProfileItemForLocalProfile(EMangoItemType ItemType, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedProfileItemForLocalProfile");

	Params::MangoPlayerManager_GetEquippedProfileItemForLocalProfile Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedSkinForLocalProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> UMangoPlayerManager::GetEquippedSkinForLocalProfile(const TSoftClassPtr<class UClass> CharacterClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedSkinForLocalProfile");

	Params::MangoPlayerManager_GetEquippedSkinForLocalProfile Parms{};

	Parms.CharacterClass = CharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetEquippedSkinForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoProfile                    InProfile                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> UMangoPlayerManager::GetEquippedSkinForProfile(const struct FMangoProfile& InProfile, const TSoftClassPtr<class UClass> CharacterClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetEquippedSkinForProfile");

	Params::MangoPlayerManager_GetEquippedSkinForProfile Parms{};

	Parms.InProfile = std::move(InProfile);
	Parms.CharacterClass = CharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetItemCurrentLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoPlayerManager::GetItemCurrentLevel(const struct FMangoItem& InItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetItemCurrentLevel");

	Params::MangoPlayerManager_GetItemCurrentLevel Parms{};

	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetItemCurrentLevelForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       OutItem                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoPlayerManager::GetItemCurrentLevelForProfile(const struct FMangoItem& OutItem, const struct FMangoProfile& Profile) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetItemCurrentLevelForProfile");

	Params::MangoPlayerManager_GetItemCurrentLevelForProfile Parms{};

	Parms.OutItem = std::move(OutItem);
	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetItemCurrentProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMangoPlayerManager::GetItemCurrentProgress(const struct FMangoItem& InItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetItemCurrentProgress");

	Params::MangoPlayerManager_GetItemCurrentProgress Parms{};

	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetLinkedOriginAccountName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UMangoPlayerManager::GetLinkedOriginAccountName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetLinkedOriginAccountName");

	Params::MangoPlayerManager_GetLinkedOriginAccountName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetLocalProfileOnboardingState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoPlayerManager::GetLocalProfileOnboardingState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetLocalProfileOnboardingState");

	Params::MangoPlayerManager_GetLocalProfileOnboardingState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetLocalProfilePlaylistRank
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            InPlaylistId                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPlaylistRank                    OutPlaylistRank                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetLocalProfilePlaylistRank(const struct FGuid& InPlaylistId, struct FPlaylistRank* OutPlaylistRank) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetLocalProfilePlaylistRank");

	Params::MangoPlayerManager_GetLocalProfilePlaylistRank Parms{};

	Parms.InPlaylistId = std::move(InPlaylistId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlaylistRank != nullptr)
		*OutPlaylistRank = std::move(Parms.OutPlaylistRank);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetMangoId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoId                   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FMangoId UMangoPlayerManager::GetMangoId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetMangoId");

	Params::MangoPlayerManager_GetMangoId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetMangoProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoProfile              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoProfile UMangoPlayerManager::GetMangoProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetMangoProfile");

	Params::MangoPlayerManager_GetMangoProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetMangoProfileLastMatch
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMatchEnd                        OutMatchEnd                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::GetMangoProfileLastMatch(struct FMatchEnd* OutMatchEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetMangoProfileLastMatch");

	Params::MangoPlayerManager_GetMangoProfileLastMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMatchEnd != nullptr)
		*OutMatchEnd = std::move(Parms.OutMatchEnd);

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.GetNewsViewed
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGuid>                    OutNewsIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMangoPlayerManager::GetNewsViewed(TArray<struct FGuid>* OutNewsIds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "GetNewsViewed");

	Params::MangoPlayerManager_GetNewsViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewsIds != nullptr)
		*OutNewsIds = std::move(Parms.OutNewsIds);
}


// Function Mariner.MangoPlayerManager.IsActiveBlastPassAtMaxTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::IsActiveBlastPassAtMaxTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "IsActiveBlastPassAtMaxTier");

	Params::MangoPlayerManager_IsActiveBlastPassAtMaxTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.IsActiveBlastPassSplashViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::IsActiveBlastPassSplashViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "IsActiveBlastPassSplashViewed");

	Params::MangoPlayerManager_IsActiveBlastPassSplashViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.IsLocalProfileAdvertStateActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::IsLocalProfileAdvertStateActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "IsLocalProfileAdvertStateActive");

	Params::MangoPlayerManager_IsLocalProfileAdvertStateActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPlayerManager.IsLocalProfileOnboardingActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPlayerManager::IsLocalProfileOnboardingActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPlayerManager", "IsLocalProfileOnboardingActive");

	Params::MangoPlayerManager_IsLocalProfileOnboardingActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUserWidget.PlayAudio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUserWidget::PlayAudio(class UAkAudioEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "PlayAudio");

	Params::MarinerUserWidget_PlayAudio Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUserWidget.PlayManagedAnimation
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartAtTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumLoopsToPlay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    PlayMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUMGSequencePlayer*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUMGSequencePlayer* UMarinerUserWidget::PlayManagedAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "PlayManagedAnimation");

	Params::MarinerUserWidget_PlayManagedAnimation Parms{};

	Parms.InAnimation = InAnimation;
	Parms.StartAtTime = StartAtTime;
	Parms.NumLoopsToPlay = NumLoopsToPlay;
	Parms.PlayMode = PlayMode;
	Parms.PlaybackSpeed = PlaybackSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUserWidget.ScrollIntoView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAnimate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUserWidget::ScrollIntoView(bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "ScrollIntoView");

	Params::MarinerUserWidget_ScrollIntoView Parms{};

	Parms.bAnimate = bAnimate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUserWidget.SetActiveInputWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMarinerInputInterface>InputWidget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bGiveInputFocus                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUserWidget::SetActiveInputWidget(TScriptInterface<class IMarinerInputInterface> InputWidget, bool bGiveInputFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "SetActiveInputWidget");

	Params::MarinerUserWidget_SetActiveInputWidget Parms{};

	Parms.InputWidget = InputWidget;
	Parms.bGiveInputFocus = bGiveInputFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUserWidget.SetManagedVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EManagedVisibilityState                 InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUserWidget::SetManagedVisibility(EManagedVisibilityState InState, ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "SetManagedVisibility");

	Params::MarinerUserWidget_SetManagedVisibility Parms{};

	Parms.InState = InState;
	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUserWidget.GetActiveInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerInputType UMarinerUserWidget::GetActiveInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "GetActiveInputType");

	Params::MarinerUserWidget_GetActiveInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUserWidget.GetMarinerGameInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerGameInstance*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGameInstance* UMarinerUserWidget::GetMarinerGameInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "GetMarinerGameInstance");

	Params::MarinerUserWidget_GetMarinerGameInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUserWidget.GetMenuManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuManager* UMarinerUserWidget::GetMenuManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "GetMenuManager");

	Params::MarinerUserWidget_GetMenuManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUserWidget.GetOwningLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerUserWidget::GetOwningLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUserWidget", "GetOwningLayer");

	Params::MarinerUserWidget_GetOwningLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.BPOnHighlight
// (Event, Protected, BlueprintEvent)

void UMarinerSettingBase::BPOnHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "BPOnHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSettingBase.BPOnUnhighlight
// (Event, Protected, BlueprintEvent)

void UMarinerSettingBase::BPOnUnhighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "BPOnUnhighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSettingBase.GetBackgroundColor
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingBase::GetBackgroundColor(struct FLinearColor* OutColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "GetBackgroundColor");

	Params::MarinerSettingBase_GetBackgroundColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.GetLabelColor
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingBase::GetLabelColor(struct FLinearColor* OutColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "GetLabelColor");

	Params::MarinerSettingBase_GetLabelColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.OnDefaultRestored
// (Native, Public, BlueprintCallable)

void UMarinerSettingBase::OnDefaultRestored()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "OnDefaultRestored");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.OnMouseHovered
// (Native, Protected)

void UMarinerSettingBase::OnMouseHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "OnMouseHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.OnMouseSelected
// (Native, Protected)

void UMarinerSettingBase::OnMouseSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "OnMouseSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.OnMouseUnhovered
// (Native, Protected)

void UMarinerSettingBase::OnMouseUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "OnMouseUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.SetIsInteractable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsInteractable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingBase::SetIsInteractable(bool bInIsInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "SetIsInteractable");

	Params::MarinerSettingBase_SetIsInteractable Parms{};

	Parms.bInIsInteractable = bInIsInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             LabelIn                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerSettingBase::SetLabel(const class FText& LabelIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "SetLabel");

	Params::MarinerSettingBase_SetLabel Parms{};

	Parms.LabelIn = std::move(LabelIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.SetLabelPlatform
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerPlatformText             LabelIn                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerSettingBase::SetLabelPlatform(const struct FMarinerPlatformText& LabelIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "SetLabelPlatform");

	Params::MarinerSettingBase_SetLabelPlatform Parms{};

	Parms.LabelIn = std::move(LabelIn);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.SetUnviewed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUnviewed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingBase::SetUnviewed(bool bUnviewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "SetUnviewed");

	Params::MarinerSettingBase_SetUnviewed Parms{};

	Parms.bUnviewed = bUnviewed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingBase.GetAdditionalDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerSettingBase::GetAdditionalDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "GetAdditionalDescription");

	Params::MarinerSettingBase_GetAdditionalDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingBase::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "IsEnabled");

	Params::MarinerSettingBase_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.IsHighlighted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingBase::IsHighlighted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "IsHighlighted");

	Params::MarinerSettingBase_IsHighlighted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingBase.IsUnviewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingBase::IsUnviewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingBase", "IsUnviewed");

	Params::MarinerSettingBase_IsUnviewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingComboBox.AddOption
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             OptionText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)

void UMarinerSettingComboBox::AddOption(const class FText& OptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "AddOption");

	Params::MarinerSettingComboBox_AddOption Parms{};

	Parms.OptionText = std::move(OptionText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.AddOptionWithCallback
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             OptionText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SelectedCallback                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerSettingComboBox::AddOptionWithCallback(const class FText& OptionText, const TDelegate<void()>& SelectedCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "AddOptionWithCallback");

	Params::MarinerSettingComboBox_AddOptionWithCallback Parms{};

	Parms.OptionText = std::move(OptionText);
	Parms.SelectedCallback = SelectedCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.ClearOptions
// (Final, Native, Public, BlueprintCallable)

void UMarinerSettingComboBox::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "ClearOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.OnComboBoxOutOfScope
// (Final, Native, Private)

void UMarinerSettingComboBox::OnComboBoxOutOfScope()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "OnComboBoxOutOfScope");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.OnSelectionIndexChangedCallback
// (Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingComboBox::OnSelectionIndexChangedCallback(int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "OnSelectionIndexChangedCallback");

	Params::MarinerSettingComboBox_OnSelectionIndexChangedCallback Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.OnSettingDropdownOpened
// (Final, Native, Protected)
// Parameters:
// bool                                    bOpen                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingComboBox::OnSettingDropdownOpened(const bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "OnSettingDropdownOpened");

	Params::MarinerSettingComboBox_OnSettingDropdownOpened Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcast                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnimate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingComboBox::SetSelectedIndex(int32 Value, bool bBroadcast, bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "SetSelectedIndex");

	Params::MarinerSettingComboBox_SetSelectedIndex Parms{};

	Parms.Value = Value;
	Parms.bBroadcast = bBroadcast;
	Parms.bAnimate = bAnimate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingComboBox.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingComboBoxAssets    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingComboBoxAssets UMarinerSettingComboBox::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingComboBox", "GetAssets");

	Params::MarinerSettingComboBox_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoConnectionManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoConnectionManager*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoConnectionManager* UMangoConnectionManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoConnectionManager", "Get");

	Params::MangoConnectionManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoConnectionManager.OnUserSettingsChanged
// (Final, Native, Private)

void UMangoConnectionManager::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoConnectionManager", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoConnectionManager.GetGameVersion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerGameVersion                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerGameVersion UMangoConnectionManager::GetGameVersion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoConnectionManager", "GetGameVersion");

	Params::MangoConnectionManager_GetGameVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPregameStateMachine.GetFirstState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerPregameStateMachine::GetFirstState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameStateMachine", "GetFirstState");

	Params::MarinerPregameStateMachine_GetFirstState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPregameStateMachine.GetLastState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerPregameStateMachine::GetLastState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameStateMachine", "GetLastState");

	Params::MarinerPregameStateMachine_GetLastState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPregameStateMachine.OnMachineBegin
// (Event, Protected, BlueprintEvent)

void UMarinerPregameStateMachine::OnMachineBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameStateMachine", "OnMachineBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerPregameStateMachine.OnMachineUpdate
// (Event, Protected, BlueprintEvent)

void UMarinerPregameStateMachine::OnMachineUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameStateMachine", "OnMachineUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbilityIcon.BindToBPEvents
// (Event, Protected, BlueprintEvent)

void UMarinerAbilityIcon::BindToBPEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "BindToBPEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbilityIcon.BP_OnAbilityActivated
// (Event, Protected, BlueprintEvent)

void UMarinerAbilityIcon::BP_OnAbilityActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "BP_OnAbilityActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbilityIcon.BP_OnGameplayTagApplied
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::BP_OnGameplayTagApplied(const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "BP_OnGameplayTagApplied");

	Params::MarinerAbilityIcon_BP_OnGameplayTagApplied Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbilityIcon.BP_OnGameplayTagRemoved
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::BP_OnGameplayTagRemoved(const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "BP_OnGameplayTagRemoved");

	Params::MarinerAbilityIcon_BP_OnGameplayTagRemoved Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbilityIcon.OnAbilityActivated
// (Final, Native, Private)

void UMarinerAbilityIcon::OnAbilityActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnAbilityActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnAbilityEnded
// (Final, Native, Private)
// Parameters:
// bool                                    bWasCancelled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnAbilityEnded(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnAbilityEnded");

	Params::MarinerAbilityIcon_OnAbilityEnded Parms{};

	Parms.bWasCancelled = bWasCancelled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnAbilityFailed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            FailTags                                               (ConstParm, Parm, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnAbilityFailed(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnAbilityFailed");

	Params::MarinerAbilityIcon_OnAbilityFailed Parms{};

	Parms.Ability = Ability;
	Parms.FailTags = std::move(FailTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnAbilityUIActivated
// (Final, Native, Private)

void UMarinerAbilityIcon::OnAbilityUIActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnAbilityUIActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnAlternateAbilityIconUpdated
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bInUseAlternateIcon                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAbility>      InAbilityClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnAlternateAbilityIconUpdated(bool bInUseAlternateIcon, TSubclassOf<class UMarinerAbility> InAbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnAlternateAbilityIconUpdated");

	Params::MarinerAbilityIcon_OnAlternateAbilityIconUpdated Parms{};

	Parms.bInUseAlternateIcon = bInUseAlternateIcon;
	Parms.InAbilityClass = InAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnArenaCurrentStateChanged
// (Final, Native, Private)
// Parameters:
// EMarinerArenaReturnState                PrevState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerArenaReturnState                NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnArenaCurrentStateChanged(EMarinerArenaReturnState PrevState, EMarinerArenaReturnState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnArenaCurrentStateChanged");

	Params::MarinerAbilityIcon_OnArenaCurrentStateChanged Parms{};

	Parms.PrevState = PrevState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnCharacterGameplayTagApplied
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnCharacterGameplayTagApplied(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnCharacterGameplayTagApplied");

	Params::MarinerAbilityIcon_OnCharacterGameplayTagApplied Parms{};

	Parms.Character = Character;
	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnCharacterGameplayTagRemoved
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnCharacterGameplayTagRemoved(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnCharacterGameplayTagRemoved");

	Params::MarinerAbilityIcon_OnCharacterGameplayTagRemoved Parms{};

	Parms.Character = Character;
	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnCooldownEnded
// (Final, Native, Private)

void UMarinerAbilityIcon::OnCooldownEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnCooldownEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnCooldownTimeChanged
// (Final, Native, Private)
// Parameters:
// float                                   TimeRemaining                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnCooldownTimeChanged(float TimeRemaining, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnCooldownTimeChanged");

	Params::MarinerAbilityIcon_OnCooldownTimeChanged Parms{};

	Parms.TimeRemaining = TimeRemaining;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnDropOrThrowRelease
// (Final, Native, Private)
// Parameters:
// class AMarinerCharacter*                DroppingCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnDropOrThrowRelease(class AMarinerCharacter* DroppingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnDropOrThrowRelease");

	Params::MarinerAbilityIcon_OnDropOrThrowRelease Parms{};

	Parms.DroppingCharacter = DroppingCharacter;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnLocalAmmoChanged
// (Final, Native, Private)
// Parameters:
// float                                   NewAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnLocalAmmoChanged(float NewAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnLocalAmmoChanged");

	Params::MarinerAbilityIcon_OnLocalAmmoChanged Parms{};

	Parms.NewAmount = NewAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnPriorityItemDropped
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                KnockOutInstigator                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasMegablast                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnPriorityItemDropped(const class AMarinerCharacter* KnockOutInstigator, const bool bWasMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnPriorityItemDropped");

	Params::MarinerAbilityIcon_OnPriorityItemDropped Parms{};

	Parms.KnockOutInstigator = KnockOutInstigator;
	Parms.bWasMegablast = bWasMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnPriorityItemPickedUp
// (Final, Native, Private)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnPriorityItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnPriorityItemPickedUp");

	Params::MarinerAbilityIcon_OnPriorityItemPickedUp Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnReloadActivated
// (Final, Native, Private)

void UMarinerAbilityIcon::OnReloadActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnReloadActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnReloadEnded
// (Final, Native, Private)
// Parameters:
// bool                                    bWasCancelled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnReloadEnded(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnReloadEnded");

	Params::MarinerAbilityIcon_OnReloadEnded Parms{};

	Parms.bWasCancelled = bWasCancelled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.OnRepCurrentAmmo
// (Final, Native, Private)
// Parameters:
// float                                   InCurrentAmmo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAmmo                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::OnRepCurrentAmmo(float InCurrentAmmo, float MaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "OnRepCurrentAmmo");

	Params::MarinerAbilityIcon_OnRepCurrentAmmo Parms{};

	Parms.InCurrentAmmo = InCurrentAmmo;
	Parms.MaxAmmo = MaxAmmo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.SetAbility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerAbilitySystemComponent*   InAbilitySystem                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAbility>      InAbilityClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    InInputAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::SetAbility(class UMarinerAbilitySystemComponent* InAbilitySystem, TSubclassOf<class UMarinerAbility> InAbilityClass, EMarinerInputActions InInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "SetAbility");

	Params::MarinerAbilityIcon_SetAbility Parms{};

	Parms.InAbilitySystem = InAbilitySystem;
	Parms.InAbilityClass = InAbilityClass;
	Parms.InInputAction = InInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.SetHUDBarIconData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UHUDAbilityUIData>    IconData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::SetHUDBarIconData(const TSubclassOf<class UHUDAbilityUIData>& IconData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "SetHUDBarIconData");

	Params::MarinerAbilityIcon_SetHUDBarIconData Parms{};

	Parms.IconData = IconData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.SetIconType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerHudAbilityIconType              InIconType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityIcon::SetIconType(EMarinerHudAbilityIconType InIconType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "SetIconType");

	Params::MarinerAbilityIcon_SetIconType Parms{};

	Parms.InIconType = InIconType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.UpdatePrompt
// (Final, Native, Private)

void UMarinerAbilityIcon::UpdatePrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "UpdatePrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityIcon.GetAnimations
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerAbilityIconAnimations    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerAbilityIconAnimations UMarinerAbilityIcon::GetAnimations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityIcon", "GetAnimations");

	Params::MarinerAbilityIcon_GetAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.OnRep_MeshSwapApplyData
// (Final, Native, Protected)

void UMarinerMaterialsSwapManagerComponent::OnRep_MeshSwapApplyData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "OnRep_MeshSwapApplyData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.OnRep_MeshSwapRevertData
// (Final, Native, Protected)

void UMarinerMaterialsSwapManagerComponent::OnRep_MeshSwapRevertData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "OnRep_MeshSwapRevertData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.RevertMaterials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Flags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMaterialsSwapManagerComponent::RevertMaterials(int32 Param_Flags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "RevertMaterials");

	Params::MarinerMaterialsSwapManagerComponent_RevertMaterials Parms{};

	Parms.Param_Flags = Param_Flags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.RevertMaterialsMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable, NetValidate)
// Parameters:
// int32                                   Param_Flags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMaterialsSwapManagerComponent::RevertMaterialsMulticast(int32 Param_Flags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "RevertMaterialsMulticast");

	Params::MarinerMaterialsSwapManagerComponent_RevertMaterialsMulticast Parms{};

	Parms.Param_Flags = Param_Flags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.SwapMaterials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Flags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMaterialsSwapManagerComponent::SwapMaterials(int32 Param_Flags, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "SwapMaterials");

	Params::MarinerMaterialsSwapManagerComponent_SwapMaterials Parms{};

	Parms.Param_Flags = Param_Flags;
	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.SwapMaterialsMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable, NetValidate)
// Parameters:
// int32                                   Param_Flags                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMaterialsSwapManagerComponent::SwapMaterialsMulticast(int32 Param_Flags, class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "SwapMaterialsMulticast");

	Params::MarinerMaterialsSwapManagerComponent_SwapMaterialsMulticast Parms{};

	Parms.Param_Flags = Param_Flags;
	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMaterialsSwapManagerComponent.HasPendingMeshSwapForMeshType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerChangeMeshEnum                  MeshType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMaterialsSwapManagerComponent::HasPendingMeshSwapForMeshType(EMarinerChangeMeshEnum MeshType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMaterialsSwapManagerComponent", "HasPendingMeshSwapForMeshType");

	Params::MarinerMaterialsSwapManagerComponent_HasPendingMeshSwapForMeshType Parms{};

	Parms.MeshType = MeshType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerActivationDeviceTarget.Activate
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                InInstigator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerActivationDeviceTarget::Activate(class AMarinerCharacter* InInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "Activate");

	Params::MarinerActivationDeviceTarget_Activate Parms{};

	Parms.InInstigator = InInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDeviceTarget.Deactivate
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerActivationDeviceTarget::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDeviceTarget.OnEventCooldownStart
// (Event, Protected, BlueprintEvent)

void AMarinerActivationDeviceTarget::OnEventCooldownStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnEventCooldownStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerActivationDeviceTarget.OnEventReady
// (Event, Protected, BlueprintEvent)

void AMarinerActivationDeviceTarget::OnEventReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnEventReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerActivationDeviceTarget.OnEventTriggered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                InActivationInstigator                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerActivationDeviceTarget::OnEventTriggered(class AMarinerCharacter* InActivationInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnEventTriggered");

	Params::MarinerActivationDeviceTarget_OnEventTriggered Parms{};

	Parms.InActivationInstigator = InActivationInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerActivationDeviceTarget.OnRep_ActivationPayload
// (Final, Native, Protected)

void AMarinerActivationDeviceTarget::OnRep_ActivationPayload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnRep_ActivationPayload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDeviceTarget.OnRep_DeactivationReplicationByte
// (Final, Native, Protected)

void AMarinerActivationDeviceTarget::OnRep_DeactivationReplicationByte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnRep_DeactivationReplicationByte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDeviceTarget.OnRep_State
// (Final, Native, Protected)

void AMarinerActivationDeviceTarget::OnRep_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDeviceTarget", "OnRep_State");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSequencedProjectileSpawner.MulticastProjectileFired
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FTransform                       FiringLocation                                         (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerSequencedProjectileSpawner::MulticastProjectileFired(const struct FTransform& FiringLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSequencedProjectileSpawner", "MulticastProjectileFired");

	Params::MarinerSequencedProjectileSpawner_MulticastProjectileFired Parms{};

	Parms.FiringLocation = std::move(FiringLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSequencedProjectileSpawner.OnProjectileFired
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform                       FiringLocation                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerSequencedProjectileSpawner::OnProjectileFired(const struct FTransform& FiringLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSequencedProjectileSpawner", "OnProjectileFired");

	Params::MarinerSequencedProjectileSpawner_OnProjectileFired Parms{};

	Parms.FiringLocation = std::move(FiringLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSequencedProjectileSpawner.OnRep_ToRotator
// (Final, Native, Protected)

void AMarinerSequencedProjectileSpawner::OnRep_ToRotator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSequencedProjectileSpawner", "OnRep_ToRotator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSequencedProjectileSpawner.GetTotalFiringTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerSequencedProjectileSpawner::GetTotalFiringTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSequencedProjectileSpawner", "GetTotalFiringTime");

	Params::MarinerSequencedProjectileSpawner_GetTotalFiringTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.CB_Clicked
// (Native, Protected)

void UMarinerLayeredButton::CB_Clicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Clicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_Hovered
// (Native, Protected)
// Parameters:
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::CB_Hovered(bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Hovered");

	Params::MarinerLayeredButton_CB_Hovered Parms{};

	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_HoveredNoParam
// (Final, Native, Protected)

void UMarinerLayeredButton::CB_HoveredNoParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_HoveredNoParam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_Pressed
// (Native, Protected)

void UMarinerLayeredButton::CB_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Pressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_Released
// (Native, Protected)

void UMarinerLayeredButton::CB_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Released");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_Selected
// (Native, Protected)

void UMarinerLayeredButton::CB_Selected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Selected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.CB_Unhovered
// (Native, Protected)

void UMarinerLayeredButton::CB_Unhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "CB_Unhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ClearHeightOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ClearHeightOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ClearHeightOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ClearWidthOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ClearWidthOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ClearWidthOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.GetHeightOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OutHeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerLayeredButton::GetHeightOverride(float* OutHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetHeightOverride");

	Params::MarinerLayeredButton_GetHeightOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHeight != nullptr)
		*OutHeight = Parms.OutHeight;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetWidthOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OutWidth                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerLayeredButton::GetWidthOverride(float* OutWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetWidthOverride");

	Params::MarinerLayeredButton_GetWidthOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWidth != nullptr)
		*OutWidth = Parms.OutWidth;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.ResetBackgroundToDefault
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ResetBackgroundToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ResetBackgroundToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ResetBorderToDefault
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ResetBorderToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ResetBorderToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ResetIconToDefault
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ResetIconToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ResetIconToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ResetMaterialToDefault
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ResetMaterialToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ResetMaterialToDefault");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.ResetToDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerLayeredButton::ResetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "ResetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetAuxText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetAuxText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetAuxText");

	Params::MarinerLayeredButton_SetAuxText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetAuxTextOutlineProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonTextPropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetAuxTextOutlineProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetAuxTextOutlineProperties");

	Params::MarinerLayeredButton_SetAuxTextOutlineProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetAuxTextProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonTextPropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetAuxTextProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetAuxTextProperties");

	Params::MarinerLayeredButton_SetAuxTextProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBackgroundAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBackgroundAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBackgroundAllowed");

	Params::MarinerLayeredButton_SetBackgroundAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBackgroundImageAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBackgroundImageAll(const struct FSlateBrush& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBackgroundImageAll");

	Params::MarinerLayeredButton_SetBackgroundImageAll Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBackgroundProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonImagePropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBackgroundProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBackgroundProperties");

	Params::MarinerLayeredButton_SetBackgroundProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBorderAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBorderAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBorderAllowed");

	Params::MarinerLayeredButton_SetBorderAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBorderImageAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBorderImageAll(const struct FSlateBrush& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBorderImageAll");

	Params::MarinerLayeredButton_SetBorderImageAll Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetBorderProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonImagePropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetBorderProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetBorderProperties");

	Params::MarinerLayeredButton_SetBorderProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetCanHighlightWhileDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCanHighlight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetCanHighlightWhileDisabled(bool bInCanHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetCanHighlightWhileDisabled");

	Params::MarinerLayeredButton_SetCanHighlightWhileDisabled Parms{};

	Parms.bInCanHighlight = bInCanHighlight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetCanSelectWhileDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInCanSelect                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetCanSelectWhileDisabled(bool bInCanSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetCanSelectWhileDisabled");

	Params::MarinerLayeredButton_SetCanSelectWhileDisabled Parms{};

	Parms.bInCanSelect = bInCanSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetContentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EButtonContentState                     InContentState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetContentState(EButtonContentState InContentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetContentState");

	Params::MarinerLayeredButton_SetContentState Parms{};

	Parms.InContentState = InContentState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetContentStateBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EButtonContentState                     InContentState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      InBrush                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetContentStateBrush(EButtonContentState InContentState, const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetContentStateBrush");

	Params::MarinerLayeredButton_SetContentStateBrush Parms{};

	Parms.InContentState = InContentState;
	Parms.InBrush = std::move(InBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetHeightOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetHeightOverride(float Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetHeightOverride");

	Params::MarinerLayeredButton_SetHeightOverride Parms{};

	Parms.Height = Height;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIconAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIconAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIconAllowed");

	Params::MarinerLayeredButton_SetIconAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIconImageAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIconImageAll(const struct FSlateBrush& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIconImageAll");

	Params::MarinerLayeredButton_SetIconImageAll Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIconProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonImagePropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIconProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIconProperties");

	Params::MarinerLayeredButton_SetIconProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIsInteractable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsInteractable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIsInteractable(bool bInIsInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIsInteractable");

	Params::MarinerLayeredButton_SetIsInteractable Parms{};

	Parms.bInIsInteractable = bInIsInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIsSelected
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsSelected                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIsSelected(bool bInIsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIsSelected");

	Params::MarinerLayeredButton_SetIsSelected Parms{};

	Parms.bInIsSelected = bInIsSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetIsViewed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsViewed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetIsViewed(bool bInIsViewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetIsViewed");

	Params::MarinerLayeredButton_SetIsViewed Parms{};

	Parms.bInIsViewed = bInIsViewed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetMaterialAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetMaterialAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetMaterialAllowed");

	Params::MarinerLayeredButton_SetMaterialAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetMaterialImageAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      Image                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetMaterialImageAll(const struct FSlateBrush& Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetMaterialImageAll");

	Params::MarinerLayeredButton_SetMaterialImageAll Parms{};

	Parms.Image = std::move(Image);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetMaterialProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonImagePropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetMaterialProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonImageProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetMaterialProperties");

	Params::MarinerLayeredButton_SetMaterialProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetOnHoveredSFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    HoveredSFX                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetOnHoveredSFX(class UAkAudioEvent* HoveredSFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetOnHoveredSFX");

	Params::MarinerLayeredButton_SetOnHoveredSFX Parms{};

	Parms.HoveredSFX = HoveredSFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetOnSelectedSFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    SelectedSFX                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetOnSelectedSFX(class UAkAudioEvent* SelectedSFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetOnSelectedSFX");

	Params::MarinerLayeredButton_SetOnSelectedSFX Parms{};

	Parms.SelectedSFX = SelectedSFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetOnUnhoveredSFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    UnhoveredSFX                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetOnUnhoveredSFX(class UAkAudioEvent* UnhoveredSFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetOnUnhoveredSFX");

	Params::MarinerLayeredButton_SetOnUnhoveredSFX Parms{};

	Parms.UnhoveredSFX = UnhoveredSFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetText");

	Params::MarinerLayeredButton_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetTextOutlineProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonTextPropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetTextOutlineProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetTextOutlineProperties");

	Params::MarinerLayeredButton_SetTextOutlineProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetTextProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerLayeredButtonTextPropertiesProperties                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetTextProperties(bool bSelected, bool bEnabled, const struct FMarinerLayeredButtonTextProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetTextProperties");

	Params::MarinerLayeredButton_SetTextProperties Parms{};

	Parms.bSelected = bSelected;
	Parms.bEnabled = bEnabled;
	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.SetWidthOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLayeredButton::SetWidthOverride(float Width)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "SetWidthOverride");

	Params::MarinerLayeredButton_SetWidthOverride Parms{};

	Parms.Width = Width;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLayeredButton.GetAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerLayeredButtonAssets      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerLayeredButtonAssets UMarinerLayeredButton::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetAssets");

	Params::MarinerLayeredButton_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetContentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EButtonContentState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EButtonContentState UMarinerLayeredButton::GetContentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetContentState");

	Params::MarinerLayeredButton_GetContentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetCurrentTooltip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerLayeredButton::GetCurrentTooltip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetCurrentTooltip");

	Params::MarinerLayeredButton_GetCurrentTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetIsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerLayeredButton::GetIsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetIsSelected");

	Params::MarinerLayeredButton_GetIsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetIsViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerLayeredButton::GetIsViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetIsViewed");

	Params::MarinerLayeredButton_GetIsViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetOnClickedSFX
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UMarinerLayeredButton::GetOnClickedSFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetOnClickedSFX");

	Params::MarinerLayeredButton_GetOnClickedSFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetPromptBanner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPromptBanner*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPromptBanner* UMarinerLayeredButton::GetPromptBanner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetPromptBanner");

	Params::MarinerLayeredButton_GetPromptBanner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLayeredButton.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerLayeredButton::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLayeredButton", "GetText");

	Params::MarinerLayeredButton_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemLoadResponseButton.OnPopulate
// (Event, Public, BlueprintEvent)
// Parameters:
// class UItemLoadResponse*                LoadResponse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCMSItemDataAsset*         CMSItem                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLoadResponseButton::OnPopulate(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* CMSItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "OnPopulate");

	Params::MarinerItemLoadResponseButton_OnPopulate Parms{};

	Parms.LoadResponse = LoadResponse;
	Parms.CMSItem = CMSItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItemLoadResponseButton.SetItemData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UItemLoadResponse*                InItemData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsEquipped                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLoadResponseButton::SetItemData(class UItemLoadResponse* InItemData, bool bInIsEquipped, bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "SetItemData");

	Params::MarinerItemLoadResponseButton_SetItemData Parms{};

	Parms.InItemData = InItemData;
	Parms.bInIsEquipped = bInIsEquipped;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemLoadResponseButton.GetIconBrush
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UItemLoadResponse*                LoadResponse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCMSItemDataAsset*         CMSItem                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UMarinerItemLoadResponseButton::GetIconBrush(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* CMSItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "GetIconBrush");

	Params::MarinerItemLoadResponseButton_GetIconBrush Parms{};

	Parms.LoadResponse = LoadResponse;
	Parms.CMSItem = CMSItem;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemLoadResponseButton.GetItemLoadResponse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemLoadResponse*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemLoadResponse* UMarinerItemLoadResponseButton::GetItemLoadResponse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "GetItemLoadResponse");

	Params::MarinerItemLoadResponseButton_GetItemLoadResponse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemLoadResponseButton.GetItemLoadResponseAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerItemLoadResponseAssets   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerItemLoadResponseAssets UMarinerItemLoadResponseButton::GetItemLoadResponseAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "GetItemLoadResponseAssets");

	Params::MarinerItemLoadResponseButton_GetItemLoadResponseAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemLoadResponseButton.GetLoadedCMSItemDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCMSItemDataAsset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCMSItemDataAsset* UMarinerItemLoadResponseButton::GetLoadedCMSItemDataAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoadResponseButton", "GetLoadedCMSItemDataAsset");

	Params::MarinerItemLoadResponseButton_GetLoadedCMSItemDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGamepadPrompt.GetPromptAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerGamepadPromptAssets      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerGamepadPromptAssets UMarinerGamepadPrompt::GetPromptAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGamepadPrompt", "GetPromptAssets");

	Params::MarinerGamepadPrompt_GetPromptAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoVoiceChatManager.OnCanCommunicateOnlineUpdated
// (Final, Native, Private)

void UMangoVoiceChatManager::OnCanCommunicateOnlineUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoVoiceChatManager", "OnCanCommunicateOnlineUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoVoiceChatManager.OnUserSettingsChanged
// (Final, Native, Private)

void UMangoVoiceChatManager::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoVoiceChatManager", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnTarget.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerArenaReturnTarget::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTarget", "OnBeginOverlap");

	Params::MarinerArenaReturnTarget_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnTarget.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerArenaReturnTarget::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTarget", "OnEndOverlap");

	Params::MarinerArenaReturnTarget_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnTarget.GetClosestCharacterOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerArenaReturnTarget::GetClosestCharacterOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTarget", "GetClosestCharacterOnTeam");

	Params::MarinerArenaReturnTarget_GetClosestCharacterOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTarget.GetReturnOrientation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AMarinerArenaReturnTarget::GetReturnOrientation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTarget", "GetReturnOrientation");

	Params::MarinerArenaReturnTarget_GetReturnOrientation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.BTDecorator_MarinerCheckGameplayTagsOnActor.OnGameplayTagCountChanged
// (Native, Protected)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBehaviorTreeComponent*           OwnerComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBTDecorator_MarinerCheckGameplayTagsOnActor::OnGameplayTagCountChanged(const struct FGameplayTag& GameplayTag, int32 Count, class UBehaviorTreeComponent* OwnerComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTDecorator_MarinerCheckGameplayTagsOnActor", "OnGameplayTagCountChanged");

	Params::BTDecorator_MarinerCheckGameplayTagsOnActor_OnGameplayTagCountChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;
	Parms.OwnerComp = OwnerComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoQuestManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoQuestManager* UMangoQuestManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoQuestManager", "Get");

	Params::MangoQuestManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.ClaimQuestReward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoQuestManager::ClaimQuestReward(const EMangoQuestSlot SlotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "ClaimQuestReward");

	Params::MangoQuestManager_ClaimQuestReward Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.DeleteQuests
// (Final, Native, Public, BlueprintCallable)

void UMangoQuestManager::DeleteQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "DeleteQuests");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.DismissQuestSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoQuestManager::DismissQuestSlot(const EMangoQuestSlot SlotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "DismissQuestSlot");

	Params::MangoQuestManager_DismissQuestSlot Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.GetLoginQuestSelectedReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoLoginReward                OutLoginReward                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoQuestManager::GetLoginQuestSelectedReward(struct FMangoLoginReward* OutLoginReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "GetLoginQuestSelectedReward");

	Params::MangoQuestManager_GetLoginQuestSelectedReward Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLoginReward != nullptr)
		*OutLoginReward = std::move(Parms.OutLoginReward);

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.GetQuestDescriptionBySlotId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoQuestDescription           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMangoQuestDescription UMangoQuestManager::GetQuestDescriptionBySlotId(const EMangoQuestSlot SlotId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "GetQuestDescriptionBySlotId");

	Params::MangoQuestManager_GetQuestDescriptionBySlotId Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.GetQuestReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoQuestReward                OutReward                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoQuestManager::GetQuestReward(const EMangoQuestSlot SlotId, struct FMangoQuestReward* OutReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "GetQuestReward");

	Params::MangoQuestManager_GetQuestReward Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReward != nullptr)
		*OutReward = std::move(Parms.OutReward);

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.SetLoginQuestSelectedReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             RewardId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoQuestManager::SetLoginQuestSelectedReward(const class FName& RewardId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "SetLoginQuestSelectedReward");

	Params::MangoQuestManager_SetLoginQuestSelectedReward Parms{};

	Parms.RewardId = RewardId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.SetNeedsRefresh
// (Final, Native, Public, BlueprintCallable)

void UMangoQuestManager::SetNeedsRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "SetNeedsRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoQuestManager.GetQuests
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoQuestDescription>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoQuestDescription> UMangoQuestManager::GetQuests() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "GetQuests");

	Params::MangoQuestManager_GetQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.HasUnclaimedQuestRewards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoQuestManager::HasUnclaimedQuestRewards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "HasUnclaimedQuestRewards");

	Params::MangoQuestManager_HasUnclaimedQuestRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.IsQuestSlotBeingDismissed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoQuestManager::IsQuestSlotBeingDismissed(const EMangoQuestSlot SlotId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "IsQuestSlotBeingDismissed");

	Params::MangoQuestManager_IsQuestSlotBeingDismissed Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQuestManager.IsQuestSlotRewardBeingClaimed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoQuestSlot                         SlotId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoQuestManager::IsQuestSlotRewardBeingClaimed(const EMangoQuestSlot SlotId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQuestManager", "IsQuestSlotRewardBeingClaimed");

	Params::MangoQuestManager_IsQuestSlotRewardBeingClaimed Parms{};

	Parms.SlotId = SlotId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimatedWidget.ClearActiveOrNextAnimateOutDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClear                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedWidget::ClearActiveOrNextAnimateOutDelay(bool bClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "ClearActiveOrNextAnimateOutDelay");

	Params::MarinerAnimatedWidget_ClearActiveOrNextAnimateOutDelay Parms{};

	Parms.bClear = bClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedWidget.Populate
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAnimatedWidget::Populate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "Populate");

	Params::MarinerAnimatedWidget_Populate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimatedWidget.SetAnimationOffParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInterpolationParameters         OffParameters                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerAnimatedWidget::SetAnimationOffParameters(const struct FInterpolationParameters& OffParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "SetAnimationOffParameters");

	Params::MarinerAnimatedWidget_SetAnimationOffParameters Parms{};

	Parms.OffParameters = std::move(OffParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedWidget.SetAnimationOnParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInterpolationParameters         OnParameters                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerAnimatedWidget::SetAnimationOnParameters(const struct FInterpolationParameters& OnParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "SetAnimationOnParameters");

	Params::MarinerAnimatedWidget_SetAnimationOnParameters Parms{};

	Parms.OnParameters = std::move(OnParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedWidget.SetForcedOn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedWidget::SetForcedOn(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "SetForcedOn");

	Params::MarinerAnimatedWidget_SetForcedOn Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedWidget.SetOnTimerCompleted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OutDurationOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAnimatedWidget::SetOnTimerCompleted(float OutDurationOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "SetOnTimerCompleted");

	Params::MarinerAnimatedWidget_SetOnTimerCompleted Parms{};

	Parms.OutDurationOverride = OutDurationOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimatedWidget.SetWidgetAnimationDirty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OnDurationOverride                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDurationOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedWidget::SetWidgetAnimationDirty(float OnDurationOverride, float OutDurationOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "SetWidgetAnimationDirty");

	Params::MarinerAnimatedWidget_SetWidgetAnimationDirty Parms{};

	Parms.OnDurationOverride = OnDurationOverride;
	Parms.OutDurationOverride = OutDurationOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedWidget.GetWidgetActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAnimatedWidget::GetWidgetActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "GetWidgetActive");

	Params::MarinerAnimatedWidget_GetWidgetActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimatedWidget.GetWidgetAnimationState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWidgetAnimationState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWidgetAnimationState UMarinerAnimatedWidget::GetWidgetAnimationState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedWidget", "GetWidgetAnimationState");

	Params::MarinerAnimatedWidget_GetWidgetAnimationState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.AddHostPrompt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerPromptData               PromptData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::AddHostPrompt(const struct FMarinerPromptData& PromptData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "AddHostPrompt");

	Params::MarinerMenuStackLayer_AddHostPrompt Parms{};

	Parms.PromptData = std::move(PromptData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.ApplyLayerCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::ApplyLayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "ApplyLayerCamera");

	Params::MarinerMenuStackLayer_ApplyLayerCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.BP_OnBeginExit
// (Event, Protected, BlueprintEvent)

void UMarinerMenuStackLayer::BP_OnBeginExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "BP_OnBeginExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMenuStackLayer.BP_OnEntered
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bFromSubMenu                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackLayer::BP_OnEntered(bool bFromSubMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "BP_OnEntered");

	Params::MarinerMenuStackLayer_BP_OnEntered Parms{};

	Parms.bFromSubMenu = bFromSubMenu;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMenuStackLayer.BP_OnExited
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bToSubLayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackLayer::BP_OnExited(bool bToSubLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "BP_OnExited");

	Params::MarinerMenuStackLayer_BP_OnExited Parms{};

	Parms.bToSubLayer = bToSubLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMenuStackLayer.ClearHostCustomTooltip
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuStackLayer::ClearHostCustomTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "ClearHostCustomTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.ClearHostPrompts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::ClearHostPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "ClearHostPrompts");

	Params::MarinerMenuStackLayer_ClearHostPrompts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.GetHostStackHeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerStackHeader*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerStackHeader* UMarinerMenuStackLayer::GetHostStackHeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "GetHostStackHeader");

	Params::MarinerMenuStackLayer_GetHostStackHeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.OnChildHighlightChanged
// (Native, Event, Public, BlueprintEvent)

void UMarinerMenuStackLayer::OnChildHighlightChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "OnChildHighlightChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.OnCMSLoaded
// (Native, Event, Protected, BlueprintEvent)

void UMarinerMenuStackLayer::OnCMSLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "OnCMSLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.RemoveSelf
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::RemoveSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "RemoveSelf");

	Params::MarinerMenuStackLayer_RemoveSelf Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.ScrollHostToStart
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuStackLayer::ScrollHostToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "ScrollHostToStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.SetHostCustomTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             ToolTip                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMenuStackLayer::SetHostCustomTooltip(const class FText& ToolTip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "SetHostCustomTooltip");

	Params::MarinerMenuStackLayer_SetHostCustomTooltip Parms{};

	Parms.ToolTip = std::move(ToolTip);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.SetLayerTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             ToolTip                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMenuStackLayer::SetLayerTooltip(const class FText& ToolTip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "SetLayerTooltip");

	Params::MarinerMenuStackLayer_SetLayerTooltip Parms{};

	Parms.ToolTip = std::move(ToolTip);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.SetMenuBackgroundAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackLayer::SetMenuBackgroundAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "SetMenuBackgroundAllowed");

	Params::MarinerMenuStackLayer_SetMenuBackgroundAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackLayer.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "IsActive");

	Params::MarinerMenuStackLayer_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackLayer.ShouldShowPrompts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackLayer::ShouldShowPrompts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackLayer", "ShouldShowPrompts");

	Params::MarinerMenuStackLayer_ShouldShowPrompts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingMenuBase.OnCanUserCrossPlayUpdated
// (Event, Protected, BlueprintEvent)

void UMarinerSettingMenuBase::OnCanUserCrossPlayUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingMenuBase", "OnCanUserCrossPlayUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSettingMenuBase.OnFullScreenToggled
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bFullScreen                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingMenuBase::OnFullScreenToggled(bool bFullScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingMenuBase", "OnFullScreenToggled");

	Params::MarinerSettingMenuBase_OnFullScreenToggled Parms{};

	Parms.bFullScreen = bFullScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSettingMenuBase.UpdatePrompts
// (Final, Native, Protected, BlueprintCallable)

void UMarinerSettingMenuBase::UpdatePrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingMenuBase", "UpdatePrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncUIFlowHandler.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAsyncUIFlowHandler>ObjectType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerAsyncUIFlowHandler*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAsyncUIFlowHandler* UMarinerAsyncUIFlowHandler::Get(const class UObject* WorldContextObject, TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerAsyncUIFlowHandler", "Get");

	Params::MarinerAsyncUIFlowHandler_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectType = ObjectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncUIFlowHandler.GetWithContext
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAsyncUIFlowHandler>ObjectType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerAsyncUIFlowHandler*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAsyncUIFlowHandler* UMarinerAsyncUIFlowHandler::GetWithContext(const class UObject* WorldContextObject, TSubclassOf<class UMarinerAsyncUIFlowHandler> ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerAsyncUIFlowHandler", "GetWithContext");

	Params::MarinerAsyncUIFlowHandler_GetWithContext Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectType = ObjectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncUIFlowHandler.OnConstruct
// (Event, Protected, BlueprintEvent)

void UMarinerAsyncUIFlowHandler::OnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncUIFlowHandler", "OnConstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAsyncUIFlowHandler.GetMarinerGameInstance
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerGameInstance*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGameInstance* UMarinerAsyncUIFlowHandler::GetMarinerGameInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncUIFlowHandler", "GetMarinerGameInstance");

	Params::MarinerAsyncUIFlowHandler_GetMarinerGameInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncFlowInGameStore.SetInGameStoreActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAsyncFlowInGameStore::SetInGameStoreActive(bool bInActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowInGameStore", "SetInGameStoreActive");

	Params::MarinerAsyncFlowInGameStore_SetInGameStoreActive Parms{};

	Parms.bInActive = bInActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncFlowInGameStore.SetInGameStorePurchaseActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInActive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowInGameStore::SetInGameStorePurchaseActive(bool bInActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowInGameStore", "SetInGameStorePurchaseActive");

	Params::MarinerAsyncFlowInGameStore_SetInGameStorePurchaseActive Parms{};

	Parms.bInActive = bInActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLoadCMSItemData.LoadItemData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoItem>               ItemData                                               (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UMarinerLoadCMSItemData*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadCMSItemData* UMarinerLoadCMSItemData::LoadItemData(const class UObject* Param_WorldContextObject, const TArray<struct FMangoItem>& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadCMSItemData", "LoadItemData");

	Params::MarinerLoadCMSItemData_LoadItemData Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.ItemData = std::move(ItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSocialMenu.OnActivateGroupInvite
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialMenu::OnActivateGroupInvite(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialMenu", "OnActivateGroupInvite");

	Params::MarinerSocialMenu_OnActivateGroupInvite Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialMenu.OnCancelGroupInvite
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialMenu::OnCancelGroupInvite(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialMenu", "OnCancelGroupInvite");

	Params::MarinerSocialMenu_OnCancelGroupInvite Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialMenu.OnConfirmGroupInvite
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialMenu::OnConfirmGroupInvite(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialMenu", "OnConfirmGroupInvite");

	Params::MarinerSocialMenu_OnConfirmGroupInvite Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialMenu.OnDropdownOnPageOpened
// (Final, Native, Private)
// Parameters:
// bool                                    bOpen                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialMenu::OnDropdownOnPageOpened(const bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialMenu", "OnDropdownOnPageOpened");

	Params::MarinerSocialMenu_OnDropdownOnPageOpened Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMapGlobals.GetSoftImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ImageLookupId                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UTexture2D> UMarinerMapGlobals::GetSoftImage(const class FName ImageLookupId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "GetSoftImage");

	Params::MarinerMapGlobals_GetSoftImage Parms{};

	Parms.ImageLookupId = ImageLookupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapGlobals.IsMapValid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            CmsId                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMapGlobals::IsMapValid(const class UObject* WorldContextObject, const struct FGuid& CmsId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "IsMapValid");

	Params::MarinerMapGlobals_IsMapValid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CmsId = std::move(CmsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapGlobals.TryAndGetMangoMapFromCurrentMap
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMangoMap                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoMap UMarinerMapGlobals::TryAndGetMangoMapFromCurrentMap(const class UObject* WorldContextObject, bool* bIsValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "TryAndGetMangoMapFromCurrentMap");

	Params::MarinerMapGlobals_TryAndGetMangoMapFromCurrentMap Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapGlobals.TryAndGetMangoMapFromLoadName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoadName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMangoMap                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoMap UMarinerMapGlobals::TryAndGetMangoMapFromLoadName(const class UObject* WorldContextObject, const class FString& LoadName, bool* bIsValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "TryAndGetMangoMapFromLoadName");

	Params::MarinerMapGlobals_TryAndGetMangoMapFromLoadName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadName = std::move(LoadName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapGlobals.TryAndGetMapDataFromLoadName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LoadName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMapDataAsset*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMapDataAsset* UMarinerMapGlobals::TryAndGetMapDataFromLoadName(const class FString& LoadName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "TryAndGetMapDataFromLoadName");

	Params::MarinerMapGlobals_TryAndGetMapDataFromLoadName Parms{};

	Parms.LoadName = std::move(LoadName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapGlobals.TryAndGetMapDataFromMapName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMapDataAsset*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMapDataAsset* UMarinerMapGlobals::TryAndGetMapDataFromMapName(const class FString& MapName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapGlobals", "TryAndGetMapDataFromMapName");

	Params::MarinerMapGlobals_TryAndGetMapDataFromMapName Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.ApplyMoveAffectingGameplayEffectToOwningCharacter
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::ApplyMoveAffectingGameplayEffectToOwningCharacter(TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ApplyMoveAffectingGameplayEffectToOwningCharacter");

	Params::MarinerAbility_ApplyMoveAffectingGameplayEffectToOwningCharacter Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.ApplyPredictiveGameplayEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::ApplyPredictiveGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ApplyPredictiveGameplayEffect");

	Params::MarinerAbility_ApplyPredictiveGameplayEffect Parms{};

	Parms.GameplayEffect = GameplayEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.ApplySkin
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerAbilitySkinData_Base*     AbilitySkinData                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::ApplySkin(class UMarinerAbilitySkinData_Base* AbilitySkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ApplySkin");

	Params::MarinerAbility_ApplySkin Parms{};

	Parms.AbilitySkinData = AbilitySkinData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_AddEffectsToDefaultApplyOnAbilityActivation
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility::BP_AddEffectsToDefaultApplyOnAbilityActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_AddEffectsToDefaultApplyOnAbilityActivation");

	Params::MarinerAbility_BP_AddEffectsToDefaultApplyOnAbilityActivation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_AuthorityOnOwnerKnockout
// (Event, Public, BlueprintEvent)

void UMarinerAbility::BP_AuthorityOnOwnerKnockout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_AuthorityOnOwnerKnockout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility.BP_GetEventMagnitude
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility::BP_GetEventMagnitude()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetEventMagnitude");

	Params::MarinerAbility_BP_GetEventMagnitude Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityEnd
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility::BP_GetExtraEffectsToApplyOnAbilityEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetExtraEffectsToApplyOnAbilityEnd");

	Params::MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityInputPress
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility::BP_GetExtraEffectsToApplyOnAbilityInputPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetExtraEffectsToApplyOnAbilityInputPress");

	Params::MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputPress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetExtraEffectsToApplyOnAbilityInputRelease
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility::BP_GetExtraEffectsToApplyOnAbilityInputRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetExtraEffectsToApplyOnAbilityInputRelease");

	Params::MarinerAbility_BP_GetExtraEffectsToApplyOnAbilityInputRelease Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetLaunchVector
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerAbility::BP_GetLaunchVector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetLaunchVector");

	Params::MarinerAbility_BP_GetLaunchVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_OnAbilityActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnAbilityActivated(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnAbilityActivated");

	Params::MarinerAbility_BP_OnAbilityActivated Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_OnAbilityActivated_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnAbilityActivated_Authority(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnAbilityActivated_Authority");

	Params::MarinerAbility_BP_OnAbilityActivated_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_OnAbilityEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    WasCancelled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnAbilityEnded(const struct FGameplayAbilityActorInfo& ActorInfo, bool WasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnAbilityEnded");

	Params::MarinerAbility_BP_OnAbilityEnded Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.WasCancelled = WasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_OnAbilityEnded_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    WasCancelled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnAbilityEnded_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, bool WasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnAbilityEnded_Authority");

	Params::MarinerAbility_BP_OnAbilityEnded_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.WasCancelled = WasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_OnActivationRejectedByServer
// (Event, Protected, BlueprintEvent)

void UMarinerAbility::BP_OnActivationRejectedByServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnActivationRejectedByServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility.BP_OnAnyInputReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnAnyInputReceived(EMarinerInputActions InputType, EInputEvent EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnAnyInputReceived");

	Params::MarinerAbility_BP_OnAnyInputReceived Parms{};

	Parms.InputType = InputType;
	Parms.EventType = EventType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.BP_OnGiveAbility
// (Event, Public, BlueprintEvent)

void UMarinerAbility::BP_OnGiveAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnGiveAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility.BP_OnOwningControllerSet
// (Event, Public, BlueprintEvent)

void UMarinerAbility::BP_OnOwningControllerSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnOwningControllerSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility.BP_OnPriorityItemPickup
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::BP_OnPriorityItemPickup(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_OnPriorityItemPickup");

	Params::MarinerAbility_BP_OnPriorityItemPickup Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.GetAimData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMarinerGameplayAbilityTargetData_AimReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerGameplayAbilityTargetData_Aim UMarinerAbility::GetAimData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAimData");

	Params::MarinerAbility_GetAimData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.ManuallyApplyCooldownIfAble
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::ManuallyApplyCooldownIfAble()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ManuallyApplyCooldownIfAble");

	Params::MarinerAbility_ManuallyApplyCooldownIfAble Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.OnActivationMontageCompleted
// (Native, Protected)

void UMarinerAbility::OnActivationMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnActivationMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnActivationMontageInterrupted
// (Native, Protected)

void UMarinerAbility::OnActivationMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnActivationMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnActiveGameplayEffectAdded
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayEffectSpec              GameplayEffectSpec                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FActiveGameplayEffectHandle      ActiveGameplayHandle                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::OnActiveGameplayEffectAdded(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayEffectSpec& GameplayEffectSpec, const struct FActiveGameplayEffectHandle& ActiveGameplayHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnActiveGameplayEffectAdded");

	Params::MarinerAbility_OnActiveGameplayEffectAdded Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.GameplayEffectSpec = std::move(GameplayEffectSpec);
	Parms.ActiveGameplayHandle = std::move(ActiveGameplayHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnControllerSet
// (Native, Public)

void UMarinerAbility::OnControllerSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnControllerSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnImpendingMegablast
// (Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                CharacterExpectingMegablast                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnImpendingMegablast");

	Params::MarinerAbility_OnImpendingMegablast Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.CharacterExpectingMegablast = CharacterExpectingMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnItemCatchDelegateCompleted
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::OnItemCatchDelegateCompleted(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnItemCatchDelegateCompleted");

	Params::MarinerAbility_OnItemCatchDelegateCompleted Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnMegablastAppliedLocal
// (Native, Protected)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigatorPlayerState                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility::OnMegablastAppliedLocal(class AMarinerPlayerState* MegablastInstigatorPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnMegablastAppliedLocal");

	Params::MarinerAbility_OnMegablastAppliedLocal Parms{};

	Parms.MegablastInstigatorPlayerState = MegablastInstigatorPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnPreActivationMontageCancelled
// (Native, Protected)

void UMarinerAbility::OnPreActivationMontageCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnPreActivationMontageCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnPreActivationMontageCompleted
// (Native, Protected)

void UMarinerAbility::OnPreActivationMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnPreActivationMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.OnPreActivationMontageInterrupted
// (Native, Protected)

void UMarinerAbility::OnPreActivationMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "OnPreActivationMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.PlayFireAndForgetMarinerMontage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMontage*         MontageToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::PlayFireAndForgetMarinerMontage(class UMarinerCharacterMontage* MontageToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "PlayFireAndForgetMarinerMontage");

	Params::MarinerAbility_PlayFireAndForgetMarinerMontage Parms{};

	Parms.MontageToPlay = MontageToPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.ProcessArtifactData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TMap<class FName, float>                Map                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAbility::ProcessArtifactData(const TMap<class FName, float>& Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ProcessArtifactData");

	Params::MarinerAbility_ProcessArtifactData Parms{};

	Parms.Map = std::move(Map);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility.UpdateCooldownTimeChanged
// (Final, Native, Protected)

void UMarinerAbility::UpdateCooldownTimeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "UpdateCooldownTimeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility.BP_CanActivateAbility
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::BP_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_CanActivateAbility");

	Params::MarinerAbility_BP_CanActivateAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GenerateAIInputVector
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class AMarinerAIController*             RequestingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                RequestingPawn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerAbility::BP_GenerateAIInputVector(class AMarinerAIController* RequestingController, class AMarinerCharacter* RequestingPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GenerateAIInputVector");

	Params::MarinerAbility_BP_GenerateAIInputVector Parms{};

	Parms.RequestingController = RequestingController;
	Parms.RequestingPawn = RequestingPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetCustomTargetingFloat
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility::BP_GetCustomTargetingFloat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetCustomTargetingFloat");

	Params::MarinerAbility_BP_GetCustomTargetingFloat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetCustomTargetingInt
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerAbility::BP_GetCustomTargetingInt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetCustomTargetingInt");

	Params::MarinerAbility_BP_GetCustomTargetingInt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetCustomTargetingVectorNormal
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerAbility::BP_GetCustomTargetingVectorNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetCustomTargetingVectorNormal");

	Params::MarinerAbility_BP_GetCustomTargetingVectorNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetCustomTargetingVectorQuantized
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerAbility::BP_GetCustomTargetingVectorQuantized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetCustomTargetingVectorQuantized");

	Params::MarinerAbility_BP_GetCustomTargetingVectorQuantized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_GetLocalPredictiveCooldownTime
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility::BP_GetLocalPredictiveCooldownTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_GetLocalPredictiveCooldownTime");

	Params::MarinerAbility_BP_GetLocalPredictiveCooldownTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_HasAuthority
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::BP_HasAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_HasAuthority");

	Params::MarinerAbility_BP_HasAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_IsForRemoteClient
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::BP_IsForRemoteClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_IsForRemoteClient");

	Params::MarinerAbility_BP_IsForRemoteClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.BP_IsLocallyControlled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::BP_IsLocallyControlled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "BP_IsLocallyControlled");

	Params::MarinerAbility_BP_IsLocallyControlled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetAbilityInstanceForAbilityClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerAbility>      MarinerAbilityClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerAbility*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbility* UMarinerAbility::GetAbilityInstanceForAbilityClass(TSubclassOf<class UMarinerAbility> MarinerAbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAbilityInstanceForAbilityClass");

	Params::MarinerAbility_GetAbilityInstanceForAbilityClass Parms{};

	Parms.MarinerAbilityClass = MarinerAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetAbilityTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTagContainer      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FGameplayTagContainer UMarinerAbility::GetAbilityTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAbilityTags");

	Params::MarinerAbility_GetAbilityTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetAbilityUIDuration
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// bool                                    bForceActiveDisplay                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility::GetAbilityUIDuration(bool* bForceActiveDisplay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAbilityUIDuration");

	Params::MarinerAbility_GetAbilityUIDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bForceActiveDisplay != nullptr)
		*bForceActiveDisplay = Parms.bForceActiveDisplay;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetAllowPrompt
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::GetAllowPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAllowPrompt");

	Params::MarinerAbility_GetAllowPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetAvatarCharacterFromActorInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerAbility::GetAvatarCharacterFromActorInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetAvatarCharacterFromActorInfo");

	Params::MarinerAbility_GetAvatarCharacterFromActorInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetCooldownDuration
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility::GetCooldownDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetCooldownDuration");

	Params::MarinerAbility_GetCooldownDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetCooldownGameplayEffectType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UGameplayEffect>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UGameplayEffect> UMarinerAbility::GetCooldownGameplayEffectType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetCooldownGameplayEffectType");

	Params::MarinerAbility_GetCooldownGameplayEffectType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetDisplayAmmo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::GetDisplayAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetDisplayAmmo");

	Params::MarinerAbility_GetDisplayAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetOwningAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbilitySystemComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbilitySystemComponent* UMarinerAbility::GetOwningAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetOwningAbilitySystemComponent");

	Params::MarinerAbility_GetOwningAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetOwningCharacterFromActorInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerAbility::GetOwningCharacterFromActorInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetOwningCharacterFromActorInfo");

	Params::MarinerAbility_GetOwningCharacterFromActorInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetOwningMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterMovement*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterMovement* UMarinerAbility::GetOwningMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetOwningMovementComponent");

	Params::MarinerAbility_GetOwningMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.GetReloadAndAmmoSetup
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UMarinerAbility>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UMarinerAbility> UMarinerAbility::GetReloadAndAmmoSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "GetReloadAndAmmoSetup");

	Params::MarinerAbility_GetReloadAndAmmoSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.HasAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::HasAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "HasAuthority");

	Params::MarinerAbility_HasAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.HasInfiniteAmmo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::HasInfiniteAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "HasInfiniteAmmo");

	Params::MarinerAbility_HasInfiniteAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "IsActive");

	Params::MarinerAbility_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.IsOnNetExecutionPolicyRole
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::IsOnNetExecutionPolicyRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "IsOnNetExecutionPolicyRole");

	Params::MarinerAbility_IsOnNetExecutionPolicyRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.ShouldNotifyUIOnActivate
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::ShouldNotifyUIOnActivate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "ShouldNotifyUIOnActivate");

	Params::MarinerAbility_ShouldNotifyUIOnActivate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.UsesInputQueuing
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::UsesInputQueuing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "UsesInputQueuing");

	Params::MarinerAbility_UsesInputQueuing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.UsesInputQueuingOnEndAbility
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::UsesInputQueuingOnEndAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "UsesInputQueuingOnEndAbility");

	Params::MarinerAbility_UsesInputQueuingOnEndAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.UsesLocallyControlledNetExecutionPolicy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::UsesLocallyControlledNetExecutionPolicy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "UsesLocallyControlledNetExecutionPolicy");

	Params::MarinerAbility_UsesLocallyControlledNetExecutionPolicy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility.UsesServerNetExecutionPolicy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility::UsesServerNetExecutionPolicy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility", "UsesServerNetExecutionPolicy");

	Params::MarinerAbility_UsesServerNetExecutionPolicy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerKeyboardPrompt.GetPromptAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerKeyboardPromptAssets     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerKeyboardPromptAssets UMarinerKeyboardPrompt::GetPromptAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKeyboardPrompt", "GetPromptAssets");

	Params::MarinerKeyboardPrompt_GetPromptAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Toggle.BP_CanToggleAbility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_Toggle::BP_CanToggleAbility(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Toggle", "BP_CanToggleAbility");

	Params::MarinerAbility_Toggle_BP_CanToggleAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Toggle.BP_OnToggleOff
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility_Toggle::BP_OnToggleOff(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Toggle", "BP_OnToggleOff");

	Params::MarinerAbility_Toggle_BP_OnToggleOff Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Toggle.BP_OnToggleOff_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility_Toggle::BP_OnToggleOff_Authority(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Toggle", "BP_OnToggleOff_Authority");

	Params::MarinerAbility_Toggle_BP_OnToggleOff_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_EnergyToggle.AddEnergy_Authority
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   EnergyAdditionAmount                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldApplyMultiplier                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_EnergyToggle::AddEnergy_Authority(float EnergyAdditionAmount, bool bShouldApplyMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "AddEnergy_Authority");

	Params::MarinerAbility_EnergyToggle_AddEnergy_Authority Parms{};

	Parms.EnergyAdditionAmount = EnergyAdditionAmount;
	Parms.bShouldApplyMultiplier = bShouldApplyMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_AddEffectsToDefaultApplyOnEnergyEmpty
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_EnergyToggle::BP_AddEffectsToDefaultApplyOnEnergyEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_AddEffectsToDefaultApplyOnEnergyEmpty");

	Params::MarinerAbility_EnergyToggle_BP_AddEffectsToDefaultApplyOnEnergyEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_GetEnergyDrainMultiplier
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_EnergyToggle::BP_GetEnergyDrainMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_GetEnergyDrainMultiplier");

	Params::MarinerAbility_EnergyToggle_BP_GetEnergyDrainMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_GetEnergyRecoveryMultiplier
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_EnergyToggle::BP_GetEnergyRecoveryMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_GetEnergyRecoveryMultiplier");

	Params::MarinerAbility_EnergyToggle_BP_GetEnergyRecoveryMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnAllEnergyDrained
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_EnergyToggle::BP_OnAllEnergyDrained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnAllEnergyDrained");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnAllEnergyRecovered
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_EnergyToggle::BP_OnAllEnergyRecovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnAllEnergyRecovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnCurrentEnergyChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Energy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_EnergyToggle::BP_OnCurrentEnergyChanged(float Energy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnCurrentEnergyChanged");

	Params::MarinerAbility_EnergyToggle_BP_OnCurrentEnergyChanged Parms{};

	Parms.Energy = Energy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnStartedDrain
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_EnergyToggle::BP_OnStartedDrain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnStartedDrain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnStartedRecovery
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_EnergyToggle::BP_OnStartedRecovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnStartedRecovery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_OnStoppedDrain
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_EnergyToggle::BP_OnStoppedDrain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_OnStoppedDrain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_EnergyToggle.GetCurrentEnergy
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_EnergyToggle::GetCurrentEnergy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "GetCurrentEnergy");

	Params::MarinerAbility_EnergyToggle_GetCurrentEnergy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.GetEffectsToApplyOnEnergyEmpty
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_EnergyToggle::GetEffectsToApplyOnEnergyEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "GetEffectsToApplyOnEnergyEmpty");

	Params::MarinerAbility_EnergyToggle_GetEffectsToApplyOnEnergyEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.GetEnergyRatio
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_EnergyToggle::GetEnergyRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "GetEnergyRatio");

	Params::MarinerAbility_EnergyToggle_GetEnergyRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.OnEnergyDrainStoppedMontageCompleted
// (Native, Protected)

void UMarinerAbility_EnergyToggle::OnEnergyDrainStoppedMontageCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "OnEnergyDrainStoppedMontageCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_EnergyToggle.OnEnergyDrainStoppedMontageInterrupted
// (Native, Protected)

void UMarinerAbility_EnergyToggle::OnEnergyDrainStoppedMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "OnEnergyDrainStoppedMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_EnergyToggle.OnRep_CurrentEnergy
// (Final, Native, Protected)
// Parameters:
// float                                   PreviousEnergy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_EnergyToggle::OnRep_CurrentEnergy(float PreviousEnergy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "OnRep_CurrentEnergy");

	Params::MarinerAbility_EnergyToggle_OnRep_CurrentEnergy Parms{};

	Parms.PreviousEnergy = PreviousEnergy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_EnergyToggle.ReduceEnergy_Authority
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   EnergyReductionAmount                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldApplyMultiplier                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_EnergyToggle::ReduceEnergy_Authority(float EnergyReductionAmount, bool bShouldApplyMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "ReduceEnergy_Authority");

	Params::MarinerAbility_EnergyToggle_ReduceEnergy_Authority Parms{};

	Parms.EnergyReductionAmount = EnergyReductionAmount;
	Parms.bShouldApplyMultiplier = bShouldApplyMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_EnergyToggle.BP_CanUseEnergy
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_EnergyToggle::BP_CanUseEnergy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "BP_CanUseEnergy");

	Params::MarinerAbility_EnergyToggle_BP_CanUseEnergy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.IsDrainEnergyBlockedByTag
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_EnergyToggle::IsDrainEnergyBlockedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "IsDrainEnergyBlockedByTag");

	Params::MarinerAbility_EnergyToggle_IsDrainEnergyBlockedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_EnergyToggle.IsRecoverEnergyBlockedByTag
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_EnergyToggle::IsRecoverEnergyBlockedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_EnergyToggle", "IsRecoverEnergyBlockedByTag");

	Params::MarinerAbility_EnergyToggle_IsRecoverEnergyBlockedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactImage.InitArtifactImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EArtifactImageWidgetType                InWidgetType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerArtifactGameplayEffectType      ArtifactGameplayType                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ArtifactIconSoftTexture                                (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ArtifactLevel                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInInventory                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInViewed                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactImage::InitArtifactImage(const EArtifactImageWidgetType InWidgetType, const EMarinerArtifactGameplayEffectType ArtifactGameplayType, const TSoftObjectPtr<class UTexture2D> ArtifactIconSoftTexture, const int32 ArtifactLevel, const bool bInInventory, const bool bInViewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactImage", "InitArtifactImage");

	Params::MarinerArtifactImage_InitArtifactImage Parms{};

	Parms.InWidgetType = InWidgetType;
	Parms.ArtifactGameplayType = ArtifactGameplayType;
	Parms.ArtifactIconSoftTexture = ArtifactIconSoftTexture;
	Parms.ArtifactLevel = ArtifactLevel;
	Parms.bInInventory = bInInventory;
	Parms.bInViewed = bInViewed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactImage.InitArtifactImageOwned
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EArtifactImageWidgetType                InWidgetType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerArtifactGameplayEffectType      ArtifactGameplayType                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ArtifactIconSoftTexture                                (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ArtifactLevel                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactImage::InitArtifactImageOwned(const EArtifactImageWidgetType InWidgetType, const EMarinerArtifactGameplayEffectType ArtifactGameplayType, const TSoftObjectPtr<class UTexture2D> ArtifactIconSoftTexture, const int32 ArtifactLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactImage", "InitArtifactImageOwned");

	Params::MarinerArtifactImage_InitArtifactImageOwned Parms{};

	Parms.InWidgetType = InWidgetType;
	Parms.ArtifactGameplayType = ArtifactGameplayType;
	Parms.ArtifactIconSoftTexture = ArtifactIconSoftTexture;
	Parms.ArtifactLevel = ArtifactLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingEditableTextBox.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingEditableTextBox::SetText(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingEditableTextBox", "SetText");

	Params::MarinerSettingEditableTextBox_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingEditableTextBox.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingEditableTextBoxAssetsReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingEditableTextBoxAssets UMarinerSettingEditableTextBox::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingEditableTextBox", "GetAssets");

	Params::MarinerSettingEditableTextBox_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingEditableTextBox.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerSettingEditableTextBox::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingEditableTextBox", "GetText");

	Params::MarinerSettingEditableTextBox_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingEditableTextBox.GetTextBoxHasFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingEditableTextBox::GetTextBoxHasFocus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingEditableTextBox", "GetTextBoxHasFocus");

	Params::MarinerSettingEditableTextBox_GetTextBoxHasFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadEmotesForCharacter.LoadEmotesForCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        CharacterData                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadEmotesForCharacter*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadEmotesForCharacter* UMarinerLoadEmotesForCharacter::LoadEmotesForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData, const EMangoItemType ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadEmotesForCharacter", "LoadEmotesForCharacter");

	Params::MarinerLoadEmotesForCharacter_LoadEmotesForCharacter Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.CharacterData = CharacterData;
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLevelEventTargetLocation.DisableTarget
// (Native, Event, Public, BlueprintEvent)

void AMarinerLevelEventTargetLocation::DisableTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "DisableTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.EnableTarget
// (Native, Event, Public, BlueprintEvent)

void AMarinerLevelEventTargetLocation::EnableTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "EnableTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.OnOwningProjectileExploded
// (Final, Native, Public, HasOutParams)
// Parameters:
// class AMarinerProjectile*               Projectile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Impact                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerLevelEventTargetLocation::OnOwningProjectileExploded(class AMarinerProjectile* Projectile, const struct FHitResult& Impact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "OnOwningProjectileExploded");

	Params::MarinerLevelEventTargetLocation_OnOwningProjectileExploded Parms{};

	Parms.Projectile = Projectile;
	Parms.Impact = std::move(Impact);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.OnRep_TeamIndex
// (Final, Native, Protected)

void AMarinerLevelEventTargetLocation::OnRep_TeamIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "OnRep_TeamIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.OnUpdateHitNormal
// (Event, Protected, BlueprintEvent)

void AMarinerLevelEventTargetLocation::OnUpdateHitNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "OnUpdateHitNormal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerLevelEventTargetLocation.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLevelEventTargetLocation::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "SetTeamIndex");

	Params::MarinerLevelEventTargetLocation_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.UpdateTeamColors
// (Native, Event, Protected, BlueprintEvent)

void AMarinerLevelEventTargetLocation::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLevelEventTargetLocation.GetTeamIndex
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerLevelEventTargetLocation::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLevelEventTargetLocation", "GetTeamIndex");

	Params::MarinerLevelEventTargetLocation_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadEngineAsset.LoadEngineAssets
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   AssetPaths                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerLoadEngineAsset*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadEngineAsset* UMarinerLoadEngineAsset::LoadEngineAssets(const class UObject* Param_WorldContextObject, const TArray<class FString>& AssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadEngineAsset", "LoadEngineAssets");

	Params::MarinerLoadEngineAsset_LoadEngineAssets Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.AssetPaths = std::move(AssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadAllItemsFromCMSByType.LoadAllCMSItemsOfType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOwnedItems                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnownedItems                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProgressionItems                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlastPassItems                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOfferItems                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCollectionItems                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadAllItemsFromCMSByType*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadAllItemsFromCMSByType* UMarinerLoadAllItemsFromCMSByType::LoadAllCMSItemsOfType(const class UObject* Param_WorldContextObject, const EMangoItemType ItemType, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bOfferItems, bool bCollectionItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadAllItemsFromCMSByType", "LoadAllCMSItemsOfType");

	Params::MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfType Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.ItemType = ItemType;
	Parms.bOwnedItems = bOwnedItems;
	Parms.bUnownedItems = bUnownedItems;
	Parms.bProgressionItems = bProgressionItems;
	Parms.bBlastPassItems = bBlastPassItems;
	Parms.bOfferItems = bOfferItems;
	Parms.bCollectionItems = bCollectionItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadAllItemsFromCMSByType.LoadAllCMSItemsOfTypeWithGameInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMarinerGameInstance>MarinerGameInstance                                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOwnedItems                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnownedItems                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProgressionItems                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlastPassItems                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOfferItems                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCollectionItems                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadAllItemsFromCMSByType*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadAllItemsFromCMSByType* UMarinerLoadAllItemsFromCMSByType::LoadAllCMSItemsOfTypeWithGameInstance(TSoftObjectPtr<class UMarinerGameInstance> MarinerGameInstance, const EMangoItemType ItemType, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bOfferItems, bool bCollectionItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadAllItemsFromCMSByType", "LoadAllCMSItemsOfTypeWithGameInstance");

	Params::MarinerLoadAllItemsFromCMSByType_LoadAllCMSItemsOfTypeWithGameInstance Parms{};

	Parms.MarinerGameInstance = MarinerGameInstance;
	Parms.ItemType = ItemType;
	Parms.bOwnedItems = bOwnedItems;
	Parms.bUnownedItems = bUnownedItems;
	Parms.bProgressionItems = bProgressionItems;
	Parms.bBlastPassItems = bBlastPassItems;
	Parms.bOfferItems = bOfferItems;
	Parms.bCollectionItems = bCollectionItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.AccelerateExistingRocketTrophySpawn
// (Final, Native, Public, BlueprintCallable)

void UCollectionMode::AccelerateExistingRocketTrophySpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "AccelerateExistingRocketTrophySpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.GetTrophyType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AMarinerCollectableObject*        CollectableObject                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerTrophyType                      OutTrophyType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::GetTrophyType(const class AMarinerCollectableObject* CollectableObject, EMarinerTrophyType* OutTrophyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetTrophyType");

	Params::CollectionMode_GetTrophyType Parms{};

	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrophyType != nullptr)
		*OutTrophyType = Parms.OutTrophyType;
}


// Function Mariner.CollectionMode.IncrementsCharacterTrophyPointsAndCount
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToAward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::IncrementsCharacterTrophyPointsAndCount(const class AMarinerCharacter* PickedUpBy, int32 PointsToAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "IncrementsCharacterTrophyPointsAndCount");

	Params::CollectionMode_IncrementsCharacterTrophyPointsAndCount Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.PointsToAward = PointsToAward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.IncrementsTeamTrophyPoints
// (Final, Native, Protected)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToAward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::IncrementsTeamTrophyPoints(int32 TeamIndex, int32 PointsToAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "IncrementsTeamTrophyPoints");

	Params::CollectionMode_IncrementsTeamTrophyPoints Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.PointsToAward = PointsToAward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.OnAccumulatedDamageChange
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      DamageableComponent                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::OnAccumulatedDamageChange(const class UMarinerDamageableComponent* DamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "OnAccumulatedDamageChange");

	Params::CollectionMode_OnAccumulatedDamageChange Parms{};

	Parms.DamageableComponent = DamageableComponent;
	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.OnCollectableObjectOutOfBounds
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCollectableObject*        CollectableObject                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::OnCollectableObjectOutOfBounds(const class AMarinerCollectableObject* CollectableObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "OnCollectableObjectOutOfBounds");

	Params::CollectionMode_OnCollectableObjectOutOfBounds Parms{};

	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.OnCollectableObjectPickedUp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        CollectableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::OnCollectableObjectPickedUp(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "OnCollectableObjectPickedUp");

	Params::CollectionMode_OnCollectableObjectPickedUp Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.OnRoundBegin
// (Final, Native, Protected, BlueprintCallable)

void UCollectionMode::OnRoundBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "OnRoundBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.OnRoundReset
// (Final, Native, Protected, BlueprintCallable)

void UCollectionMode::OnRoundReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "OnRoundReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.PostInitController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::PostInitController(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "PostInitController");

	Params::CollectionMode_PostInitController Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetPlayerTrophyBlastability
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlayerTrophyBlastability                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetPlayerTrophyBlastability(float InPlayerTrophyBlastability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetPlayerTrophyBlastability");

	Params::CollectionMode_SetPlayerTrophyBlastability Parms{};

	Parms.InPlayerTrophyBlastability = InPlayerTrophyBlastability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetPlayerTrophyBounceDirectionMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EPlayerTrophyBounceDirectionMode        InPlayerTrophyBounceDirectionMode                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetPlayerTrophyBounceDirectionMode(const EPlayerTrophyBounceDirectionMode& InPlayerTrophyBounceDirectionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetPlayerTrophyBounceDirectionMode");

	Params::CollectionMode_SetPlayerTrophyBounceDirectionMode Parms{};

	Parms.InPlayerTrophyBounceDirectionMode = InPlayerTrophyBounceDirectionMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetPlayerTrophyBounceDirectionOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPlayerTrophyBounceDirectionOverride                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetPlayerTrophyBounceDirectionOverride(const struct FVector& InPlayerTrophyBounceDirectionOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetPlayerTrophyBounceDirectionOverride");

	Params::CollectionMode_SetPlayerTrophyBounceDirectionOverride Parms{};

	Parms.InPlayerTrophyBounceDirectionOverride = std::move(InPlayerTrophyBounceDirectionOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetPlayerTrophyBounceOrigin
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPlayerTrophyBounceOrigin                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetPlayerTrophyBounceOrigin(const struct FVector& InPlayerTrophyBounceOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetPlayerTrophyBounceOrigin");

	Params::CollectionMode_SetPlayerTrophyBounceOrigin Parms{};

	Parms.InPlayerTrophyBounceOrigin = std::move(InPlayerTrophyBounceOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetPlayerTrophyBouncePitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPitch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetPlayerTrophyBouncePitch(float InPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetPlayerTrophyBouncePitch");

	Params::CollectionMode_SetPlayerTrophyBouncePitch Parms{};

	Parms.InPitch = InPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SetTrophyHuntMaxScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTrophyHuntMaxScore                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SetTrophyHuntMaxScore(int32 InTrophyHuntMaxScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SetTrophyHuntMaxScore");

	Params::CollectionMode_SetTrophyHuntMaxScore Parms{};

	Parms.InTrophyHuntMaxScore = InTrophyHuntMaxScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SpawnPlayerTrophy
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                DamagedCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DropDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SpawnPlayerTrophy(class AMarinerCharacter* DamagedCharacter, const struct FVector& DropDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SpawnPlayerTrophy");

	Params::CollectionMode_SpawnPlayerTrophy Parms{};

	Parms.DamagedCharacter = DamagedCharacter;
	Parms.DropDirection = std::move(DropDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.SpawnRocketTrophy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeToSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        SourceTrophy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpawnerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollectionMode::SpawnRocketTrophy(float TimeToSpawn, class AMarinerCollectableObject* SourceTrophy, int32 SpawnerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "SpawnRocketTrophy");

	Params::CollectionMode_SpawnRocketTrophy Parms{};

	Parms.TimeToSpawn = TimeToSpawn;
	Parms.SourceTrophy = SourceTrophy;
	Parms.SpawnerID = SpawnerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.CollectionMode.AreAvailableSpawners
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCollectionMode::AreAvailableSpawners() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "AreAvailableSpawners");

	Params::CollectionMode_AreAvailableSpawners Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetActiveRocketTrophySpawnerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetActiveRocketTrophySpawnerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetActiveRocketTrophySpawnerCount");

	Params::CollectionMode_GetActiveRocketTrophySpawnerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetEnemyPlayerTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetEnemyPlayerTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetEnemyPlayerTrophyValue");

	Params::CollectionMode_GetEnemyPlayerTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetFriendPlayerTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetFriendPlayerTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetFriendPlayerTrophyValue");

	Params::CollectionMode_GetFriendPlayerTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetQueuedRocketTrophySpawnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetQueuedRocketTrophySpawnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetQueuedRocketTrophySpawnCount");

	Params::CollectionMode_GetQueuedRocketTrophySpawnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetRocketTrophiesInCirculation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetRocketTrophiesInCirculation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetRocketTrophiesInCirculation");

	Params::CollectionMode_GetRocketTrophiesInCirculation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetRocketTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetRocketTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetRocketTrophyValue");

	Params::CollectionMode_GetRocketTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetTrophyRewardPoints
// (Final, Native, Protected, Const)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        CollectableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetTrophyRewardPoints(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetTrophyRewardPoints");

	Params::CollectionMode_GetTrophyRewardPoints Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.CollectionMode.GetTrophySpawnersCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCollectionMode::GetTrophySpawnersCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollectionMode", "GetTrophySpawnersCount");

	Params::CollectionMode_GetTrophySpawnersCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadTransitionWidget.OnTransitionInComplete
// (Final, Native, Private)

void UMarinerLoadTransitionWidget::OnTransitionInComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLoadTransitionWidget", "OnTransitionInComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLoadTransitionWidget.OnTransitionOutComplete
// (Final, Native, Private)

void UMarinerLoadTransitionWidget::OnTransitionOutComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLoadTransitionWidget", "OnTransitionOutComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLoadTransitionWidget.GetTransitionInAnimation
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UMarinerLoadTransitionWidget::GetTransitionInAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLoadTransitionWidget", "GetTransitionInAnimation");

	Params::MarinerLoadTransitionWidget_GetTransitionInAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadTransitionWidget.GetTransitionOutAnimation
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UMarinerLoadTransitionWidget::GetTransitionOutAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLoadTransitionWidget", "GetTransitionOutAnimation");

	Params::MarinerLoadTransitionWidget_GetTransitionOutAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadEquippedDataForLocalProfile.LoadEquippedDataForLocalProfile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadEquippedDataForLocalProfile*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadEquippedDataForLocalProfile* UMarinerLoadEquippedDataForLocalProfile::LoadEquippedDataForLocalProfile(const class UObject* Param_WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadEquippedDataForLocalProfile", "LoadEquippedDataForLocalProfile");

	Params::MarinerLoadEquippedDataForLocalProfile_LoadEquippedDataForLocalProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetBuildConfig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetBuildConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetBuildConfig");

	Params::FSGBuildInformation_GetBuildConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetBuildDate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetBuildDate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetBuildDate");

	Params::FSGBuildInformation_GetBuildDate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetBuilderName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetBuilderName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetBuilderName");

	Params::FSGBuildInformation_GetBuilderName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetBuildNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetBuildNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetBuildNumber");

	Params::FSGBuildInformation_GetBuildNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetBuildWorkerName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetBuildWorkerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetBuildWorkerName");

	Params::FSGBuildInformation_GetBuildWorkerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetP4Branch
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetP4Branch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetP4Branch");

	Params::FSGBuildInformation_GetP4Branch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FSGBuildInformation.GetP4Changelist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFSGBuildInformation::GetP4Changelist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FSGBuildInformation", "GetP4Changelist");

	Params::FSGBuildInformation_GetP4Changelist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoAchievementsManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoAchievementsManager*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoAchievementsManager* UMangoAchievementsManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoAchievementsManager", "Get");

	Params::MangoAchievementsManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoAchievementsManager.CheckIfMultiStatAchievementUnlocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerAchievement                     Achivement                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoAchievementsManager::CheckIfMultiStatAchievementUnlocked(EMarinerAchievement Achivement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoAchievementsManager", "CheckIfMultiStatAchievementUnlocked");

	Params::MangoAchievementsManager_CheckIfMultiStatAchievementUnlocked Parms{};

	Parms.Achivement = Achivement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoAchievementsManager.HandleProfileAchievements
// (Final, Native, Public)

void UMangoAchievementsManager::HandleProfileAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoAchievementsManager", "HandleProfileAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoAchievementsManager.IncrementStatForAchievement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerAchievement                     EAchivement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoAchievementsManager::IncrementStatForAchievement(EMarinerAchievement EAchivement, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoAchievementsManager", "IncrementStatForAchievement");

	Params::MangoAchievementsManager_IncrementStatForAchievement Parms{};

	Parms.EAchivement = EAchivement;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoAchievementsManager.ReplaceStatForAchievement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerAchievement                     EAchivement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoAchievementsManager::ReplaceStatForAchievement(EMarinerAchievement EAchivement, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoAchievementsManager", "ReplaceStatForAchievement");

	Params::MangoAchievementsManager_ReplaceStatForAchievement Parms{};

	Parms.EAchivement = EAchivement;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoAchievementsManager.SyncAchievements
// (Final, Native, Private)

void UMangoAchievementsManager::SyncAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoAchievementsManager", "SyncAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoBlastPassManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoBlastPassManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoBlastPassManager* UMangoBlastPassManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoBlastPassManager", "Get");

	Params::MangoBlastPassManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoBlastPassManager.OnCMSLoaded
// (Final, Native, Private)

void UMangoBlastPassManager::OnCMSLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoBlastPassManager", "OnCMSLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoBlastPassManager.SeasonEndedCallback
// (Final, Native, Private)

void UMangoBlastPassManager::SeasonEndedCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoBlastPassManager", "SeasonEndedCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoBlastPassManager.SeasonStartedCallback
// (Final, Native, Private)

void UMangoBlastPassManager::SeasonStartedCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoBlastPassManager", "SeasonStartedCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoCMSManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoCMSManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoCMSManager* UMangoCMSManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoCMSManager", "Get");

	Params::MangoCMSManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetSortedBlastPassOffers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        Definition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutOffers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMangoCMSManager::GetSortedBlastPassOffers(const struct FMangoBlastPassDefinition& Definition, TArray<class FString>* OutOffers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetSortedBlastPassOffers");

	Params::MangoCMSManager_GetSortedBlastPassOffers Parms{};

	Parms.Definition = std::move(Definition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOffers != nullptr)
		*OutOffers = std::move(Parms.OutOffers);
}


// Function Mariner.MangoCMSManager.IsPlaylistRanked
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            PlaylistUniqueId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsPlaylistRanked(const struct FGuid& PlaylistUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsPlaylistRanked");

	Params::MangoCMSManager_IsPlaylistRanked Parms{};

	Parms.PlaylistUniqueId = std::move(PlaylistUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.FindPlaylist
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoPlaylist                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMangoPlaylist UMangoCMSManager::FindPlaylist(const struct FGuid& PlaylistGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "FindPlaylist");

	Params::MangoCMSManager_FindPlaylist Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetAllFeaturedOffersPrimary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoFeaturedOffer>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoFeaturedOffer> UMangoCMSManager::GetAllFeaturedOffersPrimary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllFeaturedOffersPrimary");

	Params::MangoCMSManager_GetAllFeaturedOffersPrimary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetAllFeaturedOffersSecondary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoFeaturedOffer>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoFeaturedOffer> UMangoCMSManager::GetAllFeaturedOffersSecondary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllFeaturedOffersSecondary");

	Params::MangoCMSManager_GetAllFeaturedOffersSecondary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetAllNativeOffers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoNativeOffer>  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoNativeOffer> UMangoCMSManager::GetAllNativeOffers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllNativeOffers");

	Params::MangoCMSManager_GetAllNativeOffers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetAllNativeOffersByType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoNativeOfferType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoNativeOffer>        OutNativeOffers                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMangoCMSManager::GetAllNativeOffersByType(EMangoNativeOfferType Type, TArray<struct FMangoNativeOffer>* OutNativeOffers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllNativeOffersByType");

	Params::MangoCMSManager_GetAllNativeOffersByType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNativeOffers != nullptr)
		*OutNativeOffers = std::move(Parms.OutNativeOffers);
}


// Function Mariner.MangoCMSManager.GetAllOffersOfType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoOfferType                         OfferType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoPurchaseOffer>      OutOffers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMangoCMSManager::GetAllOffersOfType(EMangoOfferType OfferType, TArray<struct FMangoPurchaseOffer>* OutOffers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllOffersOfType");

	Params::MangoCMSManager_GetAllOffersOfType Parms{};

	Parms.OfferType = OfferType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOffers != nullptr)
		*OutOffers = std::move(Parms.OutOffers);
}


// Function Mariner.MangoCMSManager.GetAllPurchaseOffers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoPurchaseOffer>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoPurchaseOffer> UMangoCMSManager::GetAllPurchaseOffers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetAllPurchaseOffers");

	Params::MangoCMSManager_GetAllPurchaseOffers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetArtifactUnlockOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ArtifactId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoCMSManager::GetArtifactUnlockOrder(const class FString& ArtifactId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetArtifactUnlockOrder");

	Params::MangoCMSManager_GetArtifactUnlockOrder Parms{};

	Parms.ArtifactId = std::move(ArtifactId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetBlastPassItemTier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutTier                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutIsPaid                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetBlastPassItemTier(const class FString& ItemID, int32* OutTier, bool* OutIsPaid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetBlastPassItemTier");

	Params::MangoCMSManager_GetBlastPassItemTier Parms{};

	Parms.ItemID = std::move(ItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTier != nullptr)
		*OutTier = Parms.OutTier;

	if (OutIsPaid != nullptr)
		*OutIsPaid = Parms.OutIsPaid;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetBlastPassMaxTier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           DefinitionId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutMaxTier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetBlastPassMaxTier(const class FString& DefinitionId, int32* OutMaxTier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetBlastPassMaxTier");

	Params::MangoCMSManager_GetBlastPassMaxTier Parms{};

	Parms.DefinitionId = std::move(DefinitionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMaxTier != nullptr)
		*OutMaxTier = Parms.OutMaxTier;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetBlastPassTierPurchaseCost
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoBlastPassDefinition        Definition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   MinTier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoCMSManager::GetBlastPassTierPurchaseCost(const struct FMangoBlastPassDefinition& Definition, int32 MinTier, int32 MaxTier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetBlastPassTierPurchaseCost");

	Params::MangoCMSManager_GetBlastPassTierPurchaseCost Parms{};

	Parms.Definition = std::move(Definition);
	Parms.MinTier = MinTier;
	Parms.MaxTier = MaxTier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetCMSVersion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMangoCMSManager::GetCMSVersion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetCMSVersion");

	Params::MangoCMSManager_GetCMSVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetFirstOfferContainingItem
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoPurchaseOffer              OutOffer                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetFirstOfferContainingItem(const class FString& ItemID, struct FMangoPurchaseOffer* OutOffer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetFirstOfferContainingItem");

	Params::MangoCMSManager_GetFirstOfferContainingItem Parms{};

	Parms.ItemID = std::move(ItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOffer != nullptr)
		*OutOffer = std::move(Parms.OutOffer);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetIsCrossplayKillSwitchEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetIsCrossplayKillSwitchEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetIsCrossplayKillSwitchEnabled");

	Params::MangoCMSManager_GetIsCrossplayKillSwitchEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetLoginReward
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LookupId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoLoginReward                OutLoginReward                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetLoginReward(const class FName& LookupId, struct FMangoLoginReward* OutLoginReward) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetLoginReward");

	Params::MangoCMSManager_GetLoginReward Parms{};

	Parms.LookupId = LookupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLoginReward != nullptr)
		*OutLoginReward = std::move(Parms.OutLoginReward);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetLoginRewards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FMangoLoginReward>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FMangoLoginReward> UMangoCMSManager::GetLoginRewards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetLoginRewards");

	Params::MangoCMSManager_GetLoginRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetMaps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<struct FGuid, struct FMangoMap>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FGuid, struct FMangoMap> UMangoCMSManager::GetMaps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetMaps");

	Params::MangoCMSManager_GetMaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetMatchmakingConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoMatchmakingConfig    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMangoMatchmakingConfig UMangoCMSManager::GetMatchmakingConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetMatchmakingConfig");

	Params::MangoCMSManager_GetMatchmakingConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<struct FGuid, struct FMangoMode>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FGuid, struct FMangoMode> UMangoCMSManager::GetModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetModes");

	Params::MangoCMSManager_GetModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetNews
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoNews>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoNews> UMangoCMSManager::GetNews() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetNews");

	Params::MangoCMSManager_GetNews Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetNewsAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMangoNews                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoNews UMangoCMSManager::GetNewsAtIndex(const int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetNewsAtIndex");

	Params::MangoCMSManager_GetNewsAtIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetNewsCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoCMSManager::GetNewsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetNewsCount");

	Params::MangoCMSManager_GetNewsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetNextArtifactUnlock
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   CurrentArtifactLevel                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetNextArtifactUnlock(int32 CurrentArtifactLevel, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetNextArtifactUnlock");

	Params::MangoCMSManager_GetNextArtifactUnlock Parms{};

	Parms.CurrentArtifactLevel = CurrentArtifactLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetOfferName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoPurchaseOffer              Offer                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMangoCMSManager::GetOfferName(const struct FMangoPurchaseOffer& Offer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetOfferName");

	Params::MangoCMSManager_GetOfferName Parms{};

	Parms.Offer = std::move(Offer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPlaylistEventId
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistUniqueId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMangoCMSManager::GetPlaylistEventId(const struct FGuid& PlaylistUniqueId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPlaylistEventId");

	Params::MangoCMSManager_GetPlaylistEventId Parms{};

	Parms.PlaylistUniqueId = std::move(PlaylistUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPlaylists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMangoPlaylist>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMangoPlaylist> UMangoCMSManager::GetPlaylists() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPlaylists");

	Params::MangoCMSManager_GetPlaylists Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPrivateMatchMaps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGuid>              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGuid> UMangoCMSManager::GetPrivateMatchMaps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPrivateMatchMaps");

	Params::MangoCMSManager_GetPrivateMatchMaps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPrivateMatchModes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FGuid>              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FGuid> UMangoCMSManager::GetPrivateMatchModes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPrivateMatchModes");

	Params::MangoCMSManager_GetPrivateMatchModes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetProgressionCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CharacterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProgressionCharacterReward OutCharacterReward                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetProgressionCharacter(const class FString& CharacterId, struct FMangoProgressionCharacterReward* OutCharacterReward) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetProgressionCharacter");

	Params::MangoCMSManager_GetProgressionCharacter Parms{};

	Parms.CharacterId = std::move(CharacterId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCharacterReward != nullptr)
		*OutCharacterReward = std::move(Parms.OutCharacterReward);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetProgressionCharacterMaxLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CharacterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoCMSManager::GetProgressionCharacterMaxLevel(const class FString& CharacterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetProgressionCharacterMaxLevel");

	Params::MangoCMSManager_GetProgressionCharacterMaxLevel Parms{};

	Parms.CharacterId = std::move(CharacterId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetProgressionItemUnlock
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ItemID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProgressionCharacterItemUnlockOutItemUnlock                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetProgressionItemUnlock(const class FString& ItemID, struct FMangoProgressionCharacterItemUnlock* OutItemUnlock) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetProgressionItemUnlock");

	Params::MangoCMSManager_GetProgressionItemUnlock Parms{};

	Parms.ItemID = std::move(ItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItemUnlock != nullptr)
		*OutItemUnlock = std::move(Parms.OutItemUnlock);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPurchasableCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoPurchasableCharacter       OutPurchaseCharacter                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetPurchasableCharacter(const TSoftClassPtr<class UClass>& Character, struct FMangoPurchasableCharacter* OutPurchaseCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPurchasableCharacter");

	Params::MangoCMSManager_GetPurchasableCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPurchaseCharacter != nullptr)
		*OutPurchaseCharacter = std::move(Parms.OutPurchaseCharacter);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetPurchaseOfferById
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoPurchaseOffer              OutPurchaseOffer                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetPurchaseOfferById(const class FString& LookupId, struct FMangoPurchaseOffer* OutPurchaseOffer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetPurchaseOfferById");

	Params::MangoCMSManager_GetPurchaseOfferById Parms{};

	Parms.LookupId = std::move(LookupId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPurchaseOffer != nullptr)
		*OutPurchaseOffer = std::move(Parms.OutPurchaseOffer);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetQuest
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LookupId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoQuest                      OutQuest                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetQuest(const class FName& LookupId, struct FMangoQuest* OutQuest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetQuest");

	Params::MangoCMSManager_GetQuest Parms{};

	Parms.LookupId = LookupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQuest != nullptr)
		*OutQuest = std::move(Parms.OutQuest);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetQuestReward
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LookupId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoQuestReward                OutQuestReward                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetQuestReward(const class FName& LookupId, struct FMangoQuestReward* OutQuestReward) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetQuestReward");

	Params::MangoCMSManager_GetQuestReward Parms{};

	Parms.LookupId = LookupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQuestReward != nullptr)
		*OutQuestReward = std::move(Parms.OutQuestReward);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetQuestRewards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FMangoQuestReward>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FMangoQuestReward> UMangoCMSManager::GetQuestRewards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetQuestRewards");

	Params::MangoCMSManager_GetQuestRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetQuests
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FMangoQuest>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FMangoQuest> UMangoCMSManager::GetQuests() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetQuests");

	Params::MangoCMSManager_GetQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.GetQuickPlayPlaylist
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoPlaylist                   OutPlaylist                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::GetQuickPlayPlaylist(struct FMangoPlaylist* OutPlaylist) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "GetQuickPlayPlaylist");

	Params::MangoCMSManager_GetQuickPlayPlaylist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlaylist != nullptr)
		*OutPlaylist = std::move(Parms.OutPlaylist);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsFeaturedOffer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsFeaturedOffer(const class FString& OfferId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsFeaturedOffer");

	Params::MangoCMSManager_IsFeaturedOffer Parms{};

	Parms.OfferId = std::move(OfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsNewsLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsNewsLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsNewsLoaded");

	Params::MangoCMSManager_IsNewsLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsOfferActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoPurchaseOffer              Offer                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsOfferActive(const struct FMangoPurchaseOffer& Offer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsOfferActive");

	Params::MangoCMSManager_IsOfferActive Parms{};

	Parms.Offer = std::move(Offer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsOnboardingPlaylist
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsOnboardingPlaylist(const struct FGuid& PlaylistGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsOnboardingPlaylist");

	Params::MangoCMSManager_IsOnboardingPlaylist Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsPlaylistPvEOnly
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistUniqueId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::IsPlaylistPvEOnly(const struct FGuid& PlaylistUniqueId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsPlaylistPvEOnly");

	Params::MangoCMSManager_IsPlaylistPvEOnly Parms{};

	Parms.PlaylistUniqueId = std::move(PlaylistUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.IsRankedPlaylistAvaliable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoCMSManager::IsRankedPlaylistAvaliable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "IsRankedPlaylistAvaliable");

	Params::MangoCMSManager_IsRankedPlaylistAvaliable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetActiveBlastPassDefinition
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoBlastPassDefinition        OutDefinition                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoCMSManager::TryGetActiveBlastPassDefinition(struct FMangoBlastPassDefinition* OutDefinition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetActiveBlastPassDefinition");

	Params::MangoCMSManager_TryGetActiveBlastPassDefinition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDefinition != nullptr)
		*OutDefinition = std::move(Parms.OutDefinition);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetBlastPassDefinition
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           DefinitionId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoBlastPassDefinition        OutDefinition                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoCMSManager::TryGetBlastPassDefinition(const class FString& DefinitionId, struct FMangoBlastPassDefinition* OutDefinition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetBlastPassDefinition");

	Params::MangoCMSManager_TryGetBlastPassDefinition Parms{};

	Parms.DefinitionId = std::move(DefinitionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDefinition != nullptr)
		*OutDefinition = std::move(Parms.OutDefinition);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetCMSItemByAssetPath
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoCMSManager::TryGetCMSItemByAssetPath(const class FString& AssetPath, EMangoItemType ItemType, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetCMSItemByAssetPath");

	Params::MangoCMSManager_TryGetCMSItemByAssetPath Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetItemByCMSID
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       OutItem                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoCMSManager::TryGetItemByCMSID(const class FString& ID, EMangoItemType Type, struct FMangoItem* OutItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetItemByCMSID");

	Params::MangoCMSManager_TryGetItemByCMSID Parms{};

	Parms.ID = std::move(ID);
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItem != nullptr)
		*OutItem = std::move(Parms.OutItem);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetNativeOfferById
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoNativeOffer                OutNativeOffer                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::TryGetNativeOfferById(const class FString& ID, struct FMangoNativeOffer* OutNativeOffer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetNativeOfferById");

	Params::MangoCMSManager_TryGetNativeOfferById Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNativeOffer != nullptr)
		*OutNativeOffer = std::move(Parms.OutNativeOffer);

	return Parms.ReturnValue;
}


// Function Mariner.MangoCMSManager.TryGetNativeOfferByLookupIdentifier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LookupIdentifer                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoNativeOffer                OutNativeOffer                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoCMSManager::TryGetNativeOfferByLookupIdentifier(const class FString& LookupIdentifer, struct FMangoNativeOffer* OutNativeOffer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoCMSManager", "TryGetNativeOfferByLookupIdentifier");

	Params::MangoCMSManager_TryGetNativeOfferByLookupIdentifier Parms{};

	Parms.LookupIdentifer = std::move(LookupIdentifer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNativeOffer != nullptr)
		*OutNativeOffer = std::move(Parms.OutNativeOffer);

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoFriendsManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoFriendsManager* UMangoFriendsManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoFriendsManager", "Get");

	Params::MangoFriendsManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.DoesPlatformSupportFriendManagement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoFriendsManager::DoesPlatformSupportFriendManagement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoFriendsManager", "DoesPlatformSupportFriendManagement");

	Params::MangoFriendsManager_DoesPlatformSupportFriendManagement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.DoesPlatformSupportViewingFriends
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoFriendsManager::DoesPlatformSupportViewingFriends() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoFriendsManager", "DoesPlatformSupportViewingFriends");

	Params::MangoFriendsManager_DoesPlatformSupportViewingFriends Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.DoesPlatformSupportViewingProfile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoFriendsManager::DoesPlatformSupportViewingProfile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoFriendsManager", "DoesPlatformSupportViewingProfile");

	Params::MangoFriendsManager_DoesPlatformSupportViewingProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.GetUserPrivilegeCanCommunicateOnline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoFriendsManager::GetUserPrivilegeCanCommunicateOnline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoFriendsManager", "GetUserPrivilegeCanCommunicateOnline");

	Params::MangoFriendsManager_GetUserPrivilegeCanCommunicateOnline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoFriendsManager.GetUserPrivilegeCanCrossplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoFriendsManager::GetUserPrivilegeCanCrossplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoFriendsManager", "GetUserPrivilegeCanCrossplay");

	Params::MangoFriendsManager_GetUserPrivilegeCanCrossplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoInventoryManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoInventoryManager* UMangoInventoryManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoInventoryManager", "Get");

	Params::MangoInventoryManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.DeleteInventory
// (Final, Native, Public, BlueprintCallable)

void UMangoInventoryManager::DeleteInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "DeleteInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoInventoryManager.PurchaseBlastPassTiers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        blastpass                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   MaxTierToPurchase                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoInventoryManager::PurchaseBlastPassTiers(const struct FMangoBlastPassDefinition& blastpass, int32 MaxTierToPurchase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "PurchaseBlastPassTiers");

	Params::MangoInventoryManager_PurchaseBlastPassTiers Parms{};

	Parms.blastpass = std::move(blastpass);
	Parms.MaxTierToPurchase = MaxTierToPurchase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoInventoryManager.PurchaseOffer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPremium                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoInventoryManager::PurchaseOffer(const class FString& OfferId, const bool bPremium)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "PurchaseOffer");

	Params::MangoInventoryManager_PurchaseOffer Parms{};

	Parms.OfferId = std::move(OfferId);
	Parms.bPremium = bPremium;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoInventoryManager.SetItemViewed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CmsId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoInventoryManager::SetItemViewed(EMangoItemType ItemType, const class FString& CmsId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "SetItemViewed");

	Params::MangoInventoryManager_SetItemViewed Parms{};

	Parms.ItemType = ItemType;
	Parms.CmsId = std::move(CmsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoInventoryManager.StartNativeOfferCompletionPoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           OrderId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoInventoryManager::StartNativeOfferCompletionPoll(const class FString& OrderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "StartNativeOfferCompletionPoll");

	Params::MangoInventoryManager_StartNativeOfferCompletionPoll Parms{};

	Parms.OrderId = std::move(OrderId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoInventoryManager.GetCharactersInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FMangoItemInventory>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FMangoItemInventory> UMangoInventoryManager::GetCharactersInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetCharactersInventory");

	Params::MangoInventoryManager_GetCharactersInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetInventorySkin
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CmsId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItemInventory              OutSkinInventory                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::GetInventorySkin(const class FString& CmsId, struct FMangoItemInventory* OutSkinInventory) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetInventorySkin");

	Params::MangoInventoryManager_GetInventorySkin Parms{};

	Parms.CmsId = std::move(CmsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSkinInventory != nullptr)
		*OutSkinInventory = std::move(Parms.OutSkinInventory);

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetMegaBlastsInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FMangoItemInventory>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FMangoItemInventory> UMangoInventoryManager::GetMegaBlastsInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetMegaBlastsInventory");

	Params::MangoInventoryManager_GetMegaBlastsInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetNumOfUnviewedCharacterItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoInventoryManager::GetNumOfUnviewedCharacterItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetNumOfUnviewedCharacterItems");

	Params::MangoInventoryManager_GetNumOfUnviewedCharacterItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetNumOfUnviewedTotemItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoInventoryManager::GetNumOfUnviewedTotemItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetNumOfUnviewedTotemItems");

	Params::MangoInventoryManager_GetNumOfUnviewedTotemItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetReturnTrailsInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FMangoItemInventory>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FMangoItemInventory> UMangoInventoryManager::GetReturnTrailsInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetReturnTrailsInventory");

	Params::MangoInventoryManager_GetReturnTrailsInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetRocketBucks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoInventoryManager::GetRocketBucks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetRocketBucks");

	Params::MangoInventoryManager_GetRocketBucks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetRocketParts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoInventoryManager::GetRocketParts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetRocketParts");

	Params::MangoInventoryManager_GetRocketParts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.GetUnviewedItemPopups
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoOrderDetails               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMangoOrderDetails UMangoInventoryManager::GetUnviewedItemPopups() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "GetUnviewedItemPopups");

	Params::MangoInventoryManager_GetUnviewedItemPopups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.HasUnviewedCharacterEmotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        PlayableCharacter                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::HasUnviewedCharacterEmotes(const class UMarinerPlayableCharacter* PlayableCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "HasUnviewedCharacterEmotes");

	Params::MangoInventoryManager_HasUnviewedCharacterEmotes Parms{};

	Parms.PlayableCharacter = PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.HasUnviewedCharacterEmotesOfType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        PlayableCharacter                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::HasUnviewedCharacterEmotesOfType(const class UMarinerPlayableCharacter* PlayableCharacter, EMangoItemType ItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "HasUnviewedCharacterEmotesOfType");

	Params::MangoInventoryManager_HasUnviewedCharacterEmotesOfType Parms{};

	Parms.PlayableCharacter = PlayableCharacter;
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.HasUnviewedCharacterSkins
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        PlayableCharacter                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::HasUnviewedCharacterSkins(const class UMarinerPlayableCharacter* PlayableCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "HasUnviewedCharacterSkins");

	Params::MangoInventoryManager_HasUnviewedCharacterSkins Parms{};

	Parms.PlayableCharacter = PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.HasUnviewedItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::HasUnviewedItems(EMangoItemType ItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "HasUnviewedItems");

	Params::MangoInventoryManager_HasUnviewedItems Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.HasUnviewedSharedArtifacts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::HasUnviewedSharedArtifacts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "HasUnviewedSharedArtifacts");

	Params::MangoInventoryManager_HasUnviewedSharedArtifacts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsActiveBlastPassSeasonOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsActiveBlastPassSeasonOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsActiveBlastPassSeasonOwned");

	Params::MangoInventoryManager_IsActiveBlastPassSeasonOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsBlastPassOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           BlastPassId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsBlastPassOwned(const class FString& BlastPassId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsBlastPassOwned");

	Params::MangoInventoryManager_IsBlastPassOwned Parms{};

	Parms.BlastPassId = std::move(BlastPassId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsCharacterOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        PlayableCharacter                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsCharacterOwned(const class UMarinerPlayableCharacter* PlayableCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsCharacterOwned");

	Params::MangoInventoryManager_IsCharacterOwned Parms{};

	Parms.PlayableCharacter = PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsItemOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CmsId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          OwnedItemType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsItemOwned(const class FString& CmsId, const EMangoItemType OwnedItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsItemOwned");

	Params::MangoInventoryManager_IsItemOwned Parms{};

	Parms.CmsId = std::move(CmsId);
	Parms.OwnedItemType = OwnedItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsItemViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CmsId                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ViewedItemType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsItemViewed(const class FString& CmsId, const EMangoItemType ViewedItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsItemViewed");

	Params::MangoInventoryManager_IsItemViewed Parms{};

	Parms.CmsId = std::move(CmsId);
	Parms.ViewedItemType = ViewedItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsNativeOfferOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsNativeOfferOwned(const class FString& NativeOfferId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsNativeOfferOwned");

	Params::MangoInventoryManager_IsNativeOfferOwned Parms{};

	Parms.NativeOfferId = std::move(NativeOfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoInventoryManager.IsOfferOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoInventoryManager::IsOfferOwned(const class FString& OfferId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoInventoryManager", "IsOfferOwned");

	Params::MangoInventoryManager_IsOfferOwned Parms{};

	Parms.OfferId = std::move(OfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoMatchmakingManager*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoMatchmakingManager* UMangoMatchmakingManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoMatchmakingManager", "Get");

	Params::MangoMatchmakingManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.CancelIntermission
// (Final, Native, Public, BlueprintCallable)

void UMangoMatchmakingManager::CancelIntermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "CancelIntermission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoMatchmakingManager.CancelMatchmaking
// (Final, Native, Public, BlueprintCallable)

void UMangoMatchmakingManager::CancelMatchmaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "CancelMatchmaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoMatchmakingManager.OnMangoProfileUpdated
// (Final, Native, Private)

void UMangoMatchmakingManager::OnMangoProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "OnMangoProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoMatchmakingManager.StartMatchmaking
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoMatchmakingManager::StartMatchmaking(const struct FGuid& PlaylistGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "StartMatchmaking");

	Params::MangoMatchmakingManager_StartMatchmaking Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoMatchmakingManager.CanCancel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoMatchmakingManager::CanCancel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "CanCancel");

	Params::MangoMatchmakingManager_CanCancel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetAbandonmentPenaltyExpirationTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UMangoMatchmakingManager::GetAbandonmentPenaltyExpirationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetAbandonmentPenaltyExpirationTime");

	Params::MangoMatchmakingManager_GetAbandonmentPenaltyExpirationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetAbandonmentPenaltyWarningLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoMatchmakingManager::GetAbandonmentPenaltyWarningLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetAbandonmentPenaltyWarningLevel");

	Params::MangoMatchmakingManager_GetAbandonmentPenaltyWarningLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetActiveMatchmakingGuid
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UMangoMatchmakingManager::GetActiveMatchmakingGuid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetActiveMatchmakingGuid");

	Params::MangoMatchmakingManager_GetActiveMatchmakingGuid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetActiveMatchmakingRegion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMangoMatchmakingManager::GetActiveMatchmakingRegion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetActiveMatchmakingRegion");

	Params::MangoMatchmakingManager_GetActiveMatchmakingRegion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetCrossplayState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerCrossplayState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerCrossplayState UMangoMatchmakingManager::GetCrossplayState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetCrossplayState");

	Params::MangoMatchmakingManager_GetCrossplayState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetFilterCurrentVetoes
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoMatchmakingManager::GetFilterCurrentVetoes(const struct FGuid& PlaylistGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetFilterCurrentVetoes");

	Params::MangoMatchmakingManager_GetFilterCurrentVetoes Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetFilterMaxVetoes
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoMatchmakingManager::GetFilterMaxVetoes(const struct FGuid& PlaylistGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetFilterMaxVetoes");

	Params::MangoMatchmakingManager_GetFilterMaxVetoes Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetIntermissionTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMangoMatchmakingManager::GetIntermissionTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetIntermissionTimeRemaining");

	Params::MangoMatchmakingManager_GetIntermissionTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.GetPlaylistMaxPartySize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            PlaylistGuid                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMangoMatchmakingManager::GetPlaylistMaxPartySize(const struct FGuid& PlaylistGuid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "GetPlaylistMaxPartySize");

	Params::MangoMatchmakingManager_GetPlaylistMaxPartySize Parms{};

	Parms.PlaylistGuid = std::move(PlaylistGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.InvokeOnMatchDescribeUpdate
// (Final, Native, Public, BlueprintCallable, Const)

void UMangoMatchmakingManager::InvokeOnMatchDescribeUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "InvokeOnMatchDescribeUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoMatchmakingManager.IsAbandonmentPenaltyActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoMatchmakingManager::IsAbandonmentPenaltyActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "IsAbandonmentPenaltyActive");

	Params::MangoMatchmakingManager_IsAbandonmentPenaltyActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.IsIntermissionActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoMatchmakingManager::IsIntermissionActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "IsIntermissionActive");

	Params::MangoMatchmakingManager_IsIntermissionActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.IsLastEndedReasonFoundMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoMatchmakingManager::IsLastEndedReasonFoundMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "IsLastEndedReasonFoundMatch");

	Params::MangoMatchmakingManager_IsLastEndedReasonFoundMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoMatchmakingManager.IsSearching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoMatchmakingManager::IsSearching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoMatchmakingManager", "IsSearching");

	Params::MangoMatchmakingManager_IsSearching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMainMenuVignettesManager.OnFinished
// (Final, Native, Public)

void AMarinerMainMenuVignettesManager::OnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainMenuVignettesManager", "OnFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainMenuVignettesManager.OnHomeEnter
// (Final, Native, Public, BlueprintCallable)

void AMarinerMainMenuVignettesManager::OnHomeEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainMenuVignettesManager", "OnHomeEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainMenuVignettesManager.OnHomeExit
// (Final, Native, Public, BlueprintCallable)

void AMarinerMainMenuVignettesManager::OnHomeExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainMenuVignettesManager", "OnHomeExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyInvitationDialog.OnAcceptInviteButton
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPartyInvitationDialog::OnAcceptInviteButton(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyInvitationDialog", "OnAcceptInviteButton");

	Params::MangoPartyInvitationDialog_OnAcceptInviteButton Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyInvitationDialog.OnRejectInviteButton
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPartyInvitationDialog::OnRejectInviteButton(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyInvitationDialog", "OnRejectInviteButton");

	Params::MangoPartyInvitationDialog_OnRejectInviteButton Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoPartyManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoPartyManager* UMangoPartyManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoPartyManager", "Get");

	Params::MangoPartyManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.LeaveParty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPartyManager::LeaveParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "LeaveParty");

	Params::MangoPartyManager_LeaveParty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.OnCancelJoinParty
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPartyManager::OnCancelJoinParty(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "OnCancelJoinParty");

	Params::MangoPartyManager_OnCancelJoinParty Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyManager.OnConfirmJoinParty
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPartyManager::OnConfirmJoinParty(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "OnConfirmJoinParty");

	Params::MangoPartyManager_OnConfirmJoinParty Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyManager.OnUserSettingsChanged
// (Final, Native, Private)

void UMangoPartyManager::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPartyManager.AreWePartyLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoPartyManager::AreWePartyLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "AreWePartyLeader");

	Params::MangoPartyManager_AreWePartyLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.GetBusyState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EMangoPartyBusyState              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EMangoPartyBusyState UMangoPartyManager::GetBusyState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "GetBusyState");

	Params::MangoPartyManager_GetBusyState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.GetPartySize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UMangoPartyManager::GetPartySize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "GetPartySize");

	Params::MangoPartyManager_GetPartySize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.IsInParty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoPartyManager::IsInParty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "IsInParty");

	Params::MangoPartyManager_IsInParty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPartyManager.IsOurPartyCrossPlatfrom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMangoPartyManager::IsOurPartyCrossPlatfrom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPartyManager", "IsOurPartyCrossPlatfrom");

	Params::MangoPartyManager_IsOurPartyCrossPlatfrom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWrapBoxSlot.SetFillEmptySpace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InbFillEmptySpace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBoxSlot::SetFillEmptySpace(bool InbFillEmptySpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBoxSlot", "SetFillEmptySpace");

	Params::MarinerWrapBoxSlot_SetFillEmptySpace Parms{};

	Parms.InbFillEmptySpace = InbFillEmptySpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWrapBoxSlot.SetFillSpanWhenLessThan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFillSpanWhenLessThan                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBoxSlot::SetFillSpanWhenLessThan(float InFillSpanWhenLessThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBoxSlot", "SetFillSpanWhenLessThan");

	Params::MarinerWrapBoxSlot_SetFillSpanWhenLessThan Parms{};

	Parms.InFillSpanWhenLessThan = InFillSpanWhenLessThan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWrapBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBoxSlot", "SetHorizontalAlignment");

	Params::MarinerWrapBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWrapBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMargin                          InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerWrapBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBoxSlot", "SetPadding");

	Params::MarinerWrapBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWrapBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBoxSlot", "SetVerticalAlignment");

	Params::MarinerWrapBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnOwnerKnockedOut
// (Final, Native, Public)

void UMarinerWeaponAttributes::OnOwnerKnockedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnOwnerKnockedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnRep_CurrentAmmo
// (Final, Native, Private)

void UMarinerWeaponAttributes::OnRep_CurrentAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnRep_CurrentAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnRep_DamageDealtMultiplier
// (Final, Native, Private)

void UMarinerWeaponAttributes::OnRep_DamageDealtMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnRep_DamageDealtMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnRep_FireRate
// (Final, Native, Private)

void UMarinerWeaponAttributes::OnRep_FireRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnRep_FireRate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnRep_ImpulseDealtMultiplier
// (Final, Native, Private)

void UMarinerWeaponAttributes::OnRep_ImpulseDealtMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnRep_ImpulseDealtMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAttributes.OnRep_MaxAmmo
// (Final, Native, Private)

void UMarinerWeaponAttributes::OnRep_MaxAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAttributes", "OnRep_MaxAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPrivateMatchManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoPrivateMatchManager*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoPrivateMatchManager* UMangoPrivateMatchManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoPrivateMatchManager", "Get");

	Params::MangoPrivateMatchManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPrivateMatchManager.OnPartyBusyStateChanged
// (Final, Native, Private)
// Parameters:
// EMangoPartyBusyState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPrivateMatchManager::OnPartyBusyStateChanged(EMangoPartyBusyState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "OnPartyBusyStateChanged");

	Params::MangoPrivateMatchManager_OnPartyBusyStateChanged Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPrivateMatchManager.SetPrivateMatchLobbyMap
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            MapId                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPrivateMatchManager::SetPrivateMatchLobbyMap(const struct FGuid& MapId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "SetPrivateMatchLobbyMap");

	Params::MangoPrivateMatchManager_SetPrivateMatchLobbyMap Parms{};

	Parms.MapId = std::move(MapId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPrivateMatchManager.SetPrivateMatchLobbyMode
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            ModeID                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMangoPrivateMatchManager::SetPrivateMatchLobbyMode(const struct FGuid& ModeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "SetPrivateMatchLobbyMode");

	Params::MangoPrivateMatchManager_SetPrivateMatchLobbyMode Parms{};

	Parms.ModeID = std::move(ModeID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPrivateMatchManager.StartPrivateMatch
// (Final, Native, Public, BlueprintCallable)

void UMangoPrivateMatchManager::StartPrivateMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "StartPrivateMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoPrivateMatchManager.GetPrivateMatchLobbyMap
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UMangoPrivateMatchManager::GetPrivateMatchLobbyMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "GetPrivateMatchLobbyMap");

	Params::MangoPrivateMatchManager_GetPrivateMatchLobbyMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPrivateMatchManager.GetPrivateMatchLobbyMode
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UMangoPrivateMatchManager::GetPrivateMatchLobbyMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "GetPrivateMatchLobbyMode");

	Params::MangoPrivateMatchManager_GetPrivateMatchLobbyMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPrivateMatchManager.IsAllocationInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPrivateMatchManager::IsAllocationInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "IsAllocationInProgress");

	Params::MangoPrivateMatchManager_IsAllocationInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoPrivateMatchManager.IsPrivateMatchSession
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoPrivateMatchManager::IsPrivateMatchSession() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoPrivateMatchManager", "IsPrivateMatchSession");

	Params::MangoPrivateMatchManager_IsPrivateMatchSession Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQOSManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoQOSManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoQOSManager* UMangoQOSManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoQOSManager", "Get");

	Params::MangoQOSManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoQOSManager.GetRecommendedMatchmakingRegion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMangoQOSManager::GetRecommendedMatchmakingRegion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoQOSManager", "GetRecommendedMatchmakingRegion");

	Params::MangoQOSManager_GetRecommendedMatchmakingRegion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoStoreManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoStoreManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoStoreManager* UMangoStoreManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoStoreManager", "Get");

	Params::MangoStoreManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoStoreManager.OfferTimerCallback
// (Final, Native, Private)

void UMangoStoreManager::OfferTimerCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoStoreManager", "OfferTimerCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoStoreManager.OnCMSLoaded
// (Final, Native, Private)

void UMangoStoreManager::OnCMSLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoStoreManager", "OnCMSLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.AddAllowedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::AddAllowedState(TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "AddAllowedState");

	Params::MarinerHUDWidget_AddAllowedState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.AddExcludedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::AddExcludedState(TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "AddExcludedState");

	Params::MarinerHUDWidget_AddExcludedState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.BPOnCharacterPossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::BPOnCharacterPossessed(class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "BPOnCharacterPossessed");

	Params::MarinerHUDWidget_BPOnCharacterPossessed Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUDWidget.BPOnCharacterUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::BPOnCharacterUnpossessed(class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "BPOnCharacterUnpossessed");

	Params::MarinerHUDWidget_BPOnCharacterUnpossessed Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUDWidget.OnPossessPawn
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         PossessingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            PossessedPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::OnPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "OnPossessPawn");

	Params::MarinerHUDWidget_OnPossessPawn Parms{};

	Parms.PossessingController = PossessingController;
	Parms.PossessedPawn = PossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.OnUnpossessPawn
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         UnpossessingController                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            UnpossessedPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::OnUnpossessPawn(class AMarinerPlayerController* UnpossessingController, class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "OnUnpossessPawn");

	Params::MarinerHUDWidget_OnUnpossessPawn Parms{};

	Parms.UnpossessingController = UnpossessingController;
	Parms.UnpossessedPawn = UnpossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.RemoveAllowedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::RemoveAllowedState(TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "RemoveAllowedState");

	Params::MarinerHUDWidget_RemoveAllowedState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.RemoveExcludedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::RemoveExcludedState(TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "RemoveExcludedState");

	Params::MarinerHUDWidget_RemoveExcludedState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.SetExternalWidgetAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::SetExternalWidgetAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "SetExternalWidgetAllowed");

	Params::MarinerHUDWidget_SetExternalWidgetAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.SetInternalWidgetAllowed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHUDWidget::SetInternalWidgetAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "SetInternalWidgetAllowed");

	Params::MarinerHUDWidget_SetInternalWidgetAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUDWidget.GetMarinerHUD
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerHUD*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerHUD* UMarinerHUDWidget::GetMarinerHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUDWidget", "GetMarinerHUD");

	Params::MarinerHUDWidget_GetMarinerHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageWidget.AddWidgetFromPool
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetClassToAdd                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UMarinerMessageWidget::AddWidgetFromPool(TSubclassOf<class UUserWidget> WidgetClassToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "AddWidgetFromPool");

	Params::MarinerMessageWidget_AddWidgetFromPool Parms{};

	Parms.WidgetClassToAdd = WidgetClassToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageWidget.AddWidgetToPanel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFeedFromTop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMessageWidget::AddWidgetToPanel(class UUserWidget* Widget, bool bFeedFromTop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "AddWidgetToPanel");

	Params::MarinerMessageWidget_AddWidgetToPanel Parms{};

	Parms.Widget = Widget;
	Parms.bFeedFromTop = bFeedFromTop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMessageWidget.OnDiscardedMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState1                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState2                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMessageWidget::OnDiscardedMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "OnDiscardedMessage");

	Params::MarinerMessageWidget_OnDiscardedMessage Parms{};

	Parms.MessageCDO = MessageCDO;
	Parms.RelatedPlayerState1 = RelatedPlayerState1;
	Parms.RelatedPlayerState2 = RelatedPlayerState2;
	Parms.OptionalObject = OptionalObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMessageWidget.OnEnqueuedMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState1                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState2                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMessageWidget::OnEnqueuedMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "OnEnqueuedMessage");

	Params::MarinerMessageWidget_OnEnqueuedMessage Parms{};

	Parms.MessageCDO = MessageCDO;
	Parms.RelatedPlayerState1 = RelatedPlayerState1;
	Parms.RelatedPlayerState2 = RelatedPlayerState2;
	Parms.OptionalObject = OptionalObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMessageWidget.OnReceiveMessage
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState1                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState2                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMessageWidget::OnReceiveMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "OnReceiveMessage");

	Params::MarinerMessageWidget_OnReceiveMessage Parms{};

	Parms.MessageCDO = MessageCDO;
	Parms.RelatedPlayerState1 = RelatedPlayerState1;
	Parms.RelatedPlayerState2 = RelatedPlayerState2;
	Parms.OptionalObject = OptionalObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMessageWidget.ReleaseWidgetToPool
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UUserWidget*                      MessageWidget                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMessageWidget::ReleaseWidgetToPool(class UUserWidget* MessageWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "ReleaseWidgetToPool");

	Params::MarinerMessageWidget_ReleaseWidgetToPool Parms{};

	Parms.MessageWidget = MessageWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMessageWidget.ShouldEnqueueMessage
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState1                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState2                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMessageWidget::ShouldEnqueueMessage(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState1, class APlayerState* RelatedPlayerState2, class UObject* OptionalObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageWidget", "ShouldEnqueueMessage");

	Params::MarinerMessageWidget_ShouldEnqueueMessage Parms{};

	Parms.MessageCDO = MessageCDO;
	Parms.RelatedPlayerState1 = RelatedPlayerState1;
	Parms.RelatedPlayerState2 = RelatedPlayerState2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMangoTxnManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMangoTxnManager* UMangoTxnManager::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MangoTxnManager", "Get");

	Params::MangoTxnManager_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.InitPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& OrderId, struct FMangoOrderDetails& OrderDetails)>OnNativePurchaseComplete                               (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMangoTxnManager::InitPurchase(const class FString& NativeOfferId, TDelegate<void(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& OrderId, struct FMangoOrderDetails& OrderDetails)> OnNativePurchaseComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "InitPurchase");

	Params::MangoTxnManager_InitPurchase Parms{};

	Parms.NativeOfferId = std::move(NativeOfferId);
	Parms.OnNativePurchaseComplete = OnNativePurchaseComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MangoTxnManager.GetDisplayPriceForNativeOfferId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMangoTxnManager::GetDisplayPriceForNativeOfferId(const class FString& NativeOfferId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "GetDisplayPriceForNativeOfferId");

	Params::MangoTxnManager_GetDisplayPriceForNativeOfferId Parms{};

	Parms.NativeOfferId = std::move(NativeOfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.GetOriginAccessDiscountActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OutDiscountPercent                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoTxnManager::GetOriginAccessDiscountActive(float* OutDiscountPercent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "GetOriginAccessDiscountActive");

	Params::MangoTxnManager_GetOriginAccessDiscountActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDiscountPercent != nullptr)
		*OutDiscountPercent = Parms.OutDiscountPercent;

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.GetPricingInformationForNativeOfferId
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutDisplayPrice                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// class FText                             OutRegularPrice                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    OutIsOnSale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoTxnManager::GetPricingInformationForNativeOfferId(const class FString& NativeOfferId, class FText* OutDisplayPrice, class FText* OutRegularPrice, bool* OutIsOnSale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "GetPricingInformationForNativeOfferId");

	Params::MangoTxnManager_GetPricingInformationForNativeOfferId Parms{};

	Parms.NativeOfferId = std::move(NativeOfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayPrice != nullptr)
		*OutDisplayPrice = std::move(Parms.OutDisplayPrice);

	if (OutRegularPrice != nullptr)
		*OutRegularPrice = std::move(Parms.OutRegularPrice);

	if (OutIsOnSale != nullptr)
		*OutIsOnSale = Parms.OutIsOnSale;

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.GetStringsForNativeOfferId
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutTitle                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// class FText                             OutDescription                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// class FText                             OutLongDescription                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoTxnManager::GetStringsForNativeOfferId(const class FString& NativeOfferId, class FText* OutTitle, class FText* OutDescription, class FText* OutLongDescription) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "GetStringsForNativeOfferId");

	Params::MangoTxnManager_GetStringsForNativeOfferId Parms{};

	Parms.NativeOfferId = std::move(NativeOfferId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTitle != nullptr)
		*OutTitle = std::move(Parms.OutTitle);

	if (OutDescription != nullptr)
		*OutDescription = std::move(Parms.OutDescription);

	if (OutLongDescription != nullptr)
		*OutLongDescription = std::move(Parms.OutLongDescription);

	return Parms.ReturnValue;
}


// Function Mariner.MangoTxnManager.IsAllowedToPurchase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMangoTxnManager::IsAllowedToPurchase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MangoTxnManager", "IsAllowedToPurchase");

	Params::MangoTxnManager_IsAllowedToPurchase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCMSItemDataAsset.GetItemType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMangoItemType UMarinerCMSItemDataAsset::GetItemType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCMSItemDataAsset", "GetItemType");

	Params::MarinerCMSItemDataAsset_GetItemType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCMSItemWithIcon.GetBrushFromCMSItem
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerCMSItemWithIcon::GetBrushFromCMSItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCMSItemWithIcon", "GetBrushFromCMSItem");

	Params::MarinerCMSItemWithIcon_GetBrushFromCMSItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.BP_AddEffectsToDefaultApplyOnStartMove
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_ApplyRootMotion::BP_AddEffectsToDefaultApplyOnStartMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "BP_AddEffectsToDefaultApplyOnStartMove");

	Params::MarinerAbility_ApplyRootMotion_BP_AddEffectsToDefaultApplyOnStartMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.BP_OnAbilityInputPressedAgainWhileMoving
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_ApplyRootMotion::BP_OnAbilityInputPressedAgainWhileMoving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "BP_OnAbilityInputPressedAgainWhileMoving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_ApplyRootMotion.BP_OnAbilityInputReleasedWhileMoving
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_ApplyRootMotion::BP_OnAbilityInputReleasedWhileMoving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "BP_OnAbilityInputReleasedWhileMoving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_ApplyRootMotion.BP_OnExceededDamageTolerance
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ApplyRootMotion::BP_OnExceededDamageTolerance(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "BP_OnExceededDamageTolerance");

	Params::MarinerAbility_ApplyRootMotion_BP_OnExceededDamageTolerance Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_ApplyRootMotion.BP_OnMoveStarted
// (Event, Protected, BlueprintEvent)

void UMarinerAbility_ApplyRootMotion::BP_OnMoveStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "BP_OnMoveStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_ApplyRootMotion.GetEffectsToApplyOnStartMove
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_ApplyRootMotion::GetEffectsToApplyOnStartMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "GetEffectsToApplyOnStartMove");

	Params::MarinerAbility_ApplyRootMotion_GetEffectsToApplyOnStartMove Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.OnExceededDamageTolerance
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ApplyRootMotion::OnExceededDamageTolerance(class AActor* DamagedActor, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "OnExceededDamageTolerance");

	Params::MarinerAbility_ApplyRootMotion_OnExceededDamageTolerance Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.SetRetainMomentum
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bNewRetainMomentum                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ApplyRootMotion::SetRetainMomentum(bool bNewRetainMomentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "SetRetainMomentum");

	Params::MarinerAbility_ApplyRootMotion_SetRetainMomentum Parms{};

	Parms.bNewRetainMomentum = bNewRetainMomentum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.SetTargetActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ApplyRootMotion::SetTargetActor(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "SetTargetActor");

	Params::MarinerAbility_ApplyRootMotion_SetTargetActor Parms{};

	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ApplyRootMotion.StartMove
// (Final, Native, Protected, BlueprintCallable)

void UMarinerAbility_ApplyRootMotion::StartMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ApplyRootMotion", "StartMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.ApplyLocalMuzzleFlashFX
// (Final, Native, Public, BlueprintCallable)

void UMarinerAbility_Projectile_Base::ApplyLocalMuzzleFlashFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "ApplyLocalMuzzleFlashFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.BP_OnInputHeldThresholdExpired
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ThresholdTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ThresholdID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::BP_OnInputHeldThresholdExpired(float ThresholdTime, int32 ThresholdID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "BP_OnInputHeldThresholdExpired");

	Params::MarinerAbility_Projectile_Base_BP_OnInputHeldThresholdExpired Parms{};

	Parms.ThresholdTime = ThresholdTime;
	Parms.ThresholdID = ThresholdID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileDestroyed
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::BP_OnProjectileDestroyed(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "BP_OnProjectileDestroyed");

	Params::MarinerAbility_Projectile_Base_BP_OnProjectileDestroyed Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::BP_OnProjectileSpawned(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "BP_OnProjectileSpawned");

	Params::MarinerAbility_Projectile_Base_BP_OnProjectileSpawned Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Projectile_Base.BP_OnProjectileSpawned_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::BP_OnProjectileSpawned_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "BP_OnProjectileSpawned_Authority");

	Params::MarinerAbility_Projectile_Base_BP_OnProjectileSpawned_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Projectile_Base.GetInputHeldThresholdCompletionRatio
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_Projectile_Base::GetInputHeldThresholdCompletionRatio(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "GetInputHeldThresholdCompletionRatio");

	Params::MarinerAbility_Projectile_Base_GetInputHeldThresholdCompletionRatio Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Projectile_Base.GetProjectileSpawnTransformOverride
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UMarinerAbility_Projectile_Base::GetProjectileSpawnTransformOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "GetProjectileSpawnTransformOverride");

	Params::MarinerAbility_Projectile_Base_GetProjectileSpawnTransformOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Projectile_Base.InitProjectile
// (Final, Native, Protected)
// Parameters:
// class AActor*                           ProjectileActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::InitProjectile(class AActor* ProjectileActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "InitProjectile");

	Params::MarinerAbility_Projectile_Base_InitProjectile Parms{};

	Parms.ProjectileActor = ProjectileActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.InputHeldThresholdExpired
// (Final, Native, Protected)
// Parameters:
// float                                   ThresholdTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ThresholdID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::InputHeldThresholdExpired(float ThresholdTime, int32 ThresholdID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "InputHeldThresholdExpired");

	Params::MarinerAbility_Projectile_Base_InputHeldThresholdExpired Parms{};

	Parms.ThresholdTime = ThresholdTime;
	Parms.ThresholdID = ThresholdID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.ModifyProjectileFireSocketName
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             OrigSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerAbility_Projectile_Base::ModifyProjectileFireSocketName(class FName OrigSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "ModifyProjectileFireSocketName");

	Params::MarinerAbility_Projectile_Base_ModifyProjectileFireSocketName Parms{};

	Parms.OrigSocketName = OrigSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileDestroyed
// (Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::OnProjectileDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileDestroyed");

	Params::MarinerAbility_Projectile_Base_OnProjectileDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileDestroyed_All
// (Final, Native, Protected)

void UMarinerAbility_Projectile_Base::OnProjectileDestroyed_All()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileDestroyed_All");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileDestroyed_Authority
// (Final, Native, Protected)

void UMarinerAbility_Projectile_Base::OnProjectileDestroyed_Authority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileDestroyed_Authority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileDestroyed_AuthorityWrapper
// (Native, Protected)

void UMarinerAbility_Projectile_Base::OnProjectileDestroyed_AuthorityWrapper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileDestroyed_AuthorityWrapper");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileFailedToSpawn
// (Native, Protected)

void UMarinerAbility_Projectile_Base::OnProjectileFailedToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileFailedToSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnProjectileFinishedSpawning
// (Native, Protected)
// Parameters:
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::OnProjectileFinishedSpawning(class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnProjectileFinishedSpawning");

	Params::MarinerAbility_Projectile_Base_OnProjectileFinishedSpawning Parms{};

	Parms.SpawnedProjectile = SpawnedProjectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.OnSpawnDelayExpired
// (Final, Native, Protected)

void UMarinerAbility_Projectile_Base::OnSpawnDelayExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "OnSpawnDelayExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.PauseAllLocalThresholdEventTimers
// (Final, Native, Protected, BlueprintCallable)

void UMarinerAbility_Projectile_Base::PauseAllLocalThresholdEventTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "PauseAllLocalThresholdEventTimers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.ServerInputReleased
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// float                                   ClientTimeReleased                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle ReleaseAimData                                         (Parm, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::ServerInputReleased(float ClientTimeReleased, const struct FGameplayAbilityTargetDataHandle& ReleaseAimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "ServerInputReleased");

	Params::MarinerAbility_Projectile_Base_ServerInputReleased Parms{};

	Parms.ClientTimeReleased = ClientTimeReleased;
	Parms.ReleaseAimData = std::move(ReleaseAimData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.SetLocalInputHeldTimeDilation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   NewTimeDilation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::SetLocalInputHeldTimeDilation(float NewTimeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "SetLocalInputHeldTimeDilation");

	Params::MarinerAbility_Projectile_Base_SetLocalInputHeldTimeDilation Parms{};

	Parms.NewTimeDilation = NewTimeDilation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.TryAndGetProjectilePool
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class AMarinerProjectile>   ProjectileClass                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AMarinerProjectile*>       OutProjectilePool                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile_Base::TryAndGetProjectilePool(const TSubclassOf<class AMarinerProjectile>& ProjectileClass, TArray<class AMarinerProjectile*>* OutProjectilePool, bool* bIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "TryAndGetProjectilePool");

	Params::MarinerAbility_Projectile_Base_TryAndGetProjectilePool Parms{};

	Parms.ProjectileClass = ProjectileClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProjectilePool != nullptr)
		*OutProjectilePool = std::move(Parms.OutProjectilePool);

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;
}


// Function Mariner.MarinerAbility_Projectile_Base.TryAndSpawnProjectile
// (BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void UMarinerAbility_Projectile_Base::TryAndSpawnProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "TryAndSpawnProjectile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile_Base.GetProjectileType
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TSubclassOf<class AMarinerProjectile>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AMarinerProjectile> UMarinerAbility_Projectile_Base::GetProjectileType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "GetProjectileType");

	Params::MarinerAbility_Projectile_Base_GetProjectileType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Projectile_Base.IsTryingToSpawnProjectile
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_Projectile_Base::IsTryingToSpawnProjectile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile_Base", "IsTryingToSpawnProjectile");

	Params::MarinerAbility_Projectile_Base_IsTryingToSpawnProjectile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaBoundary.GetBlockedArea
// (Native, Public)
// Parameters:
// EArenaBoundaryBlockedArea               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EArenaBoundaryBlockedArea AMarinerArenaBoundary::GetBlockedArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaBoundary", "GetBlockedArea");

	Params::MarinerArenaBoundary_GetBlockedArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaBoundary.OnKnockoutVolumeBeginOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerArenaBoundary::OnKnockoutVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaBoundary", "OnKnockoutVolumeBeginOverlap");

	Params::MarinerArenaBoundary_OnKnockoutVolumeBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaBoundary.OnKnockoutVolumeEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerArenaBoundary::OnKnockoutVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaBoundary", "OnKnockoutVolumeEndOverlap");

	Params::MarinerArenaBoundary_OnKnockoutVolumeEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaBoundary.OnSafeVolumeBeginOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerArenaBoundary::OnSafeVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaBoundary", "OnSafeVolumeBeginOverlap");

	Params::MarinerArenaBoundary_OnSafeVolumeBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaBoundary.OnSafeVolumeEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerArenaBoundary::OnSafeVolumeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaBoundary", "OnSafeVolumeEndOverlap");

	Params::MarinerArenaBoundary_OnSafeVolumeEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Projectile.BP_OnProjectileDestroyed_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile::BP_OnProjectileDestroyed_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile", "BP_OnProjectileDestroyed_Authority");

	Params::MarinerAbility_Projectile_BP_OnProjectileDestroyed_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_Projectile.OnRep_ActiveProjectile
// (Final, Native, Protected)
// Parameters:
// class AMarinerProjectile*               PrevActiveProjectile                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Projectile::OnRep_ActiveProjectile(class AMarinerProjectile* PrevActiveProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Projectile", "OnRep_ActiveProjectile");

	Params::MarinerAbility_Projectile_OnRep_ActiveProjectile Parms{};

	Parms.PrevActiveProjectile = PrevActiveProjectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.ClientInitiateProjectileSpawn
// (Final, Native, Protected)

void UMarinerAbility_ChargeProjectile::ClientInitiateProjectileSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "ClientInitiateProjectileSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.ModifyAuthChargeState
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// struct FMarinerChargeProjectileAuthStateBaseChargeState                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMarinerChargeProjectileAuthStateReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerChargeProjectileAuthState UMarinerAbility_ChargeProjectile::ModifyAuthChargeState(const struct FMarinerChargeProjectileAuthState& BaseChargeState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "ModifyAuthChargeState");

	Params::MarinerAbility_ChargeProjectile_ModifyAuthChargeState Parms{};

	Parms.BaseChargeState = std::move(BaseChargeState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.ModifyEffectsToPlayOnChargeShotFired
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>OrigEffectsToApplyOnChargeShotFired                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_ChargeProjectile::ModifyEffectsToPlayOnChargeShotFired(const TArray<TSubclassOf<class UGameplayEffect>>& OrigEffectsToApplyOnChargeShotFired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "ModifyEffectsToPlayOnChargeShotFired");

	Params::MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotFired Parms{};

	Parms.OrigEffectsToApplyOnChargeShotFired = std::move(OrigEffectsToApplyOnChargeShotFired);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.ModifyEffectsToPlayOnChargeShotStashed
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<TSubclassOf<class UGameplayEffect>>OrigEffectsToApplyOnChargeShotStashed                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UGameplayEffect>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UGameplayEffect>> UMarinerAbility_ChargeProjectile::ModifyEffectsToPlayOnChargeShotStashed(const TArray<TSubclassOf<class UGameplayEffect>>& OrigEffectsToApplyOnChargeShotStashed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "ModifyEffectsToPlayOnChargeShotStashed");

	Params::MarinerAbility_ChargeProjectile_ModifyEffectsToPlayOnChargeShotStashed Parms{};

	Parms.OrigEffectsToApplyOnChargeShotStashed = std::move(OrigEffectsToApplyOnChargeShotStashed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.OnRep_ChargeState
// (Final, Native, Protected)

void UMarinerAbility_ChargeProjectile::OnRep_ChargeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "OnRep_ChargeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.RecalculateAuthProjectileState
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UMarinerAbility_ChargeProjectile::RecalculateAuthProjectileState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "RecalculateAuthProjectileState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.ServerTryAndSpawnProjectile
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FGameplayEventData               Payload                                                (Parm, NativeAccessSpecifierPublic)

void UMarinerAbility_ChargeProjectile::ServerTryAndSpawnProjectile(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "ServerTryAndSpawnProjectile");

	Params::MarinerAbility_ChargeProjectile_ServerTryAndSpawnProjectile Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.StashCharge
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UMarinerAbility_ChargeProjectile::StashCharge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "StashCharge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ChargeProjectile.GetChargeRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_ChargeProjectile::GetChargeRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "GetChargeRatio");

	Params::MarinerAbility_ChargeProjectile_GetChargeRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.GetCurrentChargeMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_ChargeProjectile::GetCurrentChargeMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "GetCurrentChargeMultiplier");

	Params::MarinerAbility_ChargeProjectile_GetCurrentChargeMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.GetMaxChargeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_ChargeProjectile::GetMaxChargeTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "GetMaxChargeTime");

	Params::MarinerAbility_ChargeProjectile_GetMaxChargeTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ChargeProjectile.HasStashedCharge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_ChargeProjectile::HasStashedCharge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ChargeProjectile", "HasStashedCharge");

	Params::MarinerAbility_ChargeProjectile_HasStashedCharge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.ActivateMenuSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuSequence> MenuSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuSequence*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuSequence* UMarinerMenuManager::ActivateMenuSequence(TSubclassOf<class UMarinerMenuSequence> MenuSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "ActivateMenuSequence");

	Params::MarinerMenuManager_ActivateMenuSequence Parms{};

	Parms.MenuSequence = MenuSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.ActivateRootLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::ActivateRootLayer(const TSubclassOf<class UMarinerMenuStackLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "ActivateRootLayer");

	Params::MarinerMenuManager_ActivateRootLayer Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.ActivateStackManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerIDTag>        StackIDTag                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitBehavior                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::ActivateStackManager(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> StackIDTag, bool bInitBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "ActivateStackManager");

	Params::MarinerMenuManager_ActivateStackManager Parms{};

	Parms.StackManager = StackManager;
	Parms.StackIDTag = StackIDTag;
	Parms.bInitBehavior = bInitBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.DeactivateMenuSequence
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuManager::DeactivateMenuSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "DeactivateMenuSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.DeactivateRootLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::DeactivateRootLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "DeactivateRootLayer");

	Params::MarinerMenuManager_DeactivateRootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.DeactivateStackManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::DeactivateStackManager(const TSubclassOf<class UMarinerMenuStackManager> StackManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "DeactivateStackManager");

	Params::MarinerMenuManager_DeactivateStackManager Parms{};

	Parms.StackManager = StackManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetActiveOrPendingRootLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::GetActiveOrPendingRootLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetActiveOrPendingRootLayer");

	Params::MarinerMenuManager_GetActiveOrPendingRootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetActiveRootLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::GetActiveRootLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetActiveRootLayer");

	Params::MarinerMenuManager_GetActiveRootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetPendingRootLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::GetPendingRootLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetPendingRootLayer");

	Params::MarinerMenuManager_GetPendingRootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetWidgetPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerWidgetPool*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerWidgetPool* UMarinerMenuManager::GetWidgetPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetWidgetPool");

	Params::MarinerMenuManager_GetWidgetPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.JumpToEndOnMenuSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::JumpToEndOnMenuSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "JumpToEndOnMenuSequence");

	Params::MarinerMenuManager_JumpToEndOnMenuSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.JumpToStepOnMenuSequence
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::JumpToStepOnMenuSequence(TSubclassOf<class UMarinerMenuStackLayer>* Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "JumpToStepOnMenuSequence");

	Params::MarinerMenuManager_JumpToStepOnMenuSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Layer != nullptr)
		*Layer = Parms.Layer;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.OnPopulateRootLayer
// (Final, Native, Public)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::OnPopulateRootLayer(class UMarinerAnimatedWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "OnPopulateRootLayer");

	Params::MarinerMenuManager_OnPopulateRootLayer Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.PopLayerFromActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::PopLayerFromActiveStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "PopLayerFromActiveStack");

	Params::MarinerMenuManager_PopLayerFromActiveStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.PopToLayerOnActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::PopToLayerOnActiveStack(const TSubclassOf<class UMarinerMenuStackLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "PopToLayerOnActiveStack");

	Params::MarinerMenuManager_PopToLayerOnActiveStack Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.PushLayerToActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::PushLayerToActiveStack(TSubclassOf<class UMarinerMenuStackLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "PushLayerToActiveStack");

	Params::MarinerMenuManager_PushLayerToActiveStack Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.SetPlayerHeaderIsOnGameTabs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bGameTabs                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuManager::SetPlayerHeaderIsOnGameTabs(bool bGameTabs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "SetPlayerHeaderIsOnGameTabs");

	Params::MarinerMenuManager_SetPlayerHeaderIsOnGameTabs Parms{};

	Parms.bGameTabs = bGameTabs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.ShowStackManagerStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuManager::ShowStackManagerStack(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "ShowStackManagerStack");

	Params::MarinerMenuManager_ShowStackManagerStack Parms{};

	Parms.StackManager = StackManager;
	Parms.IDTag = IDTag;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.ShowStackManagerStackGlobal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuManager::ShowStackManagerStackGlobal(const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "ShowStackManagerStackGlobal");

	Params::MarinerMenuManager_ShowStackManagerStackGlobal Parms{};

	Parms.IDTag = IDTag;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.SwitchToStackManagerStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetAsRootLayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::SwitchToStackManagerStack(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, bool bSetAsRootLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "SwitchToStackManagerStack");

	Params::MarinerMenuManager_SwitchToStackManagerStack Parms{};

	Parms.StackManager = StackManager;
	Parms.IDTag = IDTag;
	Parms.bSetAsRootLayer = bSetAsRootLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.SwitchToStackManagerStackAndPush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UMarinerMenuStackLayer>>LayerStack                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bSetAsRootLayer                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseInitBehavior                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::SwitchToStackManagerStackAndPush(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag, const TArray<TSubclassOf<class UMarinerMenuStackLayer>>& LayerStack, bool bSetAsRootLayer, bool bUseInitBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "SwitchToStackManagerStackAndPush");

	Params::MarinerMenuManager_SwitchToStackManagerStackAndPush Parms{};

	Parms.StackManager = StackManager;
	Parms.IDTag = IDTag;
	Parms.LayerStack = std::move(LayerStack);
	Parms.bSetAsRootLayer = bSetAsRootLayer;
	Parms.bUseInitBehavior = bUseInitBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.UpdateMenuBackground
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuManager::UpdateMenuBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "UpdateMenuBackground");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.UpdatePlayerHeader
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuManager::UpdatePlayerHeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "UpdatePlayerHeader");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuManager.GetActiveInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerInputType UMarinerMenuManager::GetActiveInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetActiveInputType");

	Params::MarinerMenuManager_GetActiveInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetActiveSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuSequence*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuSequence* UMarinerMenuManager::GetActiveSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetActiveSequence");

	Params::MarinerMenuManager_GetActiveSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetCustomBackground
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UMarinerMenuManager::GetCustomBackground() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetCustomBackground");

	Params::MarinerMenuManager_GetCustomBackground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             LayerName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::GetLayer(class FName LayerName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetLayer");

	Params::MarinerMenuManager_GetLayer Parms{};

	Parms.LayerName = LayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.GetLayerByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuManager::GetLayerByClass(TSubclassOf<class UMarinerMenuStackLayer> Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "GetLayerByClass");

	Params::MarinerMenuManager_GetLayerByClass Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.HasActiveOrPendingRootLayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::HasActiveOrPendingRootLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "HasActiveOrPendingRootLayer");

	Params::MarinerMenuManager_HasActiveOrPendingRootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.IsGamepadConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::IsGamepadConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "IsGamepadConnected");

	Params::MarinerMenuManager_IsGamepadConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.IsLayerPushed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::IsLayerPushed(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerMenuStackLayer> Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "IsLayerPushed");

	Params::MarinerMenuManager_IsLayerPushed Parms{};

	Parms.StackManager = StackManager;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.IsStackManagerActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::IsStackManagerActive(const TSubclassOf<class UMarinerMenuStackManager> StackManager) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "IsStackManagerActive");

	Params::MarinerMenuManager_IsStackManagerActive Parms{};

	Parms.StackManager = StackManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuManager.IsStackManagerStackDisplaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerMenuStackManager>StackManager                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuManager::IsStackManagerStackDisplaying(const TSubclassOf<class UMarinerMenuStackManager> StackManager, const TSubclassOf<class UMarinerIDTag> IDTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuManager", "IsStackManagerStackDisplaying");

	Params::MarinerMenuManager_IsStackManagerStackDisplaying Parms{};

	Parms.StackManager = StackManager;
	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMedalWidget.PlayEnterAnimation
// (Event, Public, BlueprintEvent)

void UMarinerMedalWidget::PlayEnterAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMedalWidget", "PlayEnterAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMedalWidget.PlayExitAnimation
// (Event, Public, BlueprintEvent)

void UMarinerMedalWidget::PlayExitAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMedalWidget", "PlayExitAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAbility_MultiProjectile.BP_OnAllProjectilesFinishedSpawning
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AMarinerProjectile*>       SpawnedProjectile                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerAbility_MultiProjectile::BP_OnAllProjectilesFinishedSpawning(const struct FGameplayAbilityActorInfo& ActorInfo, TArray<class AMarinerProjectile*>* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "BP_OnAllProjectilesFinishedSpawning");

	Params::MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedProjectile != nullptr)
		*SpawnedProjectile = std::move(Parms.SpawnedProjectile);
}


// Function Mariner.MarinerAbility_MultiProjectile.BP_OnAllProjectilesFinishedSpawning_Authority
// (BlueprintAuthorityOnly, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AMarinerProjectile*>       SpawnedProjectile                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerAbility_MultiProjectile::BP_OnAllProjectilesFinishedSpawning_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, TArray<class AMarinerProjectile*>* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "BP_OnAllProjectilesFinishedSpawning_Authority");

	Params::MarinerAbility_MultiProjectile_BP_OnAllProjectilesFinishedSpawning_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedProjectile != nullptr)
		*SpawnedProjectile = std::move(Parms.SpawnedProjectile);
}


// Function Mariner.MarinerAbility_MultiProjectile.BP_OnProjectileDestroyed_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerAbility_MultiProjectile::BP_OnProjectileDestroyed_Authority(const struct FGameplayAbilityActorInfo& ActorInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "BP_OnProjectileDestroyed_Authority");

	Params::MarinerAbility_MultiProjectile_BP_OnProjectileDestroyed_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_MultiProjectile.FinalizeAbility
// (Final, Native, Protected)

void UMarinerAbility_MultiProjectile::FinalizeAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "FinalizeAbility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_MultiProjectile.GetAllProjectileSpreads
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class UMarinerProjectileSpread>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UMarinerProjectileSpread>> UMarinerAbility_MultiProjectile::GetAllProjectileSpreads()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "GetAllProjectileSpreads");

	Params::MarinerAbility_MultiProjectile_GetAllProjectileSpreads Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_MultiProjectile.OnAllProjectilesFinishedSpawning
// (Native, Protected)

void UMarinerAbility_MultiProjectile::OnAllProjectilesFinishedSpawning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "OnAllProjectilesFinishedSpawning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_MultiProjectile.OnRep_ProjectilesSpawned
// (Final, Native, Protected)

void UMarinerAbility_MultiProjectile::OnRep_ProjectilesSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "OnRep_ProjectilesSpawned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_MultiProjectile.BP_GetMaximumProjectilesSpawned
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerAbility_MultiProjectile::BP_GetMaximumProjectilesSpawned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "BP_GetMaximumProjectilesSpawned");

	Params::MarinerAbility_MultiProjectile_BP_GetMaximumProjectilesSpawned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_MultiProjectile.GetProjectileSpreads
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<TSubclassOf<class UMarinerProjectileSpread>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class UMarinerProjectileSpread>> UMarinerAbility_MultiProjectile::GetProjectileSpreads() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_MultiProjectile", "GetProjectileSpreads");

	Params::MarinerAbility_MultiProjectile_GetProjectileSpreads Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.AddStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerMenuStackButton>SourceButton                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ButtonText                                             (Parm, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMenuStackLayer>StartingLayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitiallyVisible                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHorizontalAlignment                    HorizAlign                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVerticalAlignment                      VertAlign                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuStackButton*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackButton* UMarinerMenuStackManager::AddStack(TSubclassOf<class UMarinerMenuStackButton> SourceButton, const class FText& ButtonText, TSubclassOf<class UMarinerMenuStackLayer> StartingLayer, bool bInitiallyVisible, EHorizontalAlignment HorizAlign, EVerticalAlignment VertAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "AddStack");

	Params::MarinerMenuStackManager_AddStack Parms{};

	Parms.SourceButton = SourceButton;
	Parms.ButtonText = std::move(ButtonText);
	Parms.StartingLayer = StartingLayer;
	Parms.bInitiallyVisible = bInitiallyVisible;
	Parms.HorizAlign = HorizAlign;
	Parms.VertAlign = VertAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.BP_OnFirstLaunch
// (Event, Protected, BlueprintEvent)

void UMarinerMenuStackManager::BP_OnFirstLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "BP_OnFirstLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMenuStackManager.BP_OnInit
// (Event, Protected, BlueprintEvent)

void UMarinerMenuStackManager::BP_OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "BP_OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMenuStackManager.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMarinerMenuStackManagerSetup    StackManagerSetup                                      (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::Init(const struct FMarinerMenuStackManagerSetup& StackManagerSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "Init");

	Params::MarinerMenuStackManager_Init Parms{};

	Parms.StackManagerSetup = std::move(StackManagerSetup);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.IsVisibleFromIDTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsVisibleFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsVisibleFromIDTag");

	Params::MarinerMenuStackManager_IsVisibleFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsVisibleFromInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsVisibleFromInstance(const class UMarinerMenuStackButton* SourceButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsVisibleFromInstance");

	Params::MarinerMenuStackManager_IsVisibleFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.OnContentAnimationStateChanged
// (Final, Native, Private)
// Parameters:
// class UMarinerAnimatedWidget*           Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetAnimationState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::OnContentAnimationStateChanged(class UMarinerAnimatedWidget* Instance, EWidgetAnimationState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "OnContentAnimationStateChanged");

	Params::MarinerMenuStackManager_OnContentAnimationStateChanged Parms{};

	Parms.Instance = Instance;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.OnContentLayerStateChange
// (Final, Native, Public)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetAnimationState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::OnContentLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "OnContentLayerStateChange");

	Params::MarinerMenuStackManager_OnContentLayerStateChange Parms{};

	Parms.Widget = Widget;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.OnOverlayLayerStateChange
// (Final, Native, Public)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetAnimationState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::OnOverlayLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "OnOverlayLayerStateChange");

	Params::MarinerMenuStackManager_OnOverlayLayerStateChange Parms{};

	Parms.Widget = Widget;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.OnPopulateContentLayer
// (Final, Native, Public)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::OnPopulateContentLayer(class UMarinerAnimatedWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "OnPopulateContentLayer");

	Params::MarinerMenuStackManager_OnPopulateContentLayer Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.OnPopulateOverlayLayer
// (Final, Native, Public)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::OnPopulateOverlayLayer(class UMarinerAnimatedWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "OnPopulateOverlayLayer");

	Params::MarinerMenuStackManager_OnPopulateOverlayLayer Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.PopAllFromActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::PopAllFromActiveStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "PopAllFromActiveStack");

	Params::MarinerMenuStackManager_PopAllFromActiveStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.PopFromActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuStackManager::PopFromActiveStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "PopFromActiveStack");

	Params::MarinerMenuStackManager_PopFromActiveStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.PopToLayerOnActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackLayer*           Layer                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::PopToLayerOnActiveStack(class UMarinerMenuStackLayer* Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "PopToLayerOnActiveStack");

	Params::MarinerMenuStackManager_PopToLayerOnActiveStack Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.PopToRootFromActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::PopToRootFromActiveStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "PopToRootFromActiveStack");

	Params::MarinerMenuStackManager_PopToRootFromActiveStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.PushToActiveStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackLayer*           Layer                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::PushToActiveStack(class UMarinerMenuStackLayer* Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "PushToActiveStack");

	Params::MarinerMenuStackManager_PushToActiveStack Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.RefreshPrompts
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMenuStackManager::RefreshPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "RefreshPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.RemoveAllStacks
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuStackManager::RemoveAllStacks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "RemoveAllStacks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.RemoveStackFromIDTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::RemoveStackFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "RemoveStackFromIDTag");

	Params::MarinerMenuStackManager_RemoveStackFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.RemoveStackFromInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::RemoveStackFromInstance(class UMarinerMenuStackButton* SourceButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "RemoveStackFromInstance");

	Params::MarinerMenuStackManager_RemoveStackFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.ShowStackFromIDTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::ShowStackFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "ShowStackFromIDTag");

	Params::MarinerMenuStackManager_ShowStackFromIDTag Parms{};

	Parms.IDTag = IDTag;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.ShowStackFromInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::ShowStackFromInstance(const class UMarinerMenuStackButton* SourceButton, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "ShowStackFromInstance");

	Params::MarinerMenuStackManager_ShowStackFromInstance Parms{};

	Parms.SourceButton = SourceButton;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.SwapStackNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActivateStack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::SwapStackNext(bool bActivateStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "SwapStackNext");

	Params::MarinerMenuStackManager_SwapStackNext Parms{};

	Parms.bActivateStack = bActivateStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.SwapStackPrevious
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActivateStack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::SwapStackPrevious(bool bActivateStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "SwapStackPrevious");

	Params::MarinerMenuStackManager_SwapStackPrevious Parms{};

	Parms.bActivateStack = bActivateStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.SwitchToHomeStack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::SwitchToHomeStack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "SwitchToHomeStack");

	Params::MarinerMenuStackManager_SwitchToHomeStack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.SwitchToStackFromIDTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::SwitchToStackFromIDTag(const TSubclassOf<class UMarinerIDTag> IDTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "SwitchToStackFromIDTag");

	Params::MarinerMenuStackManager_SwitchToStackFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.SwitchToStackFromInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackManager::SwitchToStackFromInstance(const class UMarinerMenuStackButton* SourceButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "SwitchToStackFromInstance");

	Params::MarinerMenuStackManager_SwitchToStackFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackManager.GetActiveStackCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMenuStackManager::GetActiveStackCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "GetActiveStackCount");

	Params::MarinerMenuStackManager_GetActiveStackCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.GetActiveStackTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerMenuStackManager::GetActiveStackTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "GetActiveStackTop");

	Params::MarinerMenuStackManager_GetActiveStackTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.GetStackCountFromIDTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMenuStackManager::GetStackCountFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "GetStackCountFromIDTag");

	Params::MarinerMenuStackManager_GetStackCountFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.GetStackCountFromInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMenuStackManager::GetStackCountFromInstance(class UMarinerMenuStackButton* SourceButton) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "GetStackCountFromInstance");

	Params::MarinerMenuStackManager_GetStackCountFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.GetStackIndexFromInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMenuStackManager::GetStackIndexFromInstance(const class UMarinerMenuStackButton* SourceButton) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "GetStackIndexFromInstance");

	Params::MarinerMenuStackManager_GetStackIndexFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.HasPrompts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::HasPrompts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "HasPrompts");

	Params::MarinerMenuStackManager_HasPrompts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsActiveStackDisplaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsActiveStackDisplaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsActiveStackDisplaying");

	Params::MarinerMenuStackManager_IsActiveStackDisplaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsActiveStackFromIDTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsActiveStackFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsActiveStackFromIDTag");

	Params::MarinerMenuStackManager_IsActiveStackFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsActiveStackFromInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsActiveStackFromInstance(class UMarinerMenuStackButton* SourceButton) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsActiveStackFromInstance");

	Params::MarinerMenuStackManager_IsActiveStackFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsCapturingInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsCapturingInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsCapturingInput");

	Params::MarinerMenuStackManager_IsCapturingInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsStackDisplayingFromIDTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerIDTag>        IDTag                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsStackDisplayingFromIDTag(TSubclassOf<class UMarinerIDTag> IDTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsStackDisplayingFromIDTag");

	Params::MarinerMenuStackManager_IsStackDisplayingFromIDTag Parms{};

	Parms.IDTag = IDTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackManager.IsStackDisplayingFromInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuStackButton*          SourceButton                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackManager::IsStackDisplayingFromInstance(class UMarinerMenuStackButton* SourceButton) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackManager", "IsStackDisplayingFromInstance");

	Params::MarinerMenuStackManager_IsStackDisplayingFromInstance Parms{};

	Parms.SourceButton = SourceButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ProjectileBloomingSpread.ResetSpread
// (Final, Native, Public, BlueprintCallable)

void UMarinerAbility_ProjectileBloomingSpread::ResetSpread()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ProjectileBloomingSpread", "ResetSpread");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ProjectileBloomingSpread.GetCurrentHalfConeSpreadDegrees
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerAbility_ProjectileBloomingSpread::GetCurrentHalfConeSpreadDegrees() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ProjectileBloomingSpread", "GetCurrentHalfConeSpreadDegrees");

	Params::MarinerAbility_ProjectileBloomingSpread_GetCurrentHalfConeSpreadDegrees Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_ReloadWeapon.AuthorityModifyCurrentAmmo
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AmmoDelta                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ReloadWeapon::AuthorityModifyCurrentAmmo(int32 AmmoDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ReloadWeapon", "AuthorityModifyCurrentAmmo");

	Params::MarinerAbility_ReloadWeapon_AuthorityModifyCurrentAmmo Parms{};

	Parms.AmmoDelta = AmmoDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ReloadWeapon.AuthorityRefillAmmo
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerAbility_ReloadWeapon::AuthorityRefillAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ReloadWeapon", "AuthorityRefillAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_ReloadWeapon.OnAmmoRep
// (Final, Native, Protected)
// Parameters:
// float                                   CurrentAmmo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMaxAmmo                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_ReloadWeapon::OnAmmoRep(float CurrentAmmo, float InMaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_ReloadWeapon", "OnAmmoRep");

	Params::MarinerAbility_ReloadWeapon_OnAmmoRep Parms{};

	Parms.CurrentAmmo = CurrentAmmo;
	Parms.InMaxAmmo = InMaxAmmo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.BP_SpawnLawnDart
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMarinerLawnDartSplineContainer*  LawnDartSplineContainer                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerLawnDart>     LawnDartTemplate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              CapturingPlayerState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerLawnDart*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerLawnDart* AMarinerLawnDart::BP_SpawnLawnDart(class AMarinerLawnDartSplineContainer* LawnDartSplineContainer, TSubclassOf<class AMarinerLawnDart> LawnDartTemplate, class AMarinerPlayerState* CapturingPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLawnDart", "BP_SpawnLawnDart");

	Params::MarinerLawnDart_BP_SpawnLawnDart Parms{};

	Parms.LawnDartSplineContainer = LawnDartSplineContainer;
	Parms.LawnDartTemplate = LawnDartTemplate;
	Parms.CapturingPlayerState = CapturingPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLawnDart.AddRocketsToSpawningPattern
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           SocketIndices                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               RocketTemplate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::AddRocketsToSpawningPattern(const TArray<int32>& SocketIndices, TSubclassOf<class AActor> RocketTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "AddRocketsToSpawningPattern");

	Params::MarinerLawnDart_AddRocketsToSpawningPattern Parms{};

	Parms.SocketIndices = std::move(SocketIndices);
	Parms.RocketTemplate = RocketTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.AddRocketToSpawningPattern
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SocketIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               RocketTemplate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::AddRocketToSpawningPattern(int32 SocketIndex, TSubclassOf<class AActor> RocketTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "AddRocketToSpawningPattern");

	Params::MarinerLawnDart_AddRocketToSpawningPattern Parms{};

	Parms.SocketIndex = SocketIndex;
	Parms.RocketTemplate = RocketTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.BeginDartEntrySequence
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAutoFireMissilesOnLand                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::BeginDartEntrySequence(bool bAutoFireMissilesOnLand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "BeginDartEntrySequence");

	Params::MarinerLawnDart_BeginDartEntrySequence Parms{};

	Parms.bAutoFireMissilesOnLand = bAutoFireMissilesOnLand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.BeginDartExitSequence
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerLawnDart::BeginDartExitSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "BeginDartExitSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.BeginFiringMissilesSequence
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCloseRackWhenDone                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerLawnDart::BeginFiringMissilesSequence(bool bCloseRackWhenDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "BeginFiringMissilesSequence");

	Params::MarinerLawnDart_BeginFiringMissilesSequence Parms{};

	Parms.bCloseRackWhenDone = bCloseRackWhenDone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLawnDart.BeginTakeOffSequenceWhenReady
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerLawnDart::BeginTakeOffSequenceWhenReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "BeginTakeOffSequenceWhenReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.BP_OnDartStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EMarinerLawnDartState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::BP_OnDartStateChanged(EMarinerLawnDartState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "BP_OnDartStateChanged");

	Params::MarinerLawnDart_BP_OnDartStateChanged Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerLawnDart.ClearRocketSpawningPattern
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerLawnDart::ClearRocketSpawningPattern()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "ClearRocketSpawningPattern");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.DetachRocket
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AMarinerLawnDart::DetachRocket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "DetachRocket");

	Params::MarinerLawnDart_DetachRocket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLawnDart.MulticastPlayRocketLaunchEffects
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// class AActor*                           LaunchedRocket                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::MulticastPlayRocketLaunchEffects(const class AActor* LaunchedRocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "MulticastPlayRocketLaunchEffects");

	Params::MarinerLawnDart_MulticastPlayRocketLaunchEffects Parms{};

	Parms.LaunchedRocket = LaunchedRocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.MulticastSpawnEffect
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// class UParticleSystem*                  Effect                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerLawnDart::MulticastSpawnEffect(class UParticleSystem* Effect, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "MulticastSpawnEffect");

	Params::MarinerLawnDart_MulticastSpawnEffect Parms{};

	Parms.Effect = Effect;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnAuthorityStoppedDueToCollision
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProgressRatioAtTimeOfCollision                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       BlockingHit                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerLawnDart::OnAuthorityStoppedDueToCollision(class AActor* MovingActor, float ProgressRatioAtTimeOfCollision, const struct FHitResult& BlockingHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnAuthorityStoppedDueToCollision");

	Params::MarinerLawnDart_OnAuthorityStoppedDueToCollision Parms{};

	Parms.MovingActor = MovingActor;
	Parms.ProgressRatioAtTimeOfCollision = ProgressRatioAtTimeOfCollision;
	Parms.BlockingHit = std::move(BlockingHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnAuthorityStoppedMovingOnEntrySpline
// (Final, Native, Protected)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerFollowSplineDirection           MovementDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::OnAuthorityStoppedMovingOnEntrySpline(class AActor* MovingActor, EMarinerFollowSplineDirection MovementDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnAuthorityStoppedMovingOnEntrySpline");

	Params::MarinerLawnDart_OnAuthorityStoppedMovingOnEntrySpline Parms{};

	Parms.MovingActor = MovingActor;
	Parms.MovementDirection = MovementDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnAuthorityStoppedMovingOnExitSpline
// (Final, Native, Protected)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerFollowSplineDirection           MovementDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::OnAuthorityStoppedMovingOnExitSpline(class AActor* MovingActor, EMarinerFollowSplineDirection MovementDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnAuthorityStoppedMovingOnExitSpline");

	Params::MarinerLawnDart_OnAuthorityStoppedMovingOnExitSpline Parms{};

	Parms.MovingActor = MovingActor;
	Parms.MovementDirection = MovementDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnLawnDartDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedLawnDart                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::OnLawnDartDestroyed(class AActor* DestroyedLawnDart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnLawnDartDestroyed");

	Params::MarinerLawnDart_OnLawnDartDestroyed Parms{};

	Parms.DestroyedLawnDart = DestroyedLawnDart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnRep_CurrentStateChanged
// (Final, Native, Protected)

void AMarinerLawnDart::OnRep_CurrentStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnRep_CurrentStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnRep_TeamIndexChanged
// (Final, Native, Protected)

void AMarinerLawnDart::OnRep_TeamIndexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnRep_TeamIndexChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.OnUpdateTeamColors
// (Event, Protected, BlueprintEvent)

void AMarinerLawnDart::OnUpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "OnUpdateTeamColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerLawnDart.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerLawnDart::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "SetTeamIndex");

	Params::MarinerLawnDart_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void AMarinerLawnDart::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLawnDart.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerLawnDart::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLawnDart", "GetTeamIndex");

	Params::MarinerLawnDart_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_StateProjectile.BP_OnProjectileCallback
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_StateProjectile::BP_OnProjectileCallback(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_StateProjectile", "BP_OnProjectileCallback");

	Params::MarinerAbility_StateProjectile_BP_OnProjectileCallback Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_StateProjectile.BP_OnProjectileCallback_Authority
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AMarinerProjectile*               SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_StateProjectile::BP_OnProjectileCallback_Authority(const struct FGameplayAbilityActorInfo& ActorInfo, class AMarinerProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_StateProjectile", "BP_OnProjectileCallback_Authority");

	Params::MarinerAbility_StateProjectile_BP_OnProjectileCallback_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.SpawnedProjectile = SpawnedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAbility_StateProjectile.BP_CanCallbackOnProjectile
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_StateProjectile::BP_CanCallbackOnProjectile(const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_StateProjectile", "BP_CanCallbackOnProjectile");

	Params::MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_StateProjectile.BP_CanCallbackOnProjectile_Authority
// (BlueprintAuthorityOnly, Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_StateProjectile::BP_CanCallbackOnProjectile_Authority(const struct FGameplayAbilityActorInfo& ActorInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_StateProjectile", "BP_CanCallbackOnProjectile_Authority");

	Params::MarinerAbility_StateProjectile_BP_CanCallbackOnProjectile_Authority Parms{};

	Parms.ActorInfo = std::move(ActorInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Weapon.OnGameplayEffectRemoved
// (Final, Native, Protected)
// Parameters:
// TSubclassOf<class UGameplayEffect>      RemovedEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbility_Weapon::OnGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> RemovedEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "OnGameplayEffectRemoved");

	Params::MarinerAbility_Weapon_OnGameplayEffectRemoved Parms{};

	Parms.RemovedEffect = RemovedEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Weapon.OnReloadAbilityEnded
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FAbilityEndedData                AbilityEndedData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerAbility_Weapon::OnReloadAbilityEnded(const struct FAbilityEndedData& AbilityEndedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "OnReloadAbilityEnded");

	Params::MarinerAbility_Weapon_OnReloadAbilityEnded Parms{};

	Parms.AbilityEndedData = std::move(AbilityEndedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbility_Weapon.GetProjectileAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbility*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbility* UMarinerAbility_Weapon::GetProjectileAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "GetProjectileAbility");

	Params::MarinerAbility_Weapon_GetProjectileAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Weapon.GetReloadAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbility*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbility* UMarinerAbility_Weapon::GetReloadAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "GetReloadAbility");

	Params::MarinerAbility_Weapon_GetReloadAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Weapon.IsReloading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_Weapon::IsReloading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "IsReloading");

	Params::MarinerAbility_Weapon_IsReloading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbility_Weapon.IsWeaponOutOfAmmo
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbility_Weapon::IsWeaponOutOfAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbility_Weapon", "IsWeaponOutOfAmmo");

	Params::MarinerAbility_Weapon_IsWeaponOutOfAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackButton.EnableWidgetSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackButton::EnableWidgetSlot(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "EnableWidgetSlot");

	Params::MarinerMenuStackButton_EnableWidgetSlot Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.OnHitAreaClicked
// (Final, Native, Protected)

void UMarinerMenuStackButton::OnHitAreaClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "OnHitAreaClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.OnHitAreaHovered
// (Final, Native, Protected)

void UMarinerMenuStackButton::OnHitAreaHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "OnHitAreaHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.OnHitAreaUnhovered
// (Final, Native, Protected)

void UMarinerMenuStackButton::OnHitAreaUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "OnHitAreaUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.OnLayerChanged
// (Final, Native, Protected)
// Parameters:
// class UMarinerMenuStackLayer*           NewRootLayer                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuStackButton::OnLayerChanged(class UMarinerMenuStackLayer* NewRootLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "OnLayerChanged");

	Params::MarinerMenuStackButton_OnLayerChanged Parms{};

	Parms.NewRootLayer = NewRootLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMenuStackButton::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "SetText");

	Params::MarinerMenuStackButton_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackButton.GetAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerMenuStackButtonAssets    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerMenuStackButtonAssets UMarinerMenuStackButton::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "GetAssets");

	Params::MarinerMenuStackButton_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackButton.GetMenuStackIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMenuStackButton::GetMenuStackIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "GetMenuStackIndex");

	Params::MarinerMenuStackButton_GetMenuStackIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackButton.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackButton::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackButton", "IsEnabled");

	Params::MarinerMenuStackButton_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCustomComboBox.AddOption
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             OptionText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::AddOption(const class FText& OptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "AddOption");

	Params::MarinerCustomComboBox_AddOption Parms{};

	Parms.OptionText = std::move(OptionText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.AddOptionWithCallback
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             OptionText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       SelectedCallback                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCustomComboBox::AddOptionWithCallback(const class FText& OptionText, const TDelegate<void()>& SelectedCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "AddOptionWithCallback");

	Params::MarinerCustomComboBox_AddOptionWithCallback Parms{};

	Parms.OptionText = std::move(OptionText);
	Parms.SelectedCallback = SelectedCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCustomComboBox.ClearOptions
// (Final, Native, Public, BlueprintCallable)

void UMarinerCustomComboBox::ClearOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "ClearOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UMarinerCustomComboBox::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.SetEditConfirmationData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerCustomDropdownEditConfirmationInEditConfirmationData                                 (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::SetEditConfirmationData(const struct FMarinerCustomDropdownEditConfirmation& InEditConfirmationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "SetEditConfirmationData");

	Params::MarinerCustomComboBox_SetEditConfirmationData Parms{};

	Parms.InEditConfirmationData = std::move(InEditConfirmationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.SetIsOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCustomComboBox::SetIsOpen(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "SetIsOpen");

	Params::MarinerCustomComboBox_SetIsOpen Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCustomComboBox.SetOpenInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::SetOpenInput(EMarinerInputActions Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "SetOpenInput");

	Params::MarinerCustomComboBox_SetOpenInput Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.SetSelectedOptionViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcast                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAnimate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::SetSelectedOptionViaIndex(int32 Param_Index, bool bBroadcast, bool bAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "SetSelectedOptionViaIndex");

	Params::MarinerCustomComboBox_SetSelectedOptionViaIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bBroadcast = bBroadcast;
	Parms.bAnimate = bAnimate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.SetSFXEvents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerCustomDropdownSFX        InDropdownSFX                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::SetSFXEvents(const struct FMarinerCustomDropdownSFX& InDropdownSFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "SetSFXEvents");

	Params::MarinerCustomComboBox_SetSFXEvents Parms{};

	Parms.InDropdownSFX = std::move(InDropdownSFX);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.UpdateOptionText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewOptionText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   OptionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCustomComboBox::UpdateOptionText(const class FText& NewOptionText, int32 OptionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "UpdateOptionText");

	Params::MarinerCustomComboBox_UpdateOptionText Parms{};

	Parms.NewOptionText = std::move(NewOptionText);
	Parms.OptionIndex = OptionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomComboBox.GetOptionCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCustomComboBox::GetOptionCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "GetOptionCount");

	Params::MarinerCustomComboBox_GetOptionCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCustomComboBox.IsOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCustomComboBox::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomComboBox", "IsOpen");

	Params::MarinerCustomComboBox_IsOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSocialWidget.OnAcceptFriendRequestSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnAcceptFriendRequestSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnAcceptFriendRequestSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnAddFriend
// (Final, Native, Private)

void UMarinerSocialWidget::OnAddFriend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnAddFriend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnCancelFriendRequestSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnCancelFriendRequestSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnCancelFriendRequestSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnChangeBlockStatus
// (Final, Native, Private)

void UMarinerSocialWidget::OnChangeBlockStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnChangeBlockStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnChangeVoiceStatus
// (Final, Native, Private)

void UMarinerSocialWidget::OnChangeVoiceStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnChangeVoiceStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnInviteToParty
// (Final, Native, Private)

void UMarinerSocialWidget::OnInviteToParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnInviteToParty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnJoinParty
// (Final, Native, Private)

void UMarinerSocialWidget::OnJoinParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnJoinParty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnLocalUserNumChanged
// (Final, Native, Private)
// Parameters:
// int32                                   LocalUser                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialWidget::OnLocalUserNumChanged(int32 LocalUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnLocalUserNumChanged");

	Params::MarinerSocialWidget_OnLocalUserNumChanged Parms{};

	Parms.LocalUser = LocalUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnMangoShutdown
// (Final, Native, Private)
// Parameters:
// bool                                    bIsResetting                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialWidget::OnMangoShutdown(const bool bIsResetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnMangoShutdown");

	Params::MarinerSocialWidget_OnMangoShutdown Parms{};

	Parms.bIsResetting = bIsResetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnPromoteToPartyLeader
// (Final, Native, Private)

void UMarinerSocialWidget::OnPromoteToPartyLeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnPromoteToPartyLeader");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnRejectFriendRequestSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnRejectFriendRequestSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnRejectFriendRequestSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnRemoveFriend
// (Final, Native, Private)

void UMarinerSocialWidget::OnRemoveFriend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnRemoveFriend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnRemoveFromParty
// (Final, Native, Private)

void UMarinerSocialWidget::OnRemoveFromParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnRemoveFromParty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnReportPlayerCheatsSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnReportPlayerCheatsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnReportPlayerCheatsSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnReportPlayerGriefingSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnReportPlayerGriefingSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnReportPlayerGriefingSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnReportPlayerInappropriateSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnReportPlayerInappropriateSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnReportPlayerInappropriateSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnReportPlayerOffensiveSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnReportPlayerOffensiveSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnReportPlayerOffensiveSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnSendFriendRequestSelected
// (Final, Native, Private)

void UMarinerSocialWidget::OnSendFriendRequestSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnSendFriendRequestSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSocialWidget.OnViewProfile
// (Final, Native, Private)

void UMarinerSocialWidget::OnViewProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialWidget", "OnViewProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilityFeedbackWidget.PlayCooldownAnimation
// (Event, Protected, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilityFeedbackWidget::PlayCooldownAnimation(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilityFeedbackWidget", "PlayCooldownAnimation");

	Params::MarinerAbilityFeedbackWidget_PlayCooldownAnimation Parms{};

	Parms.InputAction = InputAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMusicManager.BP_HandleMenuMusicSFX
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    EventPlayed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::BP_HandleMenuMusicSFX(class UAkAudioEvent* EventPlayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_HandleMenuMusicSFX");

	Params::MarinerMusicManager_BP_HandleMenuMusicSFX Parms{};

	Parms.EventPlayed = EventPlayed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMusicManager.BP_OnEnterMenuState
// (Event, Public, BlueprintEvent)

void UMarinerMusicManager::BP_OnEnterMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnEnterMenuState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnExitMenuState
// (Event, Public, BlueprintEvent)

void UMarinerMusicManager::BP_OnExitMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnExitMenuState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnExtraTimeMusicPlayed
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnExtraTimeMusicPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnExtraTimeMusicPlayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnLastStandMusicPlayed
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnLastStandMusicPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnLastStandMusicPlayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnMatchPlayingIntro
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnMatchPlayingIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnMatchPlayingIntro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnMatchPlayingOutro
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnMatchPlayingOutro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnMatchPlayingOutro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnMatchStarted
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnMatchStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnMatchStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.BP_OnMatchStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             MatchState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::BP_OnMatchStateChanged(class FName MatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnMatchStateChanged");

	Params::MarinerMusicManager_BP_OnMatchStateChanged Parms{};

	Parms.MatchState = MatchState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMusicManager.BP_OnOneMinuteMusicPlayed
// (Event, Protected, BlueprintEvent)

void UMarinerMusicManager::BP_OnOneMinuteMusicPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "BP_OnOneMinuteMusicPlayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerMusicManager.EnableDefaultState
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::EnableDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "EnableDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.HandleLeavingMenuState
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::HandleLeavingMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "HandleLeavingMenuState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.HandleMenuMusicSFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::HandleMenuMusicSFX(class UAkAudioEvent* EventToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "HandleMenuMusicSFX");

	Params::MarinerMusicManager_HandleMenuMusicSFX Parms{};

	Parms.EventToPlay = EventToPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnExtraTimeStarted
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnExtraTimeStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnExtraTimeStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnMatchInProgress
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnMatchInProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnMatchInProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnMatchPlayingIntro
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnMatchPlayingIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnMatchPlayingIntro");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnMatchPlayingOutro
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnMatchPlayingOutro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnMatchPlayingOutro");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnOvertimeStarted
// (Final, Native, Protected)

void UMarinerMusicManager::OnOvertimeStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnOvertimeStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnStartMatch
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnStartMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnTimeRemainingChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   TimeRemaining                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::OnTimeRemainingChanged(int32 TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnTimeRemainingChanged");

	Params::MarinerMusicManager_OnTimeRemainingChanged Parms{};

	Parms.TimeRemaining = TimeRemaining;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnTreasureSequenceEnd
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnTreasureSequenceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnTreasureSequenceEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.OnTreasureSequenceIncoming
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::OnTreasureSequenceIncoming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "OnTreasureSequenceIncoming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayCharacterCustomizationMusic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           SkinName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::PlayCharacterCustomizationMusic(const class FString& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayCharacterCustomizationMusic");

	Params::MarinerMusicManager_PlayCharacterCustomizationMusic Parms{};

	Parms.SkinName = std::move(SkinName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayDefeatMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayDefeatMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayDefeatMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayDrawMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayDrawMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayDrawMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayExtraTimeMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayExtraTimeMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayExtraTimeMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayLastStandMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayLastStandMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayLastStandMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayLobbyMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayLobbyMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayLobbyMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayMenuMusic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    EventToPlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::PlayMenuMusic(class UAkAudioEvent* EventToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayMenuMusic");

	Params::MarinerMusicManager_PlayMenuMusic Parms{};

	Parms.EventToPlay = EventToPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayOneMinuteMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayOneMinuteMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayOneMinuteMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayPriorityMusic
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    PriorityEvent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SetStateGroup                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SetState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::PlayPriorityMusic(class UAkAudioEvent* PriorityEvent, class FName SetStateGroup, class FName SetState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayPriorityMusic");

	Params::MarinerMusicManager_PlayPriorityMusic Parms{};

	Parms.PriorityEvent = PriorityEvent;
	Parms.SetStateGroup = SetStateGroup;
	Parms.SetState = SetState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayVictoryMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayVictoryMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayVictoryMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PlayWrapUpMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::PlayWrapUpMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PlayWrapUpMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.PostEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMusicManager::PostEvent(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PostEvent");

	Params::MarinerMusicManager_PostEvent Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMusicManager.PostTrackEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TrackID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMusicManager::PostTrackEvent(class FName TrackID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "PostTrackEvent");

	Params::MarinerMusicManager_PostTrackEvent Parms{};

	Parms.TrackID = TrackID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMusicManager.ReactToNewBallOwner
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMusicManager::ReactToNewBallOwner(const class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "ReactToNewBallOwner");

	Params::MarinerMusicManager_ReactToNewBallOwner Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.SetSilentState
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::SetSilentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "SetSilentState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.StartMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::StartMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "StartMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.StopPriorityMusic
// (Final, Native, Protected, BlueprintCallable)

void UMarinerMusicManager::StopPriorityMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "StopPriorityMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMusicManager.IsCurrentlyInGameplayMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMusicManager::IsCurrentlyInGameplayMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "IsCurrentlyInGameplayMap");

	Params::MarinerMusicManager_IsCurrentlyInGameplayMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMusicManager.IsPriorityMusicPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMusicManager::IsPriorityMusicPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMusicManager", "IsPriorityMusicPlaying");

	Params::MarinerMusicManager_IsPriorityMusicPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMiniRewardPreview.LoadItemData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMiniRewardPreview::LoadItemData(const struct FMangoItem& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMiniRewardPreview", "LoadItemData");

	Params::MarinerMiniRewardPreview_LoadItemData Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.AllowTeamToCapture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::AllowTeamToCapture(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "AllowTeamToCapture");

	Params::MarinerCaptureVolumeBase_AllowTeamToCapture Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.BlockTeamFromCapturing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::BlockTeamFromCapturing(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "BlockTeamFromCapturing");

	Params::MarinerCaptureVolumeBase_BlockTeamFromCapturing Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OnLocalCharacterChangedReality
// (Final, Native, Protected)
// Parameters:
// EMarinerRealityState                    OldReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerRealityState                    NewReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::OnLocalCharacterChangedReality(EMarinerRealityState OldReality, EMarinerRealityState NewReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OnLocalCharacterChangedReality");

	Params::MarinerCaptureVolumeBase_OnLocalCharacterChangedReality Parms{};

	Parms.OldReality = OldReality;
	Parms.NewReality = NewReality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OnRep_bShouldPlayCaptureProgressEffects
// (Native, Protected)

void UMarinerCaptureVolumeBase::OnRep_bShouldPlayCaptureProgressEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OnRep_bShouldPlayCaptureProgressEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OnRep_CapturingTeam
// (Final, Native, Protected)

void UMarinerCaptureVolumeBase::OnRep_CapturingTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OnRep_CapturingTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OnRep_IsContested
// (Final, Native, Protected)

void UMarinerCaptureVolumeBase::OnRep_IsContested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OnRep_IsContested");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OverlapBegin
// (Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::OverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OverlapBegin");

	Params::MarinerCaptureVolumeBase_OverlapBegin Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.OverlapEnd
// (Native, Protected)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::OverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "OverlapEnd");

	Params::MarinerCaptureVolumeBase_OverlapEnd Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.ResetCaptureState
// (Native, Public, BlueprintCallable)

void UMarinerCaptureVolumeBase::ResetCaptureState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "ResetCaptureState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.SetCaptureTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewCaptureTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::SetCaptureTime(float NewCaptureTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "SetCaptureTime");

	Params::MarinerCaptureVolumeBase_SetCaptureTime Parms{};

	Parms.NewCaptureTime = NewCaptureTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.SetIsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::SetIsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "SetIsEnabled");

	Params::MarinerCaptureVolumeBase_SetIsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.UpdateFastOverlaps
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMarinerFastCollisionComponent*>CurrentFastOverlaps                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerCaptureVolumeBase::UpdateFastOverlaps(const TArray<class UMarinerFastCollisionComponent*>& CurrentFastOverlaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "UpdateFastOverlaps");

	Params::MarinerCaptureVolumeBase_UpdateFastOverlaps Parms{};

	Parms.CurrentFastOverlaps = std::move(CurrentFastOverlaps);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolumeBase.GetCaptureTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCaptureVolumeBase::GetCaptureTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetCaptureTime");

	Params::MarinerCaptureVolumeBase_GetCaptureTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.GetCapturingTeamIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCaptureVolumeBase::GetCapturingTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetCapturingTeamIndex");

	Params::MarinerCaptureVolumeBase_GetCapturingTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.GetFirstOverlappingCharacterOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerCaptureVolumeBase::GetFirstOverlappingCharacterOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetFirstOverlappingCharacterOnTeam");

	Params::MarinerCaptureVolumeBase_GetFirstOverlappingCharacterOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.GetIsContested
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCaptureVolumeBase::GetIsContested() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetIsContested");

	Params::MarinerCaptureVolumeBase_GetIsContested Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.GetIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCaptureVolumeBase::GetIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetIsEnabled");

	Params::MarinerCaptureVolumeBase_GetIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.GetNumberOfCapturingCharactersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCaptureVolumeBase::GetNumberOfCapturingCharactersOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "GetNumberOfCapturingCharactersOnTeam");

	Params::MarinerCaptureVolumeBase_GetNumberOfCapturingCharactersOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.IsAllowedToCapture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCaptureVolumeBase::IsAllowedToCapture(int32 Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "IsAllowedToCapture");

	Params::MarinerCaptureVolumeBase_IsAllowedToCapture Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolumeBase.IsCharacterCurrentlyCapturing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                TestCharacter                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCaptureVolumeBase::IsCharacterCurrentlyCapturing(const class AMarinerCharacter* TestCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolumeBase", "IsCharacterCurrentlyCapturing");

	Params::MarinerCaptureVolumeBase_IsCharacterCurrentlyCapturing Parms{};

	Parms.TestCharacter = TestCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMultiTeamCaptureVolume.OnRep_CapturePercentageArray
// (Final, Native, Protected)

void UMarinerMultiTeamCaptureVolume::OnRep_CapturePercentageArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMultiTeamCaptureVolume", "OnRep_CapturePercentageArray");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMultiTeamCaptureVolume.GetCapturePercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerMultiTeamCaptureVolume::GetCapturePercentage(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMultiTeamCaptureVolume", "GetCapturePercentage");

	Params::MarinerMultiTeamCaptureVolume_GetCapturePercentage Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMultiTeamCaptureVolume.IsCaptured
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMultiTeamCaptureVolume::IsCaptured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMultiTeamCaptureVolume", "IsCaptured");

	Params::MarinerMultiTeamCaptureVolume_IsCaptured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerNumberedProgressBar.SetBarPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerNumberedProgressBar::SetBarPercentage(int32 NValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNumberedProgressBar", "SetBarPercentage");

	Params::MarinerNumberedProgressBar_SetBarPercentage Parms{};

	Parms.NValue = NValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerNumberedProgressBar.SetNumberValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerNumberedProgressBar::SetNumberValue(int32 NValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNumberedProgressBar", "SetNumberValue");

	Params::MarinerNumberedProgressBar_SetNumberValue Parms{};

	Parms.NValue = NValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerNarrationManager.QueueNarration
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NarrationText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSelected                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerNarrationManager::QueueNarration(const class FText& NarrationText, bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNarrationManager", "QueueNarration");

	Params::MarinerNarrationManager_QueueNarration Parms{};

	Parms.NarrationText = std::move(NarrationText);
	Parms.bSelected = bSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMoveUpdate_ApplyRecoveryDefaults.RequestApplyRecovery
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMoveUpdate_ApplyRecoveryDefaults>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideMaxSpeedClamp                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideResetJumps                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMoveUpdate_ApplyRecoveryDefaults::RequestApplyRecovery(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_ApplyRecoveryDefaults> Defaults, float OverrideMaxSpeedClamp, bool bOverrideResetJumps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMoveUpdate_ApplyRecoveryDefaults", "RequestApplyRecovery");

	Params::MarinerMoveUpdate_ApplyRecoveryDefaults_RequestApplyRecovery Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.Defaults = Defaults;
	Parms.OverrideMaxSpeedClamp = OverrideMaxSpeedClamp;
	Parms.bOverrideResetJumps = bOverrideResetJumps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.ApplyMoveAffectingGameplayEffectToSelf
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::ApplyMoveAffectingGameplayEffectToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "ApplyMoveAffectingGameplayEffectToSelf");

	Params::MarinerAbilitySystemComponent_ApplyMoveAffectingGameplayEffectToSelf Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.AuthorityTryActivateAbilityByClassWithAimData
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerAbility>      AbilityClassToGiveAndActivate                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbilitySystemComponent::AuthorityTryActivateAbilityByClassWithAimData(TSubclassOf<class UMarinerAbility> AbilityClassToGiveAndActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "AuthorityTryActivateAbilityByClassWithAimData");

	Params::MarinerAbilitySystemComponent_AuthorityTryActivateAbilityByClassWithAimData Parms{};

	Parms.AbilityClassToGiveAndActivate = AbilityClassToGiveAndActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.BP_TryActivateAbilityByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerAbility>      AbilityClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSendAimData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::BP_TryActivateAbilityByClass(TSubclassOf<class UMarinerAbility> AbilityClass, bool bSendAimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "BP_TryActivateAbilityByClass");

	Params::MarinerAbilitySystemComponent_BP_TryActivateAbilityByClass Parms{};

	Parms.AbilityClass = AbilityClass;
	Parms.bSendAimData = bSendAimData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.FindOrGiveAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UMarinerAbility>      GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AbilityLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAbilitySpecHandle UMarinerAbilitySystemComponent::FindOrGiveAbility(TSubclassOf<class UMarinerAbility> GameplayAbilityClass, int32 AbilityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "FindOrGiveAbility");

	Params::MarinerAbilitySystemComponent_FindOrGiveAbility Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;
	Parms.AbilityLevel = AbilityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.ForceCustomInputQueuingEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerAbility*                  AbilityInstance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::ForceCustomInputQueuingEvent(class UMarinerAbility* AbilityInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "ForceCustomInputQueuingEvent");

	Params::MarinerAbilitySystemComponent_ForceCustomInputQueuingEvent Parms{};

	Parms.AbilityInstance = AbilityInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.GetAbilityInstanceForAbilityClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UMarinerAbility>      GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayAbility* UMarinerAbilitySystemComponent::GetAbilityInstanceForAbilityClass(TSubclassOf<class UMarinerAbility> GameplayAbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetAbilityInstanceForAbilityClass");

	Params::MarinerAbilitySystemComponent_GetAbilityInstanceForAbilityClass Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetAllActivatableAbilitiesWithOwnedTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     OwnedTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGameplayAbilitySpec>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGameplayAbilitySpec> UMarinerAbilitySystemComponent::GetAllActivatableAbilitiesWithOwnedTag(const struct FGameplayTag& OwnedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetAllActivatableAbilitiesWithOwnedTag");

	Params::MarinerAbilitySystemComponent_GetAllActivatableAbilitiesWithOwnedTag Parms{};

	Parms.OwnedTag = std::move(OwnedTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetPredictedGameplayEffectCount
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UGameplayEffect>      SourceGameplayEffect                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          OptionalInstigatorFilterComponent                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutBaseCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutPendingApply                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutPendingRemove                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnforceOnGoingCheck                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::GetPredictedGameplayEffectCount(TSubclassOf<class UGameplayEffect> SourceGameplayEffect, class UAbilitySystemComponent* OptionalInstigatorFilterComponent, int32* OutBaseCount, int32* OutPendingApply, int32* OutPendingRemove, bool bEnforceOnGoingCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetPredictedGameplayEffectCount");

	Params::MarinerAbilitySystemComponent_GetPredictedGameplayEffectCount Parms{};

	Parms.SourceGameplayEffect = SourceGameplayEffect;
	Parms.OptionalInstigatorFilterComponent = OptionalInstigatorFilterComponent;
	Parms.bEnforceOnGoingCheck = bEnforceOnGoingCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBaseCount != nullptr)
		*OutBaseCount = Parms.OutBaseCount;

	if (OutPendingApply != nullptr)
		*OutPendingApply = Parms.OutPendingApply;

	if (OutPendingRemove != nullptr)
		*OutPendingRemove = Parms.OutPendingRemove;
}


// Function Mariner.MarinerAbilitySystemComponent.LocalTryActivateAbilityByClassWithAimData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerAbility>      AbilityClassToGiveAndActivate                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbilitySystemComponent::LocalTryActivateAbilityByClassWithAimData(TSubclassOf<class UMarinerAbility> AbilityClassToGiveAndActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "LocalTryActivateAbilityByClassWithAimData");

	Params::MarinerAbilitySystemComponent_LocalTryActivateAbilityByClassWithAimData Parms{};

	Parms.AbilityClassToGiveAndActivate = AbilityClassToGiveAndActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.ModifyActiveGameplayEffectDuration
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      Effect                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeInDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::ModifyActiveGameplayEffectDuration(TSubclassOf<class UGameplayEffect> Effect, float ChangeInDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "ModifyActiveGameplayEffectDuration");

	Params::MarinerAbilitySystemComponent_ModifyActiveGameplayEffectDuration Parms{};

	Parms.Effect = Effect;
	Parms.ChangeInDuration = ChangeInDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.OnAnyGameplayEffectRemoved
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FActiveGameplayEffect            RemovedEffect                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::OnAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& RemovedEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "OnAnyGameplayEffectRemoved");

	Params::MarinerAbilitySystemComponent_OnAnyGameplayEffectRemoved Parms{};

	Parms.RemovedEffect = std::move(RemovedEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.OnAnyGameplayTagChanged
// (Final, Native, Protected)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::OnAnyGameplayTagChanged(const struct FGameplayTag& Tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "OnAnyGameplayTagChanged");

	Params::MarinerAbilitySystemComponent_OnAnyGameplayTagChanged Parms{};

	Parms.Tag = std::move(Tag);
	Parms.NewCount = NewCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.OnOwnerDamageChanged
// (Final, Native, Public)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::OnOwnerDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "OnOwnerDamageChanged");

	Params::MarinerAbilitySystemComponent_OnOwnerDamageChanged Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.OnOwnerKnockedOut
// (Final, Native, Public)

void UMarinerAbilitySystemComponent::OnOwnerKnockedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "OnOwnerKnockedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.RemoveLocalGameplayEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilitySystemComponent*          InstigatorAbilitySystemComponent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StacksToRemove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::RemoveLocalGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect, class UAbilitySystemComponent* InstigatorAbilitySystemComponent, int32 StacksToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "RemoveLocalGameplayEffect");

	Params::MarinerAbilitySystemComponent_RemoveLocalGameplayEffect Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.InstigatorAbilitySystemComponent = InstigatorAbilitySystemComponent;
	Parms.StacksToRemove = StacksToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.RemoveMoveAffectingGameplayEffectFromSelf
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffectClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::RemoveMoveAffectingGameplayEffectFromSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "RemoveMoveAffectingGameplayEffectFromSelf");

	Params::MarinerAbilitySystemComponent_RemoveMoveAffectingGameplayEffectFromSelf Parms{};

	Parms.GameplayEffectClass = GameplayEffectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAbilitySystemComponent.TryActivateAbilityByGameplayTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GamplayAbilityTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbilitySystemComponent::TryActivateAbilityByGameplayTag(const struct FGameplayTag& GamplayAbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "TryActivateAbilityByGameplayTag");

	Params::MarinerAbilitySystemComponent_TryActivateAbilityByGameplayTag Parms{};

	Parms.GamplayAbilityTag = std::move(GamplayAbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetAbilityInstancesOfType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerAbility>      MarinerAbilityClass                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerAbility*>          OutAbilityInstances                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerAbilitySystemComponent::GetAbilityInstancesOfType(TSubclassOf<class UMarinerAbility> MarinerAbilityClass, TArray<class UMarinerAbility*>* OutAbilityInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetAbilityInstancesOfType");

	Params::MarinerAbilitySystemComponent_GetAbilityInstancesOfType Parms{};

	Parms.MarinerAbilityClass = MarinerAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAbilityInstances != nullptr)
		*OutAbilityInstances = std::move(Parms.OutAbilityInstances);
}


// Function Mariner.MarinerAbilitySystemComponent.GetAbilitySpecHandleForAbilityClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerAbility>      GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayAbilitySpecHandle UMarinerAbilitySystemComponent::GetAbilitySpecHandleForAbilityClass(TSubclassOf<class UMarinerAbility> GameplayAbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetAbilitySpecHandleForAbilityClass");

	Params::MarinerAbilitySystemComponent_GetAbilitySpecHandleForAbilityClass Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetGameplayEffectLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerAbilitySystemComponent::GetGameplayEffectLevel(TSubclassOf<class UGameplayEffect> GameplayEffect) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetGameplayEffectLevel");

	Params::MarinerAbilitySystemComponent_GetGameplayEffectLevel Parms{};

	Parms.GameplayEffect = GameplayEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetMarinerCharacterMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterMovement*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterMovement* UMarinerAbilitySystemComponent::GetMarinerCharacterMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetMarinerCharacterMovement");

	Params::MarinerAbilitySystemComponent_GetMarinerCharacterMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.GetMarinerCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerAbilitySystemComponent::GetMarinerCharacterOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "GetMarinerCharacterOwner");

	Params::MarinerAbilitySystemComponent_GetMarinerCharacterOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.HasAbilityOfType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerAbility>      GameplayAbilityClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbilitySystemComponent::HasAbilityOfType(TSubclassOf<class UMarinerAbility> GameplayAbilityClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "HasAbilityOfType");

	Params::MarinerAbilitySystemComponent_HasAbilityOfType Parms{};

	Parms.GameplayAbilityClass = GameplayAbilityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbilitySystemComponent.HasOwnerAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAbilitySystemComponent::HasOwnerAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbilitySystemComponent", "HasOwnerAuthority");

	Params::MarinerAbilitySystemComponent_HasOwnerAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerNetworkInformationWidget.OnShowNetworkInformationChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bStatus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerNetworkInformationWidget::OnShowNetworkInformationChanged(bool bStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNetworkInformationWidget", "OnShowNetworkInformationChanged");

	Params::MarinerNetworkInformationWidget_OnShowNetworkInformationChanged Parms{};

	Parms.bStatus = bStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStaticMeshProp.AuthoritySetShouldIgnoreImpulses
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShouldIgnoreImpulses                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerStaticMeshProp::AuthoritySetShouldIgnoreImpulses(bool bInShouldIgnoreImpulses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "AuthoritySetShouldIgnoreImpulses");

	Params::MarinerStaticMeshProp_AuthoritySetShouldIgnoreImpulses Parms{};

	Parms.bInShouldIgnoreImpulses = bInShouldIgnoreImpulses;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStaticMeshProp.OnFellOutOfWorld
// (Event, Protected, BlueprintEvent)

void AMarinerStaticMeshProp::OnFellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "OnFellOutOfWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerStaticMeshProp.OnRep_TeamIndex
// (Native, Protected)

void AMarinerStaticMeshProp::OnRep_TeamIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "OnRep_TeamIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStaticMeshProp.OnTeamChange
// (Event, Protected, BlueprintEvent)

void AMarinerStaticMeshProp::OnTeamChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "OnTeamChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerStaticMeshProp.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerStaticMeshProp::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "SetTeamIndex");

	Params::MarinerStaticMeshProp_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStaticMeshProp.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void AMarinerStaticMeshProp::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStaticMeshProp.BP_GetDamageableComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDamageableComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageableComponent* AMarinerStaticMeshProp::BP_GetDamageableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "BP_GetDamageableComponent");

	Params::MarinerStaticMeshProp_BP_GetDamageableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStaticMeshProp.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerStaticMeshProp::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStaticMeshProp", "GetTeamIndex");

	Params::MarinerStaticMeshProp_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAbsorbExplosionInterface.RespondToExplosionAbsorbed
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           ExplodeInstigator                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ExplosionHit                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerAbsorbExplosionInterface::RespondToExplosionAbsorbed(class AActor* ExplodeInstigator, const struct FHitResult& ExplosionHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAbsorbExplosionInterface", "RespondToExplosionAbsorbed");

	Params::MarinerAbsorbExplosionInterface_RespondToExplosionAbsorbed Parms{};

	Parms.ExplodeInstigator = ExplodeInstigator;
	Parms.ExplosionHit = std::move(ExplosionHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMessageBoxBase.BP_Populate
// (Event, Protected, BlueprintEvent)

void UMarinerMessageBoxBase::BP_Populate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxBase", "BP_Populate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerOfferListMessageBox.ButtonCallback
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOfferListMessageBox::ButtonCallback(class UMarinerLayeredButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferListMessageBox", "ButtonCallback");

	Params::MarinerOfferListMessageBox_ButtonCallback Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOfferListMessageBox.PopulateNativeOffer
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOfferListMessageBox::PopulateNativeOffer(class UMarinerLayeredButton* ButtonInstance, const class FString& OfferId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferListMessageBox", "PopulateNativeOffer");

	Params::MarinerOfferListMessageBox_PopulateNativeOffer Parms{};

	Parms.ButtonInstance = ButtonInstance;
	Parms.OfferId = std::move(OfferId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerOfferListMessageBox.PopulateOffer
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOfferListMessageBox::PopulateOffer(class UMarinerLayeredButton* ButtonInstance, const class FString& OfferId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferListMessageBox", "PopulateOffer");

	Params::MarinerOfferListMessageBox_PopulateOffer Parms{};

	Parms.ButtonInstance = ButtonInstance;
	Parms.OfferId = std::move(OfferId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerOfferListMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxOfferListDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxOfferListData UMarinerOfferListMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferListMessageBox", "GetData");

	Params::MarinerOfferListMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerNetworkGameplayCueActor.NetMulticast_HandleGameplayCue_AddAndWhileActive
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerNetworkGameplayCueActor::NetMulticast_HandleGameplayCue_AddAndWhileActive(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNetworkGameplayCueActor", "NetMulticast_HandleGameplayCue_AddAndWhileActive");

	Params::MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_AddAndWhileActive Parms{};

	Parms.TargetActor = TargetActor;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerNetworkGameplayCueActor.NetMulticast_HandleGameplayCue_Remove
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerNetworkGameplayCueActor::NetMulticast_HandleGameplayCue_Remove(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNetworkGameplayCueActor", "NetMulticast_HandleGameplayCue_Remove");

	Params::MarinerNetworkGameplayCueActor_NetMulticast_HandleGameplayCue_Remove Parms{};

	Parms.TargetActor = TargetActor;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDevice.AuthorityActivate
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                InInstigator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerActivationDevice::AuthorityActivate(class AMarinerCharacter* InInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "AuthorityActivate");

	Params::MarinerActivationDevice_AuthorityActivate Parms{};

	Parms.InInstigator = InInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDevice.EventPointDamage
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ShotFromDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerActivationDevice::EventPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "EventPointDamage");

	Params::MarinerActivationDevice_EventPointDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.ShotFromDirection = std::move(ShotFromDirection);
	Parms.DamageType = DamageType;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDevice.IsDeviceReadyToReset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerActivationDevice::IsDeviceReadyToReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "IsDeviceReadyToReset");

	Params::MarinerActivationDevice_IsDeviceReadyToReset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerActivationDevice.OnActivationComponentHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerActivationDevice::OnActivationComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "OnActivationComponentHit");

	Params::MarinerActivationDevice_OnActivationComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDevice.OnStateChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EMarinerActivationTargetState           InNewState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerActivationDevice::OnStateChanged(EMarinerActivationTargetState InNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "OnStateChanged");

	Params::MarinerActivationDevice_OnStateChanged Parms{};

	Parms.InNewState = InNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActivationDevice.BP_GetDamageableComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDamageableComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageableComponent* AMarinerActivationDevice::BP_GetDamageableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActivationDevice", "BP_GetDamageableComponent");

	Params::MarinerActivationDevice_BP_GetDamageableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerActiveItemWidget.OnItemSet
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      Icon                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerActiveItemWidget::OnItemSet(const struct FSlateBrush& Icon, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActiveItemWidget", "OnItemSet");

	Params::MarinerActiveItemWidget_OnItemSet Parms{};

	Parms.Icon = std::move(Icon);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerActiveItemWidget.SetItemWithDuration
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InOwningObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      Icon                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerActiveItemWidget::SetItemWithDuration(class UObject* InOwningObject, const struct FSlateBrush& Icon, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActiveItemWidget", "SetItemWithDuration");

	Params::MarinerActiveItemWidget_SetItemWithDuration Parms{};

	Parms.InOwningObject = InOwningObject;
	Parms.Icon = std::move(Icon);
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerActiveItemWidget.IsOwningObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerActiveItemWidget::IsOwningObject(class UObject* InObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerActiveItemWidget", "IsOwningObject");

	Params::MarinerActiveItemWidget_IsOwningObject Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.ActivateAbilityByAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::ActivateAbilityByAction(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "ActivateAbilityByAction");

	Params::MarinerAIController_ActivateAbilityByAction Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.ActivateAbilityByActionWithAimOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AimTargetOverride                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::ActivateAbilityByActionWithAimOverride(EMarinerInputActions InputAction, const struct FVector& AimTargetOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "ActivateAbilityByActionWithAimOverride");

	Params::MarinerAIController_ActivateAbilityByActionWithAimOverride Parms{};

	Parms.InputAction = InputAction;
	Parms.AimTargetOverride = std::move(AimTargetOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.ActivateAbilityByGameplayTag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GamplayAbilityTag                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::ActivateAbilityByGameplayTag(const struct FGameplayTag& GamplayAbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "ActivateAbilityByGameplayTag");

	Params::MarinerAIController_ActivateAbilityByGameplayTag Parms{};

	Parms.GamplayAbilityTag = std::move(GamplayAbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.FindClosestEnemy
// (Final, Native, Public, BlueprintCallable)

void AMarinerAIController::FindClosestEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "FindClosestEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.FindClosestEnemyInLOS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   LineOfSightRange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRequireLOS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::FindClosestEnemyInLOS(float LineOfSightRange, bool bRequireLOS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "FindClosestEnemyInLOS");

	Params::MarinerAIController_FindClosestEnemyInLOS Parms{};

	Parms.LineOfSightRange = LineOfSightRange;
	Parms.bRequireLOS = bRequireLOS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GenerateNewRandomRotationAimOffsets
// (Final, Native, Protected)

void AMarinerAIController::GenerateNewRandomRotationAimOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GenerateNewRandomRotationAimOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.GenerateNextRandomRotationAimOffset
// (Final, Native, Protected)

void AMarinerAIController::GenerateNextRandomRotationAimOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GenerateNextRandomRotationAimOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.OnOwnerDamageChanged
// (Final, Native, Public)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::OnOwnerDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "OnOwnerDamageChanged");

	Params::MarinerAIController_OnOwnerDamageChanged Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.OnPlayerStateInitEvent
// (Event, Protected, BlueprintEvent)

void AMarinerAIController::OnPlayerStateInitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "OnPlayerStateInitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAIController.PressAbilityInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldInstantRelease                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::PressAbilityInput(EMarinerInputActions InputAction, bool bShouldInstantRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "PressAbilityInput");

	Params::MarinerAIController_PressAbilityInput Parms{};

	Parms.InputAction = InputAction;
	Parms.bShouldInstantRelease = bShouldInstantRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.ReleaseAbilityInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::ReleaseAbilityInput(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "ReleaseAbilityInput");

	Params::MarinerAIController_ReleaseAbilityInput Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.SetCanRespawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCanRespawn                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::SetCanRespawn(bool bNewCanRespawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "SetCanRespawn");

	Params::MarinerAIController_SetCanRespawn Parms{};

	Parms.bNewCanRespawn = bNewCanRespawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.SetDormancy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewDormancy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::SetDormancy(bool bNewDormancy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "SetDormancy");

	Params::MarinerAIController_SetDormancy Parms{};

	Parms.bNewDormancy = bNewDormancy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.SetIsIndependent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsIndependent                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::SetIsIndependent(bool bNewIsIndependent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "SetIsIndependent");

	Params::MarinerAIController_SetIsIndependent Parms{};

	Parms.bNewIsIndependent = bNewIsIndependent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.SetObjectiveEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::SetObjectiveEnemy(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "SetObjectiveEnemy");

	Params::MarinerAIController_SetObjectiveEnemy Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.ShootTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BurstDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTryToUseSecondary                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerAIController::ShootTarget(float BurstDuration, bool bTryToUseSecondary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "ShootTarget");

	Params::MarinerAIController_ShootTarget Parms{};

	Parms.BurstDuration = BurstDuration;
	Parms.bTryToUseSecondary = bTryToUseSecondary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIController.GetActivationDevice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerActivationDevice*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerActivationDevice* AMarinerAIController::GetActivationDevice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetActivationDevice");

	Params::MarinerAIController_GetActivationDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetCurrentObjective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AMarinerAIController::GetCurrentObjective() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetCurrentObjective");

	Params::MarinerAIController_GetCurrentObjective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetDifficultyLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EBotDifficultyLevel               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EBotDifficultyLevel AMarinerAIController::GetDifficultyLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetDifficultyLevel");

	Params::MarinerAIController_GetDifficultyLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetItemToGrab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* AMarinerAIController::GetItemToGrab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetItemToGrab");

	Params::MarinerAIController_GetItemToGrab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetLocalEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerAIController::GetLocalEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetLocalEnemy");

	Params::MarinerAIController_GetLocalEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetObjectiveDestinationQuery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerAIController::GetObjectiveDestinationQuery() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetObjectiveDestinationQuery");

	Params::MarinerAIController_GetObjectiveDestinationQuery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetObjectiveEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerAIController::GetObjectiveEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetObjectiveEnemy");

	Params::MarinerAIController_GetObjectiveEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.GetObjectiveEnemyQuery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerAIController::GetObjectiveEnemyQuery() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "GetObjectiveEnemyQuery");

	Params::MarinerAIController_GetObjectiveEnemyQuery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.IsCurrentlyBurstFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::IsCurrentlyBurstFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "IsCurrentlyBurstFiring");

	Params::MarinerAIController_IsCurrentlyBurstFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIController.IsIndependent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerAIController::IsIndependent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIController", "IsIndependent");

	Params::MarinerAIController_IsIndependent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAIPathFollowingComponent.AbortMoveByOwner
// (Final, Native, Public, BlueprintCallable)

void UMarinerAIPathFollowingComponent::AbortMoveByOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "AbortMoveByOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIPathFollowingComponent.NotifyExternalLaunch
// (Final, Native, Public, BlueprintCallable)

void UMarinerAIPathFollowingComponent::NotifyExternalLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "NotifyExternalLaunch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIPathFollowingComponent.OnAnyLaunch
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          PostLaunchVelocity                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchContainedHostileImpulse                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchWasCritical                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAIPathFollowingComponent::OnAnyLaunch(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasCritical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "OnAnyLaunch");

	Params::MarinerAIPathFollowingComponent_OnAnyLaunch Parms{};

	Parms.PostLaunchVelocity = std::move(PostLaunchVelocity);
	Parms.bLaunchContainedHostileImpulse = bLaunchContainedHostileImpulse;
	Parms.bLaunchWasCritical = bLaunchWasCritical;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIPathFollowingComponent.OnMovementSuppressionTagCountChanged
// (Native, Public)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAIPathFollowingComponent::OnMovementSuppressionTagCountChanged(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "OnMovementSuppressionTagCountChanged");

	Params::MarinerAIPathFollowingComponent_OnMovementSuppressionTagCountChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIPathFollowingComponent.OnOwnerCharacterDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAIPathFollowingComponent::OnOwnerCharacterDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "OnOwnerCharacterDestroyed");

	Params::MarinerAIPathFollowingComponent_OnOwnerCharacterDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAIPathFollowingComponent.OnOwnerCharacterRecoveredAuthority
// (Final, Native, Public)
// Parameters:
// class AMarinerCharacter*                RecoveredCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAIPathFollowingComponent::OnOwnerCharacterRecoveredAuthority(class AMarinerCharacter* RecoveredCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAIPathFollowingComponent", "OnOwnerCharacterRecoveredAuthority");

	Params::MarinerAIPathFollowingComponent_OnOwnerCharacterRecoveredAuthority Parms{};

	Parms.RecoveredCharacter = RecoveredCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedProgressWidget.AnimateAdditional
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InLevelDelta                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPercentDelta                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDurationPerLevelSeconds                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InLevelDelaySeconds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFinalDelaySeconds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedProgressWidget::AnimateAdditional(int32 InLevelDelta, float InPercentDelta, float InDurationPerLevelSeconds, float InLevelDelaySeconds, float InFinalDelaySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "AnimateAdditional");

	Params::MarinerAnimatedProgressWidget_AnimateAdditional Parms{};

	Parms.InLevelDelta = InLevelDelta;
	Parms.InPercentDelta = InPercentDelta;
	Parms.InDurationPerLevelSeconds = InDurationPerLevelSeconds;
	Parms.InLevelDelaySeconds = InLevelDelaySeconds;
	Parms.InFinalDelaySeconds = InFinalDelaySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedProgressWidget.BPOnLevelDelayStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentLevelPercent                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedProgressWidget::BPOnLevelDelayStarted(int32 CurrentLevel, float CurrentLevelPercent, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "BPOnLevelDelayStarted");

	Params::MarinerAnimatedProgressWidget_BPOnLevelDelayStarted Parms{};

	Parms.CurrentLevel = CurrentLevel;
	Parms.CurrentLevelPercent = CurrentLevelPercent;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAnimatedProgressWidget.BPOnLevelSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsInit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentLevelPercent                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedProgressWidget::BPOnLevelSet(bool bIsInit, int32 CurrentLevel, float CurrentLevelPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "BPOnLevelSet");

	Params::MarinerAnimatedProgressWidget_BPOnLevelSet Parms{};

	Parms.bIsInit = bIsInit;
	Parms.CurrentLevel = CurrentLevel;
	Parms.CurrentLevelPercent = CurrentLevelPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAnimatedProgressWidget.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLevelMax                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedProgressWidget::Init(int32 InLevel, float InPercent, int32 InLevelMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "Init");

	Params::MarinerAnimatedProgressWidget_Init Parms{};

	Parms.InLevel = InLevel;
	Parms.InPercent = InPercent;
	Parms.InLevelMax = InLevelMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedProgressWidget.InitAndAnimate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InLevelStart                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InLevelStartPercent                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLevelEnd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InLevelEndPercent                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDurationPerLevelSeconds                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InLevelDelaySeconds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFinalDelaySeconds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLevelMax                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimatedProgressWidget::InitAndAnimate(int32 InLevelStart, float InLevelStartPercent, int32 InLevelEnd, float InLevelEndPercent, float InDurationPerLevelSeconds, float InLevelDelaySeconds, float InFinalDelaySeconds, int32 InLevelMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "InitAndAnimate");

	Params::MarinerAnimatedProgressWidget_InitAndAnimate Parms{};

	Parms.InLevelStart = InLevelStart;
	Parms.InLevelStartPercent = InLevelStartPercent;
	Parms.InLevelEnd = InLevelEnd;
	Parms.InLevelEndPercent = InLevelEndPercent;
	Parms.InDurationPerLevelSeconds = InDurationPerLevelSeconds;
	Parms.InLevelDelaySeconds = InLevelDelaySeconds;
	Parms.InFinalDelaySeconds = InFinalDelaySeconds;
	Parms.InLevelMax = InLevelMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimatedProgressWidget.GetAnimations
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerAnimatedProgressWidgetAnimationsReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerAnimatedProgressWidgetAnimations UMarinerAnimatedProgressWidget::GetAnimations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimatedProgressWidget", "GetAnimations");

	Params::MarinerAnimatedProgressWidget_GetAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimInstance.CalculateAnimation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YawInterpTime                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMoving                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFalling                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsStunned                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsReturningToArena                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        HorizontalRelativeSpeed                                (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AimPitch                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AimYaw                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SkeletonRotation                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EMarinerCardinalDirection               CardinalDirection                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NorthOffset                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SouthOffset                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EastOffset                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WestOffset                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YawOffset                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstance::CalculateAnimation(const class AMarinerCharacter* Character, const class USkeletalMeshComponent* SkeletalMesh, const float DeltaTime, const float YawInterpTime, bool& bIsMoving, bool& bIsFalling, bool& bIsStunned, bool& bIsReturningToArena, struct FVector2D& HorizontalRelativeSpeed, float& AimPitch, float& AimYaw, struct FVector& Velocity, struct FRotator& SkeletonRotation, EMarinerCardinalDirection& CardinalDirection, float& NorthOffset, float& SouthOffset, float& EastOffset, float& WestOffset, float& YawOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstance", "CalculateAnimation");

	Params::MarinerAnimInstance_CalculateAnimation Parms{};

	Parms.Character = Character;
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.DeltaTime = DeltaTime;
	Parms.YawInterpTime = YawInterpTime;
	Parms.bIsMoving = bIsMoving;
	Parms.bIsFalling = bIsFalling;
	Parms.bIsStunned = bIsStunned;
	Parms.bIsReturningToArena = bIsReturningToArena;
	Parms.HorizontalRelativeSpeed = std::move(HorizontalRelativeSpeed);
	Parms.AimPitch = AimPitch;
	Parms.AimYaw = AimYaw;
	Parms.Velocity = std::move(Velocity);
	Parms.SkeletonRotation = std::move(SkeletonRotation);
	Parms.CardinalDirection = CardinalDirection;
	Parms.NorthOffset = NorthOffset;
	Parms.SouthOffset = SouthOffset;
	Parms.EastOffset = EastOffset;
	Parms.WestOffset = WestOffset;
	Parms.YawOffset = YawOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	bIsMoving = Parms.bIsMoving;
	bIsFalling = Parms.bIsFalling;
	bIsStunned = Parms.bIsStunned;
	bIsReturningToArena = Parms.bIsReturningToArena;
	HorizontalRelativeSpeed = std::move(Parms.HorizontalRelativeSpeed);
	AimPitch = Parms.AimPitch;
	AimYaw = Parms.AimYaw;
	Velocity = std::move(Parms.Velocity);
	SkeletonRotation = std::move(Parms.SkeletonRotation);
	CardinalDirection = Parms.CardinalDirection;
	NorthOffset = Parms.NorthOffset;
	SouthOffset = Parms.SouthOffset;
	EastOffset = Parms.EastOffset;
	WestOffset = Parms.WestOffset;
	YawOffset = Parms.YawOffset;
}


// Function Mariner.MarinerAnimInstance.DoLegIKTrace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bFootRotates                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootWidth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootLength                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutDidFootHit                                         (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutEffectorLocation                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutEffectorRotation                                    (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutFootAlpha                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HeelSocket                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ToeSocket                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ForwardOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EffectorOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootTraceZOffset                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootTraceLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ToeTraceLength                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FKFootMaxHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      FootLiftCurve                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableIKTraceDebug                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstance::DoLegIKTrace(bool bFootRotates, float FootWidth, float FootLength, bool& bOutDidFootHit, struct FVector& OutEffectorLocation, struct FRotator& OutEffectorRotation, float& OutFootAlpha, const class USkeletalMeshComponent* SkeletalMesh, class FName HeelSocket, class FName ToeSocket, float ForwardOffset, const struct FVector& EffectorOffset, float FootTraceZOffset, float FootTraceLength, float ToeTraceLength, float FKFootMaxHeight, class UCurveFloat* FootLiftCurve, bool bEnableIKTraceDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstance", "DoLegIKTrace");

	Params::MarinerAnimInstance_DoLegIKTrace Parms{};

	Parms.bFootRotates = bFootRotates;
	Parms.FootWidth = FootWidth;
	Parms.FootLength = FootLength;
	Parms.bOutDidFootHit = bOutDidFootHit;
	Parms.OutEffectorLocation = std::move(OutEffectorLocation);
	Parms.OutEffectorRotation = std::move(OutEffectorRotation);
	Parms.OutFootAlpha = OutFootAlpha;
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.HeelSocket = HeelSocket;
	Parms.ToeSocket = ToeSocket;
	Parms.ForwardOffset = ForwardOffset;
	Parms.EffectorOffset = std::move(EffectorOffset);
	Parms.FootTraceZOffset = FootTraceZOffset;
	Parms.FootTraceLength = FootTraceLength;
	Parms.ToeTraceLength = ToeTraceLength;
	Parms.FKFootMaxHeight = FKFootMaxHeight;
	Parms.FootLiftCurve = FootLiftCurve;
	Parms.bEnableIKTraceDebug = bEnableIKTraceDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	bOutDidFootHit = Parms.bOutDidFootHit;
	OutEffectorLocation = std::move(Parms.OutEffectorLocation);
	OutEffectorRotation = std::move(Parms.OutEffectorRotation);
	OutFootAlpha = Parms.OutFootAlpha;
}


// Function Mariner.MarinerAnimInstance.CalculateLocomotionOffsets
// (Final, Native, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        HorizontalRelativeVelocity                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SkeletonRotation                                       (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsFalling                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCardinalDirection               CardinalDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NorthOffset                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SouthOffset                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EastOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WestOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstance::CalculateLocomotionOffsets(const class AMarinerCharacter* Character, const struct FVector& Velocity, const struct FVector2D& HorizontalRelativeVelocity, const float DeltaTime, struct FRotator& SkeletonRotation, bool& bIsFalling, EMarinerCardinalDirection* CardinalDirection, float* NorthOffset, float* SouthOffset, float* EastOffset, float* WestOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstance", "CalculateLocomotionOffsets");

	Params::MarinerAnimInstance_CalculateLocomotionOffsets Parms{};

	Parms.Character = Character;
	Parms.Velocity = std::move(Velocity);
	Parms.HorizontalRelativeVelocity = std::move(HorizontalRelativeVelocity);
	Parms.DeltaTime = DeltaTime;
	Parms.SkeletonRotation = std::move(SkeletonRotation);
	Parms.bIsFalling = bIsFalling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkeletonRotation = std::move(Parms.SkeletonRotation);
	bIsFalling = Parms.bIsFalling;

	if (CardinalDirection != nullptr)
		*CardinalDirection = Parms.CardinalDirection;

	if (NorthOffset != nullptr)
		*NorthOffset = Parms.NorthOffset;

	if (SouthOffset != nullptr)
		*SouthOffset = Parms.SouthOffset;

	if (EastOffset != nullptr)
		*EastOffset = Parms.EastOffset;

	if (WestOffset != nullptr)
		*WestOffset = Parms.WestOffset;
}


// Function Mariner.MarinerPhysicsLibrary.FindItemDropLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                DroppingCharacter                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DroppedItemActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SuggestedDropLocation                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         DropRotation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutBestDropLocation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPhysicsLibrary::FindItemDropLocation(class UObject* WorldContextObject, const class AMarinerCharacter* DroppingCharacter, class AActor* DroppedItemActor, const struct FVector& SuggestedDropLocation, const struct FRotator& DropRotation, struct FVector* OutBestDropLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPhysicsLibrary", "FindItemDropLocation");

	Params::MarinerPhysicsLibrary_FindItemDropLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DroppingCharacter = DroppingCharacter;
	Parms.DroppedItemActor = DroppedItemActor;
	Parms.SuggestedDropLocation = std::move(SuggestedDropLocation);
	Parms.DropRotation = std::move(DropRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBestDropLocation != nullptr)
		*OutBestDropLocation = std::move(Parms.OutBestDropLocation);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPhysicsLibrary.FindVisibleCharacters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                LookingCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RelativeTeam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxLookAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       CollisionChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetingTypes                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugDraw                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AMarinerCharacter*>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AMarinerCharacter*> UMarinerPhysicsLibrary::FindVisibleCharacters(class UObject* WorldContextObject, class AMarinerCharacter* LookingCharacter, int32 RelativeTeam, float MaxLookAngle, ECollisionChannel CollisionChannel, int32 TargetingTypes, bool bDebugDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPhysicsLibrary", "FindVisibleCharacters");

	Params::MarinerPhysicsLibrary_FindVisibleCharacters Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LookingCharacter = LookingCharacter;
	Parms.RelativeTeam = RelativeTeam;
	Parms.MaxLookAngle = MaxLookAngle;
	Parms.CollisionChannel = CollisionChannel;
	Parms.TargetingTypes = TargetingTypes;
	Parms.bDebugDraw = bDebugDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPhysicsLibrary.GetWorldGravityZ
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerPhysicsLibrary::GetWorldGravityZ(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPhysicsLibrary", "GetWorldGravityZ");

	Params::MarinerPhysicsLibrary_GetWorldGravityZ Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimInstance3rdPerson.CalculateAirLean
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   RelativeX                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RelativeY                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerAnimInstance3rdPerson::CalculateAirLean(float* RelativeX, float* RelativeY, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstance3rdPerson", "CalculateAirLean");

	Params::MarinerAnimInstance3rdPerson_CalculateAirLean Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RelativeX != nullptr)
		*RelativeX = Parms.RelativeX;

	if (RelativeY != nullptr)
		*RelativeY = Parms.RelativeY;

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function Mariner.MarinerAnimInstance3rdPerson.GetCardinalDirectionFromVector
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InVector                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCardinalDirection               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerCardinalDirection UMarinerAnimInstance3rdPerson::GetCardinalDirectionFromVector(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstance3rdPerson", "GetCardinalDirectionFromVector");

	Params::MarinerAnimInstance3rdPerson_GetCardinalDirectionFromVector Parms{};

	Parms.InVector = std::move(InVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAnimInstanceLite.MatchResultsDetermined
// (Final, Native, Private)

void UMarinerAnimInstanceLite::MatchResultsDetermined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "MatchResultsDetermined");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAnimInstanceLite.OnCharacterLockedIn
// (Event, Public, BlueprintEvent)

void UMarinerAnimInstanceLite::OnCharacterLockedIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "OnCharacterLockedIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAnimInstanceLite.OnCharacterSelectInMenu
// (Event, Public, BlueprintEvent)

void UMarinerAnimInstanceLite::OnCharacterSelectInMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "OnCharacterSelectInMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAnimInstanceLite.OnGameOutcomeDetermined
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHasWonOrDraw                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstanceLite::OnGameOutcomeDetermined(bool bHasWonOrDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "OnGameOutcomeDetermined");

	Params::MarinerAnimInstanceLite_OnGameOutcomeDetermined Parms{};

	Parms.bHasWonOrDraw = bHasWonOrDraw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAnimInstanceLite.OnMenuExit
// (Event, Public, BlueprintEvent)

void UMarinerAnimInstanceLite::OnMenuExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "OnMenuExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerAnimInstanceLite.OnPreviewAnimationRequested
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsReplayingLastAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstanceLite::OnPreviewAnimationRequested(bool bIsReplayingLastAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "OnPreviewAnimationRequested");

	Params::MarinerAnimInstanceLite_OnPreviewAnimationRequested Parms{};

	Parms.bIsReplayingLastAnimation = bIsReplayingLastAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerAnimInstanceLite.PregameStateChange
// (Final, Native, Private)
// Parameters:
// class FName                             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAnimInstanceLite::PregameStateChange(class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAnimInstanceLite", "PregameStateChange");

	Params::MarinerAnimInstanceLite_PregameStateChange Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPinGameModeWidget.OnOwningPlayerChangedTeams
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPinGameModeWidget::OnOwningPlayerChangedTeams(class AMarinerPlayerState* OwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPinGameModeWidget", "OnOwningPlayerChangedTeams");

	Params::MarinerPinGameModeWidget_OnOwningPlayerChangedTeams Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerPinGameModeWidget.SetTrackedPlayer
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPinGameModeWidget::SetTrackedPlayer(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPinGameModeWidget", "SetTrackedPlayer");

	Params::MarinerPinGameModeWidget_SetTrackedPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerOnboardingButton.OnGameVersionChanged
// (Final, Native, Private)
// Parameters:
// EMarinerGameVersion                     NewVersion                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOnboardingButton::OnGameVersionChanged(EMarinerGameVersion NewVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "OnGameVersionChanged");

	Params::MarinerOnboardingButton_OnGameVersionChanged Parms{};

	Parms.NewVersion = NewVersion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOnboardingButton.OnLockWidgetAnimationCompleted
// (Final, Native, Protected)
// Parameters:
// class UMarinerSingleAnimationWidget*    Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOnboardingButton::OnLockWidgetAnimationCompleted(class UMarinerSingleAnimationWidget* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "OnLockWidgetAnimationCompleted");

	Params::MarinerOnboardingButton_OnLockWidgetAnimationCompleted Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOnboardingButton.SetOnboardingState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerOnboardingPlaylistState         OnboardingPlaylistState                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOnboardingButton::SetOnboardingState(EMarinerOnboardingPlaylistState OnboardingPlaylistState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "SetOnboardingState");

	Params::MarinerOnboardingButton_SetOnboardingState Parms{};

	Parms.OnboardingPlaylistState = OnboardingPlaylistState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOnboardingButton.GetUnlockForType
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerPlaylistType                    OutType                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerOnboardingButton::GetUnlockForType(EMarinerPlaylistType* OutType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "GetUnlockForType");

	Params::MarinerOnboardingButton_GetUnlockForType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutType != nullptr)
		*OutType = Parms.OutType;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOnboardingButton.ShouldBeEnabled
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FText                             OutDisabledText                                        (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerOnboardingButton::ShouldBeEnabled(class FText* OutDisabledText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "ShouldBeEnabled");

	Params::MarinerOnboardingButton_ShouldBeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisabledText != nullptr)
		*OutDisabledText = std::move(Parms.OutDisabledText);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOnboardingButton.ShouldBeForceEnabled
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerOnboardingButton::ShouldBeForceEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOnboardingButton", "ShouldBeForceEnabled");

	Params::MarinerOnboardingButton_ShouldBeForceEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlaylistGroupButton.HandleSelected
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlaylistGroupButton::HandleSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGroupButton", "HandleSelected");

	Params::MarinerPlaylistGroupButton_HandleSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistGroupButton.OnAbandonmentPenaltyExpired
// (Final, Native, Private)

void UMarinerPlaylistGroupButton::OnAbandonmentPenaltyExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGroupButton", "OnAbandonmentPenaltyExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistGroupButton.OnPartyChanged
// (Final, Native, Private)

void UMarinerPlaylistGroupButton::OnPartyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGroupButton", "OnPartyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistGroupButton.HasLayerPresetButtons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPlaylistGroupButton::HasLayerPresetButtons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGroupButton", "HasLayerPresetButtons");

	Params::MarinerPlaylistGroupButton_HasLayerPresetButtons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePlayerController.ClientLoadMapRequest
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// class FString                           MapLoadName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBasePlayerController::ClientLoadMapRequest(const class FString& MapLoadName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "ClientLoadMapRequest");

	Params::MarinerBasePlayerController_ClientLoadMapRequest Parms{};

	Parms.MapLoadName = std::move(MapLoadName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePlayerController.PlayCameraShakeLocal
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraShake>         CameraShake                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraAnimPlaySpace                    PlaySpace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         UserPlaySpaceRot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerBasePlayerController::PlayCameraShakeLocal(TSubclassOf<class UCameraShake> CameraShake, float Scale, ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "PlayCameraShakeLocal");

	Params::MarinerBasePlayerController_PlayCameraShakeLocal Parms{};

	Parms.CameraShake = CameraShake;
	Parms.Scale = Scale;
	Parms.PlaySpace = PlaySpace;
	Parms.UserPlaySpaceRot = std::move(UserPlaySpaceRot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePlayerController.PlayForceFeedbackLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UForceFeedbackEffect*             ForceFeedbackEffect                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreTimeDilation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBasePlayerController::PlayForceFeedbackLocal(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "PlayForceFeedbackLocal");

	Params::MarinerBasePlayerController_PlayForceFeedbackLocal Parms{};

	Parms.ForceFeedbackEffect = ForceFeedbackEffect;
	Parms.bLooping = bLooping;
	Parms.bIgnoreTimeDilation = bIgnoreTimeDilation;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePlayerController.StopCameraShakeLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraShake>         Shake                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImmediately                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBasePlayerController::StopCameraShakeLocal(TSubclassOf<class UCameraShake> Shake, bool bImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "StopCameraShakeLocal");

	Params::MarinerBasePlayerController_StopCameraShakeLocal Parms{};

	Parms.Shake = Shake;
	Parms.bImmediately = bImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePlayerController.StopForceFeedbackLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UForceFeedbackEffect*             ForceFeedbackEffect                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBasePlayerController::StopForceFeedbackLocal(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "StopForceFeedbackLocal");

	Params::MarinerBasePlayerController_StopForceFeedbackLocal Parms{};

	Parms.ForceFeedbackEffect = ForceFeedbackEffect;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePlayerController.GetActiveInputType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerInputType AMarinerBasePlayerController::GetActiveInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePlayerController", "GetActiveInputType");

	Params::MarinerBasePlayerController_GetActiveInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.ApplyPerspective
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        Perspective                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ApplyPerspective(const class FName PerspectiveName, const struct FMarinerCameraPerspective& Perspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ApplyPerspective");

	Params::MarinerPlayerController_ApplyPerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;
	Parms.Perspective = std::move(Perspective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.BroadcastSpamMessageIfAppropriate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::BroadcastSpamMessageIfAppropriate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "BroadcastSpamMessageIfAppropriate");

	Params::MarinerPlayerController_BroadcastSpamMessageIfAppropriate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.ChangePerspective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ChangePerspective(const class FName PerspectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ChangePerspective");

	Params::MarinerPlayerController_ChangePerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClearAllSuppressionTags
// (Final, Native, Public, BlueprintCallable)

void AMarinerPlayerController::ClearAllSuppressionTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClearAllSuppressionTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClearSuppressionForTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagsToClear                                 (Parm, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClearSuppressionForTags(const struct FGameplayTagContainer& SuppressionTagsToClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClearSuppressionForTags");

	Params::MarinerPlayerController_ClearSuppressionForTags Parms{};

	Parms.SuppressionTagsToClear = std::move(SuppressionTagsToClear);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientAddCameraEffect
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TSubclassOf<class AEmitterCameraLensEffectBase>CameraEffect                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientAddCameraEffect(TSubclassOf<class AEmitterCameraLensEffectBase> CameraEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientAddCameraEffect");

	Params::MarinerPlayerController_ClientAddCameraEffect Parms{};

	Parms.CameraEffect = CameraEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientClearAllSuppressionTags
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void AMarinerPlayerController::ClientClearAllSuppressionTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientClearAllSuppressionTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientDisconnectAndLoadMainMenu
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bShowLoadingScreen                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientDisconnectAndLoadMainMenu(bool bShowLoadingScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientDisconnectAndLoadMainMenu");

	Params::MarinerPlayerController_ClientDisconnectAndLoadMainMenu Parms{};

	Parms.bShowLoadingScreen = bShowLoadingScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientGameStarted
// (Net, NetReliable, Native, Event, Public, NetClient)

void AMarinerPlayerController::ClientGameStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientGameStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientNotifyCausedDamage
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// TArray<struct FDamageNotificationPayload>DamageNotifications                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientNotifyCausedDamage(const TArray<struct FDamageNotificationPayload>& DamageNotifications)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientNotifyCausedDamage");

	Params::MarinerPlayerController_ClientNotifyCausedDamage Parms{};

	Parms.DamageNotifications = std::move(DamageNotifications);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientSetAllSuppressionTags
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// bool                                    bIsSuppressed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientSetAllSuppressionTags(bool bIsSuppressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientSetAllSuppressionTags");

	Params::MarinerPlayerController_ClientSetAllSuppressionTags Parms{};

	Parms.bIsSuppressed = bIsSuppressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientSetSpectatorCamera
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientSetSpectatorCamera");

	Params::MarinerPlayerController_ClientSetSpectatorCamera Parms{};

	Parms.CameraLocation = std::move(CameraLocation);
	Parms.CameraRotation = std::move(CameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ClientUpdateIdleBootTimeRemaining
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// float                                   IdleBootTimeRemaining                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientUpdateIdleBootTimeRemaining(float IdleBootTimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientUpdateIdleBootTimeRemaining");

	Params::MarinerPlayerController_ClientUpdateIdleBootTimeRemaining Parms{};

	Parms.IdleBootTimeRemaining = IdleBootTimeRemaining;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.FindPerspective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerCameraPerspective AMarinerPlayerController::FindPerspective(const class FName PerspectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "FindPerspective");

	Params::MarinerPlayerController_FindPerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.ForceDangerZoneState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bForced                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ForceDangerZoneState(bool bForced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ForceDangerZoneState");

	Params::MarinerPlayerController_ForceDangerZoneState Parms{};

	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.IdleBootTimeRemainingClientUpdate
// (Final, Native, Private)

void AMarinerPlayerController::IdleBootTimeRemainingClientUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "IdleBootTimeRemainingClientUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.IsInGameMenuEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::IsInGameMenuEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "IsInGameMenuEnabled");

	Params::MarinerPlayerController_IsInGameMenuEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.OnChatWheelDown
// (Final, Native, Public)

void AMarinerPlayerController::OnChatWheelDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnChatWheelDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnChatWheelLeft
// (Final, Native, Public)

void AMarinerPlayerController::OnChatWheelLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnChatWheelLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnChatWheelRight
// (Final, Native, Public)

void AMarinerPlayerController::OnChatWheelRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnChatWheelRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnChatWheelUp
// (Final, Native, Public)

void AMarinerPlayerController::OnChatWheelUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnChatWheelUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnPawnRocketJump
// (Final, Native, Protected)

void AMarinerPlayerController::OnPawnRocketJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnPawnRocketJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnRep_AuthoritativeEndChatLockTimestamp
// (Final, Native, Protected)
// Parameters:
// float                                   OldAuthEndChatLockTimestamp                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::OnRep_AuthoritativeEndChatLockTimestamp(float OldAuthEndChatLockTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnRep_AuthoritativeEndChatLockTimestamp");

	Params::MarinerPlayerController_OnRep_AuthoritativeEndChatLockTimestamp Parms{};

	Parms.OldAuthEndChatLockTimestamp = OldAuthEndChatLockTimestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.OnRep_VoiceChatTeamChannel
// (Final, Native, Protected)

void AMarinerPlayerController::OnRep_VoiceChatTeamChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "OnRep_VoiceChatTeamChannel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ReactToPlayerChangedTeam
// (Final, Native, Public)
// Parameters:
// class AMarinerPlayerState*              PlayerChangedTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ReactToPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ReactToPlayerChangedTeam");

	Params::MarinerPlayerController_ReactToPlayerChangedTeam Parms{};

	Parms.PlayerChangedTeam = PlayerChangedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.Server_NotifyDoneLoadingCharacters
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AMarinerPlayerController::Server_NotifyDoneLoadingCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "Server_NotifyDoneLoadingCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.Server_NotifyLocalPawnReplicated
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AMarinerPlayerController::Server_NotifyLocalPawnReplicated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "Server_NotifyLocalPawnReplicated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerBroadcastPlayerToPlayerMessage
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class UMarinerLocalMessage> Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ServerBroadcastPlayerToPlayerMessage(TSubclassOf<class UMarinerLocalMessage> Message, class APlayerState* RelatedPlayerState, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerBroadcastPlayerToPlayerMessage");

	Params::MarinerPlayerController_ServerBroadcastPlayerToPlayerMessage Parms{};

	Parms.Message = Message;
	Parms.RelatedPlayerState = RelatedPlayerState;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerCheat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ServerCheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerCheat");

	Params::MarinerPlayerController_ServerCheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerFinishMatch
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void AMarinerPlayerController::ServerFinishMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerFinishMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerResetIdleBootTimer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void AMarinerPlayerController::ServerResetIdleBootTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerResetIdleBootTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerSetActiveInputType
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// EPlayerInputType                        NewClientActiveInputType                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ServerSetActiveInputType(EPlayerInputType NewClientActiveInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerSetActiveInputType");

	Params::MarinerPlayerController_ServerSetActiveInputType Parms{};

	Parms.NewClientActiveInputType = NewClientActiveInputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.ServerSuicide
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AMarinerPlayerController::ServerSuicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ServerSuicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.SetAllSuppressionTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsSuppressed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::SetAllSuppressionTags(bool bIsSuppressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "SetAllSuppressionTags");

	Params::MarinerPlayerController_SetAllSuppressionTags Parms{};

	Parms.bIsSuppressed = bIsSuppressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.SetSuppressionTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagToSet                                    (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsSuppressed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::SetSuppressionTags(const struct FGameplayTagContainer& SuppressionTagToSet, bool bIsSuppressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "SetSuppressionTags");

	Params::MarinerPlayerController_SetSuppressionTags Parms{};

	Parms.SuppressionTagToSet = std::move(SuppressionTagToSet);
	Parms.bIsSuppressed = bIsSuppressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.SimulateInputKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::SimulateInputKey(const struct FKey& Key, bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "SimulateInputKey");

	Params::MarinerPlayerController_SimulateInputKey Parms{};

	Parms.Key = std::move(Key);
	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.Suicide
// (Final, Exec, Native, Protected)

void AMarinerPlayerController::Suicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "Suicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.TryToBroadcastTeamChatMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerLocalMessage> Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::TryToBroadcastTeamChatMessage(TSubclassOf<class UMarinerLocalMessage> Message, class APlayerState* RelatedPlayerState, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "TryToBroadcastTeamChatMessage");

	Params::MarinerPlayerController_TryToBroadcastTeamChatMessage Parms{};

	Parms.Message = Message;
	Parms.RelatedPlayerState = RelatedPlayerState;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.CanFinishMatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::CanFinishMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "CanFinishMatch");

	Params::MarinerPlayerController_CanFinishMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.ClientSetHUDState
// (Net, NetReliable, Native, Event, Public, NetClient, Const)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     HUDState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::ClientSetHUDState(TSubclassOf<class UMarinerHUDState> HUDState, bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "ClientSetHUDState");

	Params::MarinerPlayerController_ClientSetHUDState Parms{};

	Parms.HUDState = HUDState;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerController.GetAllowUseChatWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::GetAllowUseChatWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "GetAllowUseChatWheel");

	Params::MarinerPlayerController_GetAllowUseChatWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.GetArtifactComponent
// (Final, Native, Public, Const)
// Parameters:
// class UMarinerArtifactComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerArtifactComponent* AMarinerPlayerController::GetArtifactComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "GetArtifactComponent");

	Params::MarinerPlayerController_GetArtifactComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.GetDefaultPerspective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerCameraPerspectiveType           CameraType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerCameraPerspective AMarinerPlayerController::GetDefaultPerspective(EMarinerCameraPerspectiveType CameraType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "GetDefaultPerspective");

	Params::MarinerPlayerController_GetDefaultPerspective Parms{};

	Parms.CameraType = CameraType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.HasAnyGivenSuppressionTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagsToCheck                                 (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerController::HasAnyGivenSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "HasAnyGivenSuppressionTags");

	Params::MarinerPlayerController_HasAnyGivenSuppressionTags Parms{};

	Parms.SuppressionTagsToCheck = std::move(SuppressionTagsToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerController.SetHUDState
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     HUDState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerController::SetHUDState(TSubclassOf<class UMarinerHUDState> HUDState, bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerController", "SetHUDState");

	Params::MarinerPlayerController_SetHUDState Parms{};

	Parms.HUDState = HUDState;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPickup.OnPickedUpEvent
// (Event, Protected, BlueprintEvent)

void AMarinerPickup::OnPickedUpEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPickup", "OnPickedUpEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerPickup.OnRep_IsActive
// (Final, Native, Protected)

void AMarinerPickup::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPickup", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPickup.OnRespawnEvent
// (Event, Protected, BlueprintEvent)

void AMarinerPickup::OnRespawnEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPickup", "OnRespawnEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnOrigin
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class AMarinerCharacter*                Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerArenaReturnTargetComparer::CalcReturnOrigin(const class AMarinerCharacter* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "CalcReturnOrigin");

	Params::MarinerArenaReturnTargetComparer_CalcReturnOrigin Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnTargetFitnessScore
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnTarget*        Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerArenaReturnTargetComparer::CalcReturnTargetFitnessScore(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "CalcReturnTargetFitnessScore");

	Params::MarinerArenaReturnTargetComparer_CalcReturnTargetFitnessScore Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.CalcReturnZoneFitnessScore
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnZone*          Zone                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerArenaReturnTargetComparer::CalcReturnZoneFitnessScore(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "CalcReturnZoneFitnessScore");

	Params::MarinerArenaReturnTargetComparer_CalcReturnZoneFitnessScore Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.ShouldDiscardReturnTarget
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnTarget*        Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerArenaReturnTargetComparer::ShouldDiscardReturnTarget(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "ShouldDiscardReturnTarget");

	Params::MarinerArenaReturnTargetComparer_ShouldDiscardReturnTarget Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.ShouldDiscardReturnZone
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnZone*          Zone                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerArenaReturnTargetComparer::ShouldDiscardReturnZone(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "ShouldDiscardReturnZone");

	Params::MarinerArenaReturnTargetComparer_ShouldDiscardReturnZone Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.ShouldPrioritizeReturnTarget
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnTarget*        Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerArenaReturnTargetComparer::ShouldPrioritizeReturnTarget(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnTarget* Target) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "ShouldPrioritizeReturnTarget");

	Params::MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnTarget Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnTargetComparer.ShouldPrioritizeReturnZone
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturningCharacterTeamIndex                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerArenaReturnZone*          Zone                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerArenaReturnTargetComparer::ShouldPrioritizeReturnZone(const struct FVector& ReturnLocation, const int32 ReturningCharacterTeamIndex, const class AMarinerArenaReturnZone* Zone) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnTargetComparer", "ShouldPrioritizeReturnZone");

	Params::MarinerArenaReturnTargetComparer_ShouldPrioritizeReturnZone Parms{};

	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.ReturningCharacterTeamIndex = ReturningCharacterTeamIndex;
	Parms.Zone = Zone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnZone.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerArenaReturnZone::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "OnBeginOverlap");

	Params::MarinerArenaReturnZone_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnZone.OnCharacterPendingReturnDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerArenaReturnZone::OnCharacterPendingReturnDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "OnCharacterPendingReturnDestroyed");

	Params::MarinerArenaReturnZone_OnCharacterPendingReturnDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnZone.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerArenaReturnZone::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "OnEndOverlap");

	Params::MarinerArenaReturnZone_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComponent = OtherComponent;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArenaReturnZone.GetPlayerCountNotOnTeamInZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerArenaReturnZone::GetPlayerCountNotOnTeamInZone(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "GetPlayerCountNotOnTeamInZone");

	Params::MarinerArenaReturnZone_GetPlayerCountNotOnTeamInZone Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnZone.GetPlayerCountOnTeamInZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerArenaReturnZone::GetPlayerCountOnTeamInZone(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "GetPlayerCountOnTeamInZone");

	Params::MarinerArenaReturnZone_GetPlayerCountOnTeamInZone Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArenaReturnZone.GetTotalPlayerCountInZone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerArenaReturnZone::GetTotalPlayerCountInZone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArenaReturnZone", "GetTotalPlayerCountInZone");

	Params::MarinerArenaReturnZone_GetTotalPlayerCountInZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlaylistButton.HandleSelected
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlaylistButton::HandleSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "HandleSelected");

	Params::MarinerPlaylistButton_HandleSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistButton.OnAbandonmentPenaltyExpired
// (Final, Native, Private)

void UMarinerPlaylistButton::OnAbandonmentPenaltyExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "OnAbandonmentPenaltyExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistButton.OnPartyChanged
// (Final, Native, Private)

void UMarinerPlaylistButton::OnPartyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "OnPartyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistButton.OnPlaylistExpired
// (Final, Native, Private)

void UMarinerPlaylistButton::OnPlaylistExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "OnPlaylistExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistButton.OnProfileUpdated
// (Final, Native, Private)

void UMarinerPlaylistButton::OnProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "OnProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistButton.SetPlaylist
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPlaylist                   InPlaylist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerOnboardingPlaylistState         OnboardingPlaylistState                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlaylistButton::SetPlaylist(const struct FMangoPlaylist& InPlaylist, EMarinerOnboardingPlaylistState OnboardingPlaylistState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistButton", "SetPlaylist");

	Params::MarinerPlaylistButton_SetPlaylist Parms{};

	Parms.InPlaylist = std::move(InPlaylist);
	Parms.OnboardingPlaylistState = OnboardingPlaylistState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.ApplyArtifactEffectAndAbility
// (Final, Native, Private)
// Parameters:
// class UMarinerArtifactDataAsset*        ArtifactDataAsset                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactComponent::ApplyArtifactEffectAndAbility(const class UMarinerArtifactDataAsset* ArtifactDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "ApplyArtifactEffectAndAbility");

	Params::MarinerArtifactComponent_ApplyArtifactEffectAndAbility Parms{};

	Parms.ArtifactDataAsset = ArtifactDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.ClientNotifyArtifactEventProcessed
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class UMarinerArtifactDataAsset*        ArtifactData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArtifactEventTypes                     EventType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayEffect*                  AppliedEffect                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameplayEffectDurationType             DurationType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationMagnitude                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactComponent::ClientNotifyArtifactEventProcessed(const class UMarinerArtifactDataAsset* ArtifactData, const EArtifactEventTypes EventType, const class UGameplayEffect* AppliedEffect, const EGameplayEffectDurationType DurationType, const float DurationMagnitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "ClientNotifyArtifactEventProcessed");

	Params::MarinerArtifactComponent_ClientNotifyArtifactEventProcessed Parms{};

	Parms.ArtifactData = ArtifactData;
	Parms.EventType = EventType;
	Parms.AppliedEffect = AppliedEffect;
	Parms.DurationType = DurationType;
	Parms.DurationMagnitude = DurationMagnitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.ClientNotifyArtifactsLoaded
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UMarinerArtifactComponent::ClientNotifyArtifactsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "ClientNotifyArtifactsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.DebugDisplayArtifacts
// (Final, Native, Public)

void UMarinerArtifactComponent::DebugDisplayArtifacts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "DebugDisplayArtifacts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.DebugSetArtifactLevel
// (Final, Native, Public)
// Parameters:
// int32                                   ArtifactLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactComponent::DebugSetArtifactLevel(int32 ArtifactLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "DebugSetArtifactLevel");

	Params::MarinerArtifactComponent_DebugSetArtifactLevel Parms{};

	Parms.ArtifactLevel = ArtifactLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.OnArtifactDataLoaded
// (Final, Native, Private)

void UMarinerArtifactComponent::OnArtifactDataLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "OnArtifactDataLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.OnOwnerDamageAttributeChange
// (Final, Native, Private)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAmount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactComponent::OnOwnerDamageAttributeChange(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAmount, float OldAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "OnOwnerDamageAttributeChange");

	Params::MarinerArtifactComponent_OnOwnerDamageAttributeChange Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.NewAmount = NewAmount;
	Parms.OldAmount = OldAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.OnOwnerEnteredMegablastDanger
// (Final, Native, Private)

void UMarinerArtifactComponent::OnOwnerEnteredMegablastDanger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "OnOwnerEnteredMegablastDanger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.OnOwnerPlayerStateInitiated
// (Final, Native, Private)

void UMarinerArtifactComponent::OnOwnerPlayerStateInitiated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "OnOwnerPlayerStateInitiated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactComponent.OnOwnerPossessPawn
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         PossessingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            PossessedPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactComponent::OnOwnerPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactComponent", "OnOwnerPossessPawn");

	Params::MarinerArtifactComponent_OnOwnerPossessPawn Parms{};

	Parms.PossessingController = PossessingController;
	Parms.PossessedPawn = PossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameMenuStack.OnIntermissionEnded
// (Final, Native, Private)

void UMarinerPostGameMenuStack::OnIntermissionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameMenuStack", "OnIntermissionEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactDataAsset.LoadArtifactIconForLevelAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Level, class UTexture2D* ArtifactUIData)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerArtifactDataAsset::LoadArtifactIconForLevelAsync(const int32 Level, const TDelegate<void(int32 Level, class UTexture2D* ArtifactUIData)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "LoadArtifactIconForLevelAsync");

	Params::MarinerArtifactDataAsset_LoadArtifactIconForLevelAsync Parms{};

	Parms.Level = Level;
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactDataAsset.GetAbilityModifiers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FCurveTableRowHandle>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FCurveTableRowHandle> UMarinerArtifactDataAsset::GetAbilityModifiers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "GetAbilityModifiers");

	Params::MarinerArtifactDataAsset_GetAbilityModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactDataAsset.GetArtifactImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UMarinerArtifactDataAsset::GetArtifactImage(int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "GetArtifactImage");

	Params::MarinerArtifactDataAsset_GetArtifactImage Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactDataAsset.GetOwningCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerArtifactDataAsset::GetOwningCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "GetOwningCharacter");

	Params::MarinerArtifactDataAsset_GetOwningCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactDataAsset.GetUIDataForLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerArtifactUIData           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerArtifactUIData UMarinerArtifactDataAsset::GetUIDataForLevel(int32 Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "GetUIDataForLevel");

	Params::MarinerArtifactDataAsset_GetUIDataForLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactDataAsset.GetUIDataForRanked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMarinerArtifactUIData           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerArtifactUIData UMarinerArtifactDataAsset::GetUIDataForRanked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactDataAsset", "GetUIDataForRanked");

	Params::MarinerArtifactDataAsset_GetUIDataForRanked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnAddFriendSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnAddFriendSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnAddFriendSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnInviteToPartySelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnInviteToPartySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnInviteToPartySelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnPlayerMuted
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnPlayerMuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnPlayerMuted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnPlayerUnMuted
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnPlayerUnMuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnPlayerUnMuted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnReportPlayerCheatsSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnReportPlayerCheatsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnReportPlayerCheatsSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnReportPlayerGriefingSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnReportPlayerGriefingSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnReportPlayerGriefingSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnReportPlayerInappropriateSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnReportPlayerInappropriateSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnReportPlayerInappropriateSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnReportPlayerOffensiveSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnReportPlayerOffensiveSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnReportPlayerOffensiveSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerPostGameWidget.OnViewProfileSelected
// (Final, Native, Protected)

void UMarinerPlayerPostGameWidget::OnViewProfileSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerPostGameWidget", "OnViewProfileSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerModeSelectMenu.OnModeHighlighted
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerModeSelectMenu::OnModeHighlighted(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeSelectMenu", "OnModeHighlighted");

	Params::MarinerModeSelectMenu_OnModeHighlighted Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerModeSelectMenu.OnModeSelected
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerModeSelectMenu::OnModeSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeSelectMenu", "OnModeSelected");

	Params::MarinerModeSelectMenu_OnModeSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerModeSelectMenu.OnModeUnhighlighted
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerModeSelectMenu::OnModeUnhighlighted(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeSelectMenu", "OnModeUnhighlighted");

	Params::MarinerModeSelectMenu_OnModeUnhighlighted Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerArtifactPostGameWidget.Init
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMangoItemResult>         ItemResults                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerArtifactPostGameWidget::Init(const TArray<struct FMangoItemResult>& ItemResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactPostGameWidget", "Init");

	Params::MarinerArtifactPostGameWidget_Init Parms{};

	Parms.ItemResults = std::move(ItemResults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMessageBoxManager.BackgroundAnimatedOut
// (Final, Native, Private)
// Parameters:
// class UMarinerAnimatedWidget*           Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMessageBoxManager::BackgroundAnimatedOut(class UMarinerAnimatedWidget* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "BackgroundAnimatedOut");

	Params::MarinerMessageBoxManager_BackgroundAnimatedOut Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.MessageBoxAnimatedOut
// (Final, Native, Private)
// Parameters:
// class UMarinerAnimatedWidget*           Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMessageBoxManager::MessageBoxAnimatedOut(class UMarinerAnimatedWidget* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "MessageBoxAnimatedOut");

	Params::MarinerMessageBoxManager_MessageBoxAnimatedOut Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.RemoveMessageBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMessageBoxManager::RemoveMessageBox(int32 MessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "RemoveMessageBox");

	Params::MarinerMessageBoxManager_RemoveMessageBox Parms{};

	Parms.MessageId = MessageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowBlastPassOfferMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxBlastPassOfferDataMessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowBlastPassOfferMessageBox(const struct FMarinerMessageBoxBlastPassOfferData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowBlastPassOfferMessageBox");

	Params::MarinerMessageBoxManager_ShowBlastPassOfferMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowBlastPassTierPurchaseMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxBlastPassTierPurchaseDataMessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowBlastPassTierPurchaseMessageBox(const struct FMarinerMessageBoxBlastPassTierPurchaseData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowBlastPassTierPurchaseMessageBox");

	Params::MarinerMessageBoxManager_ShowBlastPassTierPurchaseMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxData           MessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowMessageBox(const struct FMarinerMessageBoxData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowMessageBox");

	Params::MarinerMessageBoxManager_ShowMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowNativePurchaseMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxNativePurchaseDataMessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowNativePurchaseMessageBox(const struct FMarinerMessageBoxNativePurchaseData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowNativePurchaseMessageBox");

	Params::MarinerMessageBoxManager_ShowNativePurchaseMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowOfferListMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxOfferListData  MessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowOfferListMessageBox(const struct FMarinerMessageBoxOfferListData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowOfferListMessageBox");

	Params::MarinerMessageBoxManager_ShowOfferListMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowOptionListMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxOptionListData MessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowOptionListMessageBox(const struct FMarinerMessageBoxOptionListData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowOptionListMessageBox");

	Params::MarinerMessageBoxManager_ShowOptionListMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowOrderDetailsMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxOrderDetailsDataMessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowOrderDetailsMessageBox(const struct FMarinerMessageBoxOrderDetailsData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowOrderDetailsMessageBox");

	Params::MarinerMessageBoxManager_ShowOrderDetailsMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowPurchaseMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxPurchaseData   MessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowPurchaseMessageBox(const struct FMarinerMessageBoxPurchaseData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowPurchaseMessageBox");

	Params::MarinerMessageBoxManager_ShowPurchaseMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.ShowQuestRewardMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxQuestRewardDataMessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMessageBoxManager::ShowQuestRewardMessageBox(const struct FMarinerMessageBoxQuestRewardData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "ShowQuestRewardMessageBox");

	Params::MarinerMessageBoxManager_ShowQuestRewardMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMessageBoxManager.IsMessageBoxIdActiveOrPending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMessageBoxManager::IsMessageBoxIdActiveOrPending(int32 MessageId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBoxManager", "IsMessageBoxIdActiveOrPending");

	Params::MarinerMessageBoxManager_IsMessageBoxIdActiveOrPending Parms{};

	Parms.MessageId = MessageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerArtifactsSubMenuButton.OnArtifactPresetChanged
// (Final, Native, Public)
// Parameters:
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerArtifactsSubMenuButton::OnArtifactPresetChanged(bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerArtifactsSubMenuButton", "OnArtifactPresetChanged");

	Params::MarinerArtifactsSubMenuButton_OnArtifactPresetChanged Parms{};

	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerModeGlobals.GetCurrentModeData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerModeDataAsset*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerModeDataAsset* UMarinerModeGlobals::GetCurrentModeData(const class UObject* WorldContextObject, bool* bIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "GetCurrentModeData");

	Params::MarinerModeGlobals_GetCurrentModeData Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.GetCurrentModeDescription
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerModeGlobals::GetCurrentModeDescription(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "GetCurrentModeDescription");

	Params::MarinerModeGlobals_GetCurrentModeDescription Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.GetCurrentModeName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerModeGlobals::GetCurrentModeName(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "GetCurrentModeName");

	Params::MarinerModeGlobals_GetCurrentModeName Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.IsModeValid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            CmsId                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerModeGlobals::IsModeValid(const class UObject* WorldContextObject, const struct FGuid& CmsId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "IsModeValid");

	Params::MarinerModeGlobals_IsModeValid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CmsId = std::move(CmsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.TryAndGetMangoModeFromCurrentMode
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMangoMode                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoMode UMarinerModeGlobals::TryAndGetMangoModeFromCurrentMode(const class UObject* WorldContextObject, bool* bIsValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "TryAndGetMangoModeFromCurrentMode");

	Params::MarinerModeGlobals_TryAndGetMangoModeFromCurrentMode Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.TryAndGetMangoModeFromLoadName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LoadName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMangoMode                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoMode UMarinerModeGlobals::TryAndGetMangoModeFromLoadName(const class UObject* WorldContextObject, const class FString& LoadName, bool* bIsValid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "TryAndGetMangoModeFromLoadName");

	Params::MarinerModeGlobals_TryAndGetMangoModeFromLoadName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LoadName = std::move(LoadName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.TryAndGetModeDataByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerModeDataAsset*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerModeDataAsset* UMarinerModeGlobals::TryAndGetModeDataByClass(class UClass* Param_Class) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "TryAndGetModeDataByClass");

	Params::MarinerModeGlobals_TryAndGetModeDataByClass Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeGlobals.TryAndGetModeDataFromLoadName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LoadName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerModeDataAsset*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerModeDataAsset* UMarinerModeGlobals::TryAndGetModeDataFromLoadName(const class FString& LoadName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeGlobals", "TryAndGetModeDataFromLoadName");

	Params::MarinerModeGlobals_TryAndGetModeDataFromLoadName Parms{};

	Parms.LoadName = std::move(LoadName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncFlowItemPopups.BindAndDisplayItemPopups
// (Final, Native, Public, BlueprintCallable)

void UMarinerAsyncFlowItemPopups::BindAndDisplayItemPopups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowItemPopups", "BindAndDisplayItemPopups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowItemPopups.OnItemPopupsGranted
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FMangoOrderDetails               OrderDetails                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowItemPopups::OnItemPopupsGranted(const struct FMangoOrderDetails& OrderDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowItemPopups", "OnItemPopupsGranted");

	Params::MarinerAsyncFlowItemPopups_OnItemPopupsGranted Parms{};

	Parms.OrderDetails = std::move(OrderDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowNews.BindAndDisplayNews
// (Final, Native, Public, BlueprintCallable)

void UMarinerAsyncFlowNews::BindAndDisplayNews()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowNews", "BindAndDisplayNews");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowNews.OnNewsImageLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             ImageId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowNews::OnNewsImageLoaded(const class FName& ImageId, class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowNews", "OnNewsImageLoaded");

	Params::MarinerAsyncFlowNews_OnNewsImageLoaded Parms{};

	Parms.ImageId = ImageId;
	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowNews.ShowAllUnviewedNews
// (Final, Native, Private)

void UMarinerAsyncFlowNews::ShowAllUnviewedNews()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowNews", "ShowAllUnviewedNews");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginBlastPassPurchase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        InBlastPassDefinition                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginBlastPassPurchase(const struct FMangoBlastPassDefinition& InBlastPassDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginBlastPassPurchase");

	Params::MarinerAsyncFlowOffers_BeginBlastPassPurchase Parms{};

	Parms.InBlastPassDefinition = std::move(InBlastPassDefinition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginBlastPassTierPurchase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        InBlastPassDefinition                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InMinTier                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxTier                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginBlastPassTierPurchase(const struct FMangoBlastPassDefinition& InBlastPassDefinition, int32 InMinTier, int32 InMaxTier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginBlastPassTierPurchase");

	Params::MarinerAsyncFlowOffers_BeginBlastPassTierPurchase Parms{};

	Parms.InBlastPassDefinition = std::move(InBlastPassDefinition);
	Parms.InMinTier = InMinTier;
	Parms.InMaxTier = InMaxTier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginNativeOfferPurchase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoNativeOffer                InNativeOffer                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginNativeOfferPurchase(const struct FMangoNativeOffer& InNativeOffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginNativeOfferPurchase");

	Params::MarinerAsyncFlowOffers_BeginNativeOfferPurchase Parms{};

	Parms.InNativeOffer = std::move(InNativeOffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginOfferListPurchase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Body                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   OfferIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   NativeOfferLookupIdentifiers                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginOfferListPurchase(const class FText& Header, const class FText& Body, const TArray<class FString>& OfferIds, const TArray<class FString>& NativeOfferLookupIdentifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginOfferListPurchase");

	Params::MarinerAsyncFlowOffers_BeginOfferListPurchase Parms{};

	Parms.Header = std::move(Header);
	Parms.Body = std::move(Body);
	Parms.OfferIds = std::move(OfferIds);
	Parms.NativeOfferLookupIdentifiers = std::move(NativeOfferLookupIdentifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginOfferPurchase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPurchaseOffer              InOffer                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInPremiumRequested                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        InEquipToCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginOfferPurchase(const struct FMangoPurchaseOffer& InOffer, bool bInPremiumRequested, class UMarinerPlayableCharacter* InEquipToCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginOfferPurchase");

	Params::MarinerAsyncFlowOffers_BeginOfferPurchase Parms{};

	Parms.InOffer = std::move(InOffer);
	Parms.bInPremiumRequested = bInPremiumRequested;
	Parms.InEquipToCharacter = InEquipToCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginOfferPurchaseWithCurrencySelection
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPurchaseOffer              InOffer                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        InEquipToCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginOfferPurchaseWithCurrencySelection(const struct FMangoPurchaseOffer& InOffer, class UMarinerPlayableCharacter* InEquipToCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginOfferPurchaseWithCurrencySelection");

	Params::MarinerAsyncFlowOffers_BeginOfferPurchaseWithCurrencySelection Parms{};

	Parms.InOffer = std::move(InOffer);
	Parms.InEquipToCharacter = InEquipToCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.BeginPurchase
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::BeginPurchase(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "BeginPurchase");

	Params::MarinerAsyncFlowOffers_BeginPurchase Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.CancelPurchase
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::CancelPurchase(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "CancelPurchase");

	Params::MarinerAsyncFlowOffers_CancelPurchase Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.CancelPurchaseWithCheck
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::CancelPurchaseWithCheck(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "CancelPurchaseWithCheck");

	Params::MarinerAsyncFlowOffers_CancelPurchaseWithCheck Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.CompletePurchase
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::CompletePurchase(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "CompletePurchase");

	Params::MarinerAsyncFlowOffers_CompletePurchase Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.ConfirmGoToStore
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::ConfirmGoToStore(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "ConfirmGoToStore");

	Params::MarinerAsyncFlowOffers_ConfirmGoToStore Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.HandleEmotesEquip
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedDataResponse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::HandleEmotesEquip(const TArray<class UItemLoadResponse*>& LoadedDataResponse, const EMangoItemType ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "HandleEmotesEquip");

	Params::MarinerAsyncFlowOffers_HandleEmotesEquip Parms{};

	Parms.LoadedDataResponse = std::move(LoadedDataResponse);
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OfferListCallback
// (Final, Native, Private)
// Parameters:
// class FString                           OfferId                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStandardOffer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OfferListCallback(const class FString& OfferId, bool bStandardOffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OfferListCallback");

	Params::MarinerAsyncFlowOffers_OfferListCallback Parms{};

	Parms.OfferId = std::move(OfferId);
	Parms.bStandardOffer = bStandardOffer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnBlastPassTierPurchaseComplete
// (Final, Native, Private)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTierPurchased                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoOrderDetails               OrderDetails                                           (Parm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnBlastPassTierPurchaseComplete(bool bWasSuccessful, int32 MaxTierPurchased, const struct FMangoOrderDetails& OrderDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnBlastPassTierPurchaseComplete");

	Params::MarinerAsyncFlowOffers_OnBlastPassTierPurchaseComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.MaxTierPurchased = MaxTierPurchased;
	Parms.OrderDetails = std::move(OrderDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnEquipFailed
// (Final, Native, Private)

void UMarinerAsyncFlowOffers::OnEquipFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnEquipFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnEquipLoadFinished
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedDataResponse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnEquipLoadFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnEquipLoadFinished");

	Params::MarinerAsyncFlowOffers_OnEquipLoadFinished Parms{};

	Parms.LoadedDataResponse = std::move(LoadedDataResponse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnEquipRequestComplete
// (Final, Native, Private)

void UMarinerAsyncFlowOffers::OnEquipRequestComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnEquipRequestComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnNativeOfferPurchaseComplete
// (Final, Native, Private)
// Parameters:
// EMangoNativePurchaseCompleteReason      CompleteReason                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NativeOfferId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoOrderDetails               OrderDetails                                           (Parm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnNativeOfferPurchaseComplete(EMangoNativePurchaseCompleteReason CompleteReason, const class FString& NativeOfferId, const struct FMangoOrderDetails& OrderDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnNativeOfferPurchaseComplete");

	Params::MarinerAsyncFlowOffers_OnNativeOfferPurchaseComplete Parms{};

	Parms.CompleteReason = CompleteReason;
	Parms.NativeOfferId = std::move(NativeOfferId);
	Parms.OrderDetails = std::move(OrderDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteClose
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnOfferPurchaseCompleteClose(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnOfferPurchaseCompleteClose");

	Params::MarinerAsyncFlowOffers_OnOfferPurchaseCompleteClose Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteEquip
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnOfferPurchaseCompleteEquip(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnOfferPurchaseCompleteEquip");

	Params::MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquip Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnOfferPurchaseCompleteEquipAll
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnOfferPurchaseCompleteEquipAll(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnOfferPurchaseCompleteEquipAll");

	Params::MarinerAsyncFlowOffers_OnOfferPurchaseCompleteEquipAll Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnProfileRefreshComplete
// (Final, Native, Private)

void UMarinerAsyncFlowOffers::OnProfileRefreshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnProfileRefreshComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.OnStorePurchaseComplete
// (Final, Native, Private)
// Parameters:
// bool                                    bWasSuccessful                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoOrderDetails               OrderDetails                                           (ConstParm, Parm, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::OnStorePurchaseComplete(const bool bWasSuccessful, const class FString& OfferId, const struct FMangoOrderDetails& OrderDetails)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "OnStorePurchaseComplete");

	Params::MarinerAsyncFlowOffers_OnStorePurchaseComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;
	Parms.OfferId = std::move(OfferId);
	Parms.OrderDetails = std::move(OrderDetails);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.PurchaseBlastPassTiers
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncFlowOffers::PurchaseBlastPassTiers(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "PurchaseBlastPassTiers");

	Params::MarinerAsyncFlowOffers_PurchaseBlastPassTiers Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.PurchaseWithRocketbucks
// (Final, Native, Private)

void UMarinerAsyncFlowOffers::PurchaseWithRocketbucks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "PurchaseWithRocketbucks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.PurchaseWithRocketparts
// (Final, Native, Private)

void UMarinerAsyncFlowOffers::PurchaseWithRocketparts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "PurchaseWithRocketparts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOffers.IsOfferPurchaseFlowActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerAsyncFlowOffers::IsOfferPurchaseFlowActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOffers", "IsOfferPurchaseFlowActive");

	Params::MarinerAsyncFlowOffers_IsOfferPurchaseFlowActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncFlowOnboarding.AbortOnboarding
// (Final, Native, Public, BlueprintCallable)

void UMarinerAsyncFlowOnboarding::AbortOnboarding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "AbortOnboarding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOnboarding.BeginOnboarding
// (Final, Native, Public, BlueprintCallable)

void UMarinerAsyncFlowOnboarding::BeginOnboarding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "BeginOnboarding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOnboarding.OnMangoProfileUpdated
// (Final, Native, Private)

void UMarinerAsyncFlowOnboarding::OnMangoProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "OnMangoProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOnboarding.RestartOnboarding
// (Final, Native, Public, BlueprintCallable)

void UMarinerAsyncFlowOnboarding::RestartOnboarding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "RestartOnboarding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncFlowOnboarding.GetOnboardingPlaylistState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerOnboardingPlaylistState         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerOnboardingPlaylistState UMarinerAsyncFlowOnboarding::GetOnboardingPlaylistState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "GetOnboardingPlaylistState");

	Params::MarinerAsyncFlowOnboarding_GetOnboardingPlaylistState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncFlowOnboarding.GetOnboardingState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerOnboardingStates                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerOnboardingStates UMarinerAsyncFlowOnboarding::GetOnboardingState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncFlowOnboarding", "GetOnboardingState");

	Params::MarinerAsyncFlowOnboarding_GetOnboardingState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAsyncImage.OnTextureAsyncLoadFinished
// (Final, Native, Protected)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        InSoftTexture                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncImage::OnTextureAsyncLoadFinished(TSoftObjectPtr<class UTexture2D> InSoftTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncImage", "OnTextureAsyncLoadFinished");

	Params::MarinerAsyncImage_OnTextureAsyncLoadFinished Parms{};

	Parms.InSoftTexture = InSoftTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAsyncImage.PopulateWithSoftTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        InSoftTexture                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAsyncImage::PopulateWithSoftTexture(TSoftObjectPtr<class UTexture2D> InSoftTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAsyncImage", "PopulateWithSoftTexture");

	Params::MarinerAsyncImage_PopulateWithSoftTexture Parms{};

	Parms.InSoftTexture = InSoftTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAvatarWidget.OnPlayerTalking
// (Final, Native, Protected)
// Parameters:
// class FString                           ChannelName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTalking                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerAvatarWidget::OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAvatarWidget", "OnPlayerTalking");

	Params::MarinerAvatarWidget_OnPlayerTalking Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.PlayerName = std::move(PlayerName);
	Parms.bIsTalking = bIsTalking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerAvatarWidget.OnUserSettingsChanged
// (Final, Native, Protected)

void UMarinerAvatarWidget::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAvatarWidget", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseContentWidget.AddCharacterContentGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UMarinerPlayableCharacter*>LoadedItems                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerLayeredButton>LayeredButtonSubclass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)>OnCharacterAddedToGrid                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             Header                                                 (Parm, NativeAccessSpecifierPublic)
// EMarinerContentGridType                 InContentType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBaseContentWidget::AddCharacterContentGrid(const TArray<class UMarinerPlayableCharacter*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid, const class FText& Header, EMarinerContentGridType InContentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "AddCharacterContentGrid");

	Params::MarinerBaseContentWidget_AddCharacterContentGrid Parms{};

	Parms.LoadedItems = std::move(LoadedItems);
	Parms.LayeredButtonSubclass = LayeredButtonSubclass;
	Parms.OnCharacterAddedToGrid = OnCharacterAddedToGrid;
	Parms.Header = std::move(Header);
	Parms.InContentType = InContentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseContentWidget.AddItemsContentGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedItems                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerLayeredButton>LayeredButtonSubclass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)>OnItemAddedToGrid                                      (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             Header                                                 (Parm, NativeAccessSpecifierPublic)

void UMarinerBaseContentWidget::AddItemsContentGrid(const TArray<class UItemLoadResponse*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid, const class FText& Header)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "AddItemsContentGrid");

	Params::MarinerBaseContentWidget_AddItemsContentGrid Parms{};

	Parms.LoadedItems = std::move(LoadedItems);
	Parms.LayeredButtonSubclass = LayeredButtonSubclass;
	Parms.OnItemAddedToGrid = OnItemAddedToGrid;
	Parms.Header = std::move(Header);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseContentWidget.ClearContentWidget
// (Final, Native, Public, BlueprintCallable)

void UMarinerBaseContentWidget::ClearContentWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "ClearContentWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseContentWidget.GetFirstItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerLayeredButton*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLayeredButton* UMarinerBaseContentWidget::GetFirstItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "GetFirstItem");

	Params::MarinerBaseContentWidget_GetFirstItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBaseContentWidget.GetHighlightedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLayeredButton*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLayeredButton* UMarinerBaseContentWidget::GetHighlightedItem(const class FString& LookupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "GetHighlightedItem");

	Params::MarinerBaseContentWidget_GetHighlightedItem Parms{};

	Parms.LookupId = std::move(LookupId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBaseContentWidget.HighlightItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLayeredButton*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLayeredButton* UMarinerBaseContentWidget::HighlightItem(const class FString& LookupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "HighlightItem");

	Params::MarinerBaseContentWidget_HighlightItem Parms{};

	Parms.LookupId = std::move(LookupId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBaseContentWidget.SetupGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InColumns                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumRows                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bFillEmpty                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBaseContentWidget::SetupGrid(int32 InColumns, int32 InNumRows, bool Param_bFillEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseContentWidget", "SetupGrid");

	Params::MarinerBaseContentWidget_SetupGrid Parms{};

	Parms.InColumns = InColumns;
	Parms.InNumRows = InNumRows;
	Parms.Param_bFillEmpty = Param_bFillEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageImpulseHandler.BP_CalculateDamageImpulseVector
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageImpulse                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAOEDamage                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerDamageImpulseHandler::BP_CalculateDamageImpulseVector(const class AActor* DamagedActor, const float DamageImpulse, const struct FVector& DamageOrigin, const struct FVector& DamageDirection, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageImpulseHandler", "BP_CalculateDamageImpulseVector");

	Params::MarinerDamageImpulseHandler_BP_CalculateDamageImpulseVector Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageImpulse = DamageImpulse;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.bIsAOEDamage = bIsAOEDamage;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageImpulseHandler.BP_OverrideDamageImpulseOrigin
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageHitPoint                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAOEDamage                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerDamageImpulseHandler::BP_OverrideDamageImpulseOrigin(const class AActor* DamagedActor, const struct FVector& DamageOrigin, const struct FVector& DamageHitPoint, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageImpulseHandler", "BP_OverrideDamageImpulseOrigin");

	Params::MarinerDamageImpulseHandler_BP_OverrideDamageImpulseOrigin Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageHitPoint = std::move(DamageHitPoint);
	Parms.bIsAOEDamage = bIsAOEDamage;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBaseItemSpawner.BP_OnItemDisturbed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerItem*                     DisturbedItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::BP_OnItemDisturbed(class AMarinerItem* DisturbedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "BP_OnItemDisturbed");

	Params::MarinerBaseItemSpawner_BP_OnItemDisturbed Parms{};

	Parms.DisturbedItem = DisturbedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBaseItemSpawner.BP_OnItemSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerItem*                     SpawnedItem                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::BP_OnItemSpawned(class AMarinerItem* SpawnedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "BP_OnItemSpawned");

	Params::MarinerBaseItemSpawner_BP_OnItemSpawned Parms{};

	Parms.SpawnedItem = SpawnedItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBaseItemSpawner.BP_OnRankedItemBoxSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsRanked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::BP_OnRankedItemBoxSet(bool bIsRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "BP_OnRankedItemBoxSet");

	Params::MarinerBaseItemSpawner_BP_OnRankedItemBoxSet Parms{};

	Parms.bIsRanked = bIsRanked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBaseItemSpawner.OnOverlapEnd
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnOverlapEnd");

	Params::MarinerBaseItemSpawner_OnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.OnPlaylistEventItemsLoaded
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsRanked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventId                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnPlaylistEventItemsLoaded(bool bIsRanked, const class FString& EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnPlaylistEventItemsLoaded");

	Params::MarinerBaseItemSpawner_OnPlaylistEventItemsLoaded Parms{};

	Parms.bIsRanked = bIsRanked;
	Parms.EventId = std::move(EventId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.OnPlaylistInfoSet
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsRanked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnPlaylistInfoSet(bool bIsRanked, const class FString& EventId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnPlaylistInfoSet");

	Params::MarinerBaseItemSpawner_OnPlaylistInfoSet Parms{};

	Parms.bIsRanked = bIsRanked;
	Parms.EventId = std::move(EventId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.OnPooledItemDisturbed
// (Final, Native, Protected)
// Parameters:
// class AMarinerItem*                     DestroyedItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnPooledItemDisturbed(class AMarinerItem* DestroyedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnPooledItemDisturbed");

	Params::MarinerBaseItemSpawner_OnPooledItemDisturbed Parms{};

	Parms.DestroyedItem = DestroyedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.OnSpawnedItemDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnSpawnedItemDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnSpawnedItemDestroyed");

	Params::MarinerBaseItemSpawner_OnSpawnedItemDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.OnSpawnedItemPickedUp
// (Final, Native, Protected)
// Parameters:
// class AMarinerItem*                     Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                NewItemCarrier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBaseItemSpawner::OnSpawnedItemPickedUp(class AMarinerItem* Item, class AMarinerCharacter* NewItemCarrier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "OnSpawnedItemPickedUp");

	Params::MarinerBaseItemSpawner_OnSpawnedItemPickedUp Parms{};

	Parms.Item = Item;
	Parms.NewItemCarrier = NewItemCarrier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBaseItemSpawner.SpawnItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerBaseItemSpawner::SpawnItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBaseItemSpawner", "SpawnItem");

	Params::MarinerBaseItemSpawner_SpawnItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.AddSelfToLayer
// (Final, Native, Public, BlueprintCallable)

void UMarinerBasePinWidget::AddSelfToLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "AddSelfToLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.AdvanceState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPinState                               NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerBasePinWidget::AdvanceState(EPinState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "AdvanceState");

	Params::MarinerBasePinWidget_AdvanceState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.DetermineColorDetails
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMarinerBasePinWidget::DetermineColorDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "DetermineColorDetails");

	Params::MarinerBasePinWidget_DetermineColorDetails Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.DeterminePinFrameBrush
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UMarinerBasePinWidget::DeterminePinFrameBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "DeterminePinFrameBrush");

	Params::MarinerBasePinWidget_DeterminePinFrameBrush Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.DeterminePinImageBrush
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UMarinerBasePinWidget::DeterminePinImageBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "DeterminePinImageBrush");

	Params::MarinerBasePinWidget_DeterminePinImageBrush Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.DeterminePinPointBrush
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UMarinerBasePinWidget::DeterminePinPointBrush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "DeterminePinPointBrush");

	Params::MarinerBasePinWidget_DeterminePinPointBrush Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.DetermineVisibilityDetails
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UMarinerBasePinWidget::DetermineVisibilityDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "DetermineVisibilityDetails");

	Params::MarinerBasePinWidget_DetermineVisibilityDetails Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.HandleTransitionToNewState
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EPinState                               NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::HandleTransitionToNewState(EPinState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "HandleTransitionToNewState");

	Params::MarinerBasePinWidget_HandleTransitionToNewState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.OnActorReferenceChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewActorReference                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnActorReferenceChanged(class AActor* NewActorReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnActorReferenceChanged");

	Params::MarinerBasePinWidget_OnActorReferenceChanged Parms{};

	Parms.NewActorReference = NewActorReference;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.OnHasLineOfSightToActorChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bHasLineOfSight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnHasLineOfSightToActorChanged(bool bHasLineOfSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnHasLineOfSightToActorChanged");

	Params::MarinerBasePinWidget_OnHasLineOfSightToActorChanged Parms{};

	Parms.bHasLineOfSight = bHasLineOfSight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.OnInViewConeChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInViewCone                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnInViewConeChanged(bool bInViewCone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnInViewConeChanged");

	Params::MarinerBasePinWidget_OnInViewConeChanged Parms{};

	Parms.bInViewCone = bInViewCone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.OnIsAtEdgeOfScreenChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEdgeOfScreen                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnIsAtEdgeOfScreenChanged(bool bEdgeOfScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnIsAtEdgeOfScreenChanged");

	Params::MarinerBasePinWidget_OnIsAtEdgeOfScreenChanged Parms{};

	Parms.bEdgeOfScreen = bEdgeOfScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.OnOwningPlayerChangedTeams
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              OwningPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnOwningPlayerChangedTeams(class AMarinerPlayerState* OwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnOwningPlayerChangedTeams");

	Params::MarinerBasePinWidget_OnOwningPlayerChangedTeams Parms{};

	Parms.OwningPlayer = OwningPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.OnRenderValueChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCurrentRenderValue                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::OnRenderValueChanged(bool bCurrentRenderValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "OnRenderValueChanged");

	Params::MarinerBasePinWidget_OnRenderValueChanged Parms{};

	Parms.bCurrentRenderValue = bCurrentRenderValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBasePinWidget.RemoveSelfFromLayer
// (Final, Native, Public, BlueprintCallable)

void UMarinerBasePinWidget::RemoveSelfFromLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "RemoveSelfFromLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetActorReferenceIfDifferent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewActorReference                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetActorReferenceIfDifferent(class AActor* NewActorReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetActorReferenceIfDifferent");

	Params::MarinerBasePinWidget_SetActorReferenceIfDifferent Parms{};

	Parms.NewActorReference = NewActorReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetActorReferenceIfNotValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewActorReference                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetActorReferenceIfNotValid(class AActor* NewActorReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetActorReferenceIfNotValid");

	Params::MarinerBasePinWidget_SetActorReferenceIfNotValid Parms{};

	Parms.NewActorReference = NewActorReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetIsPinPointShownWhenNotAtScreenEdge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInShouldShowPinPoint                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetIsPinPointShownWhenNotAtScreenEdge(bool bInShouldShowPinPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetIsPinPointShownWhenNotAtScreenEdge");

	Params::MarinerBasePinWidget_SetIsPinPointShownWhenNotAtScreenEdge Parms{};

	Parms.bInShouldShowPinPoint = bInShouldShowPinPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetIsRenderedAsPinned
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRenderAsPinned                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetIsRenderedAsPinned(bool bRenderAsPinned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetIsRenderedAsPinned");

	Params::MarinerBasePinWidget_SetIsRenderedAsPinned Parms{};

	Parms.bRenderAsPinned = bRenderAsPinned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetPinPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPinPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetPinPosition(const struct FVector2D& InPinPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetPinPosition");

	Params::MarinerBasePinWidget_SetPinPosition Parms{};

	Parms.InPinPosition = std::move(InPinPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetPivot
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPivot                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetPivot(const struct FVector2D& InPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetPivot");

	Params::MarinerBasePinWidget_SetPivot Parms{};

	Parms.InPivot = std::move(InPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetShouldRender
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetShouldRender(bool bInBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetShouldRender");

	Params::MarinerBasePinWidget_SetShouldRender Parms{};

	Parms.bInBool = bInBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetupPinWidgetLogic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UImage*                           PinPointWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           FrameWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           ImageWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetupPinWidgetLogic(class UImage* PinPointWidget, class UImage* FrameWidget, class UImage* ImageWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetupPinWidgetLogic");

	Params::MarinerBasePinWidget_SetupPinWidgetLogic Parms{};

	Parms.PinPointWidget = PinPointWidget;
	Parms.FrameWidget = FrameWidget;
	Parms.ImageWidget = ImageWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetupWidgetColorLogic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UImage*>                   RelevantWidgets                                        (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetupWidgetColorLogic(const TArray<class UImage*>& RelevantWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetupWidgetColorLogic");

	Params::MarinerBasePinWidget_SetupWidgetColorLogic Parms{};

	Parms.RelevantWidgets = std::move(RelevantWidgets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetupWidgetVisibilityLogic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UWidget*>                  RelevantWidgets                                        (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetupWidgetVisibilityLogic(const TArray<class UWidget*>& RelevantWidgets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetupWidgetVisibilityLogic");

	Params::MarinerBasePinWidget_SetupWidgetVisibilityLogic Parms{};

	Parms.RelevantWidgets = std::move(RelevantWidgets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetVisibilityPolicyInsideViewCone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVisibilityPolicy                       Policy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetVisibilityPolicyInsideViewCone(EVisibilityPolicy Policy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetVisibilityPolicyInsideViewCone");

	Params::MarinerBasePinWidget_SetVisibilityPolicyInsideViewCone Parms{};

	Parms.Policy = Policy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetVisibilityPolicyOutsideViewCone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVisibilityPolicy                       Policy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetVisibilityPolicyOutsideViewCone(EVisibilityPolicy Policy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetVisibilityPolicyOutsideViewCone");

	Params::MarinerBasePinWidget_SetVisibilityPolicyOutsideViewCone Parms{};

	Parms.Policy = Policy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.SetWorldOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InWorldOffset                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBasePinWidget::SetWorldOffset(const struct FVector& InWorldOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "SetWorldOffset");

	Params::MarinerBasePinWidget_SetWorldOffset Parms{};

	Parms.InWorldOffset = std::move(InWorldOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBasePinWidget.GetActorReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UMarinerBasePinWidget::GetActorReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "GetActorReference");

	Params::MarinerBasePinWidget_GetActorReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.GetRenderScalar
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerBasePinWidget::GetRenderScalar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "GetRenderScalar");

	Params::MarinerBasePinWidget_GetRenderScalar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerBasePinWidget::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "IsDead");

	Params::MarinerBasePinWidget_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBasePinWidget.IsInViewCone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerBasePinWidget::IsInViewCone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBasePinWidget", "IsInViewCone");

	Params::MarinerBasePinWidget_IsInViewCone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassOfferMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxBlastPassOfferDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxBlastPassOfferData UMarinerBlastPassOfferMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassOfferMessageBox", "GetData");

	Params::MarinerBlastPassOfferMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageDebugRecord.DrawDebugInfo
// (Final, Native, Public, BlueprintCallable, Const)

void UMarinerDamageDebugRecord::DrawDebugInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageDebugRecord", "DrawDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageDebugRecord.GetShortDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerDamageDebugRecord::GetShortDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageDebugRecord", "GetShortDescription");

	Params::MarinerDamageDebugRecord_GetShortDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassPip.SetPipProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBlastPassPip::SetPipProgress(bool bInit, float Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassPip", "SetPipProgress");

	Params::MarinerBlastPassPip_SetPipProgress Parms{};

	Parms.bInit = bInit;
	Parms.Percent = Percent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBlastPassPip.GetPipProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerBlastPassPip::GetPipProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassPip", "GetPipProgress");

	Params::MarinerBlastPassPip_GetPipProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassProgressBar.PopulateXPBoosts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PersonalBoost                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PartyBoost                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBlastPassProgressBar::PopulateXPBoosts(int32 PersonalBoost, int32 PartyBoost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressBar", "PopulateXPBoosts");

	Params::MarinerBlastPassProgressBar_PopulateXPBoosts Parms{};

	Parms.PersonalBoost = PersonalBoost;
	Parms.PartyBoost = PartyBoost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBlastPassProgressBar.PopulateXPBoostsFromProfile
// (Final, Native, Public, BlueprintCallable)

void UMarinerBlastPassProgressBar::PopulateXPBoostsFromProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressBar", "PopulateXPBoostsFromProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemLevelGroupWidget.OnButtonCreated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerUIItemButtonData         ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerItemLevelGroupWidget::OnButtonCreated(class UMarinerLayeredButton* ButtonInstance, const struct FMarinerUIItemButtonData& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLevelGroupWidget", "OnButtonCreated");

	Params::MarinerItemLevelGroupWidget_OnButtonCreated Parms{};

	Parms.ButtonInstance = ButtonInstance;
	Parms.ItemData = std::move(ItemData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItemLevelGroupWidget.OnButtonHighlighted
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLevelGroupWidget::OnButtonHighlighted(class UMarinerLayeredButton* ButtonInstance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLevelGroupWidget", "OnButtonHighlighted");

	Params::MarinerItemLevelGroupWidget_OnButtonHighlighted Parms{};

	Parms.ButtonInstance = ButtonInstance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItemLevelGroupWidget.OnButtonSelected
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLevelGroupWidget::OnButtonSelected(class UMarinerLayeredButton* ButtonInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLevelGroupWidget", "OnButtonSelected");

	Params::MarinerItemLevelGroupWidget_OnButtonSelected Parms{};

	Parms.ButtonInstance = ButtonInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItemLevelGroupWidget.OnButtonUnhighlighted
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLevelGroupWidget::OnButtonUnhighlighted(class UMarinerLayeredButton* ButtonInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLevelGroupWidget", "OnButtonUnhighlighted");

	Params::MarinerItemLevelGroupWidget_OnButtonUnhighlighted Parms{};

	Parms.ButtonInstance = ButtonInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItemLevelGroupWidget.IsChangePageInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerInputActions                    InInput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemLevelGroupWidget::IsChangePageInput(EMarinerInputActions InInput) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLevelGroupWidget", "IsChangePageInput");

	Params::MarinerItemLevelGroupWidget_IsChangePageInput Parms{};

	Parms.InInput = InInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassProgressionWidget.ChangeMaxDisplayedTier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerBlastPassProgressionWidget::ChangeMaxDisplayedTier(int32 Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "ChangeMaxDisplayedTier");

	Params::MarinerBlastPassProgressionWidget_ChangeMaxDisplayedTier Parms{};

	Parms.Delta = Delta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassProgressionWidget.Init
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        Definition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInShowContentStates                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InStartingTier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBlastPassProgressionWidget::Init(const struct FMangoBlastPassDefinition& Definition, bool bInShowContentStates, int32 InStartingTier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "Init");

	Params::MarinerBlastPassProgressionWidget_Init Parms{};

	Parms.Definition = std::move(Definition);
	Parms.bInShowContentStates = bInShowContentStates;
	Parms.InStartingTier = InStartingTier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBlastPassProgressionWidget.InitTierRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassDefinition        Definition                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bInShowContentStates                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMinTier                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxTier                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBlastPassProgressionWidget::InitTierRange(const struct FMangoBlastPassDefinition& Definition, bool bInShowContentStates, int32 InMinTier, int32 InMaxTier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "InitTierRange");

	Params::MarinerBlastPassProgressionWidget_InitTierRange Parms{};

	Parms.Definition = std::move(Definition);
	Parms.bInShowContentStates = bInShowContentStates;
	Parms.InMinTier = InMinTier;
	Parms.InMaxTier = InMaxTier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBlastPassProgressionWidget.GetBlastPass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoBlastPassDefinition  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoBlastPassDefinition UMarinerBlastPassProgressionWidget::GetBlastPass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "GetBlastPass");

	Params::MarinerBlastPassProgressionWidget_GetBlastPass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassProgressionWidget.GetMaxDisplayedTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerBlastPassProgressionWidget::GetMaxDisplayedTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "GetMaxDisplayedTier");

	Params::MarinerBlastPassProgressionWidget_GetMaxDisplayedTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassProgressionWidget.GetMinDisplayedTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerBlastPassProgressionWidget::GetMinDisplayedTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassProgressionWidget", "GetMinDisplayedTier");

	Params::MarinerBlastPassProgressionWidget_GetMinDisplayedTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassTierPurchaseMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxBlastPassTierPurchaseDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxBlastPassTierPurchaseData UMarinerBlastPassTierPurchaseMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassTierPurchaseMessageBox", "GetData");

	Params::MarinerBlastPassTierPurchaseMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBlastPassXPBoost.SetBoostPercent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerBlastPassXPBoost::SetBoostPercent(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBlastPassXPBoost", "SetBoostPercent");

	Params::MarinerBlastPassXPBoost_SetBoostPercent Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDirectionalImmunityInterface.DoesDamageTypeBypassImmunity
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerDirectionalImmunityInterface::DoesDamageTypeBypassImmunity(TSubclassOf<class UMarinerDamageType> DamageType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDirectionalImmunityInterface", "DoesDamageTypeBypassImmunity");

	Params::MarinerDirectionalImmunityInterface_DoesDamageTypeBypassImmunity Parms{};

	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDirectionalImmunityInterface.GetImmunityDirections
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// TMap<struct FVector, float>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FVector, float> IMarinerDirectionalImmunityInterface::GetImmunityDirections() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDirectionalImmunityInterface", "GetImmunityDirections");

	Params::MarinerDirectionalImmunityInterface_GetImmunityDirections Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.BP_GetDesiredBotObjective
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CurrentObjective                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AMarinerBotManager::BP_GetDesiredBotObjective(class AMarinerAIController* AIController, const class FString& CurrentObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "BP_GetDesiredBotObjective");

	Params::MarinerBotManager_BP_GetDesiredBotObjective Parms{};

	Parms.AIController = AIController;
	Parms.CurrentObjective = std::move(CurrentObjective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.BP_GetMovementLocationQuery
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssignedObjective                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerBotManager::BP_GetMovementLocationQuery(class AMarinerAIController* AIController, const class FString& AssignedObjective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "BP_GetMovementLocationQuery");

	Params::MarinerBotManager_BP_GetMovementLocationQuery Parms{};

	Parms.AIController = AIController;
	Parms.AssignedObjective = std::move(AssignedObjective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.BP_GetShootTargetQuery
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AssignedObjective                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutClearObjectiveEnemy                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerBotManager::BP_GetShootTargetQuery(class AMarinerAIController* AIController, const class FString& AssignedObjective, bool* bOutClearObjectiveEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "BP_GetShootTargetQuery");

	Params::MarinerBotManager_BP_GetShootTargetQuery Parms{};

	Parms.AIController = AIController;
	Parms.AssignedObjective = std::move(AssignedObjective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutClearObjectiveEnemy != nullptr)
		*bOutClearObjectiveEnemy = Parms.bOutClearObjectiveEnemy;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.BP_OnBotsInitialized
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AMarinerAIController*>     InitializedBots                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerBotManager::BP_OnBotsInitialized(const TArray<class AMarinerAIController*>& InitializedBots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "BP_OnBotsInitialized");

	Params::MarinerBotManager_BP_OnBotsInitialized Parms{};

	Parms.InitializedBots = std::move(InitializedBots);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerBotManager.GetMovementLocationQuery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerBotManager::GetMovementLocationQuery(class AMarinerAIController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "GetMovementLocationQuery");

	Params::MarinerBotManager_GetMovementLocationQuery Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.GetShootTargetQuery
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutClearObjectiveEnemy                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnvQuery*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnvQuery* AMarinerBotManager::GetShootTargetQuery(class AMarinerAIController* AIController, bool* bOutClearObjectiveEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "GetShootTargetQuery");

	Params::MarinerBotManager_GetShootTargetQuery Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutClearObjectiveEnemy != nullptr)
		*bOutClearObjectiveEnemy = Parms.bOutClearObjectiveEnemy;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerBotManager.UpdateAllBotObjectives
// (Final, Native, Public, BlueprintCallable)

void AMarinerBotManager::UpdateAllBotObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "UpdateAllBotObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerBotManager.UpdateDesiredBotObjective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerAIController*             AIController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerBotManager::UpdateDesiredBotObjective(class AMarinerAIController* AIController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerBotManager", "UpdateDesiredBotObjective");

	Params::MarinerBotManager_UpdateDesiredBotObjective Parms{};

	Parms.AIController = AIController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateBoneIK
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          BoneLocation                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         BoneRotation                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         RootRotation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NormalOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSmoothing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSmoothing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FlipTrace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreSmoothing                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SkipTrace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       CachedHitResult                                        (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerDiverWaterFormAnimInstance::CalculateBoneIK(struct FVector& BoneLocation, struct FRotator& BoneRotation, const struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float NormalOffset, float RotationSmoothing, float PositionSmoothing, float DeltaTime, bool FlipTrace, bool IgnoreSmoothing, bool SkipTrace, const struct FVector& Velocity, struct FHitResult& CachedHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDiverWaterFormAnimInstance", "CalculateBoneIK");

	Params::MarinerDiverWaterFormAnimInstance_CalculateBoneIK Parms{};

	Parms.BoneLocation = std::move(BoneLocation);
	Parms.BoneRotation = std::move(BoneRotation);
	Parms.RootRotation = std::move(RootRotation);
	Parms.BoneName = BoneName;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.TraceLength = TraceLength;
	Parms.NormalOffset = NormalOffset;
	Parms.RotationSmoothing = RotationSmoothing;
	Parms.PositionSmoothing = PositionSmoothing;
	Parms.DeltaTime = DeltaTime;
	Parms.FlipTrace = FlipTrace;
	Parms.IgnoreSmoothing = IgnoreSmoothing;
	Parms.SkipTrace = SkipTrace;
	Parms.Velocity = std::move(Velocity);
	Parms.CachedHitResult = std::move(CachedHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoneLocation = std::move(Parms.BoneLocation);
	BoneRotation = std::move(Parms.BoneRotation);
	CachedHitResult = std::move(Parms.CachedHitResult);
}


// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateRootIK
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         RootRotation                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSmoothing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreSmoothing                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SkipTrace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       CachedHitResult                                        (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerDiverWaterFormAnimInstance::CalculateRootIK(struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float RotationSmoothing, float DeltaTime, bool IgnoreSmoothing, bool SkipTrace, struct FHitResult& CachedHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDiverWaterFormAnimInstance", "CalculateRootIK");

	Params::MarinerDiverWaterFormAnimInstance_CalculateRootIK Parms{};

	Parms.RootRotation = std::move(RootRotation);
	Parms.BoneName = BoneName;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.TraceLength = TraceLength;
	Parms.RotationSmoothing = RotationSmoothing;
	Parms.DeltaTime = DeltaTime;
	Parms.IgnoreSmoothing = IgnoreSmoothing;
	Parms.SkipTrace = SkipTrace;
	Parms.CachedHitResult = std::move(CachedHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	RootRotation = std::move(Parms.RootRotation);
	CachedHitResult = std::move(Parms.CachedHitResult);
}


// Function Mariner.MarinerDiverWaterFormAnimInstance.CalculateTailIK
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          BoneLocation                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         BoneRotation                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         RootRotation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMesh                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NormalOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationSmoothing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionSmoothing                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreSmoothing                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SkipTrace                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       CachedHitResult                                        (Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerDiverWaterFormAnimInstance::CalculateTailIK(struct FVector& BoneLocation, struct FRotator& BoneRotation, const struct FRotator& RootRotation, class FName BoneName, const TArray<EObjectTypeQuery>& ObjectTypes, const class USkeletalMeshComponent* SkeletalMesh, float TraceLength, float NormalOffset, float RotationSmoothing, float PositionSmoothing, float DeltaTime, bool IgnoreSmoothing, bool SkipTrace, const struct FVector& Velocity, struct FHitResult& CachedHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDiverWaterFormAnimInstance", "CalculateTailIK");

	Params::MarinerDiverWaterFormAnimInstance_CalculateTailIK Parms{};

	Parms.BoneLocation = std::move(BoneLocation);
	Parms.BoneRotation = std::move(BoneRotation);
	Parms.RootRotation = std::move(RootRotation);
	Parms.BoneName = BoneName;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.TraceLength = TraceLength;
	Parms.NormalOffset = NormalOffset;
	Parms.RotationSmoothing = RotationSmoothing;
	Parms.PositionSmoothing = PositionSmoothing;
	Parms.DeltaTime = DeltaTime;
	Parms.IgnoreSmoothing = IgnoreSmoothing;
	Parms.SkipTrace = SkipTrace;
	Parms.Velocity = std::move(Velocity);
	Parms.CachedHitResult = std::move(CachedHitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoneLocation = std::move(Parms.BoneLocation);
	BoneRotation = std::move(Parms.BoneRotation);
	CachedHitResult = std::move(Parms.CachedHitResult);
}


// Function Mariner.MarinerButton.ClearDefaultTextStyleOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerButton::ClearDefaultTextStyleOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "ClearDefaultTextStyleOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.ClearHoveredTextStyleOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerButton::ClearHoveredTextStyleOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "ClearHoveredTextStyleOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.SetDefaultTextStyleOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTextBlockStyle                  TextStyle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerButton::SetDefaultTextStyleOverride(const struct FTextBlockStyle& TextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "SetDefaultTextStyleOverride");

	Params::MarinerButton_SetDefaultTextStyleOverride Parms{};

	Parms.TextStyle = std::move(TextStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.SetHoveredTextStyleOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTextBlockStyle                  TextStyle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerButton::SetHoveredTextStyleOverride(const struct FTextBlockStyle& TextStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "SetHoveredTextStyleOverride");

	Params::MarinerButton_SetHoveredTextStyleOverride Parms{};

	Parms.TextStyle = std::move(TextStyle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.SetPlatformText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerPlatformText             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerButton::SetPlatformText(const struct FMarinerPlatformText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "SetPlatformText");

	Params::MarinerButton_SetPlatformText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerButton::SetText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "SetText");

	Params::MarinerButton_SetText Parms{};

	Parms.NewText = std::move(NewText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButton.GetDefaultTextStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UMarinerTextWidgetStyle>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UMarinerTextWidgetStyle> UMarinerButton::GetDefaultTextStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "GetDefaultTextStyle");

	Params::MarinerButton_GetDefaultTextStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerButton.GetHoveredTextStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UMarinerTextWidgetStyle>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UMarinerTextWidgetStyle> UMarinerButton::GetHoveredTextStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButton", "GetHoveredTextStyle");

	Params::MarinerButton_GetHoveredTextStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerButtonTimerWidget.SetEndTime
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FDateTime                        InEndTime                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       InTimerExpired                                         (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerButtonTimerWidget::SetEndTime(const struct FDateTime& InEndTime, TDelegate<void()> InTimerExpired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButtonTimerWidget", "SetEndTime");

	Params::MarinerButtonTimerWidget_SetEndTime Parms{};

	Parms.InEndTime = std::move(InEndTime);
	Parms.InTimerExpired = InTimerExpired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerButtonTimerWidget.IsExpired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerButtonTimerWidget::IsExpired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerButtonTimerWidget", "IsExpired");

	Params::MarinerButtonTimerWidget_IsExpired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraGlobals.CanApplyCameraShake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCameraGlobals::CanApplyCameraShake(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraGlobals", "CanApplyCameraShake");

	Params::MarinerCameraGlobals_CanApplyCameraShake Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraGlobals.GetDamageGivenCameraShake
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   DamageGiven                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UCameraShake>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UCameraShake> UMarinerCameraGlobals::GetDamageGivenCameraShake(float DamageGiven) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraGlobals", "GetDamageGivenCameraShake");

	Params::MarinerCameraGlobals_GetDamageGivenCameraShake Parms{};

	Parms.DamageGiven = DamageGiven;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraGlobals.GetDamageTakenCameraShake
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   DamageTaken                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UCameraShake>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UCameraShake> UMarinerCameraGlobals::GetDamageTakenCameraShake(float DamageTaken) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraGlobals", "GetDamageTakenCameraShake");

	Params::MarinerCameraGlobals_GetDamageTakenCameraShake Parms{};

	Parms.DamageTaken = DamageTaken;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraGlobals.GetKnockedOutCameraShake
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UCameraShake>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UCameraShake> UMarinerCameraGlobals::GetKnockedOutCameraShake() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraGlobals", "GetKnockedOutCameraShake");

	Params::MarinerCameraGlobals_GetKnockedOutCameraShake Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraGlobals.GetMegablastedCameraShake
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UCameraShake>   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UCameraShake> UMarinerCameraGlobals::GetMegablastedCameraShake() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraGlobals", "GetMegablastedCameraShake");

	Params::MarinerCameraGlobals_GetMegablastedCameraShake Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCameraLensEffect.BP_OnDisabled
// (Event, Public, BlueprintEvent)

void AMarinerCameraLensEffect::BP_OnDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraLensEffect", "BP_OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCameraLensEffect.BP_OnEnabled
// (Event, Public, BlueprintEvent)

void AMarinerCameraLensEffect::BP_OnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraLensEffect", "BP_OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCameraLensEffect.Disable
// (Final, Native, Public, BlueprintCallable)

void AMarinerCameraLensEffect::Disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCameraLensEffect", "Disable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEquipItemToProfile.EquipItemToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerCMSItemDataAsset*> Param_ItemsToEquip                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        Param_PlayableCharacter                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipItemToProfile*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipItemToProfile* UMarinerEquipItemToProfile::EquipItemToProfile(const class UObject* Param_WorldContextObject, const TArray<class UMarinerCMSItemDataAsset*>& Param_ItemsToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter, bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipItemToProfile", "EquipItemToProfile");

	Params::MarinerEquipItemToProfile_EquipItemToProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Param_ItemsToEquip = std::move(Param_ItemsToEquip);
	Parms.Param_PlayableCharacter = Param_PlayableCharacter;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipItemToProfile.UnequipItemToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CharacterId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipItemToProfile*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipItemToProfile* UMarinerEquipItemToProfile::UnequipItemToProfile(const class UObject* Param_WorldContextObject, const class FString& CharacterId, const EMangoItemType& ItemType, bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipItemToProfile", "UnequipItemToProfile");

	Params::MarinerEquipItemToProfile_UnequipItemToProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.CharacterId = std::move(CharacterId);
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipItemToProfile.OnProfileUpdated
// (Final, Native, Private)

void UMarinerEquipItemToProfile::OnProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipItemToProfile", "OnProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEquipItemToProfile.OnProfileUpdateFailed
// (Final, Native, Private)

void UMarinerEquipItemToProfile::OnProfileUpdateFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipItemToProfile", "OnProfileUpdateFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCapsuleComponent.GetScaledCapsulePoles
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutTopPole                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBottomPole                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCapsuleComponent::GetScaledCapsulePoles(struct FVector* OutTopPole, struct FVector* OutBottomPole) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCapsuleComponent", "GetScaledCapsulePoles");

	Params::MarinerCapsuleComponent_GetScaledCapsulePoles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTopPole != nullptr)
		*OutTopPole = std::move(Parms.OutTopPole);

	if (OutBottomPole != nullptr)
		*OutBottomPole = std::move(Parms.OutBottomPole);
}


// Function Mariner.MarinerCaptureVolume.OnRep_CapturePercentage
// (Final, Native, Protected)

void UMarinerCaptureVolume::OnRep_CapturePercentage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolume", "OnRep_CapturePercentage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCaptureVolume.GetCapturePercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCaptureVolume::GetCapturePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolume", "GetCapturePercentage");

	Params::MarinerCaptureVolume_GetCapturePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCaptureVolume.IsCaptured
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCaptureVolume::IsCaptured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCaptureVolume", "IsCaptured");

	Params::MarinerCaptureVolume_IsCaptured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipEmotesToProfile.EquipChatEmotesToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoEquippedEmoteWithSlot>EmotesToEquip                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        Param_PlayableCharacter                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipEmotesToProfile*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipEmotesToProfile* UMarinerEquipEmotesToProfile::EquipChatEmotesToProfile(const class UObject* Param_WorldContextObject, const TArray<struct FMangoEquippedEmoteWithSlot>& EmotesToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipEmotesToProfile", "EquipChatEmotesToProfile");

	Params::MarinerEquipEmotesToProfile_EquipChatEmotesToProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.EmotesToEquip = std::move(EmotesToEquip);
	Parms.Param_PlayableCharacter = Param_PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipEmotesToProfile.EquipPregameEmotesToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoEquippedEmoteWithSlot>EmotesToEquip                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        Param_PlayableCharacter                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipEmotesToProfile*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipEmotesToProfile* UMarinerEquipEmotesToProfile::EquipPregameEmotesToProfile(const class UObject* Param_WorldContextObject, const TArray<struct FMangoEquippedEmoteWithSlot>& EmotesToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipEmotesToProfile", "EquipPregameEmotesToProfile");

	Params::MarinerEquipEmotesToProfile_EquipPregameEmotesToProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.EmotesToEquip = std::move(EmotesToEquip);
	Parms.Param_PlayableCharacter = Param_PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipEmotesToProfile.EquipVictoryEmoteToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoEquippedEmote              EmoteToEquip                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        Param_PlayableCharacter                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipEmotesToProfile*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipEmotesToProfile* UMarinerEquipEmotesToProfile::EquipVictoryEmoteToProfile(const class UObject* Param_WorldContextObject, struct FMangoEquippedEmote* EmoteToEquip, const class UMarinerPlayableCharacter* Param_PlayableCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipEmotesToProfile", "EquipVictoryEmoteToProfile");

	Params::MarinerEquipEmotesToProfile_EquipVictoryEmoteToProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Param_PlayableCharacter = Param_PlayableCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EmoteToEquip != nullptr)
		*EmoteToEquip = std::move(Parms.EmoteToEquip);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipEmotesToProfile.OnProfileUpdated
// (Final, Native, Private)

void UMarinerEquipEmotesToProfile::OnProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipEmotesToProfile", "OnProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEquipEmotesToProfile.OnProfileUpdateFailed
// (Final, Native, Private)

void UMarinerEquipEmotesToProfile::OnProfileUpdateFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipEmotesToProfile", "OnProfileUpdateFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.GetOriginalMaterials
// (Native, Public, BlueprintCallable)
// Parameters:
// TMap<int32, struct FMarinerMatSwapData> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, struct FMarinerMatSwapData> IMarinerChangeableMaterialInterface::GetOriginalMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "GetOriginalMaterials");

	Params::MarinerChangeableMaterialInterface_GetOriginalMaterials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChangeableMaterialInterface.RevertMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FMarinerMatSwapJob               RevertJob                                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::RevertMaterial(const struct FMarinerMatSwapJob& RevertJob)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "RevertMaterial");

	Params::MarinerChangeableMaterialInterface_RevertMaterial Parms{};

	Parms.RevertJob = std::move(RevertJob);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.RevertMaterials
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMarinerMatSwapJob>       InRevertJobs                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::RevertMaterials(TArray<struct FMarinerMatSwapJob>* InRevertJobs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "RevertMaterials");

	Params::MarinerChangeableMaterialInterface_RevertMaterials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InRevertJobs != nullptr)
		*InRevertJobs = std::move(Parms.InRevertJobs);
}


// Function Mariner.MarinerChangeableMaterialInterface.RevertMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// EMarinerChangeMeshEnum                  MeshTypeToRevert                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::RevertMesh(EMarinerChangeMeshEnum MeshTypeToRevert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "RevertMesh");

	Params::MarinerChangeableMaterialInterface_RevertMesh Parms{};

	Parms.MeshTypeToRevert = MeshTypeToRevert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.RevertMeshes
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<EMarinerChangeMeshEnum>          MeshTypesToRevert                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::RevertMeshes(const TArray<EMarinerChangeMeshEnum>& MeshTypesToRevert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "RevertMeshes");

	Params::MarinerChangeableMaterialInterface_RevertMeshes Parms{};

	Parms.MeshTypesToRevert = std::move(MeshTypesToRevert);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.SwapMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FMarinerMatSwapJob               MatSwap                                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::SwapMaterial(const struct FMarinerMatSwapJob& MatSwap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "SwapMaterial");

	Params::MarinerChangeableMaterialInterface_SwapMaterial Parms{};

	Parms.MatSwap = std::move(MatSwap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.SwapMaterials
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMarinerMatSwapJob>       InMatSwaps                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::SwapMaterials(TArray<struct FMarinerMatSwapJob>* InMatSwaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "SwapMaterials");

	Params::MarinerChangeableMaterialInterface_SwapMaterials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InMatSwaps != nullptr)
		*InMatSwaps = std::move(Parms.InMatSwaps);
}


// Function Mariner.MarinerChangeableMaterialInterface.SwapMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMeshSwapJob*              MeshSwap                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::SwapMesh(class UMarinerMeshSwapJob* MeshSwap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "SwapMesh");

	Params::MarinerChangeableMaterialInterface_SwapMesh Parms{};

	Parms.MeshSwap = MeshSwap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.SwapMeshes
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UMarinerMeshSwapJob*>      InMeshSwaps                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::SwapMeshes(TArray<class UMarinerMeshSwapJob*>* InMeshSwaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "SwapMeshes");

	Params::MarinerChangeableMaterialInterface_SwapMeshes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InMeshSwaps != nullptr)
		*InMeshSwaps = std::move(Parms.InMeshSwaps);
}


// Function Mariner.MarinerChangeableMaterialInterface.UpdateMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FMarinerMatSwapJob               UpdateMatJob                                           (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bRevertImmediately                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::UpdateMaterial(const struct FMarinerMatSwapJob& UpdateMatJob, bool bRevertImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "UpdateMaterial");

	Params::MarinerChangeableMaterialInterface_UpdateMaterial Parms{};

	Parms.UpdateMatJob = std::move(UpdateMatJob);
	Parms.bRevertImmediately = bRevertImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChangeableMaterialInterface.UpdateMaterials
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMarinerMatSwapJob>       InUpdateMatJobs                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bRevertImmediately                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerChangeableMaterialInterface::UpdateMaterials(TArray<struct FMarinerMatSwapJob>* InUpdateMatJobs, bool bRevertImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "UpdateMaterials");

	Params::MarinerChangeableMaterialInterface_UpdateMaterials Parms{};

	Parms.bRevertImmediately = bRevertImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InUpdateMatJobs != nullptr)
		*InUpdateMatJobs = std::move(Parms.InUpdateMatJobs);
}


// Function Mariner.MarinerChangeableMaterialInterface.UsingOriginalMaterial
// (Native, Public, BlueprintCallable)
// Parameters:
// EMarinerChangeMaterialFlags             MaterialType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerChangeableMaterialInterface::UsingOriginalMaterial(EMarinerChangeMaterialFlags MaterialType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "UsingOriginalMaterial");

	Params::MarinerChangeableMaterialInterface_UsingOriginalMaterial Parms{};

	Parms.MaterialType = MaterialType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChangeableMaterialInterface.HasPendingMeshSwapForMeshType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerChangeMeshEnum                  MeshType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerChangeableMaterialInterface::HasPendingMeshSwapForMeshType(EMarinerChangeMeshEnum MeshType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "HasPendingMeshSwapForMeshType");

	Params::MarinerChangeableMaterialInterface_HasPendingMeshSwapForMeshType Parms{};

	Parms.MeshType = MeshType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChangeableMaterialInterface.IsUsingOriginalMesh
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerChangeMeshEnum                  MeshType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerChangeableMaterialInterface::IsUsingOriginalMesh(EMarinerChangeMeshEnum MeshType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChangeableMaterialInterface", "IsUsingOriginalMesh");

	Params::MarinerChangeableMaterialInterface_IsUsingOriginalMesh Parms{};

	Parms.MeshType = MeshType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionComponent.CheckIsColliding
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerFastCollisionComponent*   OutHitCollider                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionComponent::CheckIsColliding(struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal, class UMarinerFastCollisionComponent** OutHitCollider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "CheckIsColliding");

	Params::MarinerFastCollisionComponent_CheckIsColliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	if (OutHitCollider != nullptr)
		*OutHitCollider = Parms.OutHitCollider;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionComponent.DisableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    DisableParentCollision                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionComponent::DisableCollision(bool DisableParentCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "DisableCollision");

	Params::MarinerFastCollisionComponent_DisableCollision Parms{};

	Parms.DisableParentCollision = DisableParentCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionComponent.EnableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    EnableParentCollision                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionComponent::EnableCollision(bool EnableParentCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "EnableCollision");

	Params::MarinerFastCollisionComponent_EnableCollision Parms{};

	Parms.EnableParentCollision = EnableParentCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionComponent.SetCanCollideWithArenaBounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanCollide                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionComponent::SetCanCollideWithArenaBounds(bool bCanCollide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "SetCanCollideWithArenaBounds");

	Params::MarinerFastCollisionComponent_SetCanCollideWithArenaBounds Parms{};

	Parms.bCanCollide = bCanCollide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionComponent.GetCanCollideWithArenaBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionComponent::GetCanCollideWithArenaBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "GetCanCollideWithArenaBounds");

	Params::MarinerFastCollisionComponent_GetCanCollideWithArenaBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionComponent.IsCollisionDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionComponent::IsCollisionDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastCollisionComponent", "IsCollisionDisabled");

	Params::MarinerFastCollisionComponent_IsCollisionDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.AltFireByAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::AltFireByAxis(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "AltFireByAxis");

	Params::MarinerCharacter_AltFireByAxis Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ApplyDefaultSkin
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::ApplyDefaultSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ApplyDefaultSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ApplyInstigatorsMegablastFX
// (Final, Native, Public)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ApplyInstigatorsMegablastFX(const class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ApplyInstigatorsMegablastFX");

	Params::MarinerCharacter_ApplyInstigatorsMegablastFX Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ApplyMouseAndGamepadSensitivityModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MouseTurnRateModifier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MouseLookUpRateModifier                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GamepadTurnRateModifier                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GamepadLookUpRateModifier                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ApplyMouseAndGamepadSensitivityModifier(float MouseTurnRateModifier, float MouseLookUpRateModifier, float GamepadTurnRateModifier, float GamepadLookUpRateModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ApplyMouseAndGamepadSensitivityModifier");

	Params::MarinerCharacter_ApplyMouseAndGamepadSensitivityModifier Parms{};

	Parms.MouseTurnRateModifier = MouseTurnRateModifier;
	Parms.MouseLookUpRateModifier = MouseLookUpRateModifier;
	Parms.GamepadTurnRateModifier = GamepadTurnRateModifier;
	Parms.GamepadLookUpRateModifier = GamepadLookUpRateModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ApplySkinFromOtherCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                OtherCharacter                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ApplySkinFromOtherCharacter(class AMarinerCharacter* OtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ApplySkinFromOtherCharacter");

	Params::MarinerCharacter_ApplySkinFromOtherCharacter Parms{};

	Parms.OtherCharacter = OtherCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ApplySkinFromProfileObjectManager
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>InCollectionPath                                       (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceUpdate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ApplySkinFromProfileObjectManager(const TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>& InCollectionPath, bool bForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ApplySkinFromProfileObjectManager");

	Params::MarinerCharacter_ApplySkinFromProfileObjectManager Parms{};

	Parms.InCollectionPath = InCollectionPath;
	Parms.bForceUpdate = bForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.AuthoritativeKnockOut
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerCharacter::AuthoritativeKnockOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "AuthoritativeKnockOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.AuthorityForceActivatePrimary
// (Final, Native, Private)

void AMarinerCharacter::AuthorityForceActivatePrimary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "AuthorityForceActivatePrimary");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.AuthoritySetCurrentReality
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerRealityState                    DesiredRealityState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::AuthoritySetCurrentReality(EMarinerRealityState DesiredRealityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "AuthoritySetCurrentReality");

	Params::MarinerCharacter_AuthoritySetCurrentReality Parms{};

	Parms.DesiredRealityState = DesiredRealityState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.AuthorityToggleBlastedTrail
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bActivate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsMegablasted                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::AuthorityToggleBlastedTrail(bool bActivate, bool bInIsMegablasted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "AuthorityToggleBlastedTrail");

	Params::MarinerCharacter_AuthorityToggleBlastedTrail Parms{};

	Parms.bActivate = bActivate;
	Parms.bInIsMegablasted = bInIsMegablasted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.BP_GetOverrideLocalVisibilityForComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ComponentOwner                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWantsToBeVisible                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::BP_GetOverrideLocalVisibilityForComponent(class USceneComponent* Component, class AActor* ComponentOwner, bool bWantsToBeVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_GetOverrideLocalVisibilityForComponent");

	Params::MarinerCharacter_BP_GetOverrideLocalVisibilityForComponent Parms{};

	Parms.Component = Component;
	Parms.ComponentOwner = ComponentOwner;
	Parms.bWantsToBeVisible = bWantsToBeVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.BP_InvokeLocalGameplayCues
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            GameplayCues                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_InvokeLocalGameplayCues(const struct FGameplayTagContainer& GameplayCues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_InvokeLocalGameplayCues");

	Params::MarinerCharacter_BP_InvokeLocalGameplayCues Parms{};

	Parms.GameplayCues = std::move(GameplayCues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.BP_MegablastTimedUpdate
// (Event, Public, BlueprintEvent)

void AMarinerCharacter::BP_MegablastTimedUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_MegablastTimedUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnBeginArenaReturn
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnBeginArenaReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnBeginArenaReturn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnChangePerspective
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        Perspective                                            (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerCameraPerspective AMarinerCharacter::BP_OnChangePerspective(const class FName& PerspectiveName, struct FMarinerCameraPerspective& Perspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnChangePerspective");

	Params::MarinerCharacter_BP_OnChangePerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;
	Parms.Perspective = std::move(Perspective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Perspective = std::move(Parms.Perspective);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.BP_OnEndArenaReturn
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnEndArenaReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnEndArenaReturn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnEnteredReality_OnOtherCharacter
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                NonTransitioningCharacter                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerRealityState                    CurrentReality                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnEnteredReality_OnOtherCharacter(class AMarinerCharacter* NonTransitioningCharacter, const EMarinerRealityState& CurrentReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnEnteredReality_OnOtherCharacter");

	Params::MarinerCharacter_BP_OnEnteredReality_OnOtherCharacter Parms{};

	Parms.NonTransitioningCharacter = NonTransitioningCharacter;
	Parms.CurrentReality = CurrentReality;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnEnterMegablastState
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnEnterMegablastState(class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnEnterMegablastState");

	Params::MarinerCharacter_BP_OnEnterMegablastState Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnEnterReality
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                TransitioningCharacter                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerRealityState                    CurrentReality                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnEnterReality(class AMarinerCharacter* TransitioningCharacter, const EMarinerRealityState& CurrentReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnEnterReality");

	Params::MarinerCharacter_BP_OnEnterReality Parms{};

	Parms.TransitioningCharacter = TransitioningCharacter;
	Parms.CurrentReality = CurrentReality;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnExitMegablastState
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnExitMegablastState(class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnExitMegablastState");

	Params::MarinerCharacter_BP_OnExitMegablastState Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnGameplayTagListenedForEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnGameplayTagListenedForEvent(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnGameplayTagListenedForEvent");

	Params::MarinerCharacter_BP_OnGameplayTagListenedForEvent Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnHandleFellOutOfWorld
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::BP_OnHandleFellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnHandleFellOutOfWorld");

	Params::MarinerCharacter_BP_OnHandleFellOutOfWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.BP_OnHitStunApplied
// (Event, Public, BlueprintEvent)

void AMarinerCharacter::BP_OnHitStunApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnHitStunApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnHitStunRemoved
// (Event, Public, BlueprintEvent)

void AMarinerCharacter::BP_OnHitStunRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnHitStunRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnKnockedOut
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                KnockOutInstigator                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          KnockOutDirection                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnKnockedOut(class AMarinerCharacter* KnockOutInstigator, const struct FVector& KnockOutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnKnockedOut");

	Params::MarinerCharacter_BP_OnKnockedOut Parms{};

	Parms.KnockOutInstigator = KnockOutInstigator;
	Parms.KnockOutDirection = std::move(KnockOutDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnKnockedOutAuthoritative
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnKnockedOutAuthoritative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnKnockedOutAuthoritative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnKnockedOutFromMegablast
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          KnockOutDirection                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnKnockedOutFromMegablast(class AMarinerCharacter* MegablastInstigator, const struct FVector& KnockOutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnKnockedOutFromMegablast");

	Params::MarinerCharacter_BP_OnKnockedOutFromMegablast Parms{};

	Parms.MegablastInstigator = MegablastInstigator;
	Parms.KnockOutDirection = std::move(KnockOutDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMatchStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMatchStateChanged(class FName State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMatchStateChanged");

	Params::MarinerCharacter_BP_OnMatchStateChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMegablastApplied
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigatorPlayerState                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMegablastApplied(class AMarinerPlayerState* MegablastInstigatorPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMegablastApplied");

	Params::MarinerCharacter_BP_OnMegablastApplied Parms{};

	Parms.MegablastInstigatorPlayerState = MegablastInstigatorPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMegablastRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMegablastRemoved(class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMegablastRemoved");

	Params::MarinerCharacter_BP_OnMegablastRemoved Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMoveAffectingGameplayEffectApplied
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PriorGameplayEffectCount                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GameplayEffectLevel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMoveAffectingGameplayEffectApplied(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMoveAffectingGameplayEffectApplied");

	Params::MarinerCharacter_BP_OnMoveAffectingGameplayEffectApplied Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMoveAffectingGameplayEffectRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PriorGameplayEffectCount                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GameplayEffectLevel                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMoveAffectingGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMoveAffectingGameplayEffectRemoved");

	Params::MarinerCharacter_BP_OnMoveAffectingGameplayEffectRemoved Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMoveUpdateDataDefaultsUsed
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMarinerMoveUpdateDefaults>DefaultsUsed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMoveUpdateDataDefaultsUsed(TSubclassOf<class UMarinerMoveUpdateDefaults> DefaultsUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMoveUpdateDataDefaultsUsed");

	Params::MarinerCharacter_BP_OnMoveUpdateDataDefaultsUsed Parms{};

	Parms.DefaultsUsed = DefaultsUsed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMoveUpdateRootMotionApplied
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             RootMotionName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMoveUpdateRootMotionApplied(class FName RootMotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMoveUpdateRootMotionApplied");

	Params::MarinerCharacter_BP_OnMoveUpdateRootMotionApplied Parms{};

	Parms.RootMotionName = RootMotionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnMoveUpdateRootMotionManuallyRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             RootMotionName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::BP_OnMoveUpdateRootMotionManuallyRemoved(class FName RootMotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnMoveUpdateRootMotionManuallyRemoved");

	Params::MarinerCharacter_BP_OnMoveUpdateRootMotionManuallyRemoved Parms{};

	Parms.RootMotionName = RootMotionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.BP_OnRecoveryApplied
// (Event, Public, BlueprintEvent)

void AMarinerCharacter::BP_OnRecoveryApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnRecoveryApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnSuppressionEffectApplied
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnSuppressionEffectApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnSuppressionEffectApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnSuppressionEffectRemoved
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnSuppressionEffectRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnSuppressionEffectRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.BP_OnTeamChange
// (Event, Protected, BlueprintEvent)

void AMarinerCharacter::BP_OnTeamChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OnTeamChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.ChangePerspective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PerspectiveName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ChangePerspective(class FName PerspectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ChangePerspective");

	Params::MarinerCharacter_ChangePerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.CheckForPreRoundSuppressionRemoval
// (Final, Native, Protected)

void AMarinerCharacter::CheckForPreRoundSuppressionRemoval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "CheckForPreRoundSuppressionRemoval");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ClientPrintPlayerLaunchedTrailDetails
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// class FString                           ServerDetailsString                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ClientPrintPlayerLaunchedTrailDetails(const class FString& ServerDetailsString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ClientPrintPlayerLaunchedTrailDetails");

	Params::MarinerCharacter_ClientPrintPlayerLaunchedTrailDetails Parms{};

	Parms.ServerDetailsString = std::move(ServerDetailsString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ClientSendMoveUpdate
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FMarinerMoveUpdate               NewMoveUpdate                                          (Parm, NativeAccessSpecifierPublic)

void AMarinerCharacter::ClientSendMoveUpdate(const struct FMarinerMoveUpdate& NewMoveUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ClientSendMoveUpdate");

	Params::MarinerCharacter_ClientSendMoveUpdate Parms{};

	Parms.NewMoveUpdate = std::move(NewMoveUpdate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugAbilityStatus
// (Final, Exec, Native, Public)

void AMarinerCharacter::DebugAbilityStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugAbilityStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugApplyHitStun
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::DebugApplyHitStun(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugApplyHitStun");

	Params::MarinerCharacter_DebugApplyHitStun Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugApplyMegablastAim
// (Final, Exec, Native, Public)

void AMarinerCharacter::DebugApplyMegablastAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugApplyMegablastAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugApplyMegablastUp
// (Final, Exec, Native, Public)

void AMarinerCharacter::DebugApplyMegablastUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugApplyMegablastUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugHurtMe
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::DebugHurtMe(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugHurtMe");

	Params::MarinerCharacter_DebugHurtMe Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugRemoveHitStun
// (Final, Exec, Native, Public)

void AMarinerCharacter::DebugRemoveHitStun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugRemoveHitStun");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugRemoveMegablast
// (Final, Exec, Native, Public)

void AMarinerCharacter::DebugRemoveMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugRemoveMegablast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DebugSetCameraPerspective
// (Final, Exec, Native, Public, HasOutParams)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::DebugSetCameraPerspective(const class FName& PerspectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DebugSetCameraPerspective");

	Params::MarinerCharacter_DebugSetCameraPerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DisableJumpLoop
// (Final, Exec, Native, Public)

void AMarinerCharacter::DisableJumpLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DisableJumpLoop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DoFootstep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerCharacterFoot                   FootThatLanded                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::DoFootstep(EMarinerCharacterFoot FootThatLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DoFootstep");

	Params::MarinerCharacter_DoFootstep Parms{};

	Parms.FootThatLanded = FootThatLanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DynamicServerMove
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FMarinerDynamicServerMove        ServerMoveInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerCharacter::DynamicServerMove(const struct FMarinerDynamicServerMove& ServerMoveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DynamicServerMove");

	Params::MarinerCharacter_DynamicServerMove Parms{};

	Parms.ServerMoveInfo = std::move(ServerMoveInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DynamicServerMoveDual
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FMarinerDynamicServerMove        ServerMoveInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerCharacter::DynamicServerMoveDual(const struct FMarinerDynamicServerMove& ServerMoveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DynamicServerMoveDual");

	Params::MarinerCharacter_DynamicServerMoveDual Parms{};

	Parms.ServerMoveInfo = std::move(ServerMoveInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DynamicServerMoveDualHybridRootMotion
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FMarinerDynamicServerMove        ServerMoveInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerCharacter::DynamicServerMoveDualHybridRootMotion(const struct FMarinerDynamicServerMove& ServerMoveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DynamicServerMoveDualHybridRootMotion");

	Params::MarinerCharacter_DynamicServerMoveDualHybridRootMotion Parms{};

	Parms.ServerMoveInfo = std::move(ServerMoveInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.DynamicServerMoveOld
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FMarinerDynamicServerMove        ServerMoveInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerCharacter::DynamicServerMoveOld(const struct FMarinerDynamicServerMove& ServerMoveInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "DynamicServerMoveOld");

	Params::MarinerCharacter_DynamicServerMoveOld Parms{};

	Parms.ServerMoveInfo = std::move(ServerMoveInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.FindPerspective
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerCameraPerspective AMarinerCharacter::FindPerspective(const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "FindPerspective");

	Params::MarinerCharacter_FindPerspective Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.FireByAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::FireByAxis(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "FireByAxis");

	Params::MarinerCharacter_FireByAxis Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.GetJumpFXParticleSystemComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   CurrentJumpCount                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystemComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystemComponent* AMarinerCharacter::GetJumpFXParticleSystemComponent(int32 CurrentJumpCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetJumpFXParticleSystemComponent");

	Params::MarinerCharacter_GetJumpFXParticleSystemComponent Parms{};

	Parms.CurrentJumpCount = CurrentJumpCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetJumpParticlesOffset
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerCharacter::GetJumpParticlesOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetJumpParticlesOffset");

	Params::MarinerCharacter_GetJumpParticlesOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetLastKnockedOutTimeStamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetLastKnockedOutTimeStamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetLastKnockedOutTimeStamp");

	Params::MarinerCharacter_GetLastKnockedOutTimeStamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetMeshesToApplyHitFeedbackFlash
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UMeshComponent*> AMarinerCharacter::GetMeshesToApplyHitFeedbackFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetMeshesToApplyHitFeedbackFlash");

	Params::MarinerCharacter_GetMeshesToApplyHitFeedbackFlash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetSocketLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAccountForProjection                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerCharacter::GetSocketLocation(const class FName& SocketName, bool bAccountForProjection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetSocketLocation");

	Params::MarinerCharacter_GetSocketLocation Parms{};

	Parms.SocketName = SocketName;
	Parms.bAccountForProjection = bAccountForProjection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.HandleDodgeStateApplied
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMarinerCharacter::HandleDodgeStateApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "HandleDodgeStateApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.HandleDodgeStateRemoved
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMarinerCharacter::HandleDodgeStateRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "HandleDodgeStateRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.IncrementPlayerStat
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StatName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGiveGameplayAward                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::IncrementPlayerStat(const class FName& StatName, const int32& Value, bool bGiveGameplayAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IncrementPlayerStat");

	Params::MarinerCharacter_IncrementPlayerStat Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;
	Parms.bGiveGameplayAward = bGiveGameplayAward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacter.ListenForGameplayTagChanges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     GameplayTagToListenFor                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ListenForGameplayTagChanges(const struct FGameplayTag& GameplayTagToListenFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ListenForGameplayTagChanges");

	Params::MarinerCharacter_ListenForGameplayTagChanges Parms{};

	Parms.GameplayTagToListenFor = std::move(GameplayTagToListenFor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInBundle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerGameplayTagBundle>GameplayTagBundleToListenFor                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ListenForGameplayTagChangesInBundle(const TSubclassOf<class UMarinerGameplayTagBundle>& GameplayTagBundleToListenFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ListenForGameplayTagChangesInBundle");

	Params::MarinerCharacter_ListenForGameplayTagChangesInBundle Parms{};

	Parms.GameplayTagBundleToListenFor = GameplayTagBundleToListenFor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInBundles
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class UMarinerGameplayTagBundle>>GameplayTagBundlesToListenFor                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void AMarinerCharacter::ListenForGameplayTagChangesInBundles(const TArray<TSubclassOf<class UMarinerGameplayTagBundle>>& GameplayTagBundlesToListenFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ListenForGameplayTagChangesInBundles");

	Params::MarinerCharacter_ListenForGameplayTagChangesInBundles Parms{};

	Parms.GameplayTagBundlesToListenFor = std::move(GameplayTagBundlesToListenFor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ListenForGameplayTagChangesInContainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            GameplayTagsToListenForInContainer                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerCharacter::ListenForGameplayTagChangesInContainer(const struct FGameplayTagContainer& GameplayTagsToListenForInContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ListenForGameplayTagChangesInContainer");

	Params::MarinerCharacter_ListenForGameplayTagChangesInContainer Parms{};

	Parms.GameplayTagsToListenForInContainer = std::move(GameplayTagsToListenForInContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ListenToAnimInstace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          MontageListener                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCharacterAnimListenerContext    ListenerContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ListenToAnimInstace(class UObject* MontageListener, EMarinerCharacterAnimListenerContext ListenerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ListenToAnimInstace");

	Params::MarinerCharacter_ListenToAnimInstace Parms{};

	Parms.MontageListener = MontageListener;
	Parms.ListenerContext = ListenerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.MoveBackward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::MoveBackward(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "MoveBackward");

	Params::MarinerCharacter_MoveBackward Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.MoveForward
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::MoveForward(float Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "MoveForward");

	Params::MarinerCharacter_MoveForward Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.MulticastOnDamageImpulse
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// float                                   ImpulseTaken                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              ImpulseLocation                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::MulticastOnDamageImpulse(float ImpulseTaken, const struct FVector_NetQuantize& ImpulseLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "MulticastOnDamageImpulse");

	Params::MarinerCharacter_MulticastOnDamageImpulse Parms{};

	Parms.ImpulseTaken = ImpulseTaken;
	Parms.ImpulseLocation = std::move(ImpulseLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.NotifyRecoveryActionPerformed
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::NotifyRecoveryActionPerformed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "NotifyRecoveryActionPerformed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnAbilityGiven
// (Final, Native, Protected)
// Parameters:
// class UGameplayAbility*                 Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnAbilityGiven(class UGameplayAbility* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnAbilityGiven");

	Params::MarinerCharacter_OnAbilityGiven Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnAllCollectionMembersLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnAllCollectionMembersLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnAllCollectionMembersLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnAnyPlayerChangedTeams
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              PlayerChangedTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnAnyPlayerChangedTeams(class AMarinerPlayerState* PlayerChangedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnAnyPlayerChangedTeams");

	Params::MarinerCharacter_OnAnyPlayerChangedTeams Parms{};

	Parms.PlayerChangedTeam = PlayerChangedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDebugApplyHitStun
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnDebugApplyHitStun(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDebugApplyHitStun");

	Params::MarinerCharacter_OnDebugApplyHitStun Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDebugApplyMegablast
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          MegablastDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnDebugApplyMegablast(const struct FVector& MegablastDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDebugApplyMegablast");

	Params::MarinerCharacter_OnDebugApplyMegablast Parms{};

	Parms.MegablastDirection = std::move(MegablastDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDebugHurtMe
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnDebugHurtMe(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDebugHurtMe");

	Params::MarinerCharacter_OnDebugHurtMe Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDebugRemoveHitStun
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AMarinerCharacter::OnDebugRemoveHitStun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDebugRemoveHitStun");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDebugRemoveMegablast
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AMarinerCharacter::OnDebugRemoveMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDebugRemoveMegablast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDefaultAnimBPLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnDefaultAnimBPLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDefaultAnimBPLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDefaultCollectionMembersLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnDefaultCollectionMembersLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDefaultCollectionMembersLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnDefaultSkinCollectionMembersLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnDefaultSkinCollectionMembersLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnDefaultSkinCollectionMembersLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnGameplayTagListenedForEvent
// (Native, Protected)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnGameplayTagListenedForEvent(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnGameplayTagListenedForEvent");

	Params::MarinerCharacter_OnGameplayTagListenedForEvent Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnHitStunRemoved
// (Final, Native, Protected)

void AMarinerCharacter::OnHitStunRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnHitStunRemoved");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnHUDFinishedBeginPlay
// (Final, Native, Protected)

void AMarinerCharacter::OnHUDFinishedBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnHUDFinishedBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnLaunchEvent
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          PostLaunchVelocity                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchContainedHostileImpulse                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLaunchWasMegablast                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnLaunchEvent(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnLaunchEvent");

	Params::MarinerCharacter_OnLaunchEvent Parms{};

	Parms.PostLaunchVelocity = std::move(PostLaunchVelocity);
	Parms.bLaunchContainedHostileImpulse = bLaunchContainedHostileImpulse;
	Parms.bLaunchWasMegablast = bLaunchWasMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnLocalArenaReturnTeleport
// (Event, Public, BlueprintEvent)

void AMarinerCharacter::OnLocalArenaReturnTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnLocalArenaReturnTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.OnMontageBlendingOutStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnMontageBlendingOutStarted");

	Params::MarinerCharacter_OnMontageBlendingOutStarted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnMontageEnded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnMontageEnded");

	Params::MarinerCharacter_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnMontageStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnMontageStarted");

	Params::MarinerCharacter_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnProfileObjectsLoaded
// (Final, Native, Protected)

void AMarinerCharacter::OnProfileObjectsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnProfileObjectsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRegenSuppressionEnded
// (Final, Native, Protected)

void AMarinerCharacter::OnRegenSuppressionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRegenSuppressionEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_ArenaReturnState
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FArenaReturnState                PreviousArenaReturnState                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnRep_ArenaReturnState(const struct FArenaReturnState& PreviousArenaReturnState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_ArenaReturnState");

	Params::MarinerCharacter_OnRep_ArenaReturnState Parms{};

	Parms.PreviousArenaReturnState = std::move(PreviousArenaReturnState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_AuthoritativePlayerLaunchedTrailState
// (Final, Native, Protected)

void AMarinerCharacter::OnRep_AuthoritativePlayerLaunchedTrailState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_AuthoritativePlayerLaunchedTrailState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_CurrentRealityState
// (Final, Native, Public)

void AMarinerCharacter::OnRep_CurrentRealityState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_CurrentRealityState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_CurrentWeapon
// (Final, Native, Protected)
// Parameters:
// class AMarinerWeapon*                   LastWeapon                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::OnRep_CurrentWeapon(class AMarinerWeapon* LastWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_CurrentWeapon");

	Params::MarinerCharacter_OnRep_CurrentWeapon Parms{};

	Parms.LastWeapon = LastWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_Inventory
// (Final, Native, Protected)

void AMarinerCharacter::OnRep_Inventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_Inventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_LastTakeHitInfo
// (Final, Native, Protected)

void AMarinerCharacter::OnRep_LastTakeHitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_LastTakeHitInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_SimulatedCurrentJumpCount
// (Final, Native, Protected)

void AMarinerCharacter::OnRep_SimulatedCurrentJumpCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_SimulatedCurrentJumpCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnRep_SimulatedLatestMegablastBounceLocation
// (Final, Native, Public)

void AMarinerCharacter::OnRep_SimulatedLatestMegablastBounceLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnRep_SimulatedLatestMegablastBounceLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnSkinCollectionLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnSkinCollectionLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnSkinCollectionLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.OnSkinCollectionMembersLoaded
// (Final, Native, Public)

void AMarinerCharacter::OnSkinCollectionMembersLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "OnSkinCollectionMembersLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.PlayMarinerCharacterMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMontage*         CharacterMontage                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalMontageListener                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::PlayMarinerCharacterMontage(const class UMarinerCharacterMontage* CharacterMontage, float PlayRate, class FName StartSectionName, class UObject* OptionalMontageListener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "PlayMarinerCharacterMontage");

	Params::MarinerCharacter_PlayMarinerCharacterMontage Parms{};

	Parms.CharacterMontage = CharacterMontage;
	Parms.PlayRate = PlayRate;
	Parms.StartSectionName = StartSectionName;
	Parms.OptionalMontageListener = OptionalMontageListener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.PotentialThrowPriorityItemSpoof
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMarinerCharacter::PotentialThrowPriorityItemSpoof()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "PotentialThrowPriorityItemSpoof");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacter.RejectClientSuppressionPrediction
// (Net, NetReliable, Native, Event, Protected, NetClient)

void AMarinerCharacter::RejectClientSuppressionPrediction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "RejectClientSuppressionPrediction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ResetFlashHitFeedback
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bRestartAfterStopped                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ResetFlashHitFeedback(bool bRestartAfterStopped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ResetFlashHitFeedback");

	Params::MarinerCharacter_ResetFlashHitFeedback Parms{};

	Parms.bRestartAfterStopped = bRestartAfterStopped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ResetMouseAndGamepadSensitivityModifier
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::ResetMouseAndGamepadSensitivityModifier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ResetMouseAndGamepadSensitivityModifier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ServerEchoSuppressionEffect
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FPredictionKey                   SuppressionEffectPredictionKey                         (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ServerEchoSuppressionEffect(const struct FPredictionKey& SuppressionEffectPredictionKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ServerEchoSuppressionEffect");

	Params::MarinerCharacter_ServerEchoSuppressionEffect Parms{};

	Parms.SuppressionEffectPredictionKey = std::move(SuppressionEffectPredictionKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ServerEquipWeapon
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AMarinerWeapon*                   NewWeapon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ServerEquipWeapon(class AMarinerWeapon* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ServerEquipWeapon");

	Params::MarinerCharacter_ServerEquipWeapon Parms{};

	Parms.NewWeapon = NewWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ServerPrintPlayerLaunchedTrailDetails
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AMarinerCharacter::ServerPrintPlayerLaunchedTrailDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ServerPrintPlayerLaunchedTrailDetails");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.ServerSetAimAssistState
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// EMarinerAimAssistState                  AimAssistState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::ServerSetAimAssistState(EMarinerAimAssistState AimAssistState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ServerSetAimAssistState");

	Params::MarinerCharacter_ServerSetAimAssistState Parms{};

	Parms.AimAssistState = AimAssistState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetAbilityInputSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetAbilityInputSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetAbilityInputSuppressionByTag");

	Params::MarinerCharacter_SetAbilityInputSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetAllItemPickupSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetAllItemPickupSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetAllItemPickupSuppressionByTag");

	Params::MarinerCharacter_SetAllItemPickupSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetAllowAltFireSpecialAbilitySwap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetAllowAltFireSpecialAbilitySwap(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetAllowAltFireSpecialAbilitySwap");

	Params::MarinerCharacter_SetAllowAltFireSpecialAbilitySwap Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetAllSuppressionTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsSuppressed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetAllSuppressionTags(bool bIsSuppressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetAllSuppressionTags");

	Params::MarinerCharacter_SetAllSuppressionTags Parms{};

	Parms.bIsSuppressed = bIsSuppressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetFixedFootIK
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFixed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetFixedFootIK(bool bFixed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetFixedFootIK");

	Params::MarinerCharacter_SetFixedFootIK Parms{};

	Parms.bFixed = bFixed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetGameplayEffect
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApply                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetGameplayEffect(TSubclassOf<class UGameplayEffect> GameplayEffect, bool bApply, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetGameplayEffect");

	Params::MarinerCharacter_SetGameplayEffect Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.bApply = bApply;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetInputFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveVector*                     InCurve                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetInputFilter(class UCurveVector* InCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetInputFilter");

	Params::MarinerCharacter_SetInputFilter Parms{};

	Parms.InCurve = InCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetItemUseSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetItemUseSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetItemUseSuppressionByTag");

	Params::MarinerCharacter_SetItemUseSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetJumpSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetJumpSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetJumpSuppressionByTag");

	Params::MarinerCharacter_SetJumpSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetLookInputSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetLookInputSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetLookInputSuppressionByTag");

	Params::MarinerCharacter_SetLookInputSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetMovementInputSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetMovementInputSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetMovementInputSuppressionByTag");

	Params::MarinerCharacter_SetMovementInputSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetNonPriorityItemPickupSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetNonPriorityItemPickupSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetNonPriorityItemPickupSuppressionByTag");

	Params::MarinerCharacter_SetNonPriorityItemPickupSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetPriorityItemPickupSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetPriorityItemPickupSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetPriorityItemPickupSuppressionByTag");

	Params::MarinerCharacter_SetPriorityItemPickupSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetRuntimeStickAccelerationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetRuntimeStickAccelerationEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetRuntimeStickAccelerationEnabled");

	Params::MarinerCharacter_SetRuntimeStickAccelerationEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetSensitivityFromIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SpecificationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetSensitivityFromIndex(int32 SpecificationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetSensitivityFromIndex");

	Params::MarinerCharacter_SetSensitivityFromIndex Parms{};

	Parms.SpecificationIndex = SpecificationIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetSuppressionTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagsToSet                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsSuppressed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToSet, bool bIsSuppressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetSuppressionTags");

	Params::MarinerCharacter_SetSuppressionTags Parms{};

	Parms.SuppressionTagsToSet = std::move(SuppressionTagsToSet);
	Parms.bIsSuppressed = bIsSuppressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetTeamIndex");

	Params::MarinerCharacter_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetupProfileObjectBindings
// (Final, Native, Protected, BlueprintCallable)

void AMarinerCharacter::SetupProfileObjectBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetupProfileObjectBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SetWASDSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetWASDSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetWASDSuppressionByTag");

	Params::MarinerCharacter_SetWASDSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.SetWeaponInputSuppressionByTag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuppress                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::SetWeaponInputSuppressionByTag(bool bSuppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SetWeaponInputSuppressionByTag");

	Params::MarinerCharacter_SetWeaponInputSuppressionByTag Parms{};

	Parms.bSuppress = bSuppress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.StartJumpLoop
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InJumpLoopFrameTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::StartJumpLoop(int32 InJumpLoopFrameTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "StartJumpLoop");

	Params::MarinerCharacter_StartJumpLoop Parms{};

	Parms.InJumpLoopFrameTarget = InJumpLoopFrameTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.StopListeningToAnimInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          MontageListener                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCharacterAnimListenerContext    ListenerContext                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::StopListeningToAnimInstance(class UObject* MontageListener, EMarinerCharacterAnimListenerContext ListenerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "StopListeningToAnimInstance");

	Params::MarinerCharacter_StopListeningToAnimInstance Parms{};

	Parms.MontageListener = MontageListener;
	Parms.ListenerContext = ListenerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.StopMarinerCharacterMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCharacterMontage*         CharacterMontage                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::StopMarinerCharacterMontage(float BlendOutTime, const class UMarinerCharacterMontage* CharacterMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "StopMarinerCharacterMontage");

	Params::MarinerCharacter_StopMarinerCharacterMontage Parms{};

	Parms.BlendOutTime = BlendOutTime;
	Parms.CharacterMontage = CharacterMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.SwapAltFireOnSupportedConfiguration
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::SwapAltFireOnSupportedConfiguration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "SwapAltFireOnSupportedConfiguration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.TransitionCamera
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        Perspective                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerCharacter::TransitionCamera(const class FName& PerspectiveName, const struct FMarinerCameraPerspective& Perspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "TransitionCamera");

	Params::MarinerCharacter_TransitionCamera Parms{};

	Parms.PerspectiveName = PerspectiveName;
	Parms.Perspective = std::move(Perspective);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.TryInitiateFlashHitFeedback
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class APawn*                            HitInstigator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::TryInitiateFlashHitFeedback(class APawn* HitInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "TryInitiateFlashHitFeedback");

	Params::MarinerCharacter_TryInitiateFlashHitFeedback Parms{};

	Parms.HitInstigator = HitInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.UpdateInputFilterCurve
// (Final, Native, Private, BlueprintCallable)

void AMarinerCharacter::UpdateInputFilterCurve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "UpdateInputFilterCurve");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.UpdateOtherCharacterVisibilitiesByReality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerBasePlayerController*     LocalController                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacter::UpdateOtherCharacterVisibilitiesByReality(class AMarinerBasePlayerController* LocalController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "UpdateOtherCharacterVisibilitiesByReality");

	Params::MarinerCharacter_UpdateOtherCharacterVisibilitiesByReality Parms{};

	Parms.LocalController = LocalController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void AMarinerCharacter::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.UpdateTeamMaskCollision
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::UpdateTeamMaskCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "UpdateTeamMaskCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.UpdateUserSettings
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacter::UpdateUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "UpdateUserSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacter.BP_GetDamageableComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDamageableComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageableComponent* AMarinerCharacter::BP_GetDamageableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_GetDamageableComponent");

	Params::MarinerCharacter_BP_GetDamageableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.BP_OverrideCanUseViewCatchCapsule
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::BP_OverrideCanUseViewCatchCapsule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "BP_OverrideCanUseViewCatchCapsule");

	Params::MarinerCharacter_BP_OverrideCanUseViewCatchCapsule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.ClearAllSuppressionTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::ClearAllSuppressionTags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ClearAllSuppressionTags");

	Params::MarinerCharacter_ClearAllSuppressionTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.ClearSuppressionTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagsToClear                                 (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::ClearSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToClear) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ClearSuppressionTags");

	Params::MarinerCharacter_ClearSuppressionTags Parms{};

	Parms.SuppressionTagsToClear = std::move(SuppressionTagsToClear);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetActiveCapsuleComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* AMarinerCharacter::GetActiveCapsuleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetActiveCapsuleComponent");

	Params::MarinerCharacter_GetActiveCapsuleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetAimOffsets
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AMarinerCharacter::GetAimOffsets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetAimOffsets");

	Params::MarinerCharacter_GetAimOffsets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetAimTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerCharacter::GetAimTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetAimTarget");

	Params::MarinerCharacter_GetAimTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetAllNonMesh1PSceneComponents
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USceneComponent*>          OutNonMesh1PSceneComponents                            (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerCharacter::GetAllNonMesh1PSceneComponents(TArray<class USceneComponent*>* OutNonMesh1PSceneComponents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetAllNonMesh1PSceneComponents");

	Params::MarinerCharacter_GetAllNonMesh1PSceneComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNonMesh1PSceneComponents != nullptr)
		*OutNonMesh1PSceneComponents = std::move(Parms.OutNonMesh1PSceneComponents);
}


// Function Mariner.MarinerCharacter.GetAllowAltFireSpecialAbilitySwap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::GetAllowAltFireSpecialAbilitySwap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetAllowAltFireSpecialAbilitySwap");

	Params::MarinerCharacter_GetAllowAltFireSpecialAbilitySwap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetArenaReturnState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerArenaReturnState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerArenaReturnState AMarinerCharacter::GetArenaReturnState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetArenaReturnState");

	Params::MarinerCharacter_GetArenaReturnState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetBaseTurnSpeed
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetBaseTurnSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetBaseTurnSpeed");

	Params::MarinerCharacter_GetBaseTurnSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCharacterKnockoutAchievement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerAchievement                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerAchievement AMarinerCharacter::GetCharacterKnockoutAchievement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCharacterKnockoutAchievement");

	Params::MarinerCharacter_GetCharacterKnockoutAchievement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCharacterWinsAchievement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerAchievement                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerAchievement AMarinerCharacter::GetCharacterWinsAchievement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCharacterWinsAchievement");

	Params::MarinerCharacter_GetCharacterWinsAchievement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetControllerInputMagnitudeFilter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveFloat*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveFloat* AMarinerCharacter::GetControllerInputMagnitudeFilter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetControllerInputMagnitudeFilter");

	Params::MarinerCharacter_GetControllerInputMagnitudeFilter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetControllerInputPlatformFilter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveVector*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveVector* AMarinerCharacter::GetControllerInputPlatformFilter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetControllerInputPlatformFilter");

	Params::MarinerCharacter_GetControllerInputPlatformFilter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentArenaReturnState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerArenaReturnState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerArenaReturnState AMarinerCharacter::GetCurrentArenaReturnState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentArenaReturnState");

	Params::MarinerCharacter_GetCurrentArenaReturnState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentArenaReturnTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerArenaReturnTarget*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerArenaReturnTarget* AMarinerCharacter::GetCurrentArenaReturnTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentArenaReturnTarget");

	Params::MarinerCharacter_GetCurrentArenaReturnTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentInputs
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetCurrentInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentInputs");

	Params::MarinerCharacter_GetCurrentInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentJumpCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCharacter::GetCurrentJumpCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentJumpCount");

	Params::MarinerCharacter_GetCurrentJumpCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinCollectionDataAsset* AMarinerCharacter::GetCurrentSkinCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentSkinCollection");

	Params::MarinerCharacter_GetCurrentSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetCurrentVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetCurrentVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetCurrentVelocity");

	Params::MarinerCharacter_GetCurrentVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetDamageDealtMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetDamageDealtMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetDamageDealtMultiplier");

	Params::MarinerCharacter_GetDamageDealtMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetDamageInstigatorMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetDamageInstigatorMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetDamageInstigatorMultiplier");

	Params::MarinerCharacter_GetDamageInstigatorMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetDeadzonedInput
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetDeadzonedInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetDeadzonedInput");

	Params::MarinerCharacter_GetDeadzonedInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetDefaultSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinCollectionDataAsset* AMarinerCharacter::GetDefaultSkinCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetDefaultSkinCollection");

	Params::MarinerCharacter_GetDefaultSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetFallbackArenaReturnData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerCharacterFallbackReturnDataReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMarinerCharacterFallbackReturnData AMarinerCharacter::GetFallbackArenaReturnData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetFallbackArenaReturnData");

	Params::MarinerCharacter_GetFallbackArenaReturnData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetFireRateMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetFireRateMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetFireRateMultiplier");

	Params::MarinerCharacter_GetFireRateMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetHomingComponentOverride
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* AMarinerCharacter::GetHomingComponentOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetHomingComponentOverride");

	Params::MarinerCharacter_GetHomingComponentOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetHomingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerCharacter::GetHomingLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetHomingLocation");

	Params::MarinerCharacter_GetHomingLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetHomingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerCharacter::GetHomingTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetHomingTarget");

	Params::MarinerCharacter_GetHomingTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetImpulseDealtMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetImpulseDealtMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetImpulseDealtMultiplier");

	Params::MarinerCharacter_GetImpulseDealtMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetImpulseInstigatorMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetImpulseInstigatorMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetImpulseInstigatorMultiplier");

	Params::MarinerCharacter_GetImpulseInstigatorMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetInputBuffer
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetInputBuffer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetInputBuffer");

	Params::MarinerCharacter_GetInputBuffer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetItemInteractionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerItemInteractionComponent* ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerItemInteractionComponent* AMarinerCharacter::GetItemInteractionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetItemInteractionComponent");

	Params::MarinerCharacter_GetItemInteractionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetMarinerMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterMovement*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterMovement* AMarinerCharacter::GetMarinerMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetMarinerMovement");

	Params::MarinerCharacter_GetMarinerMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetMatSwapManagerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMaterialsSwapManagerComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMaterialsSwapManagerComponent* AMarinerCharacter::GetMatSwapManagerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetMatSwapManagerComponent");

	Params::MarinerCharacter_GetMatSwapManagerComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetMegablastSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetMegablastSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetMegablastSpeed");

	Params::MarinerCharacter_GetMegablastSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetOriginalCapsuleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetOriginalCapsuleHalfHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetOriginalCapsuleHalfHeight");

	Params::MarinerCharacter_GetOriginalCapsuleHalfHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetOriginalCapsuleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetOriginalCapsuleRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetOriginalCapsuleRadius");

	Params::MarinerCharacter_GetOriginalCapsuleRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetPawnMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacter::GetPawnMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetPawnMesh");

	Params::MarinerCharacter_GetPawnMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetPeggedInputVelocityCurve
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveFloat*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveFloat* AMarinerCharacter::GetPeggedInputVelocityCurve() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetPeggedInputVelocityCurve");

	Params::MarinerCharacter_GetPeggedInputVelocityCurve Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetProjectileSpawnLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerCharacter::GetProjectileSpawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetProjectileSpawnLocation");

	Params::MarinerCharacter_GetProjectileSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetRuntimeStickAccelerationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::GetRuntimeStickAccelerationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetRuntimeStickAccelerationEnabled");

	Params::MarinerCharacter_GetRuntimeStickAccelerationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetSensitivityTimeWhilePegged
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerCharacter::GetSensitivityTimeWhilePegged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetSensitivityTimeWhilePegged");

	Params::MarinerCharacter_GetSensitivityTimeWhilePegged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetSplinePathComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSplineComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSplineComponent* AMarinerCharacter::GetSplinePathComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetSplinePathComponent");

	Params::MarinerCharacter_GetSplinePathComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCharacter::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetTeamIndex");

	Params::MarinerCharacter_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetThirdPersonCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* AMarinerCharacter::GetThirdPersonCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetThirdPersonCamera");

	Params::MarinerCharacter_GetThirdPersonCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetThirdPersonCameraArm
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSpringArmComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSpringArmComponent* AMarinerCharacter::GetThirdPersonCameraArm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetThirdPersonCameraArm");

	Params::MarinerCharacter_GetThirdPersonCameraArm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetTimePeggedUntilAtTopEndTurnSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerCharacter::GetTimePeggedUntilAtTopEndTurnSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetTimePeggedUntilAtTopEndTurnSpeed");

	Params::MarinerCharacter_GetTimePeggedUntilAtTopEndTurnSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetTopEndTurnSpeed
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMarinerCharacter::GetTopEndTurnSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetTopEndTurnSpeed");

	Params::MarinerCharacter_GetTopEndTurnSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerWeapon*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerWeapon* AMarinerCharacter::GetWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetWeapon");

	Params::MarinerCharacter_GetWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetWeaponAttributes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerWeaponAttributes*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerWeaponAttributes* AMarinerCharacter::GetWeaponAttributes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetWeaponAttributes");

	Params::MarinerCharacter_GetWeaponAttributes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetWeaponMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacter::GetWeaponMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetWeaponMesh");

	Params::MarinerCharacter_GetWeaponMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetWeaponMesh1P
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacter::GetWeaponMesh1P() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetWeaponMesh1P");

	Params::MarinerCharacter_GetWeaponMesh1P Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.GetWeaponMesh3P
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacter::GetWeaponMesh3P() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "GetWeaponMesh3P");

	Params::MarinerCharacter_GetWeaponMesh3P Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.HasAnyOfGivenSuppressionTags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTagContainer            SuppressionTagsToCheck                                 (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::HasAnyOfGivenSuppressionTags(const struct FGameplayTagContainer& SuppressionTagsToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "HasAnyOfGivenSuppressionTags");

	Params::MarinerCharacter_HasAnyOfGivenSuppressionTags Parms{};

	Parms.SuppressionTagsToCheck = std::move(SuppressionTagsToCheck);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.HasPriorityItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::HasPriorityItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "HasPriorityItem");

	Params::MarinerCharacter_HasPriorityItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.HasValidHomingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::HasValidHomingTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "HasValidHomingTarget");

	Params::MarinerCharacter_HasValidHomingTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsAbilityInputSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsAbilityInputSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsAbilityInputSuppressedByTag");

	Params::MarinerCharacter_IsAbilityInputSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsAimMagnetismActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsAimMagnetismActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsAimMagnetismActive");

	Params::MarinerCharacter_IsAimMagnetismActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsAllItemPickupSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsAllItemPickupSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsAllItemPickupSuppressedByTag");

	Params::MarinerCharacter_IsAllItemPickupSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsCameraTransitioning
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsCameraTransitioning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsCameraTransitioning");

	Params::MarinerCharacter_IsCameraTransitioning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsCharacterStateAdditiveJumping
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsCharacterStateAdditiveJumping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsCharacterStateAdditiveJumping");

	Params::MarinerCharacter_IsCharacterStateAdditiveJumping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsFiring");

	Params::MarinerCharacter_IsFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsFirstPerson
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsFirstPerson");

	Params::MarinerCharacter_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsIndependentCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsIndependentCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsIndependentCharacter");

	Params::MarinerCharacter_IsIndependentCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsItemUseSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsItemUseSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsItemUseSuppressedByTag");

	Params::MarinerCharacter_IsItemUseSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsLookInputSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsLookInputSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsLookInputSuppressedByTag");

	Params::MarinerCharacter_IsLookInputSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsMegablasted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsMegablasted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsMegablasted");

	Params::MarinerCharacter_IsMegablasted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsMovementInputSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsMovementInputSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsMovementInputSuppressedByTag");

	Params::MarinerCharacter_IsMovementInputSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsNonPriorityItemPickupSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsNonPriorityItemPickupSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsNonPriorityItemPickupSuppressedByTag");

	Params::MarinerCharacter_IsNonPriorityItemPickupSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsPlayingMarinerCharacterMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterMontage*         CharacterMontage                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsPlayingMarinerCharacterMontage(const class UMarinerCharacterMontage* CharacterMontage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsPlayingMarinerCharacterMontage");

	Params::MarinerCharacter_IsPlayingMarinerCharacterMontage Parms{};

	Parms.CharacterMontage = CharacterMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsPlayingMontage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsPlayingMontage(const class UAnimMontage* Montage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsPlayingMontage");

	Params::MarinerCharacter_IsPlayingMontage Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsPriorityItemPickupSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsPriorityItemPickupSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsPriorityItemPickupSuppressedByTag");

	Params::MarinerCharacter_IsPriorityItemPickupSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsReticleRed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsReticleRed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsReticleRed");

	Params::MarinerCharacter_IsReticleRed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsReturningToArena
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsReturningToArena() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsReturningToArena");

	Params::MarinerCharacter_IsReturningToArena Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsSimulatingClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsSimulatingClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsSimulatingClient");

	Params::MarinerCharacter_IsSimulatingClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.IsWeaponInputSuppressedByTag
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::IsWeaponInputSuppressedByTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "IsWeaponInputSuppressedByTag");

	Params::MarinerCharacter_IsWeaponInputSuppressedByTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacter.ShouldKnockoutInitiateSplat
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    bWasKnockoutDueToMegablast                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacter::ShouldKnockoutInitiateSplat(bool bWasKnockoutDueToMegablast) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacter", "ShouldKnockoutInitiateSplat");

	Params::MarinerCharacter_ShouldKnockoutInitiateSplat Parms{};

	Parms.bWasKnockoutDueToMegablast = bWasKnockoutDueToMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterAbilityWidget.PopulateUsingSoftReference
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterAbilityWidget::PopulateUsingSoftReference(TSoftClassPtr<class UClass> Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterAbilityWidget", "PopulateUsingSoftReference");

	Params::MarinerCharacterAbilityWidget_PopulateUsingSoftReference Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterFrontendSkinUIData.GetPaletteColors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FLinearColor>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FLinearColor> UMarinerCharacterFrontendSkinUIData::GetPaletteColors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterFrontendSkinUIData", "GetPaletteColors");

	Params::MarinerCharacterFrontendSkinUIData_GetPaletteColors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterFrontendSkinUIData.GetPortraitBackground
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMarinerCharacterFrontendSkinUIData::GetPortraitBackground() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterFrontendSkinUIData", "GetPortraitBackground");

	Params::MarinerCharacterFrontendSkinUIData_GetPortraitBackground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.DebugDrawFastOverlapListenerHandle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           DrawColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::DebugDrawFastOverlapListenerHandle(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float DrawDuration, const struct FColor& DrawColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "DebugDrawFastOverlapListenerHandle");

	Params::MarinerFastCollisionUtils_DebugDrawFastOverlapListenerHandle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.DrawDuration = DrawDuration;
	Parms.DrawColor = std::move(DrawColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             OverlapperBox                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       BoxTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapBox(const class UObject* WorldContextObject, const struct FBox& OverlapperBox, const struct FTransform& BoxTransform, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapBox");

	Params::MarinerFastCollisionUtils_FastOverlapBox Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OverlapperBox = std::move(OverlapperBox);
	Parms.BoxTransform = std::move(BoxTransform);
	Parms.OverlapChannel = OverlapChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapBoxWithCollection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             OverlapperBox                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       BoxTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapBoxWithCollection(const class UObject* WorldContextObject, const struct FBox& OverlapperBox, const struct FTransform& BoxTransform, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapBoxWithCollection");

	Params::MarinerFastCollisionUtils_FastOverlapBoxWithCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OverlapperBox = std::move(OverlapperBox);
	Parms.BoxTransform = std::move(BoxTransform);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapCapsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapCapsule(const class UObject* WorldContextObject, const float CapsuleRadius, const struct FVector& StartPoint, const struct FVector& EndPoint, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapCapsule");

	Params::MarinerFastCollisionUtils_FastOverlapCapsule Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.OverlapChannel = OverlapChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapCapsuleWithCollection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapCapsuleWithCollection(const class UObject* WorldContextObject, const float CapsuleRadius, const struct FVector& StartPoint, const struct FVector& EndPoint, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapCapsuleWithCollection");

	Params::MarinerFastCollisionUtils_FastOverlapCapsuleWithCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapSphere(const class UObject* WorldContextObject, const float SphereRadius, const struct FVector& Location, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapSphere");

	Params::MarinerFastCollisionUtils_FastOverlapSphere Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SphereRadius = SphereRadius;
	Parms.Location = std::move(Location);
	Parms.OverlapChannel = OverlapChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.FastOverlapSphereWithCollection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerFastCollisionComponent*>OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::FastOverlapSphereWithCollection(const class UObject* WorldContextObject, const float SphereRadius, const struct FVector& Location, ECollisionChannel OverlapChannel, TArray<class UMarinerFastCollisionComponent*>* OutHits, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "FastOverlapSphereWithCollection");

	Params::MarinerFastCollisionUtils_FastOverlapSphereWithCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SphereRadius = SphereRadius;
	Parms.Location = std::move(Location);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.IsProjectileFastOverlapListenerVolumeValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastCollisionUtils::IsProjectileFastOverlapListenerVolumeValid(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "IsProjectileFastOverlapListenerVolumeValid");

	Params::MarinerFastCollisionUtils_IsProjectileFastOverlapListenerVolumeValid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerBoxVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OverlapResponder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Extents                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMarinerProjectileFastOverlapListenerHandle UMarinerFastCollisionUtils::RegisterProjectileFastOverlapListenerBoxVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, const struct FVector& Extents, const struct FVector& Location, const struct FRotator& Rotation, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "RegisterProjectileFastOverlapListenerBoxVolume");

	Params::MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerBoxVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OverlapResponder = OverlapResponder;
	Parms.Extents = std::move(Extents);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerCapsuleVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OverlapResponder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMarinerProjectileFastOverlapListenerHandle UMarinerFastCollisionUtils::RegisterProjectileFastOverlapListenerCapsuleVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, float Radius, float HalfHeight, const struct FVector& Location, const struct FRotator& Rotation, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "RegisterProjectileFastOverlapListenerCapsuleVolume");

	Params::MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerCapsuleVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OverlapResponder = OverlapResponder;
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.RegisterProjectileFastOverlapListenerSphereVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OverlapResponder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       OverlapChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CollectionToCollideAgainst                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMarinerProjectileFastOverlapListenerHandle UMarinerFastCollisionUtils::RegisterProjectileFastOverlapListenerSphereVolume(const class UObject* WorldContextObject, class AActor* OverlapResponder, float Radius, const struct FVector& Location, ECollisionChannel OverlapChannel, int32 CollectionToCollideAgainst)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "RegisterProjectileFastOverlapListenerSphereVolume");

	Params::MarinerFastCollisionUtils_RegisterProjectileFastOverlapListenerSphereVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OverlapResponder = OverlapResponder;
	Parms.Radius = Radius;
	Parms.Location = std::move(Location);
	Parms.OverlapChannel = OverlapChannel;
	Parms.CollectionToCollideAgainst = CollectionToCollideAgainst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastCollisionUtils.UnregisterProjectileFastOverlapListenerVolume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UnregisterProjectileFastOverlapListenerVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UnregisterProjectileFastOverlapListenerVolume");

	Params::MarinerFastCollisionUtils_UnregisterProjectileFastOverlapListenerVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerBoxVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Extents                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerBoxVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Extents, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerBoxVolume");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerBoxVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Extents = std::move(Extents);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerCapsuleVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerCapsuleVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float Radius, float HalfHeight, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerCapsuleVolume");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerCapsuleVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerLocation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerLocation");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerLocationAndRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerLocationAndRotation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerLocationAndRotation");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerLocationAndRotation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerRotation(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerRotation");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerRotation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastCollisionUtils.UpdateProjectileFastOverlapListenerSphereVolume
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerProjectileFastOverlapListenerHandleHandle                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFastCollisionUtils::UpdateProjectileFastOverlapListenerSphereVolume(const class UObject* WorldContextObject, const struct FMarinerProjectileFastOverlapListenerHandle& Handle, float Radius, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerFastCollisionUtils", "UpdateProjectileFastOverlapListenerSphereVolume");

	Params::MarinerFastCollisionUtils_UpdateProjectileFastOverlapListenerSphereVolume Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Handle = std::move(Handle);
	Parms.Radius = Radius;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.ClearGreetingsHistory
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacterLite::ClearGreetingsHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "ClearGreetingsHistory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.ForceLoopingReturnTrail
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacterLite::ForceLoopingReturnTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "ForceLoopingReturnTrail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.GetPostGameResultsCameraXOffset
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float AMarinerCharacterLite::GetPostGameResultsCameraXOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetPostGameResultsCameraXOffset");

	Params::MarinerCharacterLite_GetPostGameResultsCameraXOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetPostGameResultsCameraZOffset
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float AMarinerCharacterLite::GetPostGameResultsCameraZOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetPostGameResultsCameraZOffset");

	Params::MarinerCharacterLite_GetPostGameResultsCameraZOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.PlayBlastOffMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacterLite::PlayBlastOffMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "PlayBlastOffMontage");

	Params::MarinerCharacterLite_PlayBlastOffMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.PlayDefeatMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacterLite::PlayDefeatMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "PlayDefeatMontage");

	Params::MarinerCharacterLite_PlayDefeatMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.PlayDrawMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacterLite::PlayDrawMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "PlayDrawMontage");

	Params::MarinerCharacterLite_PlayDrawMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.PlayVictoryMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacterLite::PlayVictoryMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "PlayVictoryMontage");

	Params::MarinerCharacterLite_PlayVictoryMontage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.SetEnableDizzy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetEnableDizzy(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetEnableDizzy");

	Params::MarinerCharacterLite_SetEnableDizzy Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetEnableFidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetEnableFidget(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetEnableFidget");

	Params::MarinerCharacterLite_SetEnableFidget Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetEnableGreeting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetEnableGreeting(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetEnableGreeting");

	Params::MarinerCharacterLite_SetEnableGreeting Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetEnableTickle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetEnableTickle(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetEnableTickle");

	Params::MarinerCharacterLite_SetEnableTickle Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetInteractableBehaviorAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetInteractableBehaviorAllowed(bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetInteractableBehaviorAllowed");

	Params::MarinerCharacterLite_SetInteractableBehaviorAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetIsLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetIsLooping(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetIsLooping");

	Params::MarinerCharacterLite_SetIsLooping Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerPlayerState*              NewPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetPlayerState(class AMarinerPlayerState* NewPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetPlayerState");

	Params::MarinerCharacterLite_SetPlayerState Parms{};

	Parms.NewPlayerState = NewPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.SetPreviewAnimationModeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterLite::SetPreviewAnimationModeEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "SetPreviewAnimationModeEnabled");

	Params::MarinerCharacterLite_SetPreviewAnimationModeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterLite.GetCapsuleComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* AMarinerCharacterLite::GetCapsuleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetCapsuleComponent");

	Params::MarinerCharacterLite_GetCapsuleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetCharacterClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> AMarinerCharacterLite::GetCharacterClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetCharacterClass");

	Params::MarinerCharacterLite_GetCharacterClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetCharacterMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacterLite::GetCharacterMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetCharacterMesh");

	Params::MarinerCharacterLite_GetCharacterMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetCurrentSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> AMarinerCharacterLite::GetCurrentSkinCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetCurrentSkinCollection");

	Params::MarinerCharacterLite_GetCurrentSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerPlayerState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPlayerState* AMarinerCharacterLite::GetPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetPlayerState");

	Params::MarinerCharacterLite_GetPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterLite.GetWeaponMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerCharacterLite::GetWeaponMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterLite", "GetWeaponMesh");

	Params::MarinerCharacterLite_GetWeaponMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterManager.IsCharacterOnFreeRotation
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterManager::IsCharacterOnFreeRotation(const TSoftClassPtr<class UClass>& CharacterClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterManager", "IsCharacterOnFreeRotation");

	Params::MarinerCharacterManager_IsCharacterOnFreeRotation Parms{};

	Parms.CharacterClass = CharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMontage.Contains
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMontage::Contains(const class UAnimMontage* Montage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMontage", "Contains");

	Params::MarinerCharacterMontage_Contains Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFrontEndGlobals.GetNewsGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerNewsGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerNewsGlobals* UMarinerFrontEndGlobals::GetNewsGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFrontEndGlobals", "GetNewsGlobals");

	Params::MarinerFrontEndGlobals_GetNewsGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFrontEndGlobals.GetPlaylistGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlaylistGlobals*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlaylistGlobals* UMarinerFrontEndGlobals::GetPlaylistGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFrontEndGlobals", "GetPlaylistGlobals");

	Params::MarinerFrontEndGlobals_GetPlaylistGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFrontEndGlobals.GetStoreGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerStoreGlobals*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerStoreGlobals* UMarinerFrontEndGlobals::GetStoreGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFrontEndGlobals", "GetStoreGlobals");

	Params::MarinerFrontEndGlobals_GetStoreGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.ApplyHitStun
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   HitStunDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::ApplyHitStun(float HitStunDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplyHitStun");

	Params::MarinerCharacterMovement_ApplyHitStun Parms{};

	Parms.HitStunDuration = HitStunDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ApplyLerpToSpeedRootMotion
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideExtendedDurationOnStop                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      OverrideVelocityChangeOverTimeCurve                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideStartingVelocityMagnitude                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideTargetVelocityMagnitude                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerLerpToSpeedRootMotionPolicy     OverrideLerpTowardsTargetPolicy                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::ApplyLerpToSpeedRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed> Defaults, float OverrideDuration, float OverrideExtendedDurationOnStop, class UCurveFloat* OverrideVelocityChangeOverTimeCurve, float OverrideStartingVelocityMagnitude, float OverrideTargetVelocityMagnitude, EMarinerLerpToSpeedRootMotionPolicy OverrideLerpTowardsTargetPolicy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplyLerpToSpeedRootMotion");

	Params::MarinerCharacterMovement_ApplyLerpToSpeedRootMotion Parms{};

	Parms.Defaults = Defaults;
	Parms.OverrideDuration = OverrideDuration;
	Parms.OverrideExtendedDurationOnStop = OverrideExtendedDurationOnStop;
	Parms.OverrideVelocityChangeOverTimeCurve = OverrideVelocityChangeOverTimeCurve;
	Parms.OverrideStartingVelocityMagnitude = OverrideStartingVelocityMagnitude;
	Parms.OverrideTargetVelocityMagnitude = OverrideTargetVelocityMagnitude;
	Parms.OverrideLerpTowardsTargetPolicy = OverrideLerpTowardsTargetPolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ApplyMegablast
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::ApplyMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplyMegablast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ApplyMoveToDynamicForceRootMotion
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGetStartLocationFromCharacter                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideRestrictSpeedToExpected                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveVector*                     OverridePathOffsetCurve                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      OverrideTimeMappingCurve                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERootMotionAccumulateMode               OverrideAccumulateMode                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERootMotionFinishVelocityMode           OverrideFinishVelocityParams_Mode                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideFinishVelocityParams_ClampVelocity             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OverrideFinishVelocityParams_SetVelocity               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::ApplyMoveToDynamicForceRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce> Defaults, const struct FVector& StartLocation, const struct FVector& TargetLocation, bool bGetStartLocationFromCharacter, float OverrideDuration, bool bOverrideRestrictSpeedToExpected, class UCurveVector* OverridePathOffsetCurve, class UCurveFloat* OverrideTimeMappingCurve, ERootMotionAccumulateMode OverrideAccumulateMode, ERootMotionFinishVelocityMode OverrideFinishVelocityParams_Mode, float OverrideFinishVelocityParams_ClampVelocity, const struct FVector& OverrideFinishVelocityParams_SetVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplyMoveToDynamicForceRootMotion");

	Params::MarinerCharacterMovement_ApplyMoveToDynamicForceRootMotion Parms{};

	Parms.Defaults = Defaults;
	Parms.StartLocation = std::move(StartLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.bGetStartLocationFromCharacter = bGetStartLocationFromCharacter;
	Parms.OverrideDuration = OverrideDuration;
	Parms.bOverrideRestrictSpeedToExpected = bOverrideRestrictSpeedToExpected;
	Parms.OverridePathOffsetCurve = OverridePathOffsetCurve;
	Parms.OverrideTimeMappingCurve = OverrideTimeMappingCurve;
	Parms.OverrideAccumulateMode = OverrideAccumulateMode;
	Parms.OverrideFinishVelocityParams_Mode = OverrideFinishVelocityParams_Mode;
	Parms.OverrideFinishVelocityParams_ClampVelocity = OverrideFinishVelocityParams_ClampVelocity;
	Parms.OverrideFinishVelocityParams_SetVelocity = std::move(OverrideFinishVelocityParams_SetVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ApplyRecoveryLocal
// (Final, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::ApplyRecoveryLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplyRecoveryLocal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ApplySlowToStopRootMotion
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_SlowToStop>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      OverrideDecelerationCurve                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideStartingSpeed                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::ApplySlowToStopRootMotion(TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_SlowToStop> Defaults, float OverrideDuration, class UCurveFloat* OverrideDecelerationCurve, float OverrideStartingSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ApplySlowToStopRootMotion");

	Params::MarinerCharacterMovement_ApplySlowToStopRootMotion Parms{};

	Parms.Defaults = Defaults;
	Parms.OverrideDuration = OverrideDuration;
	Parms.OverrideDecelerationCurve = OverrideDecelerationCurve;
	Parms.OverrideStartingSpeed = OverrideStartingSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.AuthorityRemoveRootMotionSourceByID
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RootMotionSourceID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::AuthorityRemoveRootMotionSourceByID(int32 RootMotionSourceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "AuthorityRemoveRootMotionSourceByID");

	Params::MarinerCharacterMovement_AuthorityRemoveRootMotionSourceByID Parms{};

	Parms.RootMotionSourceID = RootMotionSourceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.AuthoritySetDisableDynamicGravityFrictionAndBraking
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsDisabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::AuthoritySetDisableDynamicGravityFrictionAndBraking(bool bIsDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "AuthoritySetDisableDynamicGravityFrictionAndBraking");

	Params::MarinerCharacterMovement_AuthoritySetDisableDynamicGravityFrictionAndBraking Parms{};

	Parms.bIsDisabled = bIsDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ConsumeClientSendMoveUpdateBatch
// (Final, Native, Protected)

void UMarinerCharacterMovement::ConsumeClientSendMoveUpdateBatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ConsumeClientSendMoveUpdateBatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.IsRootMotionSourceActive
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RootMotionSourceID                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsRootMotionSourceActive(int32 RootMotionSourceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsRootMotionSourceActive");

	Params::MarinerCharacterMovement_IsRootMotionSourceActive Parms{};

	Parms.RootMotionSourceID = RootMotionSourceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.LocallyPlayMegablastBounceSFX
// (Final, Native, Public)

void UMarinerCharacterMovement::LocallyPlayMegablastBounceSFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "LocallyPlayMegablastBounceSFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastLerpBetweenPoints
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              PositionAtZero                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNonQuantizedRotator             RotationAtZero                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              PositionAtOne                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNonQuantizedRotator             RotationAtOne                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UCurveFloat*                      LerpCurve                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideMegablasts                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::MulticastLerpBetweenPoints(class FName MotionName, const struct FVector_NetQuantize& PositionAtZero, const struct FNonQuantizedRotator& RotationAtZero, const struct FVector_NetQuantize& PositionAtOne, const struct FNonQuantizedRotator& RotationAtOne, class UCurveFloat* LerpCurve, bool bOverrideMegablasts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastLerpBetweenPoints");

	Params::MarinerCharacterMovement_MulticastLerpBetweenPoints Parms{};

	Parms.MotionName = MotionName;
	Parms.PositionAtZero = std::move(PositionAtZero);
	Parms.RotationAtZero = std::move(RotationAtZero);
	Parms.PositionAtOne = std::move(PositionAtOne);
	Parms.RotationAtOne = std::move(RotationAtOne);
	Parms.LerpCurve = LerpCurve;
	Parms.bOverrideMegablasts = bOverrideMegablasts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastMegablastApplied
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::MulticastMegablastApplied(class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastMegablastApplied");

	Params::MarinerCharacterMovement_MulticastMegablastApplied Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastMegablastRemoved
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UMarinerCharacterMovement::MulticastMegablastRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastMegablastRemoved");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastMoveAlongCharacterSpline_ArenaReturn
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AssignedSplineID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      CharacterMovementStartCurve                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      CharacterMovementEndCurve                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CharacterEndRotationBlendTime                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::MulticastMoveAlongCharacterSpline_ArenaReturn(class FName MotionName, int32 AssignedSplineID, class UCurveFloat* CharacterMovementStartCurve, class UCurveFloat* CharacterMovementEndCurve, float CharacterEndRotationBlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastMoveAlongCharacterSpline_ArenaReturn");

	Params::MarinerCharacterMovement_MulticastMoveAlongCharacterSpline_ArenaReturn Parms{};

	Parms.MotionName = MotionName;
	Parms.AssignedSplineID = AssignedSplineID;
	Parms.CharacterMovementStartCurve = CharacterMovementStartCurve;
	Parms.CharacterMovementEndCurve = CharacterMovementEndCurve;
	Parms.CharacterEndRotationBlendTime = CharacterEndRotationBlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastRemoveRootMotionSource
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::MulticastRemoveRootMotionSource(class FName MotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastRemoveRootMotionSource");

	Params::MarinerCharacterMovement_MulticastRemoveRootMotionSource Parms{};

	Parms.MotionName = MotionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.MulticastSlowToStop
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DecelerationTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      DecelerationCurve                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::MulticastSlowToStop(class FName MotionName, float DecelerationTime, class UCurveFloat* DecelerationCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "MulticastSlowToStop");

	Params::MarinerCharacterMovement_MulticastSlowToStop Parms{};

	Parms.MotionName = MotionName;
	Parms.DecelerationTime = DecelerationTime;
	Parms.DecelerationCurve = DecelerationCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.OnMegablastBounce
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       BounceHitResult                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIsMegaBlastBouncing                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::OnMegablastBounce(const struct FHitResult& BounceHitResult, bool bIsMegaBlastBouncing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "OnMegablastBounce");

	Params::MarinerCharacterMovement_OnMegablastBounce Parms{};

	Parms.BounceHitResult = std::move(BounceHitResult);
	Parms.bIsMegaBlastBouncing = bIsMegaBlastBouncing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.OnOwnerCharacterRecoveredAuthority
// (Final, Native, Public)

void UMarinerCharacterMovement::OnOwnerCharacterRecoveredAuthority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "OnOwnerCharacterRecoveredAuthority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RemoveHitStun
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::RemoveHitStun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RemoveHitStun");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RemoveMegablast
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::RemoveMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RemoveMegablast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RemoveMegablastTimeDilation
// (Final, Native, Protected)

void UMarinerCharacterMovement::RemoveMegablastTimeDilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RemoveMegablastTimeDilation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RemoveRootMotion
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             RootMotionName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::RemoveRootMotion(class FName RootMotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RemoveRootMotion");

	Params::MarinerCharacterMovement_RemoveRootMotion Parms{};

	Parms.RootMotionName = RootMotionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RemoveRootMotionSourceByNameLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::RemoveRootMotionSourceByNameLocal(class FName MotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RemoveRootMotionSourceByNameLocal");

	Params::MarinerCharacterMovement_RemoveRootMotionSourceByNameLocal Parms{};

	Parms.MotionName = MotionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ResetAirborneJumpCount
// (Final, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::ResetAirborneJumpCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ResetAirborneJumpCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.ResetAirborneJumpCountLocal
// (Final, Native, Public, BlueprintCallable)

void UMarinerCharacterMovement::ResetAirborneJumpCountLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ResetAirborneJumpCountLocal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.RootMotionLerpBetweenPoints
// (Final, BlueprintAuthorityOnly, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PositionAtZero                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNonQuantizedRotator             RotationAtZero                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          PositionAtOne                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNonQuantizedRotator             RotationAtOne                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UCurveFloat*                      LerpCurve                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideMegablasts                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCharacterMovement::RootMotionLerpBetweenPoints(class FName MotionName, const struct FVector& PositionAtZero, const struct FNonQuantizedRotator& RotationAtZero, const struct FVector& PositionAtOne, const struct FNonQuantizedRotator& RotationAtOne, class UCurveFloat* LerpCurve, bool bOverrideMegablasts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RootMotionLerpBetweenPoints");

	Params::MarinerCharacterMovement_RootMotionLerpBetweenPoints Parms{};

	Parms.MotionName = MotionName;
	Parms.PositionAtZero = std::move(PositionAtZero);
	Parms.RotationAtZero = std::move(RotationAtZero);
	Parms.PositionAtOne = std::move(PositionAtOne);
	Parms.RotationAtOne = std::move(RotationAtOne);
	Parms.LerpCurve = LerpCurve;
	Parms.bOverrideMegablasts = bOverrideMegablasts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.RootMotionMoveAlongCharacterSpline_ArenaReturn
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AssignedSplineID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      CharacterMovementStartCurve                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      CharacterMovementEndCurve                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CharacterEndArenaReturnRotationBlendTime               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCharacterMovement::RootMotionMoveAlongCharacterSpline_ArenaReturn(class FName MotionName, int32 AssignedSplineID, class UCurveFloat* CharacterMovementStartCurve, class UCurveFloat* CharacterMovementEndCurve, float CharacterEndArenaReturnRotationBlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RootMotionMoveAlongCharacterSpline_ArenaReturn");

	Params::MarinerCharacterMovement_RootMotionMoveAlongCharacterSpline_ArenaReturn Parms{};

	Parms.MotionName = MotionName;
	Parms.AssignedSplineID = AssignedSplineID;
	Parms.CharacterMovementStartCurve = CharacterMovementStartCurve;
	Parms.CharacterMovementEndCurve = CharacterMovementEndCurve;
	Parms.CharacterEndArenaReturnRotationBlendTime = CharacterEndArenaReturnRotationBlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.RootMotionSlowToStop
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             MotionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DecelerationTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      DecelerationCurve                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCharacterMovement::RootMotionSlowToStop(class FName MotionName, float DecelerationTime, class UCurveFloat* DecelerationCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "RootMotionSlowToStop");

	Params::MarinerCharacterMovement_RootMotionSlowToStop Parms{};

	Parms.MotionName = MotionName;
	Parms.DecelerationTime = DecelerationTime;
	Parms.DecelerationCurve = DecelerationCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.ServerMoveFlowUpdateTimerExpired
// (Final, Native, Private)

void UMarinerCharacterMovement::ServerMoveFlowUpdateTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "ServerMoveFlowUpdateTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.SetDodgeState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsDodgeActive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::SetDodgeState(bool bInIsDodgeActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "SetDodgeState");

	Params::MarinerCharacterMovement_SetDodgeState Parms{};

	Parms.bInIsDodgeActive = bInIsDodgeActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.SetMegablastLookRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterMovement::SetMegablastLookRotation(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "SetMegablastLookRotation");

	Params::MarinerCharacterMovement_SetMegablastLookRotation Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.SimulatedClientPlayMegablastBounceSFX
// (Final, Native, Public)

void UMarinerCharacterMovement::SimulatedClientPlayMegablastBounceSFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "SimulatedClientPlayMegablastBounceSFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovement.GetBlastedAirborneDescendingGravityScalar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetBlastedAirborneDescendingGravityScalar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetBlastedAirborneDescendingGravityScalar");

	Params::MarinerCharacterMovement_GetBlastedAirborneDescendingGravityScalar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetCurrentClientTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetCurrentClientTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetCurrentClientTime");

	Params::MarinerCharacterMovement_GetCurrentClientTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetGravityScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetGravityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetGravityScale");

	Params::MarinerCharacterMovement_GetGravityScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetLaunchMagnitudeMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetLaunchMagnitudeMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetLaunchMagnitudeMultiplier");

	Params::MarinerCharacterMovement_GetLaunchMagnitudeMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetMarinerCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerCharacterMovement::GetMarinerCharacterOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetMarinerCharacterOwner");

	Params::MarinerCharacterMovement_GetMarinerCharacterOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetMaxJumpCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerCharacterMovement::GetMaxJumpCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetMaxJumpCount");

	Params::MarinerCharacterMovement_GetMaxJumpCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetMegablastRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UMarinerCharacterMovement::GetMegablastRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetMegablastRotation");

	Params::MarinerCharacterMovement_GetMegablastRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetMegablastSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetMegablastSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetMegablastSpeed");

	Params::MarinerCharacterMovement_GetMegablastSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetMoveRearwardInputScaleMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetMoveRearwardInputScaleMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetMoveRearwardInputScaleMultiplier");

	Params::MarinerCharacterMovement_GetMoveRearwardInputScaleMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.GetSelfBlastedAirborneDescendingGravityScalar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerCharacterMovement::GetSelfBlastedAirborneDescendingGravityScalar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "GetSelfBlastedAirborneDescendingGravityScalar");

	Params::MarinerCharacterMovement_GetSelfBlastedAirborneDescendingGravityScalar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.HasOwnerAuthority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::HasOwnerAuthority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "HasOwnerAuthority");

	Params::MarinerCharacterMovement_HasOwnerAuthority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.InGroundJumpWhileFallingGracePeriod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::InGroundJumpWhileFallingGracePeriod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "InGroundJumpWhileFallingGracePeriod");

	Params::MarinerCharacterMovement_InGroundJumpWhileFallingGracePeriod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.InOverrideRootMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::InOverrideRootMotion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "InOverrideRootMotion");

	Params::MarinerCharacterMovement_InOverrideRootMotion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsDynamicGravityBrakingAndFrictionDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsDynamicGravityBrakingAndFrictionDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsDynamicGravityBrakingAndFrictionDisabled");

	Params::MarinerCharacterMovement_IsDynamicGravityBrakingAndFrictionDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsHitStunActiveOrPendingApply
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsHitStunActiveOrPendingApply() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsHitStunActiveOrPendingApply");

	Params::MarinerCharacterMovement_IsHitStunActiveOrPendingApply Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsHitStunned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsHitStunned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsHitStunned");

	Params::MarinerCharacterMovement_IsHitStunned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsHitStunPendingApply
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsHitStunPendingApply() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsHitStunPendingApply");

	Params::MarinerCharacterMovement_IsHitStunPendingApply Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsMoveAffectingGameplayEffectPendingApply
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameplayEffect>      Effect                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutPendingCount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsMoveAffectingGameplayEffectPendingApply(TSubclassOf<class UGameplayEffect> Effect, int32* OutPendingCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsMoveAffectingGameplayEffectPendingApply");

	Params::MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingApply Parms{};

	Parms.Effect = Effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPendingCount != nullptr)
		*OutPendingCount = Parms.OutPendingCount;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsMoveAffectingGameplayEffectPendingRemove
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameplayEffect>      Effect                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutPendingCount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsMoveAffectingGameplayEffectPendingRemove(TSubclassOf<class UGameplayEffect> Effect, int32* OutPendingCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsMoveAffectingGameplayEffectPendingRemove");

	Params::MarinerCharacterMovement_IsMoveAffectingGameplayEffectPendingRemove Parms{};

	Parms.Effect = Effect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPendingCount != nullptr)
		*OutPendingCount = Parms.OutPendingCount;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsOwnerLocallyControlled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsOwnerLocallyControlled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsOwnerLocallyControlled");

	Params::MarinerCharacterMovement_IsOwnerLocallyControlled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovement.IsReplayingMoves
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterMovement::IsReplayingMoves() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovement", "IsReplayingMoves");

	Params::MarinerCharacterMovement_IsReplayingMoves Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_AirborneLateralFriction
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_AirborneLateralFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_AirborneLateralFriction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_AirControl
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_AirControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_AirControl");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_AirControlBoostLateralSpeedThreshold
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_AirControlBoostLateralSpeedThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_AirControlBoostLateralSpeedThreshold");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_AirControlBoostModifier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_AirControlBoostModifier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_AirControlBoostModifier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_AirJumpScale
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_AirJumpScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_AirJumpScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BlastedAirborneDescendingGravityScalar
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BlastedAirborneDescendingGravityScalar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BlastedAirborneDescendingGravityScalar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BounceFriction
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BounceFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BounceFriction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_Bounciness
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_Bounciness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_Bounciness");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BrakingDecelerationFlying
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BrakingDecelerationFlying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BrakingDecelerationFlying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BrakingDecelerationGround
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BrakingDecelerationGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BrakingDecelerationGround");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BrakingFriction
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BrakingFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BrakingFriction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_BrakingFrictionMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_BrakingFrictionMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_BrakingFrictionMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_CapsuleHalfHeightMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_CapsuleHalfHeightMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_CapsuleHalfHeightMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_CapsuleRadiusMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_CapsuleRadiusMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_CapsuleRadiusMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_GravityScale
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_GravityScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_GravityScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_GroundFriction
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_GroundFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_GroundFriction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_GroundJumpScale
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_GroundJumpScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_GroundJumpScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_JumpDifferentDirectionLateralSpeedMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_JumpDifferentDirectionLateralSpeedMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_JumpDifferentDirectionLateralSpeedMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_JumpSameDirectionLateralSpeedMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_JumpSameDirectionLateralSpeedMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_JumpSameDirectionLateralSpeedMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_LateralBrakingDecelerationAirborne
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_LateralBrakingDecelerationAirborne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_LateralBrakingDecelerationAirborne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_MaxAcceleration
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_MaxAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_MaxAcceleration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_MaxBaseMovementSpeed
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_MaxBaseMovementSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_MaxBaseMovementSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_MaxBounceSpeed
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_MaxBounceSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_MaxBounceSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_MoveRearwardInputScaleMultiplier
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_MoveRearwardInputScaleMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_MoveRearwardInputScaleMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterMovementAttributes.OnRep_SelfBlastedAirborneDescendingGravityScalar
// (Final, Native, Protected)

void UMarinerCharacterMovementAttributes::OnRep_SelfBlastedAirborneDescendingGravityScalar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterMovementAttributes", "OnRep_SelfBlastedAirborneDescendingGravityScalar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterPinWidget.ClearActionText
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMarinerCharacterPinWidget::ClearActionText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "ClearActionText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.ClearGameModeWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMarinerCharacterPinWidget::ClearGameModeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "ClearGameModeWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.ClearIcon
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UMarinerCharacterPinWidget::ClearIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "ClearIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.HandleMegablastEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigator                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::HandleMegablastEvent(class AMarinerPlayerState* MegablastInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "HandleMegablastEvent");

	Params::MarinerCharacterPinWidget_HandleMegablastEvent Parms{};

	Parms.MegablastInstigator = MegablastInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.HandleOwnerKnockedOutTrackedPlayer
// (Event, Public, BlueprintEvent)

void UMarinerCharacterPinWidget::HandleOwnerKnockedOutTrackedPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "HandleOwnerKnockedOutTrackedPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.HandleRecoveredFromMegablastEvent
// (Event, Public, BlueprintEvent)

void UMarinerCharacterPinWidget::HandleRecoveredFromMegablastEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "HandleRecoveredFromMegablastEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.OnCharacterArenaReturnStateChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerArenaReturnState                PreviousState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerArenaReturnState                NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::OnCharacterArenaReturnStateChanged(EMarinerArenaReturnState PreviousState, EMarinerArenaReturnState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnCharacterArenaReturnStateChanged");

	Params::MarinerCharacterPinWidget_OnCharacterArenaReturnStateChanged Parms{};

	Parms.PreviousState = PreviousState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.OnDamagedByLocalClient
// (Event, Public, BlueprintEvent)

void UMarinerCharacterPinWidget::OnDamagedByLocalClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnDamagedByLocalClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.OnDamagedLocalClient
// (Event, Public, BlueprintEvent)

void UMarinerCharacterPinWidget::OnDamagedLocalClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnDamagedLocalClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterPinWidget.OnInNameViewConeChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInNameViewCone                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::OnInNameViewConeChanged(bool bInNameViewCone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnInNameViewConeChanged");

	Params::MarinerCharacterPinWidget_OnInNameViewConeChanged Parms{};

	Parms.bInNameViewCone = bInNameViewCone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.OnIntersectsAimRayChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIntersectsAimRay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::OnIntersectsAimRayChanged(bool bIntersectsAimRay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnIntersectsAimRayChanged");

	Params::MarinerCharacterPinWidget_OnIntersectsAimRayChanged Parms{};

	Parms.bIntersectsAimRay = bIntersectsAimRay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.OnTrackedPlayerChangedTeams
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              TrackedPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::OnTrackedPlayerChangedTeams(class AMarinerPlayerState* TrackedPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "OnTrackedPlayerChangedTeams");

	Params::MarinerCharacterPinWidget_OnTrackedPlayerChangedTeams Parms{};

	Parms.TrackedPlayerState = TrackedPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.SetActionText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::SetActionText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "SetActionText");

	Params::MarinerCharacterPinWidget_SetActionText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.SetForcedOn
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForcedOn                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::SetForcedOn(bool bForcedOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "SetForcedOn");

	Params::MarinerCharacterPinWidget_SetForcedOn Parms{};

	Parms.bForcedOn = bForcedOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.SetGameModeWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMarinerPinGameModeWidget>GameModeWidget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::SetGameModeWidget(TSubclassOf<class UMarinerPinGameModeWidget> GameModeWidget, class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "SetGameModeWidget");

	Params::MarinerCharacterPinWidget_SetGameModeWidget Parms{};

	Parms.GameModeWidget = GameModeWidget;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.SetIcon
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bForcesPinVisible                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bImageCanDim                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterPinWidget::SetIcon(const struct FSlateBrush& Brush, bool bForcesPinVisible, bool bImageCanDim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "SetIcon");

	Params::MarinerCharacterPinWidget_SetIcon Parms{};

	Parms.Brush = std::move(Brush);
	Parms.bForcesPinVisible = bForcesPinVisible;
	Parms.bImageCanDim = bImageCanDim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterPinWidget.GetCharacterArenaReturnState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerArenaReturnState                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerArenaReturnState UMarinerCharacterPinWidget::GetCharacterArenaReturnState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "GetCharacterArenaReturnState");

	Params::MarinerCharacterPinWidget_GetCharacterArenaReturnState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterPinWidget.GetCharacterReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerCharacterPinWidget::GetCharacterReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "GetCharacterReference");

	Params::MarinerCharacterPinWidget_GetCharacterReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterPinWidget.IsInNameViewCone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterPinWidget::IsInNameViewCone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "IsInNameViewCone");

	Params::MarinerCharacterPinWidget_IsInNameViewCone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterPinWidget.IsIntersectingAimRay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCharacterPinWidget::IsIntersectingAimRay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterPinWidget", "IsIntersectingAimRay");

	Params::MarinerCharacterPinWidget_IsIntersectingAimRay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterProgressionButton.InitCharacterProgression
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RewardLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProgressionCharacterLevelRewardCharacterReward                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerCharacterProgressionButton::InitCharacterProgression(int32 RewardLevel, const struct FMangoProgressionCharacterLevelReward& CharacterReward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterProgressionButton", "InitCharacterProgression");

	Params::MarinerCharacterProgressionButton_InitCharacterProgression Parms{};

	Parms.RewardLevel = RewardLevel;
	Parms.CharacterReward = std::move(CharacterReward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterProgressionButton.InitNoProgression
// (Final, Native, Public, BlueprintCallable)

void UMarinerCharacterProgressionButton::InitNoProgression()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterProgressionButton", "InitNoProgression");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerReturnRocketLaunchpad.OnDestruction
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerReturnRocketLaunchpad::OnDestruction(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "OnDestruction");

	Params::MarinerReturnRocketLaunchpad_OnDestruction Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerReturnRocketLaunchpad.OnLaunchCountdownTimerExpired
// (Final, Native, Protected)

void AMarinerReturnRocketLaunchpad::OnLaunchCountdownTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "OnLaunchCountdownTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerReturnRocketLaunchpad.OnLaunchSeparationTimerExpired
// (Final, Native, Protected)

void AMarinerReturnRocketLaunchpad::OnLaunchSeparationTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "OnLaunchSeparationTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerReturnRocketLaunchpad.OnTeleportCountdownTimerExpired
// (Final, Native, Protected)

void AMarinerReturnRocketLaunchpad::OnTeleportCountdownTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "OnTeleportCountdownTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerReturnRocketLaunchpad.GetLaunchLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerReturnRocketLaunchpad::GetLaunchLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "GetLaunchLocation");

	Params::MarinerReturnRocketLaunchpad_GetLaunchLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerReturnRocketLaunchpad.GetLaunchRotationYaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerReturnRocketLaunchpad::GetLaunchRotationYaw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "GetLaunchRotationYaw");

	Params::MarinerReturnRocketLaunchpad_GetLaunchRotationYaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerReturnRocketLaunchpad.MulticastPrepareCharacterForLaunch
// (Net, NetReliable, Native, Event, NetMulticast, Public, Const)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerReturnRocketLaunchpad::MulticastPrepareCharacterForLaunch(class AMarinerCharacter* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerReturnRocketLaunchpad", "MulticastPrepareCharacterForLaunch");

	Params::MarinerReturnRocketLaunchpad_MulticastPrepareCharacterForLaunch Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemLoaderButtonBase.LoadAndPopulate
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UTextBlock*                       InAuxText                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextBlock*                       InAuxDesc                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextBlock*                       InRarityText                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InItemImage                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InTotemImage                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InRarityImage                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InRaritySymbol                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InNameImage                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      InLoadingSpinner                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       InItem                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerItemLoaderButtonBase::LoadAndPopulate(class UTextBlock* InAuxText, class UTextBlock* InAuxDesc, class UTextBlock* InRarityText, class UImage* InItemImage, class UImage* InTotemImage, class UImage* InRarityImage, class UImage* InRaritySymbol, class UImage* InNameImage, class UUserWidget* InLoadingSpinner, const struct FMangoItem& InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoaderButtonBase", "LoadAndPopulate");

	Params::MarinerItemLoaderButtonBase_LoadAndPopulate Parms{};

	Parms.InAuxText = InAuxText;
	Parms.InAuxDesc = InAuxDesc;
	Parms.InRarityText = InRarityText;
	Parms.InItemImage = InItemImage;
	Parms.InTotemImage = InTotemImage;
	Parms.InRarityImage = InRarityImage;
	Parms.InRaritySymbol = InRaritySymbol;
	Parms.InNameImage = InNameImage;
	Parms.InLoadingSpinner = InLoadingSpinner;
	Parms.InItem = std::move(InItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemLoaderButtonBase.PopulateCharacterIcon
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FSlateBrush                      Brush                                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void UMarinerItemLoaderButtonBase::PopulateCharacterIcon(struct FSlateBrush* Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoaderButtonBase", "PopulateCharacterIcon");

	Params::MarinerItemLoaderButtonBase_PopulateCharacterIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Brush != nullptr)
		*Brush = std::move(Parms.Brush);
}


// Function Mariner.MarinerItemLoaderButtonBase.PopulateDefaultIcon
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           InItemImage                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InTotemImage                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           InNameIcon                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemLoaderButtonBase::PopulateDefaultIcon(const struct FSlateBrush& Brush, class UImage* InItemImage, class UImage* InTotemImage, class UImage* InNameIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemLoaderButtonBase", "PopulateDefaultIcon");

	Params::MarinerItemLoaderButtonBase_PopulateDefaultIcon Parms{};

	Parms.Brush = std::move(Brush);
	Parms.InItemImage = InItemImage;
	Parms.InTotemImage = InTotemImage;
	Parms.InNameIcon = InNameIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterProgressionWidget.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterProgressionWidget::Init(class UMarinerPlayableCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterProgressionWidget", "Init");

	Params::MarinerCharacterProgressionWidget_Init Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectButton.Refresh
// (Final, Native, Public)

void UMarinerCharacterSelectButton::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectButton", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectButton.SetButtonsCharacterData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        InCharacter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCharacterLockState              InLockState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInAllowUnviewedFlag                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnableGamepadAutoSelect                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectButton::SetButtonsCharacterData(class UMarinerPlayableCharacter* InCharacter, EMarinerCharacterLockState InLockState, bool bInAllowUnviewedFlag, bool bInEnableGamepadAutoSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectButton", "SetButtonsCharacterData");

	Params::MarinerCharacterSelectButton_SetButtonsCharacterData Parms{};

	Parms.InCharacter = InCharacter;
	Parms.InLockState = InLockState;
	Parms.bInAllowUnviewedFlag = bInAllowUnviewedFlag;
	Parms.bInEnableGamepadAutoSelect = bInEnableGamepadAutoSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectButton.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerCharacterSelectButton::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectButton", "GetCharacter");

	Params::MarinerCharacterSelectButton_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSelectButton.GetCharacterLockStateSFX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UMarinerCharacterSelectButton::GetCharacterLockStateSFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectButton", "GetCharacterLockStateSFX");

	Params::MarinerCharacterSelectButton_GetCharacterLockStateSFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSelectButton.GetCharacterSelectedSFX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAkAudioEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkAudioEvent* UMarinerCharacterSelectButton::GetCharacterSelectedSFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectButton", "GetCharacterSelectedSFX");

	Params::MarinerCharacterSelectButton_GetCharacterSelectedSFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.DisplayData
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerSkinCollectionDataAsset*  ActiveSkin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactDataAsset*        Artifact                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSkinnedSelectedCharacterWidget::DisplayData(class AMarinerPlayerState* PlayerState, class UMarinerSkinCollectionDataAsset* ActiveSkin, int32 Level, class UMarinerArtifactDataAsset* Artifact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "DisplayData");

	Params::MarinerSkinnedSelectedCharacterWidget_DisplayData Parms{};

	Parms.PlayerState = PlayerState;
	Parms.ActiveSkin = ActiveSkin;
	Parms.Level = Level;
	Parms.Artifact = Artifact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.GetPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerPlayerState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPlayerState* UMarinerSkinnedSelectedCharacterWidget::GetPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "GetPlayerState");

	Params::MarinerSkinnedSelectedCharacterWidget_GetPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.OnOwnerSelectedCharacterChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedCharacter                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSkinnedSelectedCharacterWidget::OnOwnerSelectedCharacterChanged(const class FString& SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "OnOwnerSelectedCharacterChanged");

	Params::MarinerSkinnedSelectedCharacterWidget_OnOwnerSelectedCharacterChanged Parms{};

	Parms.SelectedCharacter = std::move(SelectedCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.OnProfileCollectionDataUpdated
// (Final, Native, Private)

void UMarinerSkinnedSelectedCharacterWidget::OnProfileCollectionDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "OnProfileCollectionDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.OnProfileDataUpdated
// (Final, Native, Private)

void UMarinerSkinnedSelectedCharacterWidget::OnProfileDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "OnProfileDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.OnSelectedCharacterChanged
// (Final, Native, Private)

void UMarinerSkinnedSelectedCharacterWidget::OnSelectedCharacterChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "OnSelectedCharacterChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.SetPlayerState
// (Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSkinnedSelectedCharacterWidget::SetPlayerState(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "SetPlayerState");

	Params::MarinerSkinnedSelectedCharacterWidget_SetPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinnedSelectedCharacterWidget.TryUpdateSkinData
// (Native, Protected)

void UMarinerSkinnedSelectedCharacterWidget::TryUpdateSkinData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinnedSelectedCharacterWidget", "TryUpdateSkinData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AddImportantThrowTarget
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ThrowTargetActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetForTeamIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AddImportantThrowTarget(class AActor* ThrowTargetActor, int32 TargetForTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AddImportantThrowTarget");

	Params::MarinerGameState_AddImportantThrowTarget Parms{};

	Parms.ThrowTargetActor = ThrowTargetActor;
	Parms.TargetForTeamIndex = TargetForTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AuthorityApplyModeHUDState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AuthorityApplyModeHUDState(const TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AuthorityApplyModeHUDState");

	Params::MarinerGameState_AuthorityApplyModeHUDState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AuthorityRecordFloatKnockoutAnalytic
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerKnockoutAnalyticEntries         AnalyticToRecord                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AuthorityRecordFloatKnockoutAnalytic(EMarinerKnockoutAnalyticEntries AnalyticToRecord, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AuthorityRecordFloatKnockoutAnalytic");

	Params::MarinerGameState_AuthorityRecordFloatKnockoutAnalytic Parms{};

	Parms.AnalyticToRecord = AnalyticToRecord;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AuthorityRecordRocketballGoalAnalytic
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerRocketballGoalType              GoalType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AuthorityRecordRocketballGoalAnalytic(EMarinerRocketballGoalType GoalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AuthorityRecordRocketballGoalAnalytic");

	Params::MarinerGameState_AuthorityRecordRocketballGoalAnalytic Parms{};

	Parms.GoalType = GoalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AuthorityRecordRocketballResetAnalytic
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerRocketballResetType             ResetType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AuthorityRecordRocketballResetAnalytic(EMarinerRocketballResetType ResetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AuthorityRecordRocketballResetAnalytic");

	Params::MarinerGameState_AuthorityRecordRocketballResetAnalytic Parms{};

	Parms.ResetType = ResetType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AuthorityRemoveModeHUDState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AuthorityRemoveModeHUDState(const TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AuthorityRemoveModeHUDState");

	Params::MarinerGameState_AuthorityRemoveModeHUDState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.AwardPointsToTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToAward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::AwardPointsToTeam(int32 TeamIndex, int32 PointsToAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "AwardPointsToTeam");

	Params::MarinerGameState_AwardPointsToTeam Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.PointsToAward = PointsToAward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.BroadcastOnPregameStateChanged
// (Final, Native, Protected)

void AMarinerGameState::BroadcastOnPregameStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "BroadcastOnPregameStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.CheckForPreRoundSuppressionRemoval
// (Final, Native, Protected)

void AMarinerGameState::CheckForPreRoundSuppressionRemoval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "CheckForPreRoundSuppressionRemoval");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.EnableWorldUILevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool bIsVisible)>        OnComplete                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerGameState::EnableWorldUILevel(bool bEnabled, const TDelegate<void(bool bIsVisible)>& OnComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "EnableWorldUILevel");

	Params::MarinerGameState_EnableWorldUILevel Parms{};

	Parms.bEnabled = bEnabled;
	Parms.OnComplete = OnComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.EnsureReplicationForRoundTransition
// (Final, Native, Public)

void AMarinerGameState::EnsureReplicationForRoundTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "EnsureReplicationForRoundTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.GetFastCollisionManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UFastCollisionManager*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFastCollisionManager* AMarinerGameState::GetFastCollisionManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetFastCollisionManager");

	Params::MarinerGameState_GetFastCollisionManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPoolingManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerPoolingManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPoolingManager* AMarinerGameState::GetPoolingManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPoolingManager");

	Params::MarinerGameState_GetPoolingManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPregameState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AMarinerGameState::GetPregameState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPregameState");

	Params::MarinerGameState_GetPregameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetTeamScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerGameState::GetTeamScore(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetTeamScore");

	Params::MarinerGameState_GetTeamScore Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.HACK_UpdateBlastballParticleSystems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UParticleSystemComponent*> ParticleSystemComponentsToUpdate                       (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerGameState::HACK_UpdateBlastballParticleSystems(const TArray<class UParticleSystemComponent*>& ParticleSystemComponentsToUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "HACK_UpdateBlastballParticleSystems");

	Params::MarinerGameState_HACK_UpdateBlastballParticleSystems Parms{};

	Parms.ParticleSystemComponentsToUpdate = std::move(ParticleSystemComponentsToUpdate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.IncrementRoundCount
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerGameState::IncrementRoundCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IncrementRoundCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.IncrementTeamScore
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::IncrementTeamScore(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IncrementTeamScore");

	Params::MarinerGameState_IncrementTeamScore Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.MulticastRPCOnRoundTransition
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AMarinerGameState::MulticastRPCOnRoundTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "MulticastRPCOnRoundTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnPlayerChagnedTeam
// (Final, Native, Public)
// Parameters:
// class AMarinerPlayerState*              PlayerChangedTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::OnPlayerChagnedTeam(class AMarinerPlayerState* PlayerChangedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnPlayerChagnedTeam");

	Params::MarinerGameState_OnPlayerChagnedTeam Parms{};

	Parms.PlayerChangedTeam = PlayerChangedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnPlayerControlledCharacterUpdated
// (Final, Native, Protected)

void AMarinerGameState::OnPlayerControlledCharacterUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnPlayerControlledCharacterUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_ActiveModeHUDStates
// (Final, Native, Protected)
// Parameters:
// int32                                   OldActiveModeHUDStates                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::OnRep_ActiveModeHUDStates(int32 OldActiveModeHUDStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_ActiveModeHUDStates");

	Params::MarinerGameState_OnRep_ActiveModeHUDStates Parms{};

	Parms.OldActiveModeHUDStates = OldActiveModeHUDStates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_DisabledCharacterClasses
// (Final, Native, Protected)

void AMarinerGameState::OnRep_DisabledCharacterClasses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_DisabledCharacterClasses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_ForceEnabledCharacterClasses
// (Final, Native, Protected)

void AMarinerGameState::OnRep_ForceEnabledCharacterClasses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_ForceEnabledCharacterClasses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_GameLiftSessionInfo
// (Final, Native, Protected)

void AMarinerGameState::OnRep_GameLiftSessionInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_GameLiftSessionInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_GameModeRemainingTime
// (Final, Native, Public)

void AMarinerGameState::OnRep_GameModeRemainingTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_GameModeRemainingTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_GameModeRequiredObjects
// (Final, Native, Protected)

void AMarinerGameState::OnRep_GameModeRequiredObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_GameModeRequiredObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_GameOutcomesByTeam
// (Final, Native, Protected)

void AMarinerGameState::OnRep_GameOutcomesByTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_GameOutcomesByTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_GameServerDebugInfo
// (Final, Native, Protected)

void AMarinerGameState::OnRep_GameServerDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_GameServerDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_IsGameTimerExtended
// (Final, Native, Protected)

void AMarinerGameState::OnRep_IsGameTimerExtended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_IsGameTimerExtended");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_MangoIds
// (Final, Native, Protected)

void AMarinerGameState::OnRep_MangoIds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_MangoIds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_MatchEndJsonString
// (Final, Native, Protected)

void AMarinerGameState::OnRep_MatchEndJsonString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_MatchEndJsonString");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_PlaylistInfo
// (Final, Native, Protected)

void AMarinerGameState::OnRep_PlaylistInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_PlaylistInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_PregameState
// (Final, Native, Protected)

void AMarinerGameState::OnRep_PregameState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_PregameState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_PreRoundCountdownEndTimeStamp
// (Final, Native, Protected)

void AMarinerGameState::OnRep_PreRoundCountdownEndTimeStamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_PreRoundCountdownEndTimeStamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_SafeToLeaveSessionEndTimeTeam0Stamp
// (Final, Native, Protected)

void AMarinerGameState::OnRep_SafeToLeaveSessionEndTimeTeam0Stamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_SafeToLeaveSessionEndTimeTeam0Stamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_SafeToLeaveSessionEndTimeTeam1Stamp
// (Final, Native, Protected)

void AMarinerGameState::OnRep_SafeToLeaveSessionEndTimeTeam1Stamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_SafeToLeaveSessionEndTimeTeam1Stamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_SessionHasEarlyDisconnect
// (Final, Native, Protected)

void AMarinerGameState::OnRep_SessionHasEarlyDisconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_SessionHasEarlyDisconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnRep_TeamScores
// (Final, Native, Protected)

void AMarinerGameState::OnRep_TeamScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnRep_TeamScores");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnWorldUILevelHidden
// (Final, Native, Protected)

void AMarinerGameState::OnWorldUILevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnWorldUILevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.OnWorldUILevelShown
// (Final, Native, Protected)

void AMarinerGameState::OnWorldUILevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "OnWorldUILevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.RemoveImportantThrowTarget
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ThrowTargetActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::RemoveImportantThrowTarget(class AActor* ThrowTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "RemoveImportantThrowTarget");

	Params::MarinerGameState_RemoveImportantThrowTarget Parms{};

	Parms.ThrowTargetActor = ThrowTargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.RemovePointsFromTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToDecrement                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::RemovePointsFromTeam(int32 TeamIndex, int32 PointsToDecrement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "RemovePointsFromTeam");

	Params::MarinerGameState_RemovePointsFromTeam Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.PointsToDecrement = PointsToDecrement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.SetMatchEndJsonString
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MatchEnd                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::SetMatchEndJsonString(const class FString& MatchEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "SetMatchEndJsonString");

	Params::MarinerGameState_SetMatchEndJsonString Parms{};

	Parms.MatchEnd = std::move(MatchEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.SetPregameState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::SetPregameState(class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "SetPregameState");

	Params::MarinerGameState_SetPregameState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.SetPreRoundCountdownTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPreRoundCountdownTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::SetPreRoundCountdownTime(int32 InPreRoundCountdownTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "SetPreRoundCountdownTime");

	Params::MarinerGameState_SetPreRoundCountdownTime Parms{};

	Parms.InPreRoundCountdownTime = InPreRoundCountdownTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.SetTimeToLeaveSessionForTeam
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameState::SetTimeToLeaveSessionForTeam(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "SetTimeToLeaveSessionForTeam");

	Params::MarinerGameState_SetTimeToLeaveSessionForTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameState.GetDefaultBotName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AMarinerGameState::GetDefaultBotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetDefaultBotName");

	Params::MarinerGameState_GetDefaultBotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetEnabledCharacters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerEnabledCharacterFilter          Filter                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerPlayableCharacter*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMarinerPlayableCharacter*> AMarinerGameState::GetEnabledCharacters(EMarinerEnabledCharacterFilter Filter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetEnabledCharacters");

	Params::MarinerGameState_GetEnabledCharacters Parms{};

	Parms.Filter = Filter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetGameOutcome
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerGameOutcome                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerGameOutcome AMarinerGameState::GetGameOutcome(const class AMarinerPlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetGameOutcome");

	Params::MarinerGameState_GetGameOutcome Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetHealthToRecoverOnKnockout
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AMarinerPlayerState*              PlayerStateOfReturningCharacter                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerGameState::GetHealthToRecoverOnKnockout(class AMarinerPlayerState* PlayerStateOfReturningCharacter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetHealthToRecoverOnKnockout");

	Params::MarinerGameState_GetHealthToRecoverOnKnockout Parms{};

	Parms.PlayerStateOfReturningCharacter = PlayerStateOfReturningCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetIndependentNonBotPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AMarinerGameState::GetIndependentNonBotPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetIndependentNonBotPlayers");

	Params::MarinerGameState_GetIndependentNonBotPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetIndependentPlayers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AMarinerGameState::GetIndependentPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetIndependentPlayers");

	Params::MarinerGameState_GetIndependentPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetIndependentPlayersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AMarinerGameState::GetIndependentPlayersOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetIndependentPlayersOnTeam");

	Params::MarinerGameState_GetIndependentPlayersOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetMatchId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid AMarinerGameState::GetMatchId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetMatchId");

	Params::MarinerGameState_GetMatchId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetMidMatchRoundTimeRemaining
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerGameState::GetMidMatchRoundTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetMidMatchRoundTimeRemaining");

	Params::MarinerGameState_GetMidMatchRoundTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetNonBotPlayersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AMarinerGameState::GetNonBotPlayersOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetNonBotPlayersOnTeam");

	Params::MarinerGameState_GetNonBotPlayersOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetNumPlayersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerGameState::GetNumPlayersOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetNumPlayersOnTeam");

	Params::MarinerGameState_GetNumPlayersOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPlayersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AMarinerGameState::GetPlayersOnTeam(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPlayersOnTeam");

	Params::MarinerGameState_GetPlayersOnTeam Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPlaylistEventId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AMarinerGameState::GetPlaylistEventId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPlaylistEventId");

	Params::MarinerGameState_GetPlaylistEventId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPlaylistName
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid AMarinerGameState::GetPlaylistName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPlaylistName");

	Params::MarinerGameState_GetPlaylistName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.GetPreRoundCountdownTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerGameState::GetPreRoundCountdownTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "GetPreRoundCountdownTimeRemaining");

	Params::MarinerGameState_GetPreRoundCountdownTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsCharacterStackingAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsCharacterStackingAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsCharacterStackingAllowed");

	Params::MarinerGameState_IsCharacterStackingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsForceRandomSelectionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsForceRandomSelectionEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsForceRandomSelectionEnabled");

	Params::MarinerGameState_IsForceRandomSelectionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsGameCurrentlyRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsGameCurrentlyRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsGameCurrentlyRunning");

	Params::MarinerGameState_IsGameCurrentlyRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsGameTimerPaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsGameTimerPaused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsGameTimerPaused");

	Params::MarinerGameState_IsGameTimerPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsMatchMade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsMatchMade() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsMatchMade");

	Params::MarinerGameState_IsMatchMade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsMatchTied
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsMatchTied() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsMatchTied");

	Params::MarinerGameState_IsMatchTied Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsPlaylistPvE
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsPlaylistPvE() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsPlaylistPvE");

	Params::MarinerGameState_IsPlaylistPvE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsRanked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::IsRanked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsRanked");

	Params::MarinerGameState_IsRanked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsSessionSafeToLeave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool AMarinerGameState::IsSessionSafeToLeave(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsSessionSafeToLeave");

	Params::MarinerGameState_IsSessionSafeToLeave Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.IsSessonWithEarlyDisconnect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool AMarinerGameState::IsSessonWithEarlyDisconnect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "IsSessonWithEarlyDisconnect");

	Params::MarinerGameState_IsSessonWithEarlyDisconnect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.ShouldEnterOvertime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::ShouldEnterOvertime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "ShouldEnterOvertime");

	Params::MarinerGameState_ShouldEnterOvertime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameState.ShouldResetCooldownsOnKnockout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameState::ShouldResetCooldownsOnKnockout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameState", "ShouldResetCooldownsOnKnockout");

	Params::MarinerGameState_ShouldResetCooldownsOnKnockout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLANLobbyGameState.OnRep_MatchSettingsChanged
// (Final, Native, Public)

void AMarinerLANLobbyGameState::OnRep_MatchSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLANLobbyGameState", "OnRep_MatchSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectedWidget.DisplayHoveredData
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        CharacterData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerSkinCollectionDataAsset*  ActiveSkin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactDataAsset*        Artifact                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectedWidget::DisplayHoveredData(class AMarinerPlayerState* PlayerState, class UMarinerPlayableCharacter* CharacterData, class UMarinerSkinCollectionDataAsset* ActiveSkin, int32 Level, class UMarinerArtifactDataAsset* Artifact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "DisplayHoveredData");

	Params::MarinerCharacterSelectedWidget_DisplayHoveredData Parms{};

	Parms.PlayerState = PlayerState;
	Parms.CharacterData = CharacterData;
	Parms.ActiveSkin = ActiveSkin;
	Parms.Level = Level;
	Parms.Artifact = Artifact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnClientRequestingCharacter
// (Event, Public, BlueprintEvent)

void UMarinerCharacterSelectedWidget::OnClientRequestingCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnClientRequestingCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnHovered
// (Event, Public, BlueprintEvent)

void UMarinerCharacterSelectedWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnLockedSelectionChanged
// (Event, Public, BlueprintEvent)

void UMarinerCharacterSelectedWidget::OnLockedSelectionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnLockedSelectionChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateCharacterRequestFailed
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           FailedCharacterRequest                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LastKnownCharacterString                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectedWidget::OnPlayerStateCharacterRequestFailed(const class FString& FailedCharacterRequest, const class FString& LastKnownCharacterString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnPlayerStateCharacterRequestFailed");

	Params::MarinerCharacterSelectedWidget_OnPlayerStateCharacterRequestFailed Parms{};

	Parms.FailedCharacterRequest = std::move(FailedCharacterRequest);
	Parms.LastKnownCharacterString = std::move(LastKnownCharacterString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateCharacterSelected
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             SelectedCharacter                                      (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectedWidget::OnPlayerStateCharacterSelected(class AMarinerPlayerState* PlayerState, TSoftClassPtr<class UClass> SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnPlayerStateCharacterSelected");

	Params::MarinerCharacterSelectedWidget_OnPlayerStateCharacterSelected Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SelectedCharacter = SelectedCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerStateSelectedCharacterChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedCharacter                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectedWidget::OnPlayerStateSelectedCharacterChanged(const class FString& SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnPlayerStateSelectedCharacterChanged");

	Params::MarinerCharacterSelectedWidget_OnPlayerStateSelectedCharacterChanged Parms{};

	Parms.SelectedCharacter = std::move(SelectedCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectedWidget.OnPlayerTalking
// (Final, Native, Protected)
// Parameters:
// class FString                           ChannelName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTalking                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectedWidget::OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnPlayerTalking");

	Params::MarinerCharacterSelectedWidget_OnPlayerTalking Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.PlayerName = std::move(PlayerName);
	Parms.bIsTalking = bIsTalking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectedWidget.OnSetSelectedState
// (Event, Public, BlueprintEvent)

void UMarinerCharacterSelectedWidget::OnSetSelectedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnSetSelectedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectedWidget.OnSetUnselectedState
// (Event, Public, BlueprintEvent)

void UMarinerCharacterSelectedWidget::OnSetUnselectedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectedWidget", "OnSetUnselectedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerRejoinResponseInterface.OnAnyRejoiningClientReady
// (Native, Event, Public, BlueprintEvent)

void IMarinerRejoinResponseInterface::OnAnyRejoiningClientReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRejoinResponseInterface", "OnAnyRejoiningClientReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.BP_OnButtonActivityStateHasBeenChanged
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::BP_OnButtonActivityStateHasBeenChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "BP_OnButtonActivityStateHasBeenChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.BP_OnCharacterSelectionFailed
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::BP_OnCharacterSelectionFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "BP_OnCharacterSelectionFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.CreateCharacterSelectButtons
// (Final, Native, Protected)

void UMarinerCharacterSelectMenu::CreateCharacterSelectButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "CreateCharacterSelectButtons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.GetSelectedButton
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerCharacterSelectButton*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterSelectButton* UMarinerCharacterSelectMenu::GetSelectedButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "GetSelectedButton");

	Params::MarinerCharacterSelectMenu_GetSelectedButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSelectMenu.OnAnyPlayerChangedTeam
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnAnyPlayerChangedTeam(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnAnyPlayerChangedTeam");

	Params::MarinerCharacterSelectMenu_OnAnyPlayerChangedTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCancelPressed
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnCancelPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCancelPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCancelSelectionButtonPressed
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            LayeredButton                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnCancelSelectionButtonPressed(class UMarinerLayeredButton* LayeredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCancelSelectionButtonPressed");

	Params::MarinerCharacterSelectMenu_OnCancelSelectionButtonPressed Parms{};

	Parms.LayeredButton = LayeredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonHovered
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnCharacterButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterButtonHovered");

	Params::MarinerCharacterSelectMenu_OnCharacterButtonHovered Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonSelected
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            LayeredButton                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnCharacterButtonSelected(class UMarinerLayeredButton* LayeredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterButtonSelected");

	Params::MarinerCharacterSelectMenu_OnCharacterButtonSelected Parms{};

	Parms.LayeredButton = LayeredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterButtonUnHovered
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            LayeredButton                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnCharacterButtonUnHovered(class UMarinerLayeredButton* LayeredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterButtonUnHovered");

	Params::MarinerCharacterSelectMenu_OnCharacterButtonUnHovered Parms{};

	Parms.LayeredButton = LayeredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterHighlightChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerPlayableCharacter*        Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnCharacterHighlightChanged(class UMarinerPlayableCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterHighlightChanged");

	Params::MarinerCharacterSelectMenu_OnCharacterHighlightChanged Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterSelectionLocked
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::OnCharacterSelectionLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterSelectionLocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.OnCharacterSelectionReleased
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::OnCharacterSelectionReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCharacterSelectionReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.OnConfirmPressed
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnConfirmPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnConfirmPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnCountdownEnteredLockState
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::OnCountdownEnteredLockState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnCountdownEnteredLockState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.OnEmotePressed
// (Final, Native, Private)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnEmotePressed(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnEmotePressed");

	Params::MarinerCharacterSelectMenu_OnEmotePressed Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnInitialRandomCharacterSet
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnInitialRandomCharacterSet(const TSoftClassPtr<class UClass>& Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnInitialRandomCharacterSet");

	Params::MarinerCharacterSelectMenu_OnInitialRandomCharacterSet Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSelectMenu.OnLocalInventoryChanged
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnLocalInventoryChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnLocalInventoryChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnLocalProfilePregameEmoteDataLoaded
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnLocalProfilePregameEmoteDataLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnLocalProfilePregameEmoteDataLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateCharacterRequestFailed
// (Final, Native, Private)
// Parameters:
// class FString                           RequestedCharacterString                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LastKnownSelectedCharacter                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnOwningPlayerStateCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastKnownSelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStateCharacterRequestFailed");

	Params::MarinerCharacterSelectMenu_OnOwningPlayerStateCharacterRequestFailed Parms{};

	Parms.RequestedCharacterString = std::move(RequestedCharacterString);
	Parms.LastKnownSelectedCharacter = std::move(LastKnownSelectedCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateInitiatedOnAuthority
// (Final, Native, Protected)

void UMarinerCharacterSelectMenu::OnOwningPlayerStateInitiatedOnAuthority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStateInitiatedOnAuthority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateIntialRandomCharacterSet
// (Final, Native, Private)
// Parameters:
// class FString                           RequestedCharacterData                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnOwningPlayerStateIntialRandomCharacterSet(const class FString& RequestedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStateIntialRandomCharacterSet");

	Params::MarinerCharacterSelectMenu_OnOwningPlayerStateIntialRandomCharacterSet Parms{};

	Parms.RequestedCharacterData = std::move(RequestedCharacterData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStatePawnClassSet
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnOwningPlayerStatePawnClassSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStatePawnClassSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateReplicated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         ControllerHostingState                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnOwningPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStateReplicated");

	Params::MarinerCharacterSelectMenu_OnOwningPlayerStateReplicated Parms{};

	Parms.ControllerHostingState = ControllerHostingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnOwningPlayerStateSelectedCharacterChanged
// (Final, Native, Private)
// Parameters:
// class FString                           RequestedCharacterData                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnOwningPlayerStateSelectedCharacterChanged(const class FString& RequestedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnOwningPlayerStateSelectedCharacterChanged");

	Params::MarinerCharacterSelectMenu_OnOwningPlayerStateSelectedCharacterChanged Parms{};

	Parms.RequestedCharacterData = std::move(RequestedCharacterData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnPlayableCharactersChanged
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnPlayableCharactersChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnPlayableCharactersChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnPlayerAdded
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnPlayerAdded(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnPlayerAdded");

	Params::MarinerCharacterSelectMenu_OnPlayerAdded Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnPlayerRemoved
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnPlayerRemoved(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnPlayerRemoved");

	Params::MarinerCharacterSelectMenu_OnPlayerRemoved Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnPlayerStateReplicated
// (Event, Protected, BlueprintEvent)

void UMarinerCharacterSelectMenu::OnPlayerStateReplicated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnPlayerStateReplicated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSelectMenu.OnPregameStateChanged
// (Final, Native, Private)
// Parameters:
// class FName                             NewPregameState                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnPregameStateChanged(const class FName NewPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnPregameStateChanged");

	Params::MarinerCharacterSelectMenu_OnPregameStateChanged Parms{};

	Parms.NewPregameState = NewPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnSelectCharacterButtonPressed
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            LayeredButton                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnSelectCharacterButtonPressed(class UMarinerLayeredButton* LayeredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnSelectCharacterButtonPressed");

	Params::MarinerCharacterSelectMenu_OnSelectCharacterButtonPressed Parms{};

	Parms.LayeredButton = LayeredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnSelectedCharacterLoaded
// (Final, Native, Private)

void UMarinerCharacterSelectMenu::OnSelectedCharacterLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnSelectedCharacterLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSelectMenu.OnSoftSelectionChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             SelectedCharacter                                      (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterSelectMenu::OnSoftSelectionChanged(const TSoftClassPtr<class UClass>& SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "OnSoftSelectionChanged");

	Params::MarinerCharacterSelectMenu_OnSoftSelectionChanged Parms{};

	Parms.SelectedCharacter = SelectedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSelectMenu.RefreshCharacterButtonIconStates
// (Final, Native, Protected)

void UMarinerCharacterSelectMenu::RefreshCharacterButtonIconStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSelectMenu", "RefreshCharacterButtonIconStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.ApplyProfileObjects
// (Final, Native, Private)

void AMarinerRocketTotem::ApplyProfileObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "ApplyProfileObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.ApplyTotemCollection
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::ApplyTotemCollection(const struct FMarinerRocketTotemCollection& TotemCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "ApplyTotemCollection");

	Params::MarinerRocketTotem_ApplyTotemCollection Parms{};

	Parms.TotemCollection = std::move(TotemCollection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.DirtyRefresh
// (Final, Native, Private)

void AMarinerRocketTotem::DirtyRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "DirtyRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.GetCachedTotemChanges
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMarinerRocketTotemCollection    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerRocketTotemCollection AMarinerRocketTotem::GetCachedTotemChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "GetCachedTotemChanges");

	Params::MarinerRocketTotem_GetCachedTotemChanges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRocketTotem.OnAnyPlayerChangedTeams
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerChangingTeams                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::OnAnyPlayerChangedTeams(class AMarinerPlayerState* PlayerChangingTeams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "OnAnyPlayerChangedTeams");

	Params::MarinerRocketTotem_OnAnyPlayerChangedTeams Parms{};

	Parms.PlayerChangingTeams = PlayerChangingTeams;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.OnPlayerJoinedOrLeftGame
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     JoiningPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::OnPlayerJoinedOrLeftGame(class APlayerState* JoiningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "OnPlayerJoinedOrLeftGame");

	Params::MarinerRocketTotem_OnPlayerJoinedOrLeftGame Parms{};

	Parms.JoiningPlayer = JoiningPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.OnRefreshTotem
// (Event, Protected, BlueprintEvent)

void AMarinerRocketTotem::OnRefreshTotem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "OnRefreshTotem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerRocketTotem.PlayCompanionVictoryAnim
// (Final, Native, Private)

void AMarinerRocketTotem::PlayCompanionVictoryAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "PlayCompanionVictoryAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.ResetParticles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEmptyInstances                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::ResetParticles(bool bEmptyInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "ResetParticles");

	Params::MarinerRocketTotem_ResetParticles Parms{};

	Parms.bEmptyInstances = bEmptyInstances;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetBannerBorder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemBorderDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetBannerBorder(class UMarinerRocketTotemBorderDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetBannerBorder");

	Params::MarinerRocketTotem_SetBannerBorder Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetBannerPattern
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemPatternDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetBannerPattern(class UMarinerRocketTotemPatternDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetBannerPattern");

	Params::MarinerRocketTotem_SetBannerPattern Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetBannerShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemShapeDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetBannerShape(class UMarinerRocketTotemShapeDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetBannerShape");

	Params::MarinerRocketTotem_SetBannerShape Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetBannerSymbol
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemSymbolsDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetBannerSymbol(class UMarinerRocketTotemSymbolsDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetBannerSymbol");

	Params::MarinerRocketTotem_SetBannerSymbol Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetCompanion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemCompanionDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetCompanion(class UMarinerRocketTotemCompanionDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetCompanion");

	Params::MarinerRocketTotem_SetCompanion Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetProfileStateData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerRocketTotemCollection    TotemCollection                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetProfileStateData(struct FMarinerRocketTotemCollection& TotemCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetProfileStateData");

	Params::MarinerRocketTotem_SetProfileStateData Parms{};

	Parms.TotemCollection = std::move(TotemCollection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TotemCollection = std::move(Parms.TotemCollection);
}


// Function Mariner.MarinerRocketTotem.SetStandMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemStandDataAsset*DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetStandMesh(class UMarinerRocketTotemStandDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetStandMesh");

	Params::MarinerRocketTotem_SetStandMesh Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.SetVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemVFXDataAsset*  DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTotem::SetVFX(class UMarinerRocketTotemVFXDataAsset* DataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "SetVFX");

	Params::MarinerRocketTotem_SetVFX Parms{};

	Parms.DataAsset = DataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotem.GetCapsuleComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* AMarinerRocketTotem::GetCapsuleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "GetCapsuleComponent");

	Params::MarinerRocketTotem_GetCapsuleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRocketTotem.GetStartingRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AMarinerRocketTotem::GetStartingRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "GetStartingRotation");

	Params::MarinerRocketTotem_GetStartingRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRocketTotem.IsPlayerAssigned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerRocketTotem::IsPlayerAssigned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotem", "IsPlayerAssigned");

	Params::MarinerRocketTotem_IsPlayerAssigned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSpawner.ApplySkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  InSkinCollection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::ApplySkin(class UMarinerSkinCollectionDataAsset* InSkinCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "ApplySkin");

	Params::MarinerCharacterSpawner_ApplySkin Parms{};

	Parms.InSkinCollection = InSkinCollection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.GetCurrentLoadedCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacterLite*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacterLite* AMarinerCharacterSpawner::GetCurrentLoadedCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "GetCurrentLoadedCharacter");

	Params::MarinerCharacterSpawner_GetCurrentLoadedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSpawner.LoadCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AMarinerCharacterLite>InClass                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCharacterSpawner::LoadCharacter(const TSubclassOf<class AMarinerCharacterLite>& InClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "LoadCharacter");

	Params::MarinerCharacterSpawner_LoadCharacter Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCharacterSpawner.LoadCharacterWithSkin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             InClass                                                (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>InSkin                                                 (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::LoadCharacterWithSkin(const TSoftClassPtr<class UClass>& InClass, const TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> InSkin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "LoadCharacterWithSkin");

	Params::MarinerCharacterSpawner_LoadCharacterWithSkin Parms{};

	Parms.InClass = InClass;
	Parms.InSkin = InSkin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.OnCharacterAndSkinLoaded
// (Native, Protected)

void AMarinerCharacterSpawner::OnCharacterAndSkinLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "OnCharacterAndSkinLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.OnCharacterLoaded
// (Event, Public, BlueprintEvent)

void AMarinerCharacterSpawner::OnCharacterLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "OnCharacterLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerCharacterSpawner.OnLoadedCharacterSkinApplied
// (Final, Native, Private)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  Collection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::OnLoadedCharacterSkinApplied(class UMarinerSkinCollectionDataAsset* Collection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "OnLoadedCharacterSkinApplied");

	Params::MarinerCharacterSpawner_OnLoadedCharacterSkinApplied Parms{};

	Parms.Collection = Collection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.OnPortraitBackgroundLoaded
// (Final, Native, Public)
// Parameters:
// class UTexture*                         Portrait                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::OnPortraitBackgroundLoaded(class UTexture* Portrait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "OnPortraitBackgroundLoaded");

	Params::MarinerCharacterSpawner_OnPortraitBackgroundLoaded Parms{};

	Parms.Portrait = Portrait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.OnSkinApplied
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  InSkinCollection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::OnSkinApplied(class UMarinerSkinCollectionDataAsset* InSkinCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "OnSkinApplied");

	Params::MarinerCharacterSpawner_OnSkinApplied Parms{};

	Parms.InSkinCollection = InSkinCollection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCharacterSpawner.SetVictoryAnimationTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AnimationTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::SetVictoryAnimationTime(float AnimationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "SetVictoryAnimationTime");

	Params::MarinerCharacterSpawner_SetVictoryAnimationTime Parms{};

	Parms.AnimationTime = AnimationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.ShowEmoteAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     InAnim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCharacterSpawner::ShowEmoteAnimation(class UAnimMontage* InAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "ShowEmoteAnimation");

	Params::MarinerCharacterSpawner_ShowEmoteAnimation Parms{};

	Parms.InAnim = InAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterSpawner.UnloadCharacter
// (Final, Native, Public, BlueprintCallable)

void AMarinerCharacterSpawner::UnloadCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterSpawner", "UnloadCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStackHeader.IsHeaderAllowed
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStackHeader::IsHeaderAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStackHeader", "IsHeaderAllowed");

	Params::MarinerStackHeader_IsHeaderAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStackHeader.IsHeaderDirty
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStackHeader::IsHeaderDirty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStackHeader", "IsHeaderDirty");

	Params::MarinerStackHeader_IsHeaderDirty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStackHeader.UpdateEquippedArtifactsPreset
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    bRankedPreset                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStackHeader::UpdateEquippedArtifactsPreset(const bool bRankedPreset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStackHeader", "UpdateEquippedArtifactsPreset");

	Params::MarinerStackHeader_UpdateEquippedArtifactsPreset Parms{};

	Parms.bRankedPreset = bRankedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletController.OnMatchStateChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NewGameState                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGauntletController::OnMatchStateChanged(const class FName& NewGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletController", "OnMatchStateChanged");

	Params::MarinerGauntletController_OnMatchStateChanged Parms{};

	Parms.NewGameState = NewGameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletController.StartLogin
// (Final, Native, Private)

void UMarinerGauntletController::StartLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletController", "StartLogin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCharacterStackHeader.UpdateEquippedArtifacts
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    bRankedPreset                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCharacterStackHeader::UpdateEquippedArtifacts(const bool bRankedPreset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCharacterStackHeader", "UpdateEquippedArtifacts");

	Params::MarinerCharacterStackHeader_UpdateEquippedArtifacts Parms{};

	Parms.bRankedPreset = bRankedPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerChatGlobals.GetChatWheelRoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerChatWheel_ParentNode*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerChatWheel_ParentNode* UMarinerChatGlobals::GetChatWheelRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatGlobals", "GetChatWheelRoot");

	Params::MarinerChatGlobals_GetChatWheelRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChatGlobals.MapChatInputToSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMarinerInputActions                    InInput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerChatGlobals::MapChatInputToSlot(EMarinerInputActions InInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatGlobals", "MapChatInputToSlot");

	Params::MarinerChatGlobals_MapChatInputToSlot Parms{};

	Parms.InInput = InInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChatGlobals.MapChatSlotToInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSlot                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerChatGlobals::MapChatSlotToInput(int32 InSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatGlobals", "MapChatSlotToInput");

	Params::MarinerChatGlobals_MapChatSlotToInput Parms{};

	Parms.InSlot = InSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.AddGameplayCue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerGameplayFrameworkBlueprintLibrary::AddGameplayCue(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "AddGameplayCue");

	Params::MarinerGameplayFrameworkBlueprintLibrary_AddGameplayCue Parms{};

	Parms.TargetActor = TargetActor;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.ApplyAbilityToInputActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAbility>      AbilityClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameplayFrameworkBlueprintLibrary::ApplyAbilityToInputActions(class AMarinerCharacter* Character, TSubclassOf<class UMarinerAbility> AbilityClass, EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "ApplyAbilityToInputActions");

	Params::MarinerGameplayFrameworkBlueprintLibrary_ApplyAbilityToInputActions Parms{};

	Parms.Character = Character;
	Parms.AbilityClass = AbilityClass;
	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.CastAimDataFromHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMarinerGameplayAbilityTargetData_AimReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerGameplayAbilityTargetData_Aim UMarinerGameplayFrameworkBlueprintLibrary::CastAimDataFromHandle(struct FGameplayAbilityTargetDataHandle& AimDataHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "CastAimDataFromHandle");

	Params::MarinerGameplayFrameworkBlueprintLibrary_CastAimDataFromHandle Parms{};

	Parms.AimDataHandle = std::move(AimDataHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AimDataHandle = std::move(Parms.AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.DoesAbilitySpecExistForSpecHandle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       AbilitySpecHandle                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameplayFrameworkBlueprintLibrary::DoesAbilitySpecExistForSpecHandle(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "DoesAbilitySpecExistForSpecHandle");

	Params::MarinerGameplayFrameworkBlueprintLibrary_DoesAbilitySpecExistForSpecHandle Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AbilitySpecHandle = std::move(AbilitySpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.GetPrimaryAbilityInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       AbilitySpecHandle                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameplayAbility*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayAbility* UMarinerGameplayFrameworkBlueprintLibrary::GetPrimaryAbilityInstance(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "GetPrimaryAbilityInstance");

	Params::MarinerGameplayFrameworkBlueprintLibrary_GetPrimaryAbilityInstance Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AbilitySpecHandle = std::move(AbilitySpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.GetWorldFromWorldContext
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UMarinerGameplayFrameworkBlueprintLibrary::GetWorldFromWorldContext(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "GetWorldFromWorldContext");

	Params::MarinerGameplayFrameworkBlueprintLibrary_GetWorldFromWorldContext Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.IsAbilityActive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAbilitySystemComponent*          AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilitySpecHandle       AbilitySpecHandle                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameplayFrameworkBlueprintLibrary::IsAbilityActive(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "IsAbilityActive");

	Params::MarinerGameplayFrameworkBlueprintLibrary_IsAbilityActive Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AbilitySpecHandle = std::move(AbilitySpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.IsGameplayAbilitySpecHandleValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayAbilitySpecHandle       AbilitySpecHandle                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameplayFrameworkBlueprintLibrary::IsGameplayAbilitySpecHandleValid(const struct FGameplayAbilitySpecHandle& AbilitySpecHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "IsGameplayAbilitySpecHandleValid");

	Params::MarinerGameplayFrameworkBlueprintLibrary_IsGameplayAbilitySpecHandleValid Parms{};

	Parms.AbilitySpecHandle = std::move(AbilitySpecHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameplayFrameworkBlueprintLibrary.RemoveGameplayCue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayCueTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayCueParameters           Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerGameplayFrameworkBlueprintLibrary::RemoveGameplayCue(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGameplayFrameworkBlueprintLibrary", "RemoveGameplayCue");

	Params::MarinerGameplayFrameworkBlueprintLibrary_RemoveGameplayCue Parms{};

	Parms.TargetActor = TargetActor;
	Parms.GameplayCueTag = std::move(GameplayCueTag);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerChatWheel_BaseNode.GetChatWheelDisplayText
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerChatWheel_BaseNode::GetChatWheelDisplayText(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatWheel_BaseNode", "GetChatWheelDisplayText");

	Params::MarinerChatWheel_BaseNode_GetChatWheelDisplayText Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChatWheel_ParentNode.GetChildByTraversalDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerTraversalDirection              TraversalDirection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerChatWheel_BaseNode*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerChatWheel_BaseNode* UMarinerChatWheel_ParentNode::GetChildByTraversalDirection(EMarinerTraversalDirection TraversalDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatWheel_ParentNode", "GetChildByTraversalDirection");

	Params::MarinerChatWheel_ParentNode_GetChildByTraversalDirection Parms{};

	Parms.TraversalDirection = TraversalDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerChatWheel_LeafNode.GetMessageToSend
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UMarinerLocalMessage>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UMarinerLocalMessage> UMarinerChatWheel_LeafNode::GetMessageToSend(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerChatWheel_LeafNode", "GetMessageToSend");

	Params::MarinerChatWheel_LeafNode_GetMessageToSend Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.ApplySkin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerAbilitySkinData_Base*     ProfileSkinData                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::ApplySkin(class UMarinerAbilitySkinData_Base* ProfileSkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "ApplySkin");

	Params::MarinerProjectile_ApplySkin Parms{};

	Parms.ProfileSkinData = ProfileSkinData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityAddDamageImmuneActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageImmuneActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityAddDamageImmuneActor(class AActor* DamageImmuneActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityAddDamageImmuneActor");

	Params::MarinerProjectile_AuthorityAddDamageImmuneActor Parms{};

	Parms.DamageImmuneActor = DamageImmuneActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityApplyProjectileModifier
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   LifetimeMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewSpeedMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewGravityScaleMultiplier                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ModifyInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::AuthorityApplyProjectileModifier(float LifetimeMultiplier, float NewSpeedMultiplier, float NewGravityScaleMultiplier, class AActor* ModifyInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityApplyProjectileModifier");

	Params::MarinerProjectile_AuthorityApplyProjectileModifier Parms{};

	Parms.LifetimeMultiplier = LifetimeMultiplier;
	Parms.NewSpeedMultiplier = NewSpeedMultiplier;
	Parms.NewGravityScaleMultiplier = NewGravityScaleMultiplier;
	Parms.ModifyInstigator = ModifyInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.AuthorityApplyTimedProjectileModifier
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   LifetimeMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewSpeedMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewGravityScaleMultiplier                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ModifyInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::AuthorityApplyTimedProjectileModifier(float LifetimeMultiplier, float NewSpeedMultiplier, float NewGravityScaleMultiplier, class AActor* ModifyInstigator, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityApplyTimedProjectileModifier");

	Params::MarinerProjectile_AuthorityApplyTimedProjectileModifier Parms{};

	Parms.LifetimeMultiplier = LifetimeMultiplier;
	Parms.NewSpeedMultiplier = NewSpeedMultiplier;
	Parms.NewGravityScaleMultiplier = NewGravityScaleMultiplier;
	Parms.ModifyInstigator = ModifyInstigator;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.AuthorityEnableFromPool
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          InitialLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InstigatorEyeLocation                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            InInstigator                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ShootDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  HomingTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HomingTargetSocketName                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityEnableFromPool(const struct FVector& InitialLocation, const struct FVector& InstigatorEyeLocation, class APawn* InInstigator, class AActor* InOwner, const struct FVector& ShootDirection, class USceneComponent* HomingTarget, class FName HomingTargetSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityEnableFromPool");

	Params::MarinerProjectile_AuthorityEnableFromPool Parms{};

	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InstigatorEyeLocation = std::move(InstigatorEyeLocation);
	Parms.InInstigator = InInstigator;
	Parms.InOwner = InOwner;
	Parms.ShootDirection = std::move(ShootDirection);
	Parms.HomingTarget = HomingTarget;
	Parms.HomingTargetSocketName = HomingTargetSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityOnMatchStateSet
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             InMatchState                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityOnMatchStateSet(const class FName& InMatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityOnMatchStateSet");

	Params::MarinerProjectile_AuthorityOnMatchStateSet Parms{};

	Parms.InMatchState = InMatchState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityRemoveDamageImmuneActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamageImmuneActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityRemoveDamageImmuneActor(class AActor* DamageImmuneActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityRemoveDamageImmuneActor");

	Params::MarinerProjectile_AuthorityRemoveDamageImmuneActor Parms{};

	Parms.DamageImmuneActor = DamageImmuneActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityRemoveProjectileModifier
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ModifyInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityRemoveProjectileModifier(class AActor* ModifyInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityRemoveProjectileModifier");

	Params::MarinerProjectile_AuthorityRemoveProjectileModifier Parms{};

	Parms.ModifyInstigator = ModifyInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityRemoveTimedProjectileModifier
// (Final, Native, Private)
// Parameters:
// class AActor*                           ModifyInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ImprintedProjectileEnableId                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::AuthorityRemoveTimedProjectileModifier(class AActor* ModifyInstigator, uint8 ImprintedProjectileEnableId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityRemoveTimedProjectileModifier");

	Params::MarinerProjectile_AuthorityRemoveTimedProjectileModifier Parms{};

	Parms.ModifyInstigator = ModifyInstigator;
	Parms.ImprintedProjectileEnableId = ImprintedProjectileEnableId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.BP_GetOverrideMegaBlastDamageRequirement
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::BP_GetOverrideMegaBlastDamageRequirement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_GetOverrideMegaBlastDamageRequirement");

	Params::MarinerProjectile_BP_GetOverrideMegaBlastDamageRequirement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.BP_IsTargetValidForHoming
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           PotentialHomingTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::BP_IsTargetValidForHoming(class AActor* PotentialHomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_IsTargetValidForHoming");

	Params::MarinerProjectile_BP_IsTargetValidForHoming Parms{};

	Parms.PotentialHomingTarget = PotentialHomingTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.BP_OnClientRejoinEnabled
// (Event, Public, BlueprintEvent)

void AMarinerProjectile::BP_OnClientRejoinEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnClientRejoinEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerProjectile.BP_OnDisabledToPool
// (Event, Public, BlueprintEvent)

void AMarinerProjectile::BP_OnDisabledToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnDisabledToPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerProjectile.BP_OnEnabledFromPool
// (Event, Public, BlueprintEvent)

void AMarinerProjectile::BP_OnEnabledFromPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnEnabledFromPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerProjectile.BP_OnFailedToStickToImpactedObject
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       ImpactHit                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FHitResult                       StickySweep                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_OnFailedToStickToImpactedObject(const struct FHitResult& ImpactHit, const struct FHitResult& StickySweep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnFailedToStickToImpactedObject");

	Params::MarinerProjectile_BP_OnFailedToStickToImpactedObject Parms{};

	Parms.ImpactHit = std::move(ImpactHit);
	Parms.StickySweep = std::move(StickySweep);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.BP_OnImpact
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_OnImpact(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnImpact");

	Params::MarinerProjectile_BP_OnImpact Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.BP_OnInitialDisabledToPool
// (Event, Public, BlueprintEvent)

void AMarinerProjectile::BP_OnInitialDisabledToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnInitialDisabledToPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerProjectile.BP_OnInstigatorGameplayTagEvent
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_OnInstigatorGameplayTagEvent(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnInstigatorGameplayTagEvent");

	Params::MarinerProjectile_BP_OnInstigatorGameplayTagEvent Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.BP_OnLocallyOwnedVisibilityDelayEnded
// (Event, Public, BlueprintEvent)

void AMarinerProjectile::BP_OnLocallyOwnedVisibilityDelayEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnLocallyOwnedVisibilityDelayEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerProjectile.BP_OnLostHomingTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ExHomingTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_OnLostHomingTarget(class AActor* ExHomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnLostHomingTarget");

	Params::MarinerProjectile_BP_OnLostHomingTarget Parms{};

	Parms.ExHomingTarget = ExHomingTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.BP_OnStuckToImpactedObject
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_OnStuckToImpactedObject(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_OnStuckToImpactedObject");

	Params::MarinerProjectile_BP_OnStuckToImpactedObject Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.BP_ToggleHideComponentsOnRealityChange
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShouldBeHidden                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::BP_ToggleHideComponentsOnRealityChange(bool bShouldBeHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_ToggleHideComponentsOnRealityChange");

	Params::MarinerProjectile_BP_ToggleHideComponentsOnRealityChange Parms{};

	Parms.bShouldBeHidden = bShouldBeHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerProjectile.ClearHomingTarget
// (Final, Native, Public, BlueprintCallable)

void AMarinerProjectile::ClearHomingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "ClearHomingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.DisableAndDestroy
// (Final, Native, Public, BlueprintCallable)

void AMarinerProjectile::DisableAndDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "DisableAndDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.Explode
// (Final, Native, Public, BlueprintCallable)

void AMarinerProjectile::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.ExplodeFromImpact
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       Impact                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerProjectile::ExplodeFromImpact(const struct FHitResult& Impact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "ExplodeFromImpact");

	Params::MarinerProjectile_ExplodeFromImpact Parms{};

	Parms.Impact = std::move(Impact);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.InitDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ShootDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::InitDirection(const struct FVector& ShootDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "InitDirection");

	Params::MarinerProjectile_InitDirection Parms{};

	Parms.ShootDirection = std::move(ShootDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.InitDirectionAndSpeed
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ShootDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::InitDirectionAndSpeed(const struct FVector& ShootDirection, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "InitDirectionAndSpeed");

	Params::MarinerProjectile_InitDirectionAndSpeed Parms{};

	Parms.ShootDirection = std::move(ShootDirection);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.MulticastDisableToPool
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// float                                   CurrentTimeStamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::MulticastDisableToPool(float CurrentTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "MulticastDisableToPool");

	Params::MarinerProjectile_MulticastDisableToPool Parms{};

	Parms.CurrentTimeStamp = CurrentTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.MulticastEnableFromPool_Expanded
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector_NetQuantize              InitialLocation                                        (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              InstigatorEyeLocation                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           InitialDirection                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FireSocket                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  HomingTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HomingTargetSocketName                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTimeStamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::MulticastEnableFromPool_Expanded(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, const class FName& FireSocket, class USceneComponent* HomingTarget, class FName HomingTargetSocketName, float CurrentTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "MulticastEnableFromPool_Expanded");

	Params::MarinerProjectile_MulticastEnableFromPool_Expanded Parms{};

	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InstigatorEyeLocation = std::move(InstigatorEyeLocation);
	Parms.InitialDirection = std::move(InitialDirection);
	Parms.FireSocket = FireSocket;
	Parms.HomingTarget = HomingTarget;
	Parms.HomingTargetSocketName = HomingTargetSocketName;
	Parms.CurrentTimeStamp = CurrentTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.MulticastEnableFromPool_Minimal
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector_NetQuantize              InitialLocation                                        (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              InstigatorEyeLocation                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           InitialDirection                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTimeStamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::MulticastEnableFromPool_Minimal(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, float CurrentTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "MulticastEnableFromPool_Minimal");

	Params::MarinerProjectile_MulticastEnableFromPool_Minimal Parms{};

	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InstigatorEyeLocation = std::move(InstigatorEyeLocation);
	Parms.InitialDirection = std::move(InitialDirection);
	Parms.CurrentTimeStamp = CurrentTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.MulticastEnableFromPool_NonDefaultFireSocket
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector_NetQuantize              InitialLocation                                        (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              InstigatorEyeLocation                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           InitialDirection                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FireSocket                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTimeStamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::MulticastEnableFromPool_NonDefaultFireSocket(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, const class FName& FireSocket, float CurrentTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "MulticastEnableFromPool_NonDefaultFireSocket");

	Params::MarinerProjectile_MulticastEnableFromPool_NonDefaultFireSocket Parms{};

	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InstigatorEyeLocation = std::move(InstigatorEyeLocation);
	Parms.InitialDirection = std::move(InitialDirection);
	Parms.FireSocket = FireSocket;
	Parms.CurrentTimeStamp = CurrentTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.MulticastEnableFromPool_WithHoming
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FVector_NetQuantize              InitialLocation                                        (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              InstigatorEyeLocation                                  (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           InitialDirection                                       (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  HomingTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HomingTargetSocketName                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTimeStamp                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::MulticastEnableFromPool_WithHoming(const struct FVector_NetQuantize& InitialLocation, const struct FVector_NetQuantize& InstigatorEyeLocation, const struct FVector_NetQuantize100& InitialDirection, class USceneComponent* HomingTarget, class FName HomingTargetSocketName, float CurrentTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "MulticastEnableFromPool_WithHoming");

	Params::MarinerProjectile_MulticastEnableFromPool_WithHoming Parms{};

	Parms.InitialLocation = std::move(InitialLocation);
	Parms.InstigatorEyeLocation = std::move(InstigatorEyeLocation);
	Parms.InitialDirection = std::move(InitialDirection);
	Parms.HomingTarget = HomingTarget;
	Parms.HomingTargetSocketName = HomingTargetSocketName;
	Parms.CurrentTimeStamp = CurrentTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnAnyRejoiningClientReady
// (Native, Event, Public, BlueprintEvent)

void AMarinerProjectile::OnAnyRejoiningClientReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnAnyRejoiningClientReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnCornerObstructionFound
// (Native, Event, Protected, BlueprintEvent)

void AMarinerProjectile::OnCornerObstructionFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnCornerObstructionFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnDelayedLocallyOwnedVisibilityTimerExpired
// (Final, Native, Public)

void AMarinerProjectile::OnDelayedLocallyOwnedVisibilityTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnDelayedLocallyOwnedVisibilityTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnImpact
// (Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnImpact(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnImpact");

	Params::MarinerProjectile_OnImpact Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnInstigatorGameplayTagEvent
// (Native, Public)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnInstigatorGameplayTagEvent(const struct FGameplayTag& GameplayTag, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnInstigatorGameplayTagEvent");

	Params::MarinerProjectile_OnInstigatorGameplayTagEvent Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnInstigatorPlayerStateReceived
// (Final, Native, Protected)

void AMarinerProjectile::OnInstigatorPlayerStateReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnInstigatorPlayerStateReceived");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnLifeTimeExpired
// (Native, Event, Public, BlueprintEvent)

void AMarinerProjectile::OnLifeTimeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnLifeTimeExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnLocalCharacterChangedReality
// (Final, Native, Protected)
// Parameters:
// EMarinerRealityState                    OldReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerRealityState                    NewReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnLocalCharacterChangedReality(EMarinerRealityState OldReality, EMarinerRealityState NewReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnLocalCharacterChangedReality");

	Params::MarinerProjectile_OnLocalCharacterChangedReality Parms{};

	Parms.OldReality = OldReality;
	Parms.NewReality = NewReality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnModifierInstigatorDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           ModifyInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnModifierInstigatorDestroyed(class AActor* ModifyInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnModifierInstigatorDestroyed");

	Params::MarinerProjectile_OnModifierInstigatorDestroyed Parms{};

	Parms.ModifyInstigator = ModifyInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnOwnerMangoUserUpdated
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnOwnerMangoUserUpdated");

	Params::MarinerProjectile_OnOwnerMangoUserUpdated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnOwningCharacterDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::OnOwningCharacterDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnOwningCharacterDestroyed");

	Params::MarinerProjectile_OnOwningCharacterDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnProfileObjectsLoaded
// (Final, Native, Protected)

void AMarinerProjectile::OnProfileObjectsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnProfileObjectsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnRep_ExplosionData
// (Final, Native, Protected)

void AMarinerProjectile::OnRep_ExplosionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnRep_ExplosionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnRep_LatencyMoveCompensationReplicationCounter
// (Final, Native, Private)

void AMarinerProjectile::OnRep_LatencyMoveCompensationReplicationCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnRep_LatencyMoveCompensationReplicationCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnRep_RejoinEnableId
// (Final, Native, Private)

void AMarinerProjectile::OnRep_RejoinEnableId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnRep_RejoinEnableId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.OnRep_StopVisualOffsetReplicationCounter
// (Final, Native, Private)

void AMarinerProjectile::OnRep_StopVisualOffsetReplicationCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "OnRep_StopVisualOffsetReplicationCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.PauseVisualComponentMoveData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::PauseVisualComponentMoveData(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "PauseVisualComponentMoveData");

	Params::MarinerProjectile_PauseVisualComponentMoveData Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.PreventAutoActivate
// (Native, Event, Public, BlueprintEvent)

void AMarinerProjectile::PreventAutoActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "PreventAutoActivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.ReverseVisualComponentMoveData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::ReverseVisualComponentMoveData(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "ReverseVisualComponentMoveData");

	Params::MarinerProjectile_ReverseVisualComponentMoveData Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.SetFirePointSocketName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::SetFirePointSocketName(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "SetFirePointSocketName");

	Params::MarinerProjectile_SetFirePointSocketName Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.SetInstancedMeshVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::SetInstancedMeshVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "SetInstancedMeshVisibility");

	Params::MarinerProjectile_SetInstancedMeshVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "SetTeamIndex");

	Params::MarinerProjectile_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.StopAndFinishVisualOffset
// (Final, Native, Public, BlueprintCallable)

void AMarinerProjectile::StopAndFinishVisualOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "StopAndFinishVisualOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.StopVisualComponentMoveData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::StopVisualComponentMoveData(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "StopVisualComponentMoveData");

	Params::MarinerProjectile_StopVisualComponentMoveData Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.TryLoadSkinFromInstigatorsProfile
// (Final, Native, Protected)

void AMarinerProjectile::TryLoadSkinFromInstigatorsProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "TryLoadSkinFromInstigatorsProfile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.UnpauseVisualComponentMoveData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectile::UnpauseVisualComponentMoveData(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "UnpauseVisualComponentMoveData");

	Params::MarinerProjectile_UnpauseVisualComponentMoveData Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void AMarinerProjectile::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectile.AuthorityIsActorDamageImmune
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           DamageImmuneActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::AuthorityIsActorDamageImmune(class AActor* DamageImmuneActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "AuthorityIsActorDamageImmune");

	Params::MarinerProjectile_AuthorityIsActorDamageImmune Parms{};

	Parms.DamageImmuneActor = DamageImmuneActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.BP_GetExtraManagedParticleComponents
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TMap<class UParticleSystemComponent*, struct FVector>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UParticleSystemComponent*, struct FVector> AMarinerProjectile::BP_GetExtraManagedParticleComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_GetExtraManagedParticleComponents");

	Params::MarinerProjectile_BP_GetExtraManagedParticleComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.BP_GetExtraManagedParticleTrailComponents
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TMap<class UParticleSystemComponent*, struct FVector>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UParticleSystemComponent*, struct FVector> AMarinerProjectile::BP_GetExtraManagedParticleTrailComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_GetExtraManagedParticleTrailComponents");

	Params::MarinerProjectile_BP_GetExtraManagedParticleTrailComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.BP_GetExtraManagedVisualComponents
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<class USceneComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USceneComponent*> AMarinerProjectile::BP_GetExtraManagedVisualComponents() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "BP_GetExtraManagedVisualComponents");

	Params::MarinerProjectile_BP_GetExtraManagedVisualComponents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.DoesExplodeOnImpact
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::DoesExplodeOnImpact() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "DoesExplodeOnImpact");

	Params::MarinerProjectile_DoesExplodeOnImpact Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetAuthorityTimeStamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetAuthorityTimeStamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetAuthorityTimeStamp");

	Params::MarinerProjectile_GetAuthorityTimeStamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetCreationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetCreationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetCreationTime");

	Params::MarinerProjectile_GetCreationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetDamageMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetDamageMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetDamageMultiplier");

	Params::MarinerProjectile_GetDamageMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetImpulseBatchingType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 AMarinerProjectile::GetImpulseBatchingType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetImpulseBatchingType");

	Params::MarinerProjectile_GetImpulseBatchingType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetImpulseMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetImpulseMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetImpulseMultiplier");

	Params::MarinerProjectile_GetImpulseMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetInstigatorAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbilitySystemComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbilitySystemComponent* AMarinerProjectile::GetInstigatorAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetInstigatorAbilitySystemComponent");

	Params::MarinerProjectile_GetInstigatorAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::GetIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetIsEnabled");

	Params::MarinerProjectile_GetIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerProjectileMoveComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerProjectileMoveComponent* AMarinerProjectile::GetMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetMovementComponent");

	Params::MarinerProjectile_GetMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetSkinData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbilitySkinData_Base*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbilitySkinData_Base* AMarinerProjectile::GetSkinData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetSkinData");

	Params::MarinerProjectile_GetSkinData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerProjectile::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetTeamIndex");

	Params::MarinerProjectile_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetTotalLifetimeModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetTotalLifetimeModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetTotalLifetimeModifier");

	Params::MarinerProjectile_GetTotalLifetimeModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.GetTotalSpeedModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerProjectile::GetTotalSpeedModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "GetTotalSpeedModifier");

	Params::MarinerProjectile_GetTotalSpeedModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.IsProjectileEnablePoolTimerActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::IsProjectileEnablePoolTimerActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "IsProjectileEnablePoolTimerActive");

	Params::MarinerProjectile_IsProjectileEnablePoolTimerActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectile.UsesImpulseBatching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectile::UsesImpulseBatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectile", "UsesImpulseBatching");

	Params::MarinerProjectile_UsesImpulseBatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGrapplingHook.AttachGrapplingHookCableToCharacter
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                CharacterToAttachTo                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGrapplingHook::AttachGrapplingHookCableToCharacter(class AMarinerCharacter* CharacterToAttachTo, const class FName& AttachSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "AttachGrapplingHookCableToCharacter");

	Params::MarinerGrapplingHook_AttachGrapplingHookCableToCharacter Parms{};

	Parms.CharacterToAttachTo = CharacterToAttachTo;
	Parms.AttachSocketName = AttachSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.AttachGrapplingHookCableToComponent
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USceneComponent*                  ComponentToAttachTo                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGrapplingHook::AttachGrapplingHookCableToComponent(class USceneComponent* ComponentToAttachTo, const class FName& AttachSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "AttachGrapplingHookCableToComponent");

	Params::MarinerGrapplingHook_AttachGrapplingHookCableToComponent Parms{};

	Parms.ComponentToAttachTo = ComponentToAttachTo;
	Parms.AttachSocketName = AttachSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.DetachGrapplingHook
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerGrapplingHook::DetachGrapplingHook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "DetachGrapplingHook");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.DetachGrapplingHookCable
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerGrapplingHook::DetachGrapplingHookCable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "DetachGrapplingHookCable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.OnHookAttachedActorDestroyed
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGrapplingHook::OnHookAttachedActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "OnHookAttachedActorDestroyed");

	Params::MarinerGrapplingHook_OnHookAttachedActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.OnHookAttachedItemPickedUp
// (Final, Native, Public)
// Parameters:
// class AMarinerItem*                     AttachedItem                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                NewItemHolder                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGrapplingHook::OnHookAttachedItemPickedUp(class AMarinerItem* AttachedItem, class AMarinerCharacter* NewItemHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "OnHookAttachedItemPickedUp");

	Params::MarinerGrapplingHook_OnHookAttachedItemPickedUp Parms{};

	Parms.AttachedItem = AttachedItem;
	Parms.NewItemHolder = NewItemHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.OnPostDetachDestroyTimerExpired
// (Final, Native, Public)

void AMarinerGrapplingHook::OnPostDetachDestroyTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "OnPostDetachDestroyTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.OnRep_GrapplingHookCableAttachData
// (Final, Native, Public)

void AMarinerGrapplingHook::OnRep_GrapplingHookCableAttachData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "OnRep_GrapplingHookCableAttachData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.OnRep_IsHookAttached
// (Final, Native, Public)

void AMarinerGrapplingHook::OnRep_IsHookAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "OnRep_IsHookAttached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGrapplingHook.IsGrapplingHookCableAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGrapplingHook::IsGrapplingHookCableAttached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGrapplingHook", "IsGrapplingHookCableAttached");

	Params::MarinerGrapplingHook_IsGrapplingHookCableAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCheatManager.ChangeTeam
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   NewTeamNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::ChangeTeam(int32 NewTeamNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ChangeTeam");

	Params::MarinerCheatManager_ChangeTeam Parms{};

	Parms.NewTeamNumber = NewTeamNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.Cheat
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::Cheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "Cheat");

	Params::MarinerCheatManager_Cheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ClientCheat
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::ClientCheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ClientCheat");

	Params::MarinerCheatManager_ClientCheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.DisplayEquippedArtifacts
// (Final, Exec, Native, Public)

void UMarinerCheatManager::DisplayEquippedArtifacts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "DisplayEquippedArtifacts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.EnableAllCharacters
// (Final, Exec, Native, Public)

void UMarinerCheatManager::EnableAllCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "EnableAllCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.EnableBotAbilities
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::EnableBotAbilities(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "EnableBotAbilities");

	Params::MarinerCheatManager_EnableBotAbilities Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ForceMatchStart
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ForceMatchStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ForceMatchStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ForceMaxQuality
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ForceMaxQuality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ForceMaxQuality");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ForceRefreshInventory
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ForceRefreshInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ForceRefreshInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.GetMedal
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MessagePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::GetMedal(const class FString& MessagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "GetMedal");

	Params::MarinerCheatManager_GetMedal Parms{};

	Parms.MessagePath = std::move(MessagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.MuteLocalAudioListener
// (Final, Exec, Native, Public)

void UMarinerCheatManager::MuteLocalAudioListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "MuteLocalAudioListener");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.PossessNewPawn
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           PawnPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::PossessNewPawn(const class FString& PawnPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "PossessNewPawn");

	Params::MarinerCheatManager_PossessNewPawn Parms{};

	Parms.PawnPath = std::move(PawnPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.PrintActorPoolInfo
// (Final, Exec, Native, Public)

void UMarinerCheatManager::PrintActorPoolInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "PrintActorPoolInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.RecordPressInputToProjectileTime
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InputName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::RecordPressInputToProjectileTime(const class FString& InputName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "RecordPressInputToProjectileTime");

	Params::MarinerCheatManager_RecordPressInputToProjectileTime Parms{};

	Parms.InputName = std::move(InputName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.RecordReleaseInputToProjectileTime
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InputName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::RecordReleaseInputToProjectileTime(const class FString& InputName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "RecordReleaseInputToProjectileTime");

	Params::MarinerCheatManager_RecordReleaseInputToProjectileTime Parms{};

	Parms.InputName = std::move(InputName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetArtifact
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ArtifactName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetArtifact(const class FString& ArtifactName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetArtifact");

	Params::MarinerCheatManager_SetArtifact Parms{};

	Parms.ArtifactName = std::move(ArtifactName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetArtifactLevel
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   ArtifactLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetArtifactLevel(int32 ArtifactLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetArtifactLevel");

	Params::MarinerCheatManager_SetArtifactLevel Parms{};

	Parms.ArtifactLevel = ArtifactLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetCharacterLightingEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetCharacterLightingEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetCharacterLightingEnabled");

	Params::MarinerCheatManager_SetCharacterLightingEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetChatEmote
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChatEmoteName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetChatEmote(int32 Slot, const class FString& ChatEmoteName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetChatEmote");

	Params::MarinerCheatManager_SetChatEmote Parms{};

	Parms.Slot = Slot;
	Parms.ChatEmoteName = std::move(ChatEmoteName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetMegaBlast
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           MegaBlastName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetMegaBlast(const class FString& MegaBlastName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetMegaBlast");

	Params::MarinerCheatManager_SetMegaBlast Parms{};

	Parms.MegaBlastName = std::move(MegaBlastName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetOutlinesEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetOutlinesEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetOutlinesEnabled");

	Params::MarinerCheatManager_SetOutlinesEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetPreGameEmote
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PreGameEmoteName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetPreGameEmote(int32 Slot, const class FString& PreGameEmoteName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetPreGameEmote");

	Params::MarinerCheatManager_SetPreGameEmote Parms{};

	Parms.Slot = Slot;
	Parms.PreGameEmoteName = std::move(PreGameEmoteName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetProjectileLatencyCompensationEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetProjectileLatencyCompensationEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetProjectileLatencyCompensationEnabled");

	Params::MarinerCheatManager_SetProjectileLatencyCompensationEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetReturnTrail
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ReturnTrailName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetReturnTrail(const class FString& ReturnTrailName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetReturnTrail");

	Params::MarinerCheatManager_SetReturnTrail Parms{};

	Parms.ReturnTrailName = std::move(ReturnTrailName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetSkin
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SkinIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetSkin(int32 SkinIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetSkin");

	Params::MarinerCheatManager_SetSkin Parms{};

	Parms.SkinIndex = SkinIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SetVictoryPose
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ArtifactName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCheatManager::SetVictoryPose(const class FString& ArtifactName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SetVictoryPose");

	Params::MarinerCheatManager_SetVictoryPose Parms{};

	Parms.ArtifactName = std::move(ArtifactName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.SpawnBot
// (Final, Exec, Native, Public)

void UMarinerCheatManager::SpawnBot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "SpawnBot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleCameraPunchThrough
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleCameraPunchThrough()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleCameraPunchThrough");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleForceLoopPrimary
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleForceLoopPrimary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleForceLoopPrimary");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleGodMode
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleGodMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleGodMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleIdleBootDebugging
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleIdleBootDebugging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleIdleBootDebugging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleInfiniteAmmo
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleInfiniteAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleInfiniteAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleInvincibleMode
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleInvincibleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleInvincibleMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleMatchTimer
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleMatchTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleMatchTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleMusic
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleNoAbilityCooldown
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleNoAbilityCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleNoAbilityCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleReturnZoneVisibility
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleReturnZoneVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleReturnZoneVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleSFX
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleSFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleSFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleTurboMode
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleTurboMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleTurboMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.ToggleVoiceVolume
// (Final, Exec, Native, Public)

void UMarinerCheatManager::ToggleVoiceVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "ToggleVoiceVolume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCheatManager.UnmuteLocalAudioListener
// (Final, Exec, Native, Public)

void UMarinerCheatManager::UnmuteLocalAudioListener()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCheatManager", "UnmuteLocalAudioListener");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.GetSensitivitySpecification
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGameUserSettings::GetSensitivitySpecification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSensitivitySpecification");

	Params::MarinerGameUserSettings_GetSensitivitySpecification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.RestoreAccessibilityDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreAccessibilityDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreAccessibilityDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreAccountDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreAccountDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreAccountDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreAudioDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreAudioDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreAudioDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreControllerDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreControllerDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreControllerDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreGameDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreGameDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreGameDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreKBMDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreKBMDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreKBMDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.RestoreVideoDefaults
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameUserSettings::RestoreVideoDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "RestoreVideoDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetAimAssistState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerAimAssistState                  InState                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetAimAssistState(EMarinerAimAssistState InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetAimAssistState");

	Params::MarinerGameUserSettings_SetAimAssistState Parms{};

	Parms.InState = InState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetAimSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSensitivity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetAimSensitivity(float InSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetAimSensitivity");

	Params::MarinerGameUserSettings_SetAimSensitivity Parms{};

	Parms.InSensitivity = InSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetColorDeficiency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EColorVisionDeficiency                  InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetColorDeficiency(EColorVisionDeficiency InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetColorDeficiency");

	Params::MarinerGameUserSettings_SetColorDeficiency Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetColorDeficiencySeverity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetColorDeficiencySeverity(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetColorDeficiencySeverity");

	Params::MarinerGameUserSettings_SetColorDeficiencySeverity Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerAxialDeadzone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InAxialDeadzone                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerAxialDeadzone(float InAxialDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerAxialDeadzone");

	Params::MarinerGameUserSettings_SetControllerAxialDeadzone Parms{};

	Parms.InAxialDeadzone = InAxialDeadzone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerConfiguration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InConfiguration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerConfiguration(int32 InConfiguration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerConfiguration");

	Params::MarinerGameUserSettings_SetControllerConfiguration Parms{};

	Parms.InConfiguration = InConfiguration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerInnerRadialDeadzone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InInnerRadialDeadzone                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerInnerRadialDeadzone(float InInnerRadialDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerInnerRadialDeadzone");

	Params::MarinerGameUserSettings_SetControllerInnerRadialDeadzone Parms{};

	Parms.InInnerRadialDeadzone = InInnerRadialDeadzone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerInversionHorizontal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerInversionHorizontal(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerInversionHorizontal");

	Params::MarinerGameUserSettings_SetControllerInversionHorizontal Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerInversionVertical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerInversionVertical(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerInversionVertical");

	Params::MarinerGameUserSettings_SetControllerInversionVertical Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerMenuDeadzone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMenuDeadzone                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerMenuDeadzone(float InMenuDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerMenuDeadzone");

	Params::MarinerGameUserSettings_SetControllerMenuDeadzone Parms{};

	Parms.InMenuDeadzone = InMenuDeadzone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetControllerOuterRadialDeadzone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOuterRadialDeadzone                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetControllerOuterRadialDeadzone(float InOuterRadialDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetControllerOuterRadialDeadzone");

	Params::MarinerGameUserSettings_SetControllerOuterRadialDeadzone Parms{};

	Parms.InOuterRadialDeadzone = InOuterRadialDeadzone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetCrossplayNoticeViewed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetCrossplayNoticeViewed(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetCrossplayNoticeViewed");

	Params::MarinerGameUserSettings_SetCrossplayNoticeViewed Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetCrossplayState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerCrossplayState                  InCrossplayState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetCrossplayState(EMarinerCrossplayState InCrossplayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetCrossplayState");

	Params::MarinerGameUserSettings_SetCrossplayState Parms{};

	Parms.InCrossplayState = InCrossplayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetFastTurnState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InSetting                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetFastTurnState(int32 InSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetFastTurnState");

	Params::MarinerGameUserSettings_SetFastTurnState Parms{};

	Parms.InSetting = InSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetGameScreenPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetGameScreenPercentage(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetGameScreenPercentage");

	Params::MarinerGameUserSettings_SetGameScreenPercentage Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetGamma
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InGamma                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetGamma(float InGamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetGamma");

	Params::MarinerGameUserSettings_SetGamma Parms{};

	Parms.InGamma = InGamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetHorizontalFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFOV                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetHorizontalFOV(float InFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetHorizontalFOV");

	Params::MarinerGameUserSettings_SetHorizontalFOV Parms{};

	Parms.InFOV = InFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetLastGameliftDnsName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InGameliftDnsName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetLastGameliftDnsName(const class FString& InGameliftDnsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetLastGameliftDnsName");

	Params::MarinerGameUserSettings_SetLastGameliftDnsName Parms{};

	Parms.InGameliftDnsName = std::move(InGameliftDnsName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetLastGameliftSessionId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InGameliftSessionId                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetLastGameliftSessionId(const class FString& InGameliftSessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetLastGameliftSessionId");

	Params::MarinerGameUserSettings_SetLastGameliftSessionId Parms{};

	Parms.InGameliftSessionId = std::move(InGameliftSessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetLegalDocsAccepted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAccepted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetLegalDocsAccepted(bool bAccepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetLegalDocsAccepted");

	Params::MarinerGameUserSettings_SetLegalDocsAccepted Parms{};

	Parms.bAccepted = bAccepted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMasterVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMasterVolume                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMasterVolume(float InMasterVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMasterVolume");

	Params::MarinerGameUserSettings_SetMasterVolume Parms{};

	Parms.InMasterVolume = InMasterVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMenuNarrationVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMenuNarrationVolume(float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMenuNarrationVolume");

	Params::MarinerGameUserSettings_SetMenuNarrationVolume Parms{};

	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMouseInvertedXAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInvert                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMouseInvertedXAxis(bool bInvert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMouseInvertedXAxis");

	Params::MarinerGameUserSettings_SetMouseInvertedXAxis Parms{};

	Parms.bInvert = bInvert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMouseInvertedYAxis
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInvert                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMouseInvertedYAxis(bool bInvert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMouseInvertedYAxis");

	Params::MarinerGameUserSettings_SetMouseInvertedYAxis Parms{};

	Parms.bInvert = bInvert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMouseLookUpSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSensitivity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMouseLookUpSensitivity(float InSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMouseLookUpSensitivity");

	Params::MarinerGameUserSettings_SetMouseLookUpSensitivity Parms{};

	Parms.InSensitivity = InSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMouseTurnSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSensitivity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMouseTurnSensitivity(float InSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMouseTurnSensitivity");

	Params::MarinerGameUserSettings_SetMouseTurnSensitivity Parms{};

	Parms.InSensitivity = InSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMusicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMusicVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMusicVolume(float InMusicVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMusicVolume");

	Params::MarinerGameUserSettings_SetMusicVolume Parms{};

	Parms.InMusicVolume = InMusicVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetMythicUpsellViewed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetMythicUpsellViewed(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetMythicUpsellViewed");

	Params::MarinerGameUserSettings_SetMythicUpsellViewed Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetNarrationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetNarrationEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetNarrationEnabled");

	Params::MarinerGameUserSettings_SetNarrationEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetPartyIsPrivate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetPartyIsPrivate(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetPartyIsPrivate");

	Params::MarinerGameUserSettings_SetPartyIsPrivate Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSavedCulture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InCultureName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSavedCulture(const class FString& InCultureName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSavedCulture");

	Params::MarinerGameUserSettings_SetSavedCulture Parms{};

	Parms.InCultureName = std::move(InCultureName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSensitivitySpecification
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InSensitivity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSensitivitySpecification(int32 InSensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSensitivitySpecification");

	Params::MarinerGameUserSettings_SetSensitivitySpecification Parms{};

	Parms.InSensitivity = InSensitivity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSFXVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSFXVolume                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSFXVolume(float InSFXVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSFXVolume");

	Params::MarinerGameUserSettings_SetSFXVolume Parms{};

	Parms.InSFXVolume = InSFXVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSharingExternalUsageData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSharing                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSharingExternalUsageData(bool bSharing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSharingExternalUsageData");

	Params::MarinerGameUserSettings_SetSharingExternalUsageData Parms{};

	Parms.bSharing = bSharing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSharingUsageData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSharing                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSharingUsageData(bool bSharing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSharingUsageData");

	Params::MarinerGameUserSettings_SetSharingUsageData Parms{};

	Parms.bSharing = bSharing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetShowInGameIcons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetShowInGameIcons(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetShowInGameIcons");

	Params::MarinerGameUserSettings_SetShowInGameIcons Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetShowNetworkInformation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetShowNetworkInformation(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetShowNetworkInformation");

	Params::MarinerGameUserSettings_SetShowNetworkInformation Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSpeechToTextEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSpeechToTextEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSpeechToTextEnabled");

	Params::MarinerGameUserSettings_SetSpeechToTextEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSSRQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSSRQuality(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSSRQuality");

	Params::MarinerGameUserSettings_SetSSRQuality Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetStickAccelerationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetStickAccelerationEnabled(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetStickAccelerationEnabled");

	Params::MarinerGameUserSettings_SetStickAccelerationEnabled Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetSubtitlesEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetSubtitlesEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetSubtitlesEnabled");

	Params::MarinerGameUserSettings_SetSubtitlesEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetTextToSpeechEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetTextToSpeechEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetTextToSpeechEnabled");

	Params::MarinerGameUserSettings_SetTextToSpeechEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetUserSelectedMatchmakingRegion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InUserSelectedMatchmakingRegion                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetUserSelectedMatchmakingRegion(const class FString& InUserSelectedMatchmakingRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetUserSelectedMatchmakingRegion");

	Params::MarinerGameUserSettings_SetUserSelectedMatchmakingRegion Parms{};

	Parms.InUserSelectedMatchmakingRegion = std::move(InUserSelectedMatchmakingRegion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetVibrationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetVibrationEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetVibrationEnabled");

	Params::MarinerGameUserSettings_SetVibrationEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetVoiceChatEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetVoiceChatEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetVoiceChatEnabled");

	Params::MarinerGameUserSettings_SetVoiceChatEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetVoiceChatPushToTalkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetVoiceChatPushToTalkEnabled(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetVoiceChatPushToTalkEnabled");

	Params::MarinerGameUserSettings_SetVoiceChatPushToTalkEnabled Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetVoiceChatVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVoiceChatVolume                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetVoiceChatVolume(float InVoiceChatVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetVoiceChatVolume");

	Params::MarinerGameUserSettings_SetVoiceChatVolume Parms{};

	Parms.InVoiceChatVolume = InVoiceChatVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.SetVoiceVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVoiceVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameUserSettings::SetVoiceVolume(float InVoiceVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "SetVoiceVolume");

	Params::MarinerGameUserSettings_SetVoiceVolume Parms{};

	Parms.InVoiceVolume = InVoiceVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameUserSettings.GetAimAssistState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerAimAssistState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerAimAssistState UMarinerGameUserSettings::GetAimAssistState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetAimAssistState");

	Params::MarinerGameUserSettings_GetAimAssistState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetAimSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetAimSensitivity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetAimSensitivity");

	Params::MarinerGameUserSettings_GetAimSensitivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetColorDeficiency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EColorVisionDeficiency                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EColorVisionDeficiency UMarinerGameUserSettings::GetColorDeficiency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetColorDeficiency");

	Params::MarinerGameUserSettings_GetColorDeficiency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetColorDeficiencySeverity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetColorDeficiencySeverity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetColorDeficiencySeverity");

	Params::MarinerGameUserSettings_GetColorDeficiencySeverity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerAxialDeadzone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetControllerAxialDeadzone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerAxialDeadzone");

	Params::MarinerGameUserSettings_GetControllerAxialDeadzone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerConfiguration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGameUserSettings::GetControllerConfiguration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerConfiguration");

	Params::MarinerGameUserSettings_GetControllerConfiguration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerInnerRadialDeadzone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetControllerInnerRadialDeadzone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerInnerRadialDeadzone");

	Params::MarinerGameUserSettings_GetControllerInnerRadialDeadzone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerInversionHorizontal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetControllerInversionHorizontal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerInversionHorizontal");

	Params::MarinerGameUserSettings_GetControllerInversionHorizontal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerInversionVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetControllerInversionVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerInversionVertical");

	Params::MarinerGameUserSettings_GetControllerInversionVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerMenuDeadzone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetControllerMenuDeadzone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerMenuDeadzone");

	Params::MarinerGameUserSettings_GetControllerMenuDeadzone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetControllerOuterRadialDeadzone
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetControllerOuterRadialDeadzone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetControllerOuterRadialDeadzone");

	Params::MarinerGameUserSettings_GetControllerOuterRadialDeadzone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetCrossplayNoticeViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetCrossplayNoticeViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetCrossplayNoticeViewed");

	Params::MarinerGameUserSettings_GetCrossplayNoticeViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetCrossplayState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerCrossplayState                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerCrossplayState UMarinerGameUserSettings::GetCrossplayState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetCrossplayState");

	Params::MarinerGameUserSettings_GetCrossplayState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetFastTurnState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGameUserSettings::GetFastTurnState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetFastTurnState");

	Params::MarinerGameUserSettings_GetFastTurnState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetGameScreenPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetGameScreenPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetGameScreenPercentage");

	Params::MarinerGameUserSettings_GetGameScreenPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetGamma
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetGamma() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetGamma");

	Params::MarinerGameUserSettings_GetGamma Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetHorizontalFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetHorizontalFOV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetHorizontalFOV");

	Params::MarinerGameUserSettings_GetHorizontalFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetLastGameLiftDnsName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGameUserSettings::GetLastGameLiftDnsName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetLastGameLiftDnsName");

	Params::MarinerGameUserSettings_GetLastGameLiftDnsName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetLastGameLiftSessionId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGameUserSettings::GetLastGameLiftSessionId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetLastGameLiftSessionId");

	Params::MarinerGameUserSettings_GetLastGameLiftSessionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMasterVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetMasterVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMasterVolume");

	Params::MarinerGameUserSettings_GetMasterVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMenuNarrationVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetMenuNarrationVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMenuNarrationVolume");

	Params::MarinerGameUserSettings_GetMenuNarrationVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMouseLookUpSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetMouseLookUpSensitivity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMouseLookUpSensitivity");

	Params::MarinerGameUserSettings_GetMouseLookUpSensitivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMouseTurnSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetMouseTurnSensitivity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMouseTurnSensitivity");

	Params::MarinerGameUserSettings_GetMouseTurnSensitivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMusicVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetMusicVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMusicVolume");

	Params::MarinerGameUserSettings_GetMusicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetMythicUpsellViewed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetMythicUpsellViewed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetMythicUpsellViewed");

	Params::MarinerGameUserSettings_GetMythicUpsellViewed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetNarrationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetNarrationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetNarrationEnabled");

	Params::MarinerGameUserSettings_GetNarrationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetPartyIsPrivate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetPartyIsPrivate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetPartyIsPrivate");

	Params::MarinerGameUserSettings_GetPartyIsPrivate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetSavedCulture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGameUserSettings::GetSavedCulture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSavedCulture");

	Params::MarinerGameUserSettings_GetSavedCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetSFXVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetSFXVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSFXVolume");

	Params::MarinerGameUserSettings_GetSFXVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetShowInGameIcons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetShowInGameIcons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetShowInGameIcons");

	Params::MarinerGameUserSettings_GetShowInGameIcons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetShowNetworkInformation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetShowNetworkInformation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetShowNetworkInformation");

	Params::MarinerGameUserSettings_GetShowNetworkInformation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetSpeechToTextEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetSpeechToTextEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSpeechToTextEnabled");

	Params::MarinerGameUserSettings_GetSpeechToTextEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetSSRQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGameUserSettings::GetSSRQuality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSSRQuality");

	Params::MarinerGameUserSettings_GetSSRQuality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetStickAccelerationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetStickAccelerationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetStickAccelerationEnabled");

	Params::MarinerGameUserSettings_GetStickAccelerationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetSubtitlesEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetSubtitlesEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetSubtitlesEnabled");

	Params::MarinerGameUserSettings_GetSubtitlesEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetTextToSpeechEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetTextToSpeechEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetTextToSpeechEnabled");

	Params::MarinerGameUserSettings_GetTextToSpeechEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetUserSelectedMatchmakingRegion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGameUserSettings::GetUserSelectedMatchmakingRegion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetUserSelectedMatchmakingRegion");

	Params::MarinerGameUserSettings_GetUserSelectedMatchmakingRegion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetVibrationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetVibrationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetVibrationEnabled");

	Params::MarinerGameUserSettings_GetVibrationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetVoiceChatEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetVoiceChatEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetVoiceChatEnabled");

	Params::MarinerGameUserSettings_GetVoiceChatEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetVoiceChatPushToTalkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::GetVoiceChatPushToTalkEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetVoiceChatPushToTalkEnabled");

	Params::MarinerGameUserSettings_GetVoiceChatPushToTalkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetVoiceChatVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetVoiceChatVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetVoiceChatVolume");

	Params::MarinerGameUserSettings_GetVoiceChatVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.GetVoiceVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerGameUserSettings::GetVoiceVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "GetVoiceVolume");

	Params::MarinerGameUserSettings_GetVoiceVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.HasAcceptedLegalDocs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::HasAcceptedLegalDocs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "HasAcceptedLegalDocs");

	Params::MarinerGameUserSettings_HasAcceptedLegalDocs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.IsMouseInvertedXAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::IsMouseInvertedXAxis() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "IsMouseInvertedXAxis");

	Params::MarinerGameUserSettings_IsMouseInvertedXAxis Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.IsMouseInvertedYAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::IsMouseInvertedYAxis() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "IsMouseInvertedYAxis");

	Params::MarinerGameUserSettings_IsMouseInvertedYAxis Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.IsSharingExternalUsageData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::IsSharingExternalUsageData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "IsSharingExternalUsageData");

	Params::MarinerGameUserSettings_IsSharingExternalUsageData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameUserSettings.IsSharingUsageData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameUserSettings::IsSharingUsageData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameUserSettings", "IsSharingUsageData");

	Params::MarinerGameUserSettings_IsSharingUsageData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetAchievementsGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAchievementsGlobals*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAchievementsGlobals* UMarinerGlobals::GetAchievementsGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetAchievementsGlobals");

	Params::MarinerGlobals_GetAchievementsGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetActiveSettingsGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSettingsGlobals*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSettingsGlobals* UMarinerGlobals::GetActiveSettingsGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetActiveSettingsGlobals");

	Params::MarinerGlobals_GetActiveSettingsGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetCameraGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCameraGlobals*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCameraGlobals* UMarinerGlobals::GetCameraGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetCameraGlobals");

	Params::MarinerGlobals_GetCameraGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetCharacterLiteGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterLiteGlobals*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterLiteGlobals* UMarinerGlobals::GetCharacterLiteGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetCharacterLiteGlobals");

	Params::MarinerGlobals_GetCharacterLiteGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetChatGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerChatGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerChatGlobals* UMarinerGlobals::GetChatGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetChatGlobals");

	Params::MarinerGlobals_GetChatGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetDemoGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDemoGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDemoGlobals* UMarinerGlobals::GetDemoGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetDemoGlobals");

	Params::MarinerGlobals_GetDemoGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetFrontEndGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFrontEndGlobals*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerFrontEndGlobals* UMarinerGlobals::GetFrontEndGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetFrontEndGlobals");

	Params::MarinerGlobals_GetFrontEndGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetGameGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerGameGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGameGlobals* UMarinerGlobals::GetGameGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetGameGlobals");

	Params::MarinerGlobals_GetGameGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetInputGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerInputGlobals*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerInputGlobals* UMarinerGlobals::GetInputGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetInputGlobals");

	Params::MarinerGlobals_GetInputGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetMapGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMapGlobals*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMapGlobals* UMarinerGlobals::GetMapGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetMapGlobals");

	Params::MarinerGlobals_GetMapGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetMenuGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMenuGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuGlobals* UMarinerGlobals::GetMenuGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetMenuGlobals");

	Params::MarinerGlobals_GetMenuGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetModeGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerModeGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerModeGlobals* UMarinerGlobals::GetModeGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetModeGlobals");

	Params::MarinerGlobals_GetModeGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetTotemGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerTotemGlobals*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTotemGlobals* UMarinerGlobals::GetTotemGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetTotemGlobals");

	Params::MarinerGlobals_GetTotemGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobals.GetUIGlobals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerUIGlobals*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerUIGlobals* UMarinerGlobals::GetUIGlobals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGlobals", "GetUIGlobals");

	Params::MarinerGlobals_GetUIGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCircleProgress.SetInnerRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCircleProgress::SetInnerRadius(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCircleProgress", "SetInnerRadius");

	Params::MarinerCircleProgress_SetInnerRadius Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCircleProgress.SetProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPercent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCircleProgress::SetProgress(float InPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCircleProgress", "SetProgress");

	Params::MarinerCircleProgress_SetProgress Parms{};

	Parms.InPercent = InPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRichTextBlock.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Param_Text                                             (Parm, NativeAccessSpecifierPublic)

void UMarinerRichTextBlock::SetText(const class FText& Param_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRichTextBlock", "SetText");

	Params::MarinerRichTextBlock_SetText Parms{};

	Parms.Param_Text = std::move(Param_Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectableObject.BP_OnClientBeginPlayOverlappingLocalPlayer
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            LocalPlayerPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectableObject::BP_OnClientBeginPlayOverlappingLocalPlayer(class APawn* LocalPlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "BP_OnClientBeginPlayOverlappingLocalPlayer");

	Params::MarinerCollectableObject_BP_OnClientBeginPlayOverlappingLocalPlayer Parms{};

	Parms.LocalPlayerPawn = LocalPlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCollectableObject.OnLifeTimeExpired
// (Final, Native, Private)

void AMarinerCollectableObject::OnLifeTimeExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "OnLifeTimeExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectableObject.OnNoPickupTimeout
// (Final, Native, Private)

void AMarinerCollectableObject::OnNoPickupTimeout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "OnNoPickupTimeout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectableObject.OnPickedUpEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                InPickedUpBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectableObject::OnPickedUpEvent(class AMarinerCharacter* InPickedUpBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "OnPickedUpEvent");

	Params::MarinerCollectableObject_OnPickedUpEvent Parms{};

	Parms.InPickedUpBy = InPickedUpBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCollectableObject.OnRep_IsActive
// (Final, Native, Protected)

void AMarinerCollectableObject::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectableObject.TryToPickup
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCollectableObject::TryToPickup(class AMarinerCharacter* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "TryToPickup");

	Params::MarinerCollectableObject_TryToPickup Parms{};

	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectableObject.BP_CanBePickedUp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                TestPawn                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCollectableObject::BP_CanBePickedUp(const class AMarinerCharacter* TestPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "BP_CanBePickedUp");

	Params::MarinerCollectableObject_BP_CanBePickedUp Parms{};

	Parms.TestPawn = TestPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectableObject.GetDroppedBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerCollectableObject::GetDroppedBy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "GetDroppedBy");

	Params::MarinerCollectableObject_GetDroppedBy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectableObject.GetPickedUpBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerCollectableObject::GetPickedUpBy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectableObject", "GetPickedUpBy");

	Params::MarinerCollectableObject_GetPickedUpBy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionDataAsset.BeginCollectionPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowPreviewMessageBox                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCollectionDataAsset::BeginCollectionPurchase(const class UObject* WorldContextObject, bool bAllowPreviewMessageBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "BeginCollectionPurchase");

	Params::MarinerCollectionDataAsset_BeginCollectionPurchase Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bAllowPreviewMessageBox = bAllowPreviewMessageBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionDataAsset.OnPreviewMessageBoxConfirmed
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCollectionDataAsset::OnPreviewMessageBoxConfirmed(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "OnPreviewMessageBoxConfirmed");

	Params::MarinerCollectionDataAsset_OnPreviewMessageBoxConfirmed Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionDataAsset.CanPurchase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCollectionDataAsset::CanPurchase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "CanPurchase");

	Params::MarinerCollectionDataAsset_CanPurchase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionDataAsset.ContainsItem
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerCollectionDataAsset::ContainsItem(const struct FMangoItem& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "ContainsItem");

	Params::MarinerCollectionDataAsset_ContainsItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionDataAsset.GetCollectionIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerCollectionDataAsset::GetCollectionIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "GetCollectionIcon");

	Params::MarinerCollectionDataAsset_GetCollectionIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionDataAsset.GetLockIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerCollectionDataAsset::GetLockIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "GetLockIcon");

	Params::MarinerCollectionDataAsset_GetLockIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionDataAsset.GetOfferButtonText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UMarinerCollectionDataAsset::GetOfferButtonText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionDataAsset", "GetOfferButtonText");

	Params::MarinerCollectionDataAsset_GetOfferButtonText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRoundResetInterface.OnRoundReset
// (Native, Event, Public, BlueprintEvent)

void IMarinerRoundResetInterface::OnRoundReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRoundResetInterface", "OnRoundReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.AddToRedundantElapsedTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   SecondsToAdd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerGameMode::AddToRedundantElapsedTime(int32 SecondsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "AddToRedundantElapsedTime");

	Params::MarinerGameMode_AddToRedundantElapsedTime Parms{};

	Parms.SecondsToAdd = SecondsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.BP_OnPlayerRejoined
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              RejoinedPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::BP_OnPlayerRejoined(class AMarinerPlayerState* RejoinedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "BP_OnPlayerRejoined");

	Params::MarinerGameMode_BP_OnPlayerRejoined Parms{};

	Parms.RejoinedPlayer = RejoinedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.BroadcastMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ULocalMessage>        Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::BroadcastMessage(TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "BroadcastMessage");

	Params::MarinerGameMode_BroadcastMessage Parms{};

	Parms.Message = Message;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.BroadcastMessageToAll
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class ULocalMessage>        Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::BroadcastMessageToAll(TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "BroadcastMessageToAll");

	Params::MarinerGameMode_BroadcastMessageToAll Parms{};

	Parms.Message = Message;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.BroadcastMessageToPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class APlayerState*>             ToPlayers                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class ULocalMessage>        Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::BroadcastMessageToPlayers(const TArray<class APlayerState*>& ToPlayers, TSubclassOf<class ULocalMessage> Message, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "BroadcastMessageToPlayers");

	Params::MarinerGameMode_BroadcastMessageToPlayers Parms{};

	Parms.ToPlayers = std::move(ToPlayers);
	Parms.Message = Message;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.CanBotHaveUniqueName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              BotPlayerState                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::CanBotHaveUniqueName(const class AMarinerPlayerState* BotPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "CanBotHaveUniqueName");

	Params::MarinerGameMode_CanBotHaveUniqueName Parms{};

	Parms.BotPlayerState = BotPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.ChooseTeam
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              InPlayerState                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APlayerState*>             Players                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerGameMode::ChooseTeam(const class AMarinerPlayerState* InPlayerState, const TArray<class APlayerState*>& Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ChooseTeam");

	Params::MarinerGameMode_ChooseTeam Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.Players = std::move(Players);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.CreateBot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    OverridePawnClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBotDifficultyLevel                     Difficulty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerAIController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerAIController* AMarinerGameMode::CreateBot(TSubclassOf<class AMarinerCharacter> OverridePawnClass, EBotDifficultyLevel Difficulty, int32 TeamNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "CreateBot");

	Params::MarinerGameMode_CreateBot Parms{};

	Parms.OverridePawnClass = OverridePawnClass;
	Parms.Difficulty = Difficulty;
	Parms.TeamNum = TeamNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.EndGameTimerExtension
// (Final, Native, Protected, BlueprintCallable)

void AMarinerGameMode::EndGameTimerExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "EndGameTimerExtension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.FinishMatch
// (Final, Exec, Native, Public, BlueprintCallable)

void AMarinerGameMode::FinishMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "FinishMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.FinishMatchWithWinningTeam
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WinningTeam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::FinishMatchWithWinningTeam(int32 WinningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "FinishMatchWithWinningTeam");

	Params::MarinerGameMode_FinishMatchWithWinningTeam Parms{};

	Parms.WinningTeam = WinningTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.GetBotInitialPawnClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerGameState*                MarinerGameState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BotTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerCharacter>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AMarinerCharacter> AMarinerGameMode::GetBotInitialPawnClass(const class AMarinerGameState* MarinerGameState, int32 BotTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "GetBotInitialPawnClass");

	Params::MarinerGameMode_GetBotInitialPawnClass Parms{};

	Parms.MarinerGameState = MarinerGameState;
	Parms.BotTeam = BotTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.HandleStartingNewController
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::HandleStartingNewController(class AController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "HandleStartingNewController");

	Params::MarinerGameMode_HandleStartingNewController Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.InitiateRoundReset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRespawnPlayers                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClearProjectiles                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::InitiateRoundReset(bool bRespawnPlayers, bool bClearProjectiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "InitiateRoundReset");

	Params::MarinerGameMode_InitiateRoundReset Parms{};

	Parms.bRespawnPlayers = bRespawnPlayers;
	Parms.bClearProjectiles = bClearProjectiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.InitiateTimerToRoundReset
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRespawnPlayers                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClearProjectiles                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::InitiateTimerToRoundReset(bool bRespawnPlayers, bool bClearProjectiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "InitiateTimerToRoundReset");

	Params::MarinerGameMode_InitiateTimerToRoundReset Parms{};

	Parms.bRespawnPlayers = bRespawnPlayers;
	Parms.bClearProjectiles = bClearProjectiles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.IsDeveloperCheatingAllowed
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::IsDeveloperCheatingAllowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "IsDeveloperCheatingAllowed");

	Params::MarinerGameMode_IsDeveloperCheatingAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.ModifySuppressionTagLayersForAllPlayers
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bAdd                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::ModifySuppressionTagLayersForAllPlayers(bool bAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ModifySuppressionTagLayersForAllPlayers");

	Params::MarinerGameMode_ModifySuppressionTagLayersForAllPlayers Parms{};

	Parms.bAdd = bAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.NotifyPlayersOfArtifactEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EArtifactEventTypes                     ArtifactEventType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::NotifyPlayersOfArtifactEvent(EArtifactEventTypes ArtifactEventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "NotifyPlayersOfArtifactEvent");

	Params::MarinerGameMode_NotifyPlayersOfArtifactEvent Parms{};

	Parms.ArtifactEventType = ArtifactEventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnCharacterSelectRemainingTimeChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnCharacterSelectRemainingTimeChanged(int32 RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnCharacterSelectRemainingTimeChanged");

	Params::MarinerGameMode_OnCharacterSelectRemainingTimeChanged Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnDamageCaused
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAOEDamage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMegablastDamage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageApplied                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageBlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            InstigatorPawn                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnDamageCaused(const class AActor* DamagedActor, bool bIsAOEDamage, bool bIsMegablastDamage, TSubclassOf<class UDamageType> DamageType, float DamageApplied, float DamageBlocked, const class APawn* InstigatorPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnDamageCaused");

	Params::MarinerGameMode_OnDamageCaused Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.bIsAOEDamage = bIsAOEDamage;
	Parms.bIsMegablastDamage = bIsMegablastDamage;
	Parms.DamageType = DamageType;
	Parms.DamageApplied = DamageApplied;
	Parms.DamageBlocked = DamageBlocked;
	Parms.InstigatorPawn = InstigatorPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnEnterOvertime
// (Event, Protected, BlueprintEvent)

void AMarinerGameMode::OnEnterOvertime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnEnterOvertime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerGameMode.OnGameModeObjectOutOfBounds
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           GameModeObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::OnGameModeObjectOutOfBounds(class AActor* GameModeObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnGameModeObjectOutOfBounds");

	Params::MarinerGameMode_OnGameModeObjectOutOfBounds Parms{};

	Parms.GameModeObject = GameModeObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.OnItemDropped
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     DroppedBall                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnItemDropped(class APlayerState* Player, class AMarinerItem* DroppedBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnItemDropped");

	Params::MarinerGameMode_OnItemDropped Parms{};

	Parms.Player = Player;
	Parms.DroppedBall = DroppedBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.OnItemPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     Ball                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnItemPickedUp(class APlayerState* Player, class AMarinerItem* Ball)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnItemPickedUp");

	Params::MarinerGameMode_OnItemPickedUp Parms{};

	Parms.Player = Player;
	Parms.Ball = Ball;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.OnItemStolen
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     StealingPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     StolenFromPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnItemStolen(class APlayerState* StealingPlayer, class APlayerState* StolenFromPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnItemStolen");

	Params::MarinerGameMode_OnItemStolen Parms{};

	Parms.StealingPlayer = StealingPlayer;
	Parms.StolenFromPlayer = StolenFromPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.OnKnockout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KilledPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            KilledPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnKnockout(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnKnockout");

	Params::MarinerGameMode_OnKnockout Parms{};

	Parms.Killer = Killer;
	Parms.KilledPlayer = KilledPlayer;
	Parms.KilledPawn = KilledPawn;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.OnOverrideCharacterLoadTimer
// (Final, Native, Private)

void AMarinerGameMode::OnOverrideCharacterLoadTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnOverrideCharacterLoadTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnOvertimeTimedOut
// (Event, Protected, BlueprintEvent)

void AMarinerGameMode::OnOvertimeTimedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnOvertimeTimedOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerGameMode.OnPossessPawn
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerPlayerController*         PossessingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            PossessedPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnPossessPawn(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnPossessPawn");

	Params::MarinerGameMode_OnPossessPawn Parms{};

	Parms.PossessingController = PossessingController;
	Parms.PossessedPawn = PossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnPregameStateBegin
// (Final, Native, Private)
// Parameters:
// class FName                             NewPregameState                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnPregameStateBegin(const class FName NewPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnPregameStateBegin");

	Params::MarinerGameMode_OnPregameStateBegin Parms{};

	Parms.NewPregameState = NewPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnPregameStateEnded
// (Final, Native, Private)
// Parameters:
// class FName                             OldPregameState                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnPregameStateEnded(const class FName OldPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnPregameStateEnded");

	Params::MarinerGameMode_OnPregameStateEnded Parms{};

	Parms.OldPregameState = OldPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnRoundBegin
// (Native, Event, Protected, BlueprintEvent)

void AMarinerGameMode::OnRoundBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnRoundBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnRoundReset
// (Native, Event, Protected, BlueprintEvent)

void AMarinerGameMode::OnRoundReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnRoundReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.OnTimerUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   TimeRemaining                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::OnTimerUpdated(int32 TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "OnTimerUpdated");

	Params::MarinerGameMode_OnTimerUpdated Parms{};

	Parms.TimeRemaining = TimeRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerGameMode.PauseTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::PauseTimer(bool bIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "PauseTimer");

	Params::MarinerGameMode_PauseTimer Parms{};

	Parms.bIsPaused = bIsPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.ReactToPreRoundCountdownStarted
// (Final, Native, Protected)
// Parameters:
// float                                   PreRoundCountdownEndTimeStamp                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::ReactToPreRoundCountdownStarted(float PreRoundCountdownEndTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ReactToPreRoundCountdownStarted");

	Params::MarinerGameMode_ReactToPreRoundCountdownStarted Parms{};

	Parms.PreRoundCountdownEndTimeStamp = PreRoundCountdownEndTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.SetAllowBots
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxBots                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBotDifficultyLevel                     InBotDifficulty                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerGameMode::SetAllowBots(bool bInAllowBots, int32 InMaxBots, EBotDifficultyLevel InBotDifficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "SetAllowBots");

	Params::MarinerGameMode_SetAllowBots Parms{};

	Parms.bInAllowBots = bInAllowBots;
	Parms.InMaxBots = InMaxBots;
	Parms.InBotDifficulty = InBotDifficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.ShouldDelayPawnSelectionUntilCharacterSelect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerGameState*                MarinerGameState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              BotPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::ShouldDelayPawnSelectionUntilCharacterSelect(const class AMarinerGameState* MarinerGameState, class AMarinerPlayerState* BotPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ShouldDelayPawnSelectionUntilCharacterSelect");

	Params::MarinerGameMode_ShouldDelayPawnSelectionUntilCharacterSelect Parms{};

	Parms.MarinerGameState = MarinerGameState;
	Parms.BotPlayerState = BotPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.ChooseBestReturnRocketLaunchpad
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class AMarinerCharacter*                Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharacterTeamIndex                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AMarinerReturnRocketLaunchpad*>EligibleLaunchpads                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AMarinerReturnRocketLaunchpad*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerReturnRocketLaunchpad* AMarinerGameMode::ChooseBestReturnRocketLaunchpad(const class AMarinerCharacter* Character, const int32 CharacterTeamIndex, const TArray<class AMarinerReturnRocketLaunchpad*>& EligibleLaunchpads) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ChooseBestReturnRocketLaunchpad");

	Params::MarinerGameMode_ChooseBestReturnRocketLaunchpad Parms{};

	Parms.Character = Character;
	Parms.CharacterTeamIndex = CharacterTeamIndex;
	Parms.EligibleLaunchpads = std::move(EligibleLaunchpads);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.GetBotControllerClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class AMarinerAIController>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class AMarinerAIController> AMarinerGameMode::GetBotControllerClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "GetBotControllerClass");

	Params::MarinerGameMode_GetBotControllerClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.GetBotManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerBotManager*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerBotManager* AMarinerGameMode::GetBotManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "GetBotManager");

	Params::MarinerGameMode_GetBotManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.GetRedundantElapsedTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerGameMode::GetRedundantElapsedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "GetRedundantElapsedTime");

	Params::MarinerGameMode_GetRedundantElapsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.IsMatchTied
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::IsMatchTied() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "IsMatchTied");

	Params::MarinerGameMode_IsMatchTied Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameMode.ResetAllItemSpawners
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, Const)

void AMarinerGameMode::ResetAllItemSpawners() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ResetAllItemSpawners");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameMode.ShouldExtendGameTimer
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerGameMode::ShouldExtendGameTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameMode", "ShouldExtendGameTimer");

	Params::MarinerGameMode_ShouldExtendGameTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.AccelerateExistingRocketTrophySpawn
// (Final, Native, Public, BlueprintCallable)

void AMarinerCollectionGameMode::AccelerateExistingRocketTrophySpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "AccelerateExistingRocketTrophySpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.GetTrophyType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AMarinerCollectableObject*        CollectableObject                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerTrophyType                      OutTrophyType                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::GetTrophyType(const class AMarinerCollectableObject* CollectableObject, EMarinerTrophyType* OutTrophyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetTrophyType");

	Params::MarinerCollectionGameMode_GetTrophyType Parms{};

	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrophyType != nullptr)
		*OutTrophyType = Parms.OutTrophyType;
}


// Function Mariner.MarinerCollectionGameMode.IncrementsCharacterTrophyPointsAndCount
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToAward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::IncrementsCharacterTrophyPointsAndCount(const class AMarinerCharacter* PickedUpBy, int32 PointsToAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "IncrementsCharacterTrophyPointsAndCount");

	Params::MarinerCollectionGameMode_IncrementsCharacterTrophyPointsAndCount Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.PointsToAward = PointsToAward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.IncrementsTeamTrophyPoints
// (Final, Native, Protected)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointsToAward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::IncrementsTeamTrophyPoints(int32 TeamIndex, int32 PointsToAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "IncrementsTeamTrophyPoints");

	Params::MarinerCollectionGameMode_IncrementsTeamTrophyPoints Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.PointsToAward = PointsToAward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.MoveTrophyToOriginalSpawnLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerCollectableObject*        TrophyToTeleport                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCollectionGameMode::MoveTrophyToOriginalSpawnLocation(class AMarinerCollectableObject* TrophyToTeleport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "MoveTrophyToOriginalSpawnLocation");

	Params::MarinerCollectionGameMode_MoveTrophyToOriginalSpawnLocation Parms{};

	Parms.TrophyToTeleport = TrophyToTeleport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.OnAccumulatedDamageChange
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      DamageableComponent                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::OnAccumulatedDamageChange(const class UMarinerDamageableComponent* DamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "OnAccumulatedDamageChange");

	Params::MarinerCollectionGameMode_OnAccumulatedDamageChange Parms{};

	Parms.DamageableComponent = DamageableComponent;
	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.OnCharacterBeginDropPlayerTrophy
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerDamageableComponent*      DroppedByDamageComponent                               (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::OnCharacterBeginDropPlayerTrophy(const class UMarinerDamageableComponent* DroppedByDamageComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "OnCharacterBeginDropPlayerTrophy");

	Params::MarinerCollectionGameMode_OnCharacterBeginDropPlayerTrophy Parms{};

	Parms.DroppedByDamageComponent = DroppedByDamageComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCollectionGameMode.OnCollectableObjectOutOfBounds
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCollectableObject*        CollectableObject                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldDestroy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::OnCollectableObjectOutOfBounds(const class AMarinerCollectableObject* CollectableObject, bool bShouldDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "OnCollectableObjectOutOfBounds");

	Params::MarinerCollectionGameMode_OnCollectableObjectOutOfBounds Parms{};

	Parms.CollectableObject = CollectableObject;
	Parms.bShouldDestroy = bShouldDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.OnCollectablePickedUp
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        CollectableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::OnCollectablePickedUp(class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "OnCollectablePickedUp");

	Params::MarinerCollectionGameMode_OnCollectablePickedUp Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.RespawnRocketTrophyFromOriginalSpawner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeToSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        TrophyToRespawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerRocketTrophySpawner*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerRocketTrophySpawner* AMarinerCollectionGameMode::RespawnRocketTrophyFromOriginalSpawner(float TimeToSpawn, class AMarinerCollectableObject* TrophyToRespawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "RespawnRocketTrophyFromOriginalSpawner");

	Params::MarinerCollectionGameMode_RespawnRocketTrophyFromOriginalSpawner Parms{};

	Parms.TimeToSpawn = TimeToSpawn;
	Parms.TrophyToRespawn = TrophyToRespawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBlastability
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlayerTrophyBlastability                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetPlayerTrophyBlastability(float InPlayerTrophyBlastability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetPlayerTrophyBlastability");

	Params::MarinerCollectionGameMode_SetPlayerTrophyBlastability Parms{};

	Parms.InPlayerTrophyBlastability = InPlayerTrophyBlastability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceDirectionMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EPlayerTrophyBounceDirectionMode        InPlayerTrophyBounceDirectionMode                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetPlayerTrophyBounceDirectionMode(const EPlayerTrophyBounceDirectionMode& InPlayerTrophyBounceDirectionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetPlayerTrophyBounceDirectionMode");

	Params::MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionMode Parms{};

	Parms.InPlayerTrophyBounceDirectionMode = InPlayerTrophyBounceDirectionMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceDirectionOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPlayerTrophyBounceDirectionOverride                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetPlayerTrophyBounceDirectionOverride(const struct FVector& InPlayerTrophyBounceDirectionOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetPlayerTrophyBounceDirectionOverride");

	Params::MarinerCollectionGameMode_SetPlayerTrophyBounceDirectionOverride Parms{};

	Parms.InPlayerTrophyBounceDirectionOverride = std::move(InPlayerTrophyBounceDirectionOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBounceOrigin
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InPlayerTrophyBounceOrigin                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetPlayerTrophyBounceOrigin(const struct FVector& InPlayerTrophyBounceOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetPlayerTrophyBounceOrigin");

	Params::MarinerCollectionGameMode_SetPlayerTrophyBounceOrigin Parms{};

	Parms.InPlayerTrophyBounceOrigin = std::move(InPlayerTrophyBounceOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SetPlayerTrophyBouncePitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPitch                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetPlayerTrophyBouncePitch(float InPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetPlayerTrophyBouncePitch");

	Params::MarinerCollectionGameMode_SetPlayerTrophyBouncePitch Parms{};

	Parms.InPitch = InPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SetTrophyHuntMaxScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTrophyHuntMaxScore                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SetTrophyHuntMaxScore(int32 InTrophyHuntMaxScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SetTrophyHuntMaxScore");

	Params::MarinerCollectionGameMode_SetTrophyHuntMaxScore Parms{};

	Parms.InTrophyHuntMaxScore = InTrophyHuntMaxScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SpawnPlayerTrophy
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                DamagedCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DropDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCollectionGameMode::SpawnPlayerTrophy(class AMarinerCharacter* DamagedCharacter, const struct FVector& DropDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SpawnPlayerTrophy");

	Params::MarinerCollectionGameMode_SpawnPlayerTrophy Parms{};

	Parms.DamagedCharacter = DamagedCharacter;
	Parms.DropDirection = std::move(DropDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeToSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerRocketTrophySpawner*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerRocketTrophySpawner* AMarinerCollectionGameMode::SpawnRocketTrophy(float TimeToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SpawnRocketTrophy");

	Params::MarinerCollectionGameMode_SpawnRocketTrophy Parms{};

	Parms.TimeToSpawn = TimeToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophyUsingSpawnerID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeToSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpawnerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerRocketTrophySpawner*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerRocketTrophySpawner* AMarinerCollectionGameMode::SpawnRocketTrophyUsingSpawnerID(float TimeToSpawn, int32 SpawnerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SpawnRocketTrophyUsingSpawnerID");

	Params::MarinerCollectionGameMode_SpawnRocketTrophyUsingSpawnerID Parms{};

	Parms.TimeToSpawn = TimeToSpawn;
	Parms.SpawnerID = SpawnerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.SpawnRocketTrophyUsingSpecificSpawner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeToSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerRocketTrophySpawner*      SpecificSpawner                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerRocketTrophySpawner*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerRocketTrophySpawner* AMarinerCollectionGameMode::SpawnRocketTrophyUsingSpecificSpawner(float TimeToSpawn, class AMarinerRocketTrophySpawner* SpecificSpawner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "SpawnRocketTrophyUsingSpecificSpawner");

	Params::MarinerCollectionGameMode_SpawnRocketTrophyUsingSpecificSpawner Parms{};

	Parms.TimeToSpawn = TimeToSpawn;
	Parms.SpecificSpawner = SpecificSpawner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.AreAvailableSpawners
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCollectionGameMode::AreAvailableSpawners() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "AreAvailableSpawners");

	Params::MarinerCollectionGameMode_AreAvailableSpawners Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetActiveRocketTrophySpawnerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetActiveRocketTrophySpawnerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetActiveRocketTrophySpawnerCount");

	Params::MarinerCollectionGameMode_GetActiveRocketTrophySpawnerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetEnemyPlayerTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetEnemyPlayerTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetEnemyPlayerTrophyValue");

	Params::MarinerCollectionGameMode_GetEnemyPlayerTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetFriendPlayerTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetFriendPlayerTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetFriendPlayerTrophyValue");

	Params::MarinerCollectionGameMode_GetFriendPlayerTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetQueuedRocketTrophySpawnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetQueuedRocketTrophySpawnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetQueuedRocketTrophySpawnCount");

	Params::MarinerCollectionGameMode_GetQueuedRocketTrophySpawnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetRocketTrophiesInCirculation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetRocketTrophiesInCirculation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetRocketTrophiesInCirculation");

	Params::MarinerCollectionGameMode_GetRocketTrophiesInCirculation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetRocketTrophyValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetRocketTrophyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetRocketTrophyValue");

	Params::MarinerCollectionGameMode_GetRocketTrophyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetTrophyRewardPoints
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                PickedUpBy                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCollectableObject*        CollectableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetTrophyRewardPoints(const class AMarinerCharacter* PickedUpBy, class AMarinerCollectableObject* CollectableObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetTrophyRewardPoints");

	Params::MarinerCollectionGameMode_GetTrophyRewardPoints Parms{};

	Parms.PickedUpBy = PickedUpBy;
	Parms.CollectableObject = CollectableObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.GetTrophySpawnersCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCollectionGameMode::GetTrophySpawnersCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "GetTrophySpawnersCount");

	Params::MarinerCollectionGameMode_GetTrophySpawnersCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCollectionGameMode.UnblockAllRocketTrophySpawners
// (Final, Native, Public, BlueprintCallable, Const)

void AMarinerCollectionGameMode::UnblockAllRocketTrophySpawners() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCollectionGameMode", "UnblockAllRocketTrophySpawners");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerComboBoxString.SelectionChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedItem                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESelectInfo                             SelectionType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerComboBoxString::SelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerComboBoxString", "SelectionChanged");

	Params::MarinerComboBoxString_SelectionChanged Parms{};

	Parms.SelectedItem = std::move(SelectedItem);
	Parms.SelectionType = SelectionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerComboBoxString.SetHeaderHighlightState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHighlighted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerComboBoxString::SetHeaderHighlightState(bool bHighlighted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerComboBoxString", "SetHeaderHighlightState");

	Params::MarinerComboBoxString_SetHeaderHighlightState Parms{};

	Parms.bHighlighted = bHighlighted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerComboBoxString.SetHightlightedOptionViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerComboBoxString::SetHightlightedOptionViaIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerComboBoxString", "SetHightlightedOptionViaIndex");

	Params::MarinerComboBoxString_SetHightlightedOptionViaIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerComboBoxString.SetIsOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerComboBoxString::SetIsOpen(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerComboBoxString", "SetIsOpen");

	Params::MarinerComboBoxString_SetIsOpen Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerComboBoxString.SetSelectedOptionViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerComboBoxString::SetSelectedOptionViaIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerComboBoxString", "SetSelectedOptionViaIndex");

	Params::MarinerComboBoxString_SetSelectedOptionViaIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerContentGrid.GetHighlightedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerLayeredButton*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLayeredButton* UMarinerContentGrid::GetHighlightedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerContentGrid", "GetHighlightedItem");

	Params::MarinerContentGrid_GetHighlightedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerContentGrid.HighlightItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLayeredButton*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLayeredButton* UMarinerContentGrid::HighlightItem(const class FString& LookupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerContentGrid", "HighlightItem");

	Params::MarinerContentGrid_HighlightItem Parms{};

	Parms.LookupId = std::move(LookupId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerContentGrid.InitCharacterContentGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UMarinerPlayableCharacter*>LoadedItems                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerLayeredButton>LayeredButtonSubclass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)>OnCharacterAddedToGrid                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             Header                                                 (Parm, NativeAccessSpecifierPublic)
// int32                                   InNumColumns                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFillEmpty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerContentGridType                 InContentType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerContentGrid::InitCharacterContentGrid(const TArray<class UMarinerPlayableCharacter*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UMarinerPlayableCharacter* Character)> OnCharacterAddedToGrid, const class FText& Header, int32 InNumColumns, bool bFillEmpty, EMarinerContentGridType InContentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerContentGrid", "InitCharacterContentGrid");

	Params::MarinerContentGrid_InitCharacterContentGrid Parms{};

	Parms.LoadedItems = std::move(LoadedItems);
	Parms.LayeredButtonSubclass = LayeredButtonSubclass;
	Parms.OnCharacterAddedToGrid = OnCharacterAddedToGrid;
	Parms.Header = std::move(Header);
	Parms.InNumColumns = InNumColumns;
	Parms.bFillEmpty = bFillEmpty;
	Parms.InContentType = InContentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerContentGrid.InitEmptyContentGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumColumns                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNumRow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEmptyItemWidth                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InEmptyItemHeight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerContentGrid::InitEmptyContentGrid(int32 InNumColumns, int32 InNumRow, float InEmptyItemWidth, float InEmptyItemHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerContentGrid", "InitEmptyContentGrid");

	Params::MarinerContentGrid_InitEmptyContentGrid Parms{};

	Parms.InNumColumns = InNumColumns;
	Parms.InNumRow = InNumRow;
	Parms.InEmptyItemWidth = InEmptyItemWidth;
	Parms.InEmptyItemHeight = InEmptyItemHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerContentGrid.InitItemsContentGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedItems                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerLayeredButton>LayeredButtonSubclass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)>OnItemAddedToGrid                                      (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             Header                                                 (Parm, NativeAccessSpecifierPublic)
// int32                                   InNumColumns                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFillEmpty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerContentGrid::InitItemsContentGrid(const TArray<class UItemLoadResponse*>& LoadedItems, TSubclassOf<class UMarinerLayeredButton> LayeredButtonSubclass, TDelegate<void(class UMarinerLayeredButton* LayeredButtonTemplate, class UItemLoadResponse* Item, bool bRanked)> OnItemAddedToGrid, const class FText& Header, int32 InNumColumns, bool bFillEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerContentGrid", "InitItemsContentGrid");

	Params::MarinerContentGrid_InitItemsContentGrid Parms{};

	Parms.LoadedItems = std::move(LoadedItems);
	Parms.LayeredButtonSubclass = LayeredButtonSubclass;
	Parms.OnItemAddedToGrid = OnItemAddedToGrid;
	Parms.Header = std::move(Header);
	Parms.InNumColumns = InNumColumns;
	Parms.bFillEmpty = bFillEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCosmeticReactiveProp.ReactToDamage
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCosmeticReactiveProp::ReactToDamage(const struct FVector& DamageOrigin, const struct FVector& DamageDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCosmeticReactiveProp", "ReactToDamage");

	Params::MarinerCosmeticReactiveProp_ReactToDamage Parms{};

	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDirection = std::move(DamageDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerCosmeticReactiveProp.ReplicateDamageReaction
// (Net, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        DamageDirection                                        (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCosmeticReactiveProp::ReplicateDamageReaction(const struct FVector& DamageOrigin, const struct FVector_NetQuantizeNormal& DamageDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCosmeticReactiveProp", "ReplicateDamageReaction");

	Params::MarinerCosmeticReactiveProp_ReplicateDamageReaction Parms{};

	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.DamageDirection = std::move(DamageDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.EndMatchConfirm
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGamePauseMenu::EndMatchConfirm(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "EndMatchConfirm");

	Params::MarinerInGamePauseMenu_EndMatchConfirm Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.HandleQuitMatchButton
// (Final, Native, Private)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGamePauseMenu::HandleQuitMatchButton(int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "HandleQuitMatchButton");

	Params::MarinerInGamePauseMenu_HandleQuitMatchButton Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.OnEndMatch
// (Final, Native, Private)

void UMarinerInGamePauseMenu::OnEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "OnEndMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.OnResume
// (Final, Native, Private)

void UMarinerInGamePauseMenu::OnResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "OnResume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.OnRetry
// (Final, Native, Private)

void UMarinerInGamePauseMenu::OnRetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "OnRetry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGamePauseMenu.ToggleMutePlayersMenu
// (Final, Native, Public)

void UMarinerInGamePauseMenu::ToggleMutePlayersMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGamePauseMenu", "ToggleMutePlayersMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.GetSpawnedCameraEffect
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class AEmitterCameraLensEffectBase*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AEmitterCameraLensEffectBase* AMarinerCueNotify_ManagedCharacterEffectBase::GetSpawnedCameraEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectBase", "GetSpawnedCameraEffect");

	Params::MarinerCueNotify_ManagedCharacterEffectBase_GetSpawnedCameraEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.GetTargetCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerCueNotify_ManagedCharacterEffectBase::GetTargetCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectBase", "GetTargetCharacter");

	Params::MarinerCueNotify_ManagedCharacterEffectBase_GetTargetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.PostAkEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    AudioEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerCueNotify_ManagedCharacterEffectBase::PostAkEvent(class UAkAudioEvent* AudioEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectBase", "PostAkEvent");

	Params::MarinerCueNotify_ManagedCharacterEffectBase_PostAkEvent Parms{};

	Parms.AudioEvent = AudioEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.HasTargetCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCueNotify_ManagedCharacterEffectBase::HasTargetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectBase", "HasTargetCharacter");

	Params::MarinerCueNotify_ManagedCharacterEffectBase_HasTargetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectBase.IsFirstPerson
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerCueNotify_ManagedCharacterEffectBase::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectBase", "IsFirstPerson");

	Params::MarinerCueNotify_ManagedCharacterEffectBase_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputOverlay.OnAnalogNavigation
// (Final, Native, Public)
// Parameters:
// EMarinerInputActions                    InAction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRepeat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputOverlay::OnAnalogNavigation(EMarinerInputActions InAction, bool bIsRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputOverlay", "OnAnalogNavigation");

	Params::MarinerInputOverlay_OnAnalogNavigation Parms{};

	Parms.InAction = InAction;
	Parms.bIsRepeat = bIsRepeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputOverlay.GetActiveInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerInputType UMarinerInputOverlay::GetActiveInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputOverlay", "GetActiveInputType");

	Params::MarinerInputOverlay_GetActiveInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputOverlay.GetLastActiveGamepadType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerInputType UMarinerInputOverlay::GetLastActiveGamepadType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputOverlay", "GetLastActiveGamepadType");

	Params::MarinerInputOverlay_GetLastActiveGamepadType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputOverlay.IsGamepadConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerInputOverlay::IsGamepadConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputOverlay", "IsGamepadConnected");

	Params::MarinerInputOverlay_IsGamepadConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectSequence.OnParticleInFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         FinishedComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCueNotify_ManagedCharacterEffectSequence::OnParticleInFinished(class UParticleSystemComponent* FinishedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectSequence", "OnParticleInFinished");

	Params::MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleInFinished Parms{};

	Parms.FinishedComponent = FinishedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCueNotify_ManagedCharacterEffectSequence.OnParticleOutFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         FinishedComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCueNotify_ManagedCharacterEffectSequence::OnParticleOutFinished(class UParticleSystemComponent* FinishedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedCharacterEffectSequence", "OnParticleOutFinished");

	Params::MarinerCueNotify_ManagedCharacterEffectSequence_OnParticleOutFinished Parms{};

	Parms.FinishedComponent = FinishedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCueNotify_ManagedEffectSequence.OnParticleInFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         FinishedComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCueNotify_ManagedEffectSequence::OnParticleInFinished(class UParticleSystemComponent* FinishedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedEffectSequence", "OnParticleInFinished");

	Params::MarinerCueNotify_ManagedEffectSequence_OnParticleInFinished Parms{};

	Parms.FinishedComponent = FinishedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCueNotify_ManagedEffectSequence.OnParticleOutFinished
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         FinishedComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerCueNotify_ManagedEffectSequence::OnParticleOutFinished(class UParticleSystemComponent* FinishedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCueNotify_ManagedEffectSequence", "OnParticleOutFinished");

	Params::MarinerCueNotify_ManagedEffectSequence_OnParticleOutFinished Parms{};

	Parms.FinishedComponent = FinishedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.AuthorityExpendItemUse
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerItem::AuthorityExpendItemUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "AuthorityExpendItemUse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.AuthorityOnItemDamaged
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::AuthorityOnItemDamaged(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "AuthorityOnItemDamaged");

	Params::MarinerItem_AuthorityOnItemDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.AuthorityOnItemHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerItem::AuthorityOnItemHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "AuthorityOnItemHit");

	Params::MarinerItem_AuthorityOnItemHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.AuthorityOnThrowResolutionDelayTimer
// (Final, Native, Protected)

void AMarinerItem::AuthorityOnThrowResolutionDelayTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "AuthorityOnThrowResolutionDelayTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.BP_DisabledToPool
// (Event, Protected, BlueprintEvent)

void AMarinerItem::BP_DisabledToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "BP_DisabledToPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerItem.BP_EnabledFromPool
// (Event, Protected, BlueprintEvent)

void AMarinerItem::BP_EnabledFromPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "BP_EnabledFromPool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerItem.BP_OnDropped
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                CharacterDroppingItem                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::BP_OnDropped(class AMarinerCharacter* CharacterDroppingItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "BP_OnDropped");

	Params::MarinerItem_BP_OnDropped Parms{};

	Parms.CharacterDroppingItem = CharacterDroppingItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItem.BP_OnPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                CharacterHoldingItem                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::BP_OnPickedUp(class AMarinerCharacter* CharacterHoldingItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "BP_OnPickedUp");

	Params::MarinerItem_BP_OnPickedUp Parms{};

	Parms.CharacterHoldingItem = CharacterHoldingItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerItem.DisableOrDestroy
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerItem::DisableOrDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "DisableOrDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.GetItemActivationUIPrefixText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AMarinerItem::GetItemActivationUIPrefixText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "GetItemActivationUIPrefixText");

	Params::MarinerItem_GetItemActivationUIPrefixText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.GetItemActivationUIText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AMarinerItem::GetItemActivationUIText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "GetItemActivationUIText");

	Params::MarinerItem_GetItemActivationUIText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.GetItemActivationUITexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AMarinerItem::GetItemActivationUITexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "GetItemActivationUITexture");

	Params::MarinerItem_GetItemActivationUITexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.MulticastCreateSpawnedBySpawnerEffects
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void AMarinerItem::MulticastCreateSpawnedBySpawnerEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "MulticastCreateSpawnedBySpawnerEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnHoldingCharacterMegablasted
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              MegablastInstigator                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnteredState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::OnHoldingCharacterMegablasted(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerPlayerState* MegablastInstigator, bool bEnteredState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnHoldingCharacterMegablasted");

	Params::MarinerItem_OnHoldingCharacterMegablasted Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.MegablastInstigator = MegablastInstigator;
	Parms.bEnteredState = bEnteredState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnItemAbilityEnded
// (Final, Native, Protected)
// Parameters:
// class UGameplayAbility*                 EndedAbility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::OnItemAbilityEnded(class UGameplayAbility* EndedAbility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnItemAbilityEnded");

	Params::MarinerItem_OnItemAbilityEnded Parms{};

	Parms.EndedAbility = EndedAbility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnPostReleaseCollisionTimerExpired
// (Final, Native, Public)

void AMarinerItem::OnPostReleaseCollisionTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnPostReleaseCollisionTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnRep_HasBeenActivated
// (Final, Native, Protected)

void AMarinerItem::OnRep_HasBeenActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnRep_HasBeenActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnRep_IsEnabledFromPool
// (Final, Native, Protected)

void AMarinerItem::OnRep_IsEnabledFromPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnRep_IsEnabledFromPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnTakeDamage
// (Final, Native, Public)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::OnTakeDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* DamageInstigator, class AActor* DamageSourceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnTakeDamage");

	Params::MarinerItem_OnTakeDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.OnWillPickUp
// (Event, Public, BlueprintEvent)

void AMarinerItem::OnWillPickUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "OnWillPickUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerItem.SetCanBePickedUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewCanBePickedUp                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::SetCanBePickedUp(bool bNewCanBePickedUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "SetCanBePickedUp");

	Params::MarinerItem_SetCanBePickedUp Parms{};

	Parms.bNewCanBePickedUp = bNewCanBePickedUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.SetPriorityPickupActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewPriorityPickupActor                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USphereComponent*                 OptionalSphereCollision                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerItem::SetPriorityPickupActor(class AActor* NewPriorityPickupActor, class USphereComponent* OptionalSphereCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "SetPriorityPickupActor");

	Params::MarinerItem_SetPriorityPickupActor Parms{};

	Parms.NewPriorityPickupActor = NewPriorityPickupActor;
	Parms.OptionalSphereCollision = OptionalSphereCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItem.GetItemAbilityInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbility*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbility* AMarinerItem::GetItemAbilityInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "GetItemAbilityInstance");

	Params::MarinerItem_GetItemAbilityInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.GetLastPlayerAffectingItemFromTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPlayerState* AMarinerItem::GetLastPlayerAffectingItemFromTeam(int32 InTeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "GetLastPlayerAffectingItemFromTeam");

	Params::MarinerItem_GetLastPlayerAffectingItemFromTeam Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.IsEnabledFromPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerItem::IsEnabledFromPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "IsEnabledFromPool");

	Params::MarinerItem_IsEnabledFromPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.IsItemRandomSpawned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerItem::IsItemRandomSpawned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "IsItemRandomSpawned");

	Params::MarinerItem_IsItemRandomSpawned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.ShouldItemUsePool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerItem::ShouldItemUsePool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "ShouldItemUsePool");

	Params::MarinerItem_ShouldItemUsePool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.ShouldUseThrowingRule
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerItem::ShouldUseThrowingRule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "ShouldUseThrowingRule");

	Params::MarinerItem_ShouldUseThrowingRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItem.UsesItemAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerItem::UsesItemAbility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItem", "UsesItemAbility");

	Params::MarinerItem_UsesItemAbility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerCustomDropdown.OnOptionHovered
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCustomDropdown::OnOptionHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomDropdown", "OnOptionHovered");

	Params::MarinerCustomDropdown_OnOptionHovered Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerCustomDropdown.OnOptionSelected
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerCustomDropdown::OnOptionSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerCustomDropdown", "OnOptionSelected");

	Params::MarinerCustomDropdown_OnOptionSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.ClearStoredConfiguration
// (Final, Native, Public, BlueprintCallable)

void UMarinerInputGlobals::ClearStoredConfiguration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "ClearStoredConfiguration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.GenerateGamepadKeyIconMappings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       ControllerConfiguration                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       ConsoleKeyIconMapping                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputGlobals::GenerateGamepadKeyIconMappings(class UDataTable* ControllerConfiguration, class UDataTable* ConsoleKeyIconMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GenerateGamepadKeyIconMappings");

	Params::MarinerInputGlobals_GenerateGamepadKeyIconMappings Parms{};

	Parms.ControllerConfiguration = ControllerConfiguration;
	Parms.ConsoleKeyIconMapping = ConsoleKeyIconMapping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.GenerateKeyIconMappingsFromIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ConfigurationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputGlobals::GenerateKeyIconMappingsFromIndex(int32 ConfigurationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GenerateKeyIconMappingsFromIndex");

	Params::MarinerInputGlobals_GenerateKeyIconMappingsFromIndex Parms{};

	Parms.ConfigurationIndex = ConfigurationIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.GetActiveKeySet
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UMarinerInputGlobals::GetActiveKeySet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetActiveKeySet");

	Params::MarinerInputGlobals_GetActiveKeySet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetGamepadIconSetFromInputAction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutCouldFindIcon                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerIconSet                  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerIconSet UMarinerInputGlobals::GetGamepadIconSetFromInputAction(EMarinerInputActions Action, bool* bOutCouldFindIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetGamepadIconSetFromInputAction");

	Params::MarinerInputGlobals_GetGamepadIconSetFromInputAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutCouldFindIcon != nullptr)
		*bOutCouldFindIcon = Parms.bOutCouldFindIcon;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetInputActionFromKeyboardKeySet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerKeySet                   KeySet                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGameplayOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerInputGlobals::GetInputActionFromKeyboardKeySet(const struct FMarinerKeySet& KeySet, bool bGameplayOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetInputActionFromKeyboardKeySet");

	Params::MarinerInputGlobals_GetInputActionFromKeyboardKeySet Parms{};

	Parms.KeySet = std::move(KeySet);
	Parms.bGameplayOnly = bGameplayOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetKBMKeyOverrides
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerKBMKeyOverrides          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerKBMKeyOverrides UMarinerInputGlobals::GetKBMKeyOverrides(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetKBMKeyOverrides");

	Params::MarinerInputGlobals_GetKBMKeyOverrides Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetKeyboardKeySetFromInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerKeySet                   ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMarinerKeySet UMarinerInputGlobals::GetKeyboardKeySetFromInputAction(EMarinerInputActions Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetKeyboardKeySetFromInputAction");

	Params::MarinerInputGlobals_GetKeyboardKeySetFromInputAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetSensitivitySpeicificationFromIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   SpecificationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerSensitivtySpecification  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerSensitivtySpecification UMarinerInputGlobals::GetSensitivitySpeicificationFromIndex(int32 SpecificationIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetSensitivitySpeicificationFromIndex");

	Params::MarinerInputGlobals_GetSensitivitySpeicificationFromIndex Parms{};

	Parms.SpecificationIndex = SpecificationIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.OnInputTypeChanged
// (Final, Native, Public)
// Parameters:
// EPlayerInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputGlobals::OnInputTypeChanged(EPlayerInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "OnInputTypeChanged");

	Params::MarinerInputGlobals_OnInputTypeChanged Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.RestoreInputDefaults
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bKeyboardOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConditionalRestore                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputGlobals::RestoreInputDefaults(bool bKeyboardOnly, bool bConditionalRestore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "RestoreInputDefaults");

	Params::MarinerInputGlobals_RestoreInputDefaults Parms{};

	Parms.bKeyboardOnly = bKeyboardOnly;
	Parms.bConditionalRestore = bConditionalRestore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.SwapGamepadKeySetIcons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    FirstAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    SecondAction                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInputGlobals::SwapGamepadKeySetIcons(EMarinerInputActions FirstAction, EMarinerInputActions SecondAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "SwapGamepadKeySetIcons");

	Params::MarinerInputGlobals_SwapGamepadKeySetIcons Parms{};

	Parms.FirstAction = FirstAction;
	Parms.SecondAction = SecondAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputGlobals.GetActionNameFromKeySet
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMarinerKeySet                   InKeySet                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerInputGlobals::GetActionNameFromKeySet(const struct FMarinerKeySet& InKeySet) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetActionNameFromKeySet");

	Params::MarinerInputGlobals_GetActionNameFromKeySet Parms{};

	Parms.InKeySet = std::move(InKeySet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetControllerConfigurationFromIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ConfigurationIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UMarinerInputGlobals::GetControllerConfigurationFromIndex(int32 ConfigurationIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetControllerConfigurationFromIndex");

	Params::MarinerInputGlobals_GetControllerConfigurationFromIndex Parms{};

	Parms.ConfigurationIndex = ConfigurationIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetDecelerationPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerInputGlobals::GetDecelerationPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetDecelerationPercentage");

	Params::MarinerInputGlobals_GetDecelerationPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetDisplayTextFromInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerInputActions                    InAction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerInputGlobals::GetDisplayTextFromInputAction(EMarinerInputActions InAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetDisplayTextFromInputAction");

	Params::MarinerInputGlobals_GetDisplayTextFromInputAction Parms{};

	Parms.InAction = InAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetGamepadKeySetFromInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerInputActions                    Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerKeySet                   ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMarinerKeySet UMarinerInputGlobals::GetGamepadKeySetFromInputAction(EMarinerInputActions Action) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetGamepadKeySetFromInputAction");

	Params::MarinerInputGlobals_GetGamepadKeySetFromInputAction Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetIconForNeutralDpad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerInputGlobals::GetIconForNeutralDpad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetIconForNeutralDpad");

	Params::MarinerInputGlobals_GetIconForNeutralDpad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetInputActionFromKeySetInputBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMarinerKeySet                   KeySet                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerInputGlobals::GetInputActionFromKeySetInputBinding(const struct FMarinerKeySet& KeySet) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetInputActionFromKeySetInputBinding");

	Params::MarinerInputGlobals_GetInputActionFromKeySetInputBinding Parms{};

	Parms.KeySet = std::move(KeySet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetInputActionListFromKey
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMarinerInputActionList    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerInputActionList UMarinerInputGlobals::GetInputActionListFromKey(const struct FKey& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetInputActionListFromKey");

	Params::MarinerInputGlobals_GetInputActionListFromKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetInputActionListFromKeySet
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMarinerKeySet                   KeySet                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMarinerInputActionList    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerInputActionList UMarinerInputGlobals::GetInputActionListFromKeySet(const struct FMarinerKeySet& KeySet) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetInputActionListFromKeySet");

	Params::MarinerInputGlobals_GetInputActionListFromKeySet Parms{};

	Parms.KeySet = std::move(KeySet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetInputMagnitudeFilterCurve
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveVector*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveVector* UMarinerInputGlobals::GetInputMagnitudeFilterCurve() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetInputMagnitudeFilterCurve");

	Params::MarinerInputGlobals_GetInputMagnitudeFilterCurve Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputGlobals.GetSensitivitySettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UMarinerInputGlobals::GetSensitivitySettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputGlobals", "GetSensitivitySettings");

	Params::MarinerInputGlobals_GetSensitivitySettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.Exit
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bToSubLayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerInputInterface::Exit(bool bToSubLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "Exit");

	Params::MarinerInputInterface_Exit Parms{};

	Parms.bToSubLayer = bToSubLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputInterface.GetHighlightedObject
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IMarinerInputInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IMarinerInputInterface> IMarinerInputInterface::GetHighlightedObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "GetHighlightedObject");

	Params::MarinerInputInterface_GetHighlightedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.HandleGamepadConnectionChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsConnected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsActiveDevice                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerInputInterface::HandleGamepadConnectionChanged(bool bIsConnected, bool bIsActiveDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleGamepadConnectionChanged");

	Params::MarinerInputInterface_HandleGamepadConnectionChanged Parms{};

	Parms.bIsConnected = bIsConnected;
	Parms.bIsActiveDevice = bIsActiveDevice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputInterface.HandleInput
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    InInput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerInputInterface::HandleInput(EMarinerInputActions InInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleInput");

	Params::MarinerInputInterface_HandleInput Parms{};

	Parms.InInput = InInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.HandleInputDeviceChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerInputInterface::HandleInputDeviceChanged(EPlayerInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleInputDeviceChanged");

	Params::MarinerInputInterface_HandleInputDeviceChanged Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInputInterface.HandleInputPressed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    InInput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerInputInterface::HandleInputPressed(EMarinerInputActions InInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleInputPressed");

	Params::MarinerInputInterface_HandleInputPressed Parms{};

	Parms.InInput = InInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.HandleInputReleased
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    InInput                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerInputInterface::HandleInputReleased(EMarinerInputActions InInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleInputReleased");

	Params::MarinerInputInterface_HandleInputReleased Parms{};

	Parms.InInput = InInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.HandleKeyDown
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRepeat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerInputInterface::HandleKeyDown(const struct FKey& InKey, bool bIsRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "HandleKeyDown");

	Params::MarinerInputInterface_HandleKeyDown Parms{};

	Parms.InKey = std::move(InKey);
	Parms.bIsRepeat = bIsRepeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInputInterface.CanHighlight
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerInputInterface::CanHighlight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInputInterface", "CanHighlight");

	Params::MarinerInputInterface_CanHighlight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInteractableObjectInterface.OnInteractableBeginDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IMarinerInteractableObjectInterface::OnInteractableBeginDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInteractableObjectInterface", "OnInteractableBeginDrag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInteractableObjectInterface.OnInteractableDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FDeltaX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FDeltaY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerInteractableObjectInterface::OnInteractableDrag(float FDeltaX, float FDeltaY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInteractableObjectInterface", "OnInteractableDrag");

	Params::MarinerInteractableObjectInterface_OnInteractableDrag Parms{};

	Parms.FDeltaX = FDeltaX;
	Parms.FDeltaY = FDeltaY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInteractableObjectInterface.OnInteractableEndDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IMarinerInteractableObjectInterface::OnInteractableEndDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInteractableObjectInterface", "OnInteractableEndDrag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInteractableObjectInterface.GetInteractableData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FMarinerInteractableData         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerInteractableData IMarinerInteractableObjectInterface::GetInteractableData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInteractableObjectInterface", "GetInteractableData");

	Params::MarinerInteractableObjectInterface_GetInteractableData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.AccumulatedDamageChanged
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::AccumulatedDamageChanged(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAccumulatedDamage, float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "AccumulatedDamageChanged");

	Params::MarinerDamageableComponent_AccumulatedDamageChanged Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.AuthoritativeSetIsInvulnerable
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsInvulnerable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::AuthoritativeSetIsInvulnerable(bool bInIsInvulnerable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "AuthoritativeSetIsInvulnerable");

	Params::MarinerDamageableComponent_AuthoritativeSetIsInvulnerable Parms{};

	Parms.bInIsInvulnerable = bInIsInvulnerable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.AuthoritySetAccumulatedDamage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverflowsMegablastDanger                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::AuthoritySetAccumulatedDamage(float NewAccumulatedDamage, bool bOverflowsMegablastDanger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "AuthoritySetAccumulatedDamage");

	Params::MarinerDamageableComponent_AuthoritySetAccumulatedDamage Parms{};

	Parms.NewAccumulatedDamage = NewAccumulatedDamage;
	Parms.bOverflowsMegablastDanger = bOverflowsMegablastDanger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.OnCharacterTakeAnyDamage
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::OnCharacterTakeAnyDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "OnCharacterTakeAnyDamage");

	Params::MarinerDamageableComponent_OnCharacterTakeAnyDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.OnOwnerKnockedOut
// (Final, Native, Public)

void UMarinerDamageableComponent::OnOwnerKnockedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "OnOwnerKnockedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.OnRegenSuppressionEnded
// (Final, Native, Protected)

void UMarinerDamageableComponent::OnRegenSuppressionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "OnRegenSuppressionEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.OnRep_AccumulatedDamageAsNonAttribute
// (Final, Native, Protected)
// Parameters:
// float                                   OldAccumulatedDamage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::OnRep_AccumulatedDamageAsNonAttribute(float OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "OnRep_AccumulatedDamageAsNonAttribute");

	Params::MarinerDamageableComponent_OnRep_AccumulatedDamageAsNonAttribute Parms{};

	Parms.OldAccumulatedDamage = OldAccumulatedDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.RemoveAllDamage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerDamageableComponent::RemoveAllDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "RemoveAllDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.RemoveDamage
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DamageToRemove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageableComponent::RemoveDamage(float DamageToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "RemoveDamage");

	Params::MarinerDamageableComponent_RemoveDamage Parms{};

	Parms.DamageToRemove = DamageToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.SuppressRegeneration
// (Final, Native, Public, BlueprintCallable)

void UMarinerDamageableComponent::SuppressRegeneration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "SuppressRegeneration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageableComponent.CanDieFromDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::CanDieFromDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "CanDieFromDamage");

	Params::MarinerDamageableComponent_CanDieFromDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetAccumulatedDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetAccumulatedDamage");

	Params::MarinerDamageableComponent_GetAccumulatedDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamageRegenPerSecond
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetAccumulatedDamageRegenPerSecond() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetAccumulatedDamageRegenPerSecond");

	Params::MarinerDamageableComponent_GetAccumulatedDamageRegenPerSecond Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetAccumulatedDamageRegenSuppressionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetAccumulatedDamageRegenSuppressionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetAccumulatedDamageRegenSuppressionTime");

	Params::MarinerDamageableComponent_GetAccumulatedDamageRegenSuppressionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetBlastableLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerBlastableLevel                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerBlastableLevel UMarinerDamageableComponent::GetBlastableLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetBlastableLevel");

	Params::MarinerDamageableComponent_GetBlastableLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetCriticalDamageThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetCriticalDamageThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetCriticalDamageThreshold");

	Params::MarinerDamageableComponent_GetCriticalDamageThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetDamageMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetDamageMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetDamageMultiplier");

	Params::MarinerDamageableComponent_GetDamageMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetDamageReceivedMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetDamageReceivedMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetDamageReceivedMultiplier");

	Params::MarinerDamageableComponent_GetDamageReceivedMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetDeathDamageThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetDeathDamageThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetDeathDamageThreshold");

	Params::MarinerDamageableComponent_GetDeathDamageThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetImpulseMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetImpulseMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetImpulseMultiplier");

	Params::MarinerDamageableComponent_GetImpulseMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetLastDamageEventClosestHitResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FHitResult                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FHitResult UMarinerDamageableComponent::GetLastDamageEventClosestHitResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetLastDamageEventClosestHitResult");

	Params::MarinerDamageableComponent_GetLastDamageEventClosestHitResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetLastDamageEventDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMarinerDamageableComponent::GetLastDamageEventDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetLastDamageEventDirection");

	Params::MarinerDamageableComponent_GetLastDamageEventDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetLastDamageEventOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMarinerDamageableComponent::GetLastDamageEventOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetLastDamageEventOrigin");

	Params::MarinerDamageableComponent_GetLastDamageEventOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetMegablastDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetMegablastDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetMegablastDuration");

	Params::MarinerDamageableComponent_GetMegablastDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetMegablastGameplayEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGameplayEffect>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGameplayEffect> UMarinerDamageableComponent::GetMegablastGameplayEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetMegablastGameplayEffect");

	Params::MarinerDamageableComponent_GetMegablastGameplayEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.GetSelfImpulseMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerDamageableComponent::GetSelfImpulseMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "GetSelfImpulseMultiplier");

	Params::MarinerDamageableComponent_GetSelfImpulseMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.IsInvulnerable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::IsInvulnerable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "IsInvulnerable");

	Params::MarinerDamageableComponent_IsInvulnerable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.IsMegablastActiveOrPending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::IsMegablastActiveOrPending() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "IsMegablastActiveOrPending");

	Params::MarinerDamageableComponent_IsMegablastActiveOrPending Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.IsMegablasted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::IsMegablasted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "IsMegablasted");

	Params::MarinerDamageableComponent_IsMegablasted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.IsRecentlyDamaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::IsRecentlyDamaged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "IsRecentlyDamaged");

	Params::MarinerDamageableComponent_IsRecentlyDamaged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableComponent.IsRegenerating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageableComponent::IsRegenerating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableComponent", "IsRegenerating");

	Params::MarinerDamageableComponent_IsRegenerating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableObjectInterface.BP_GetDamageableComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDamageableComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageableComponent* IMarinerDamageableObjectInterface::BP_GetDamageableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableObjectInterface", "BP_GetDamageableComponent");

	Params::MarinerDamageableObjectInterface_BP_GetDamageableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableObjectInterface.ShouldGenerateCombo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerDamageableObjectInterface::ShouldGenerateCombo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableObjectInterface", "ShouldGenerateCombo");

	Params::MarinerDamageableObjectInterface_ShouldGenerateCombo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableObjectInterface.ShouldGenerateHitTicks
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IMarinerDamageableObjectInterface::ShouldGenerateHitTicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableObjectInterface", "ShouldGenerateHitTicks");

	Params::MarinerDamageableObjectInterface_ShouldGenerateHitTicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.CheckIfAllPlayerStatesAreAdded
// (Final, Native, Public)

void UMarinerKnockoutMiniScoreboard::CheckIfAllPlayerStatesAreAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "CheckIfAllPlayerStatesAreAdded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.CheckPlayerWidgetsBeforeGameStarts
// (Final, Native, Public)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::CheckPlayerWidgetsBeforeGameStarts(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "CheckPlayerWidgetsBeforeGameStarts");

	Params::MarinerKnockoutMiniScoreboard_CheckPlayerWidgetsBeforeGameStarts Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.Init
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         MarinerPlayerController                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::Init(class AMarinerPlayerController* MarinerPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "Init");

	Params::MarinerKnockoutMiniScoreboard_Init Parms{};

	Parms.MarinerPlayerController = MarinerPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.OnOvertimeStarted
// (Final, Native, Private)

void UMarinerKnockoutMiniScoreboard::OnOvertimeStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "OnOvertimeStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerAdded
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::OnPlayerAdded(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "OnPlayerAdded");

	Params::MarinerKnockoutMiniScoreboard_OnPlayerAdded Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerChangedTeam
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::OnPlayerChangedTeam(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "OnPlayerChangedTeam");

	Params::MarinerKnockoutMiniScoreboard_OnPlayerChangedTeam Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.OnPlayerRemoved
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::OnPlayerRemoved(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "OnPlayerRemoved");

	Params::MarinerKnockoutMiniScoreboard_OnPlayerRemoved Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.OnScoreChanged
// (Final, Native, Private)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewScore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::OnScoreChanged(int32 TeamIndex, int32 NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "OnScoreChanged");

	Params::MarinerKnockoutMiniScoreboard_OnScoreChanged Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.NewScore = NewScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpPlayerWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerSkinnedSelectedCharacterWidget*PlayerWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::SetUpPlayerWidget(class AMarinerPlayerState* PlayerState, class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "SetUpPlayerWidget");

	Params::MarinerKnockoutMiniScoreboard_SetUpPlayerWidget Parms{};

	Parms.PlayerState = PlayerState;
	Parms.PlayerWidget = PlayerWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpPlayerWidgetForOvertime
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerSkinnedSelectedCharacterWidget*PlayerWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::SetUpPlayerWidgetForOvertime(class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "SetUpPlayerWidgetForOvertime");

	Params::MarinerKnockoutMiniScoreboard_SetUpPlayerWidgetForOvertime Parms{};

	Parms.PlayerWidget = PlayerWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerKnockoutMiniScoreboard.SetUpRocketBotAttackWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerSkinnedSelectedCharacterWidget*PlayerWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerKnockoutMiniScoreboard::SetUpRocketBotAttackWidget(class UMarinerSkinnedSelectedCharacterWidget* PlayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "SetUpRocketBotAttackWidget");

	Params::MarinerKnockoutMiniScoreboard_SetUpRocketBotAttackWidget Parms{};

	Parms.PlayerWidget = PlayerWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerKnockoutMiniScoreboard.GetAnimationAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerKnockoutMiniScoreboardAnimationsReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerKnockoutMiniScoreboardAnimations UMarinerKnockoutMiniScoreboard::GetAnimationAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerKnockoutMiniScoreboard", "GetAnimationAssets");

	Params::MarinerKnockoutMiniScoreboard_GetAnimationAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageableProjectile.BP_GetDamageableComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerDamageableComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageableComponent* AMarinerDamageableProjectile::BP_GetDamageableComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageableProjectile", "BP_GetDamageableComponent");

	Params::MarinerDamageableProjectile_BP_GetDamageableComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.AuthorityTryReceiveItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerItem*                     ItemToGive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::AuthorityTryReceiveItem(class AMarinerItem* ItemToGive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "AuthorityTryReceiveItem");

	Params::MarinerItemInteractionComponent_AuthorityTryReceiveItem Parms{};

	Parms.ItemToGive = ItemToGive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.DestroyAllHeldItems
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerItemInteractionComponent::DestroyAllHeldItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DestroyAllHeldItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.DropAllItems
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerItemInteractionComponent::DropAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DropAllItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.DropAnyItemInSlot
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        ItemSlotToDrop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DropLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DropEffect                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagRequiredToDrop                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerItemInteractionComponent::DropAnyItemInSlot(EMarinerItemSlot ItemSlotToDrop, const struct FVector& DropLocation, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DropAnyItemInSlot");

	Params::MarinerItemInteractionComponent_DropAnyItemInSlot Parms{};

	Parms.ItemSlotToDrop = ItemSlotToDrop;
	Parms.DropLocation = std::move(DropLocation);
	Parms.DropEffect = DropEffect;
	Parms.TagRequiredToDrop = TagRequiredToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.DropAnyItemInSlotAtCurrentLocation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        ItemSlotToDrop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DropEffect                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagRequiredToDrop                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerItemInteractionComponent::DropAnyItemInSlotAtCurrentLocation(EMarinerItemSlot ItemSlotToDrop, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DropAnyItemInSlotAtCurrentLocation");

	Params::MarinerItemInteractionComponent_DropAnyItemInSlotAtCurrentLocation Parms{};

	Parms.ItemSlotToDrop = ItemSlotToDrop;
	Parms.DropEffect = DropEffect;
	Parms.TagRequiredToDrop = TagRequiredToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.DropNextItem
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          DropLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DropEffect                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagRequiredToDrop                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerItemInteractionComponent::DropNextItem(const struct FVector& DropLocation, class UParticleSystem* DropEffect, const class FName TagRequiredToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DropNextItem");

	Params::MarinerItemInteractionComponent_DropNextItem Parms{};

	Parms.DropLocation = std::move(DropLocation);
	Parms.DropEffect = DropEffect;
	Parms.TagRequiredToDrop = TagRequiredToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.HandleInputForTheGivenSlot
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        SlotToInteractWith                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::HandleInputForTheGivenSlot(EMarinerItemSlot SlotToInteractWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "HandleInputForTheGivenSlot");

	Params::MarinerItemInteractionComponent_HandleInputForTheGivenSlot Parms{};

	Parms.SlotToInteractWith = SlotToInteractWith;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.LocalSetShouldItemAnimationsPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShouldPlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::LocalSetShouldItemAnimationsPlay(bool bShouldPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "LocalSetShouldItemAnimationsPlay");

	Params::MarinerItemInteractionComponent_LocalSetShouldItemAnimationsPlay Parms{};

	Parms.bShouldPlay = bShouldPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.LockSlot
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        ItemSlotToLock                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldBeLocked                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::LockSlot(EMarinerItemSlot ItemSlotToLock, bool bShouldBeLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "LockSlot");

	Params::MarinerItemInteractionComponent_LockSlot Parms{};

	Parms.ItemSlotToLock = ItemSlotToLock;
	Parms.bShouldBeLocked = bShouldBeLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.MatSwapItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::MatSwapItem(class UMaterialInterface* NewMaterial, const EMarinerItemSlot ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "MatSwapItem");

	Params::MarinerItemInteractionComponent_MatSwapItem Parms{};

	Parms.NewMaterial = NewMaterial;
	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.MoveItemInSlotToAnotherCharacter
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        ItemSlotToGiveAway                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                CharacterToGiveTo                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::MoveItemInSlotToAnotherCharacter(EMarinerItemSlot ItemSlotToGiveAway, class AMarinerCharacter* CharacterToGiveTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "MoveItemInSlotToAnotherCharacter");

	Params::MarinerItemInteractionComponent_MoveItemInSlotToAnotherCharacter Parms{};

	Parms.ItemSlotToGiveAway = ItemSlotToGiveAway;
	Parms.CharacterToGiveTo = CharacterToGiveTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.MulticastDropNextItem
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)
// Parameters:
// EMarinerItemSlot                        SlotToDropItemFrom                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              DropLocation                                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DropEffect                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::MulticastDropNextItem(EMarinerItemSlot SlotToDropItemFrom, const struct FVector_NetQuantize& DropLocation, class UParticleSystem* DropEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "MulticastDropNextItem");

	Params::MarinerItemInteractionComponent_MulticastDropNextItem Parms{};

	Parms.SlotToDropItemFrom = SlotToDropItemFrom;
	Parms.DropLocation = std::move(DropLocation);
	Parms.DropEffect = DropEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.MulticastMoveItemInSlotToAnotherCharacter
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)
// Parameters:
// EMarinerItemSlot                        ItemSlotToGiveAway                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                CharacterToGiveTo                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::MulticastMoveItemInSlotToAnotherCharacter(EMarinerItemSlot ItemSlotToGiveAway, class AMarinerCharacter* CharacterToGiveTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "MulticastMoveItemInSlotToAnotherCharacter");

	Params::MarinerItemInteractionComponent_MulticastMoveItemInSlotToAnotherCharacter Parms{};

	Parms.ItemSlotToGiveAway = ItemSlotToGiveAway;
	Parms.CharacterToGiveTo = CharacterToGiveTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.MulticastPerformThrowRelease
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)
// Parameters:
// EMarinerItemSlot                        SlotToReleaseFrom                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              ThrowReleaseRelativeLocation                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              ThrowVelocity                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::MulticastPerformThrowRelease(EMarinerItemSlot SlotToReleaseFrom, const struct FVector_NetQuantize& ThrowReleaseRelativeLocation, const struct FVector_NetQuantize& ThrowVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "MulticastPerformThrowRelease");

	Params::MarinerItemInteractionComponent_MulticastPerformThrowRelease Parms{};

	Parms.SlotToReleaseFrom = SlotToReleaseFrom;
	Parms.ThrowReleaseRelativeLocation = std::move(ThrowReleaseRelativeLocation);
	Parms.ThrowVelocity = std::move(ThrowVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnHeldItemDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnHeldItemDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnHeldItemDestroyed");

	Params::MarinerItemInteractionComponent_OnHeldItemDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnMontageBlendingOutStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnMontageBlendingOutStarted");

	Params::MarinerItemInteractionComponent_OnMontageBlendingOutStarted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnMontageEnded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnMontageEnded");

	Params::MarinerItemInteractionComponent_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnMontageStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnMontageStarted");

	Params::MarinerItemInteractionComponent_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnOwnerDeath
// (Final, Native, Public)
// Parameters:
// class AActor*                           DeadActor                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerDamageType*               KillingDamage                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KillInstigator                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           KillingDamageSourceActor                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnOwnerDeath(const class AActor* DeadActor, const class UMarinerDamageType* KillingDamage, class AController* KillInstigator, class AActor* KillingDamageSourceActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnOwnerDeath");

	Params::MarinerItemInteractionComponent_OnOwnerDeath Parms{};

	Parms.DeadActor = DeadActor;
	Parms.KillingDamage = KillingDamage;
	Parms.KillInstigator = KillInstigator;
	Parms.KillingDamageSourceActor = KillingDamageSourceActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnOwnerPerspectiveChanged
// (Final, Native, Public)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFirstPerson                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnOwnerPerspectiveChanged(class AMarinerCharacter* Character, bool bIsFirstPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnOwnerPerspectiveChanged");

	Params::MarinerItemInteractionComponent_OnOwnerPerspectiveChanged Parms{};

	Parms.Character = Character;
	Parms.bIsFirstPerson = bIsFirstPerson;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnReleaseAnimNotifyCharacterEvent
// (Final, Native, Protected)
// Parameters:
// EAnimNotifyCharacterEventType           EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::OnReleaseAnimNotifyCharacterEvent(EAnimNotifyCharacterEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnReleaseAnimNotifyCharacterEvent");

	Params::MarinerItemInteractionComponent_OnReleaseAnimNotifyCharacterEvent Parms{};

	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_ClientOnHoldingItemReplicationByte
// (Final, Native, Protected)

void UMarinerItemInteractionComponent::OnRep_ClientOnHoldingItemReplicationByte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_ClientOnHoldingItemReplicationByte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_CurrentInitiateThrowItemData_Default
// (Final, Native, Protected)

void UMarinerItemInteractionComponent::OnRep_CurrentInitiateThrowItemData_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_CurrentInitiateThrowItemData_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_CurrentInitiateThrowItemData_Priority
// (Final, Native, Protected)

void UMarinerItemInteractionComponent::OnRep_CurrentInitiateThrowItemData_Priority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_CurrentInitiateThrowItemData_Priority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_CurrentThrowItemReleaseData_Default
// (Final, Native, Protected)

void UMarinerItemInteractionComponent::OnRep_CurrentThrowItemReleaseData_Default()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_CurrentThrowItemReleaseData_Default");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_CurrentThrowItemReleaseData_Priority
// (Final, Native, Protected)

void UMarinerItemInteractionComponent::OnRep_CurrentThrowItemReleaseData_Priority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_CurrentThrowItemReleaseData_Priority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_HeldItem
// (Final, Native, Public)

void UMarinerItemInteractionComponent::OnRep_HeldItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_HeldItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.OnRep_HeldPriorityItem
// (Final, Native, Public)

void UMarinerItemInteractionComponent::OnRep_HeldPriorityItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "OnRep_HeldPriorityItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.ReceiveItem
// (Final, Native, Public)
// Parameters:
// class AMarinerItem*                     ItemReceived                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::ReceiveItem(class AMarinerItem* ItemReceived)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "ReceiveItem");

	Params::MarinerItemInteractionComponent_ReceiveItem Parms{};

	Parms.ItemReceived = ItemReceived;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.RevertMatItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerItemSlot                        ItemType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::RevertMatItem(const EMarinerItemSlot ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "RevertMatItem");

	Params::MarinerItemInteractionComponent_RevertMatItem Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.ServerRequestActivateItem
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AMarinerItem*                     ItemToActivate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::ServerRequestActivateItem(class AMarinerItem* ItemToActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "ServerRequestActivateItem");

	Params::MarinerItemInteractionComponent_ServerRequestActivateItem Parms{};

	Parms.ItemToActivate = ItemToActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.ServerRequestThrowItem
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// EMarinerItemSlot                        SlotToThrowFrom                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsThrowDrop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::ServerRequestThrowItem(EMarinerItemSlot SlotToThrowFrom, bool bIsThrowDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "ServerRequestThrowItem");

	Params::MarinerItemInteractionComponent_ServerRequestThrowItem Parms{};

	Parms.SlotToThrowFrom = SlotToThrowFrom;
	Parms.bIsThrowDrop = bIsThrowDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.ServerRequestThrowRelease
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// EMarinerItemSlot                        SlotToReleaseFrom                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              ThrowReleaseRelativeLocation                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              ThrowVelocity                                          (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerItemInteractionComponent::ServerRequestThrowRelease(EMarinerItemSlot SlotToReleaseFrom, const struct FVector_NetQuantize& ThrowReleaseRelativeLocation, const struct FVector_NetQuantize& ThrowVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "ServerRequestThrowRelease");

	Params::MarinerItemInteractionComponent_ServerRequestThrowRelease Parms{};

	Parms.SlotToReleaseFrom = SlotToReleaseFrom;
	Parms.ThrowReleaseRelativeLocation = std::move(ThrowReleaseRelativeLocation);
	Parms.ThrowVelocity = std::move(ThrowVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerItemInteractionComponent.CanPickupItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerItem*                     ItemToTryToHold                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::CanPickupItem(const class AMarinerItem* ItemToTryToHold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "CanPickupItem");

	Params::MarinerItemInteractionComponent_CanPickupItem Parms{};

	Parms.ItemToTryToHold = ItemToTryToHold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.DoesSlotContainItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerItemSlot                        SlotToCheck                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::DoesSlotContainItem(EMarinerItemSlot SlotToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "DoesSlotContainItem");

	Params::MarinerItemInteractionComponent_DoesSlotContainItem Parms{};

	Parms.SlotToCheck = SlotToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetFirstFullItemSlot
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerItemSlot                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerItemSlot UMarinerItemInteractionComponent::GetFirstFullItemSlot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetFirstFullItemSlot");

	Params::MarinerItemInteractionComponent_GetFirstFullItemSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetFirstHeldItem
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerItemInteractionComponent::GetFirstHeldItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetFirstHeldItem");

	Params::MarinerItemInteractionComponent_GetFirstHeldItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetItemAbilityType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerAbility>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMarinerAbility> UMarinerItemInteractionComponent::GetItemAbilityType(EMarinerItemSlot ItemSlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetItemAbilityType");

	Params::MarinerItemInteractionComponent_GetItemAbilityType Parms{};

	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetItemBySlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerItemInteractionComponent::GetItemBySlot(EMarinerItemSlot ItemSlot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetItemBySlot");

	Params::MarinerItemInteractionComponent_GetItemBySlot Parms{};

	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetMarinerCharacterOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerItemInteractionComponent::GetMarinerCharacterOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetMarinerCharacterOwner");

	Params::MarinerItemInteractionComponent_GetMarinerCharacterOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.GetOwnerAbilitySystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbilitySystemComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbilitySystemComponent* UMarinerItemInteractionComponent::GetOwnerAbilitySystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "GetOwnerAbilitySystemComponent");

	Params::MarinerItemInteractionComponent_GetOwnerAbilitySystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.HasRoomToHoldItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerItem*                     ItemToTryToHold                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::HasRoomToHoldItem(const class AMarinerItem* ItemToTryToHold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "HasRoomToHoldItem");

	Params::MarinerItemInteractionComponent_HasRoomToHoldItem Parms{};

	Parms.ItemToTryToHold = ItemToTryToHold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.IsAllItemPickupSuppressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::IsAllItemPickupSuppressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "IsAllItemPickupSuppressed");

	Params::MarinerItemInteractionComponent_IsAllItemPickupSuppressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.IsHoldingItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::IsHoldingItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "IsHoldingItem");

	Params::MarinerItemInteractionComponent_IsHoldingItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.IsNonPriorityItemPickupSuppressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::IsNonPriorityItemPickupSuppressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "IsNonPriorityItemPickupSuppressed");

	Params::MarinerItemInteractionComponent_IsNonPriorityItemPickupSuppressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.IsPriorityItemPickupSuppressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::IsPriorityItemPickupSuppressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "IsPriorityItemPickupSuppressed");

	Params::MarinerItemInteractionComponent_IsPriorityItemPickupSuppressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemInteractionComponent.IsSlotLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerItemSlot                        ItemSlotToCheck                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerItemInteractionComponent::IsSlotLocked(EMarinerItemSlot ItemSlotToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemInteractionComponent", "IsSlotLocked");

	Params::MarinerItemInteractionComponent_IsSlotLocked Parms{};

	Parms.ItemSlotToCheck = ItemSlotToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamage
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldAccumulatedDamage                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_AccumulatedDamage(const struct FMarinerGameplayAttributeData& OldAccumulatedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_AccumulatedDamage");

	Params::MarinerDamageAttributes_OnRep_AccumulatedDamage Parms{};

	Parms.OldAccumulatedDamage = std::move(OldAccumulatedDamage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamageRegenPerSecond
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldAccumulatedDamageRegenPerSecond                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_AccumulatedDamageRegenPerSecond(const struct FMarinerGameplayAttributeData& OldAccumulatedDamageRegenPerSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_AccumulatedDamageRegenPerSecond");

	Params::MarinerDamageAttributes_OnRep_AccumulatedDamageRegenPerSecond Parms{};

	Parms.OldAccumulatedDamageRegenPerSecond = std::move(OldAccumulatedDamageRegenPerSecond);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_AccumulatedDamageRegenSuppressionTime
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldAccumulatedDamageRegenSuppressionTime               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_AccumulatedDamageRegenSuppressionTime(const struct FMarinerGameplayAttributeData& OldAccumulatedDamageRegenSuppressionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_AccumulatedDamageRegenSuppressionTime");

	Params::MarinerDamageAttributes_OnRep_AccumulatedDamageRegenSuppressionTime Parms{};

	Parms.OldAccumulatedDamageRegenSuppressionTime = std::move(OldAccumulatedDamageRegenSuppressionTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_DamageReceivedMultiplier
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldDamageMultiplier                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_DamageReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_DamageReceivedMultiplier");

	Params::MarinerDamageAttributes_OnRep_DamageReceivedMultiplier Parms{};

	Parms.OldDamageMultiplier = std::move(OldDamageMultiplier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_ImpulseReceivedMultiplier
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldImpulseReceivedMultiplier                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_ImpulseReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldImpulseReceivedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_ImpulseReceivedMultiplier");

	Params::MarinerDamageAttributes_OnRep_ImpulseReceivedMultiplier Parms{};

	Parms.OldImpulseReceivedMultiplier = std::move(OldImpulseReceivedMultiplier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_SelfImpulseReceivedMultiplier
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldSelfImpulseReceivedMultiplier                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_SelfImpulseReceivedMultiplier(const struct FMarinerGameplayAttributeData& OldSelfImpulseReceivedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_SelfImpulseReceivedMultiplier");

	Params::MarinerDamageAttributes_OnRep_SelfImpulseReceivedMultiplier Parms{};

	Parms.OldSelfImpulseReceivedMultiplier = std::move(OldSelfImpulseReceivedMultiplier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageAttributes.OnRep_ShieldUsesRemaining
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FMarinerGameplayAttributeData    OldShieldUsesRemaining                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerDamageAttributes::OnRep_ShieldUsesRemaining(const struct FMarinerGameplayAttributeData& OldShieldUsesRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageAttributes", "OnRep_ShieldUsesRemaining");

	Params::MarinerDamageAttributes_OnRep_ShieldUsesRemaining Parms{};

	Parms.OldShieldUsesRemaining = std::move(OldShieldUsesRemaining);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageDebugManager.GetDamageDebugArchive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UMarinerDamageDebugRecord*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMarinerDamageDebugRecord*> UMarinerDamageDebugManager::GetDamageDebugArchive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerDamageDebugManager", "GetDamageDebugArchive");

	Params::MarinerDamageDebugManager_GetDamageDebugArchive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAOEDamageDebugRecord.GetDamageCandidateActorNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UMarinerAOEDamageDebugRecord::GetDamageCandidateActorNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAOEDamageDebugRecord", "GetDamageCandidateActorNames");

	Params::MarinerAOEDamageDebugRecord_GetDamageCandidateActorNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAOEDamageDebugRecord.GetDamagedActorNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UMarinerAOEDamageDebugRecord::GetDamagedActorNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAOEDamageDebugRecord", "GetDamagedActorNames");

	Params::MarinerAOEDamageDebugRecord_GetDamagedActorNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAOEDamageDebugRecord.GetDamageDebugRecordForActorDamaged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActorName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerActorDamagedDebugRecord  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerActorDamagedDebugRecord UMarinerAOEDamageDebugRecord::GetDamageDebugRecordForActorDamaged(class FName ActorName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAOEDamageDebugRecord", "GetDamageDebugRecordForActorDamaged");

	Params::MarinerAOEDamageDebugRecord_GetDamageDebugRecordForActorDamaged Parms{};

	Parms.ActorName = ActorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerAOEDamageDebugRecord.GetObstructionTestDebugRecordsForActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActorName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMarinerAOEObstructionTestDebugRecord>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMarinerAOEObstructionTestDebugRecord> UMarinerAOEDamageDebugRecord::GetObstructionTestDebugRecordsForActor(class FName ActorName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerAOEDamageDebugRecord", "GetObstructionTestDebugRecordsForActor");

	Params::MarinerAOEDamageDebugRecord_GetObstructionTestDebugRecordsForActor Parms{};

	Parms.ActorName = ActorName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetArtifactSoftTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoItemType                          ArtifactType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UMarinerUIGlobals::GetArtifactSoftTexture(EMangoItemType ArtifactType, const class FString& LookupId, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetArtifactSoftTexture");

	Params::MarinerUIGlobals_GetArtifactSoftTexture Parms{};

	Parms.ArtifactType = ArtifactType;
	Parms.LookupId = std::move(LookupId);
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.IsArtifactDataLoaded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UMarinerUIGlobals::IsArtifactDataLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "IsArtifactDataLoaded");

	Params::MarinerUIGlobals_IsArtifactDataLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.IsValidRank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPlayerRank                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIGlobals::IsValidRank(int32 InPlayerRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "IsValidRank");

	Params::MarinerUIGlobals_IsValidRank Parms{};

	Parms.InPlayerRank = InPlayerRank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.PopulateArtifactFromData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerArtifactDataAsset*        ArtifactData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactImage*            ArtifactImage                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIGlobals::PopulateArtifactFromData(const class UMarinerArtifactDataAsset* ArtifactData, int32 CurrentLevel, class UMarinerArtifactImage* ArtifactImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "PopulateArtifactFromData");

	Params::MarinerUIGlobals_PopulateArtifactFromData Parms{};

	Parms.ArtifactData = ArtifactData;
	Parms.CurrentLevel = CurrentLevel;
	Parms.ArtifactImage = ArtifactImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIGlobals.PopulateEquippedCharacterArtifactForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMarinerGameInstance*             MarinerGameInstance                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactImage*            ArtifactImage                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIGlobals::PopulateEquippedCharacterArtifactForProfile(const class UMarinerGameInstance* MarinerGameInstance, const TSoftClassPtr<class UClass> CharacterClass, const struct FMangoProfile& Profile, EMangoItemType ItemType, bool bRanked, class UMarinerArtifactImage* ArtifactImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "PopulateEquippedCharacterArtifactForProfile");

	Params::MarinerUIGlobals_PopulateEquippedCharacterArtifactForProfile Parms{};

	Parms.MarinerGameInstance = MarinerGameInstance;
	Parms.CharacterClass = CharacterClass;
	Parms.Profile = std::move(Profile);
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;
	Parms.ArtifactImage = ArtifactImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIGlobals.PopulateLocalEquippedCharacterArtifact
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerGameInstance*             MarinerGameInstance                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactImage*            ArtifactImage                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIGlobals::PopulateLocalEquippedCharacterArtifact(const class UMarinerGameInstance* MarinerGameInstance, const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, class UMarinerArtifactImage* ArtifactImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "PopulateLocalEquippedCharacterArtifact");

	Params::MarinerUIGlobals_PopulateLocalEquippedCharacterArtifact Parms{};

	Parms.MarinerGameInstance = MarinerGameInstance;
	Parms.CharacterClass = CharacterClass;
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;
	Parms.ArtifactImage = ArtifactImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIGlobals.PopulatePlatformIcon
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           Icon                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Platform                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCrossplaySetting                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIGlobals::PopulatePlatformIcon(const class UObject* WorldContextObject, class UImage* Icon, const class FName& Platform, bool bIgnoreCrossplaySetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "PopulatePlatformIcon");

	Params::MarinerUIGlobals_PopulatePlatformIcon Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Icon = Icon;
	Parms.Platform = Platform;
	Parms.bIgnoreCrossplaySetting = bIgnoreCrossplaySetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIGlobals.PopulateRankIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerRank                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImage*                           RankIcon                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSmallImage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIGlobals::PopulateRankIcon(int32 PlayerRank, class UImage* RankIcon, bool bUseSmallImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "PopulateRankIcon");

	Params::MarinerUIGlobals_PopulateRankIcon Parms{};

	Parms.PlayerRank = PlayerRank;
	Parms.RankIcon = RankIcon;
	Parms.bUseSmallImage = bUseSmallImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIGlobals.GetAllArtifactsUIInfoForType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ArtifactType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class UItemLoadResponse*, class UMarinerArtifactDataAsset*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class UItemLoadResponse*, class UMarinerArtifactDataAsset*> UMarinerUIGlobals::GetAllArtifactsUIInfoForType(EMangoItemType ArtifactType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetAllArtifactsUIInfoForType");

	Params::MarinerUIGlobals_GetAllArtifactsUIInfoForType Parms{};

	Parms.ArtifactType = ArtifactType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetArtifactUIDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ArtifactType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LookupId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactDataAsset*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerArtifactDataAsset* UMarinerUIGlobals::GetArtifactUIDataAsset(EMangoItemType ArtifactType, const class FString& LookupId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetArtifactUIDataAsset");

	Params::MarinerUIGlobals_GetArtifactUIDataAsset Parms{};

	Parms.ArtifactType = ArtifactType;
	Parms.LookupId = std::move(LookupId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetCharacterAbility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    AbilityInput                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UHUDAbilityUIData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UHUDAbilityUIData> UMarinerUIGlobals::GetCharacterAbility(TSoftClassPtr<class UClass> Character, EMarinerInputActions AbilityInput) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetCharacterAbility");

	Params::MarinerUIGlobals_GetCharacterAbility Parms{};

	Parms.Character = Character;
	Parms.AbilityInput = AbilityInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetCharactersAbilitiesUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMarinerUICharacterAbilityDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerUICharacterAbilityData UMarinerUIGlobals::GetCharactersAbilitiesUIData(TSoftClassPtr<class UClass> Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetCharactersAbilitiesUIData");

	Params::MarinerUIGlobals_GetCharactersAbilitiesUIData Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetCollectionForItem
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerCollectionDataAsset*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCollectionDataAsset* UMarinerUIGlobals::GetCollectionForItem(const struct FMangoItem& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetCollectionForItem");

	Params::MarinerUIGlobals_GetCollectionForItem Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetItemTypeIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerUIGlobals::GetItemTypeIcon(EMangoItemType ItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetItemTypeIcon");

	Params::MarinerUIGlobals_GetItemTypeIcon Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetItemTypeName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerUIGlobals::GetItemTypeName(const struct FMangoItem& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetItemTypeName");

	Params::MarinerUIGlobals_GetItemTypeName Parms{};

	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.GetMythicEditionCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCollectionDataAsset*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCollectionDataAsset* UMarinerUIGlobals::GetMythicEditionCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "GetMythicEditionCollection");

	Params::MarinerUIGlobals_GetMythicEditionCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.IsChatEmoteAnimationsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIGlobals::IsChatEmoteAnimationsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "IsChatEmoteAnimationsEnabled");

	Params::MarinerUIGlobals_IsChatEmoteAnimationsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.IsPreGameEmoteEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIGlobals::IsPreGameEmoteEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "IsPreGameEmoteEnabled");

	Params::MarinerUIGlobals_IsPreGameEmoteEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIGlobals.IsVictoryPoseEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIGlobals::IsVictoryPoseEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIGlobals", "IsVictoryPoseEnabled");

	Params::MarinerUIGlobals_IsVictoryPoseEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.CauseAOEDamage
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDirectHitOnCharacter                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDamageMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::CauseAOEDamage(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, bool bDirectHitOnCharacter, float InDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "CauseAOEDamage");

	Params::MarinerDamageLibrary_CauseAOEDamage Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DamageType = DamageType;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;
	Parms.bDirectHitOnCharacter = bDirectHitOnCharacter;
	Parms.InDamageMultiplier = InDamageMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.CauseAOEDamageAndGetDamagedActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutDamagedActors                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   InDamageMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::CauseAOEDamageAndGetDamagedActors(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, TArray<class AActor*>* OutDamagedActors, float InDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "CauseAOEDamageAndGetDamagedActors");

	Params::MarinerDamageLibrary_CauseAOEDamageAndGetDamagedActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DamageType = DamageType;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;
	Parms.InDamageMultiplier = InDamageMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDamagedActors != nullptr)
		*OutDamagedActors = std::move(Parms.OutDamagedActors);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.CauseAOEDamageWithOuterRadiusOverride
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OuterRadiusOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutDamagedActors                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   InDamageMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::CauseAOEDamageWithOuterRadiusOverride(class UObject* WorldContextObject, TSubclassOf<class UMarinerDamageType> DamageType, float OuterRadiusOverride, const struct FVector& DamageOrigin, const TArray<class AActor*>& IgnoreActors, class AController* DamageInstigator, class AActor* DamageSourceActor, TArray<class AActor*>* OutDamagedActors, float InDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "CauseAOEDamageWithOuterRadiusOverride");

	Params::MarinerDamageLibrary_CauseAOEDamageWithOuterRadiusOverride Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DamageType = DamageType;
	Parms.OuterRadiusOverride = OuterRadiusOverride;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;
	Parms.InDamageMultiplier = InDamageMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDamagedActors != nullptr)
		*OutDamagedActors = std::move(Parms.OutDamagedActors);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.CauseDamage
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDamageMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OverrideDamageDirection                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldTreatAsAOE                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageLibrary::CauseDamage(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> DamageType, class AController* DamageInstigator, class AActor* DamageSourceActor, float InDamageMultiplier, const struct FVector& OverrideDamageDirection, bool bShouldTreatAsAOE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "CauseDamage");

	Params::MarinerDamageLibrary_CauseDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageType = DamageType;
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;
	Parms.InDamageMultiplier = InDamageMultiplier;
	Parms.OverrideDamageDirection = std::move(OverrideDamageDirection);
	Parms.bShouldTreatAsAOE = bShouldTreatAsAOE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageLibrary.CauseDamageFromHit
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AController*                      DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageSourceActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDamageMultiplier                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerDamageLibrary::CauseDamageFromHit(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> DamageType, const struct FVector& DamageDirection, const struct FHitResult& HitInfo, class AController* DamageInstigator, class AActor* DamageSourceActor, float InDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "CauseDamageFromHit");

	Params::MarinerDamageLibrary_CauseDamageFromHit Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageType = DamageType;
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.HitInfo = std::move(HitInfo);
	Parms.DamageInstigator = DamageInstigator;
	Parms.DamageSourceActor = DamageSourceActor;
	Parms.InDamageMultiplier = InDamageMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDamageLibrary.DoesActorHaveDirectionalImmunity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DamageOrigin                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   OptionalDamageSourceType                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::DoesActorHaveDirectionalImmunity(const class AActor* Actor, const struct FVector& DamageOrigin, TSubclassOf<class UMarinerDamageType> OptionalDamageSourceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "DoesActorHaveDirectionalImmunity");

	Params::MarinerDamageLibrary_DoesActorHaveDirectionalImmunity Parms{};

	Parms.Actor = Actor;
	Parms.DamageOrigin = std::move(DamageOrigin);
	Parms.OptionalDamageSourceType = OptionalDamageSourceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.DoesComponentAbsorbExplosion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::DoesComponentAbsorbExplosion(const class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "DoesComponentAbsorbExplosion");

	Params::MarinerDamageLibrary_DoesComponentAbsorbExplosion Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.DoesComponentHaveVulnerabilityTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::DoesComponentHaveVulnerabilityTag(const class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "DoesComponentHaveVulnerabilityTag");

	Params::MarinerDamageLibrary_DoesComponentHaveVulnerabilityTag Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.IsActorDamageable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::IsActorDamageable(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "IsActorDamageable");

	Params::MarinerDamageLibrary_IsActorDamageable Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDamageLibrary.IsItemInvulnerable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDamageLibrary::IsItemInvulnerable(class AActor* DamagedActor, class AActor* DamageInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDamageLibrary", "IsItemInvulnerable");

	Params::MarinerDamageLibrary_IsItemInvulnerable Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageInstigator = DamageInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerAdded
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     AddedPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceChatWidget::OnGameStatePlayerAdded(class APlayerState* AddedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceChatWidget", "OnGameStatePlayerAdded");

	Params::MarinerVoiceChatWidget_OnGameStatePlayerAdded Parms{};

	Parms.AddedPlayer = AddedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerMangoUserUpdated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceChatWidget::OnGameStatePlayerMangoUserUpdated(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceChatWidget", "OnGameStatePlayerMangoUserUpdated");

	Params::MarinerVoiceChatWidget_OnGameStatePlayerMangoUserUpdated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceChatWidget.OnGameStatePlayerRemoved
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     RemovedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceChatWidget::OnGameStatePlayerRemoved(class APlayerState* RemovedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceChatWidget", "OnGameStatePlayerRemoved");

	Params::MarinerVoiceChatWidget_OnGameStatePlayerRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerDemoGlobals.IsBetaBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDemoGlobals::IsBetaBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDemoGlobals", "IsBetaBuild");

	Params::MarinerDemoGlobals_IsBetaBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerDemoGlobals.IsDemoE3_18
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerDemoGlobals::IsDemoE3_18()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerDemoGlobals", "IsDemoE3_18");

	Params::MarinerDemoGlobals_IsDemoE3_18 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEditableTextBox.ClearError
// (Final, Native, Public, BlueprintCallable)

void UMarinerEditableTextBox::ClearError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "ClearError");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Mariner.MarinerEditableTextBox.OnMarinerEditableTextBoxChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Param_Text                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::OnMarinerEditableTextBoxChangedEvent__DelegateSignature(const class FText& Param_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "OnMarinerEditableTextBoxChangedEvent__DelegateSignature");

	Params::MarinerEditableTextBox_OnMarinerEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Param_Text = std::move(Param_Text);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Mariner.MarinerEditableTextBox.OnMarinerEditableTextBoxCommittedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FText                             Param_Text                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::OnMarinerEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Param_Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "OnMarinerEditableTextBoxCommittedEvent__DelegateSignature");

	Params::MarinerEditableTextBox_OnMarinerEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Param_Text = std::move(Param_Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerEditableTextBox.SetError
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InError                                                (Parm, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetError(const class FText& InError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetError");

	Params::MarinerEditableTextBox_SetError Parms{};

	Parms.InError = std::move(InError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.SetHintText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetHintText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetHintText");

	Params::MarinerEditableTextBox_SetHintText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.SetHovered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHovered                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetHovered(bool bHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetHovered");

	Params::MarinerEditableTextBox_SetHovered Parms{};

	Parms.bHovered = bHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.SetIsPassword
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPassword                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetIsPassword(bool bIsPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetIsPassword");

	Params::MarinerEditableTextBox_SetIsPassword Parms{};

	Parms.bIsPassword = bIsPassword;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.SetIsReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bReadOnly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetIsReadOnly(bool bReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetIsReadOnly");

	Params::MarinerEditableTextBox_SetIsReadOnly Parms{};

	Parms.bReadOnly = bReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UMarinerEditableTextBox::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "SetText");

	Params::MarinerEditableTextBox_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditableTextBox.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerEditableTextBox::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "GetText");

	Params::MarinerEditableTextBox_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEditableTextBox.HasError
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerEditableTextBox::HasError() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextBox", "HasError");

	Params::MarinerEditableTextBox_HasError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEditableTextWidget.OnWidgetTextCommited
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEditableTextWidget::OnWidgetTextCommited(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEditableTextWidget", "OnWidgetTextCommited");

	Params::MarinerEditableTextWidget_OnWidgetTextCommited Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEditorFunctionLibrary.DoesMaterialInstanceStaticBoolParamExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               InstanceToRead                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerEditorFunctionLibrary::DoesMaterialInstanceStaticBoolParamExist(class UMaterialInterface* InstanceToRead, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEditorFunctionLibrary", "DoesMaterialInstanceStaticBoolParamExist");

	Params::MarinerEditorFunctionLibrary_DoesMaterialInstanceStaticBoolParamExist Parms{};

	Parms.InstanceToRead = InstanceToRead;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEditorFunctionLibrary.GetMaterialInstanceStaticBoolParamValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               InstanceToRead                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParameterName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerEditorFunctionLibrary::GetMaterialInstanceStaticBoolParamValue(class UMaterialInterface* InstanceToRead, class FName ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEditorFunctionLibrary", "GetMaterialInstanceStaticBoolParamValue");

	Params::MarinerEditorFunctionLibrary_GetMaterialInstanceStaticBoolParamValue Parms{};

	Parms.InstanceToRead = InstanceToRead;
	Parms.ParameterName = ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEditorFunctionLibrary.GetTexture2DFromPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UMarinerEditorFunctionLibrary::GetTexture2DFromPath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEditorFunctionLibrary", "GetTexture2DFromPath");

	Params::MarinerEditorFunctionLibrary_GetTexture2DFromPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInventoryBaseMenu.EndVisualization
// (Event, Protected, BlueprintEvent)

void UMarinerInventoryBaseMenu::EndVisualization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "EndVisualization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerInventoryBaseMenu.OnButtonAdded
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            IconInstance                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemLoadResponse*                Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnButtonAdded(class UMarinerLayeredButton* IconInstance, class UItemLoadResponse* Data, bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnButtonAdded");

	Params::MarinerInventoryBaseMenu_OnButtonAdded Parms{};

	Parms.IconInstance = IconInstance;
	Parms.Data = Data;
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnButtonHovered
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnButtonHovered");

	Params::MarinerInventoryBaseMenu_OnButtonHovered Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnButtonSelected
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            IconInstance                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnButtonSelected(class UMarinerLayeredButton* IconInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnButtonSelected");

	Params::MarinerInventoryBaseMenu_OnButtonSelected Parms{};

	Parms.IconInstance = IconInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnButtonUnhovered
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            IconInstance                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnButtonUnhovered(class UMarinerLayeredButton* IconInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnButtonUnhovered");

	Params::MarinerInventoryBaseMenu_OnButtonUnhovered Parms{};

	Parms.IconInstance = IconInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnButtonViewed
// (Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            IconInstance                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnButtonViewed(class UMarinerLayeredButton* IconInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnButtonViewed");

	Params::MarinerInventoryBaseMenu_OnButtonViewed Parms{};

	Parms.IconInstance = IconInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnEquipFailed
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnEquipFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnEquipFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnEquipProfileRefreshComplete
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnEquipProfileRefreshComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnEquipProfileRefreshComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnEquipSucceeded
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnEquipSucceeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnEquipSucceeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnInventoryChanged
// (Final, Native, Protected)

void UMarinerInventoryBaseMenu::OnInventoryChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnInventoryChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnLoadFailed
// (Final, Native, Protected)

void UMarinerInventoryBaseMenu::OnLoadFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnLoadFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnLoadFinished
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedDataResponse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnLoadFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnLoadFinished");

	Params::MarinerInventoryBaseMenu_OnLoadFinished Parms{};

	Parms.LoadedDataResponse = std::move(LoadedDataResponse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnOfferStateChanged
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<struct FMangoPurchaseOffer>      OffersStarting                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMangoPurchaseOffer>      OffersEnding                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnOfferStateChanged(const TArray<struct FMangoPurchaseOffer>& OffersStarting, const TArray<struct FMangoPurchaseOffer>& OffersEnding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnOfferStateChanged");

	Params::MarinerInventoryBaseMenu_OnOfferStateChanged Parms{};

	Parms.OffersStarting = std::move(OffersStarting);
	Parms.OffersEnding = std::move(OffersEnding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnProfileChanged
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnProfileChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnProfileChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnProfileItemEquipped
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerCMSItemDataAsset*         Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnProfileItemEquipped(class UMarinerCMSItemDataAsset* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnProfileItemEquipped");

	Params::MarinerInventoryBaseMenu_OnProfileItemEquipped Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerInventoryBaseMenu.OnPurchaseClosed
// (Final, Native, Protected)

void UMarinerInventoryBaseMenu::OnPurchaseClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnPurchaseClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnPurchaseFlowComplete
// (Final, Native, Protected)
// Parameters:
// bool                                    bOfferPurchased                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnPurchaseFlowComplete(bool bOfferPurchased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnPurchaseFlowComplete");

	Params::MarinerInventoryBaseMenu_OnPurchaseFlowComplete Parms{};

	Parms.bOfferPurchased = bOfferPurchased;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnSkinLoadFinished
// (Final, Native, Protected, HasOutParams)
// Parameters:
// TArray<class UFrontendSkinUILoadResponse*>LoadedDataResponse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::OnSkinLoadFinished(const TArray<class UFrontendSkinUILoadResponse*>& LoadedDataResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnSkinLoadFinished");

	Params::MarinerInventoryBaseMenu_OnSkinLoadFinished Parms{};

	Parms.LoadedDataResponse = std::move(LoadedDataResponse);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnUnequipSucceeded
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnUnequipSucceeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnUnequipSucceeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.OnWorldNoLongerValid
// (Native, Protected)

void UMarinerInventoryBaseMenu::OnWorldNoLongerValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "OnWorldNoLongerValid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.PopulateOwnedItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UItemLoadResponse*                LoadResponse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::PopulateOwnedItem(class UItemLoadResponse* LoadResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "PopulateOwnedItem");

	Params::MarinerInventoryBaseMenu_PopulateOwnedItem Parms{};

	Parms.LoadResponse = LoadResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerInventoryBaseMenu.PopulateUnlockPreview
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UItemLoadResponse*                LoadResponse                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCMSItemDataAsset*         DataAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::PopulateUnlockPreview(class UItemLoadResponse* LoadResponse, class UMarinerCMSItemDataAsset* DataAsset, class UMarinerPlayableCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "PopulateUnlockPreview");

	Params::MarinerInventoryBaseMenu_PopulateUnlockPreview Parms{};

	Parms.LoadResponse = LoadResponse;
	Parms.DataAsset = DataAsset;
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerInventoryBaseMenu.SetCurrentCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        InCurrentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacterSpawner*         InCharacterSpawner                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::SetCurrentCharacter(class UMarinerPlayableCharacter* InCurrentCharacter, class AMarinerCharacterSpawner* InCharacterSpawner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "SetCurrentCharacter");

	Params::MarinerInventoryBaseMenu_SetCurrentCharacter Parms{};

	Parms.InCurrentCharacter = InCurrentCharacter;
	Parms.InCharacterSpawner = InCharacterSpawner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.SetMenuItemType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoItemType                          InNewType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::SetMenuItemType(EMangoItemType InNewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "SetMenuItemType");

	Params::MarinerInventoryBaseMenu_SetMenuItemType Parms{};

	Parms.InNewType = InNewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInventoryBaseMenu.ViewBlastPass
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::ViewBlastPass(int32 Tier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "ViewBlastPass");

	Params::MarinerInventoryBaseMenu_ViewBlastPass Parms{};

	Parms.Tier = Tier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerInventoryBaseMenu.VisualizeSelectedButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMarinerItemLoadResponseButton*   ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInventoryBaseMenu::VisualizeSelectedButton(class UMarinerItemLoadResponseButton* ButtonInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "VisualizeSelectedButton");

	Params::MarinerInventoryBaseMenu_VisualizeSelectedButton Parms{};

	Parms.ButtonInstance = ButtonInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerInventoryBaseMenu.GetCharacterSpawner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacterSpawner*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacterSpawner* UMarinerInventoryBaseMenu::GetCharacterSpawner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "GetCharacterSpawner");

	Params::MarinerInventoryBaseMenu_GetCharacterSpawner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInventoryBaseMenu.GetCurrentCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerInventoryBaseMenu::GetCurrentCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInventoryBaseMenu", "GetCurrentCharacter");

	Params::MarinerInventoryBaseMenu_GetCurrentCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEmoteCustomizationMenu.OnCategorySelected
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEmoteCustomizationMenu::OnCategorySelected(class UMarinerLayeredButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteCustomizationMenu", "OnCategorySelected");

	Params::MarinerEmoteCustomizationMenu_OnCategorySelected Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEmoteMenuSlot.Clear
// (Final, Native, Public, BlueprintCallable)

void UMarinerEmoteMenuSlot::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteMenuSlot", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEmoteMenuSlot.SetEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UItemLoadResponse*                InLoadResponse                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEmoteMenuSlot::SetEmote(class UItemLoadResponse* InLoadResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteMenuSlot", "SetEmote");

	Params::MarinerEmoteMenuSlot_SetEmote Parms{};

	Parms.InLoadResponse = InLoadResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEmoteMenuSlot.SetEquippableStateEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEmoteMenuSlot::SetEquippableStateEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteMenuSlot", "SetEquippableStateEnabled");

	Params::MarinerEmoteMenuSlot_SetEquippableStateEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEmoteMenuSlot.GetLoadResponse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UItemLoadResponse*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemLoadResponse* UMarinerEmoteMenuSlot::GetLoadResponse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteMenuSlot", "GetLoadResponse");

	Params::MarinerEmoteMenuSlot_GetLoadResponse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEmoteMenuSlot.GetSlottedItemId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerEmoteMenuSlot::GetSlottedItemId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmoteMenuSlot", "GetSlottedItemId");

	Params::MarinerEmoteMenuSlot_GetSlottedItemId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEmptyItem.SetEmptyItemDesiredSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DesiredWidth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DesiredHeight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerEmptyItem::SetEmptyItemDesiredSize(int32 DesiredWidth, int32 DesiredHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEmptyItem", "SetEmptyItemDesiredSize");

	Params::MarinerEmptyItem_SetEmptyItemDesiredSize Parms{};

	Parms.DesiredWidth = DesiredWidth;
	Parms.DesiredHeight = DesiredHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEquipItemToAllCharacters.EquipItemToAllCharacters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerCMSItemDataAsset*> Param_ItemsToEquip                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerEquipItemToAllCharacters* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerEquipItemToAllCharacters* UMarinerEquipItemToAllCharacters::EquipItemToAllCharacters(const class UObject* Param_WorldContextObject, const TArray<class UMarinerCMSItemDataAsset*>& Param_ItemsToEquip, bool bRanked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerEquipItemToAllCharacters", "EquipItemToAllCharacters");

	Params::MarinerEquipItemToAllCharacters_EquipItemToAllCharacters Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Param_ItemsToEquip = std::move(Param_ItemsToEquip);
	Parms.bRanked = bRanked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerEquipItemToAllCharacters.OnProfileUpdated
// (Final, Native, Private)

void UMarinerEquipItemToAllCharacters::OnProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipItemToAllCharacters", "OnProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerEquipItemToAllCharacters.OnProfileUpdateFailed
// (Final, Native, Private)

void UMarinerEquipItemToAllCharacters::OnProfileUpdateFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerEquipItemToAllCharacters", "OnProfileUpdateFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerShockwave.AuthorityManuallyAddIgnoredDamageActor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerShockwave::AuthorityManuallyAddIgnoredDamageActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerShockwave", "AuthorityManuallyAddIgnoredDamageActor");

	Params::MarinerShockwave_AuthorityManuallyAddIgnoredDamageActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerShockwave.FireShockwave
// (Final, Native, Public, BlueprintCallable)

void AMarinerShockwave::FireShockwave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerShockwave", "FireShockwave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerShockwave.OnRep_HasShockwaveFired
// (Final, Native, Protected)

void AMarinerShockwave::OnRep_HasShockwaveFired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerShockwave", "OnRep_HasShockwaveFired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerShockwave.OnShockwaveExpired
// (Final, Native, Protected)

void AMarinerShockwave::OnShockwaveExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerShockwave", "OnShockwaveExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastArenaBounds.IsPointInside2DBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          PointToTest                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistToClosestSurface                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPointOnClosestSurface                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutSurfaceNormal                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerFastArenaBounds::IsPointInside2DBounds(const struct FVector& PointToTest, float* OutDistToClosestSurface, struct FVector* OutPointOnClosestSurface, struct FVector* OutSurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastArenaBounds", "IsPointInside2DBounds");

	Params::MarinerFastArenaBounds_IsPointInside2DBounds Parms{};

	Parms.PointToTest = std::move(PointToTest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDistToClosestSurface != nullptr)
		*OutDistToClosestSurface = Parms.OutDistToClosestSurface;

	if (OutPointOnClosestSurface != nullptr)
		*OutPointOnClosestSurface = std::move(Parms.OutPointOnClosestSurface);

	if (OutSurfaceNormal != nullptr)
		*OutSurfaceNormal = std::move(Parms.OutSurfaceNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastArenaBounds.IsPointInsideArenaBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          PointToTest                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistToClosestSurface                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPointOnClosestSurface                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutSurfaceNormal                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerFastArenaBounds::IsPointInsideArenaBounds(const struct FVector& PointToTest, float* OutDistToClosestSurface, struct FVector* OutPointOnClosestSurface, struct FVector* OutSurfaceNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastArenaBounds", "IsPointInsideArenaBounds");

	Params::MarinerFastArenaBounds_IsPointInsideArenaBounds Parms{};

	Parms.PointToTest = std::move(PointToTest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDistToClosestSurface != nullptr)
		*OutDistToClosestSurface = Parms.OutDistToClosestSurface;

	if (OutPointOnClosestSurface != nullptr)
		*OutPointOnClosestSurface = std::move(Parms.OutPointOnClosestSurface);

	if (OutSurfaceNormal != nullptr)
		*OutSurfaceNormal = std::move(Parms.OutSurfaceNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastArenaBounds.MulticastKnockout
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int8                                    KnockedOutTeamIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              Position                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        Normal                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerFastArenaBounds::MulticastKnockout(int8 KnockedOutTeamIndex, const struct FVector_NetQuantize& Position, const struct FVector_NetQuantizeNormal& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastArenaBounds", "MulticastKnockout");

	Params::MarinerFastArenaBounds_MulticastKnockout Parms{};

	Parms.KnockedOutTeamIndex = KnockedOutTeamIndex;
	Parms.Position = std::move(Position);
	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFastArenaBounds.TriggerMaterialSort
// (Final, Native, Protected)

void AMarinerFastArenaBounds::TriggerMaterialSort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastArenaBounds", "TriggerMaterialSort");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.OnEquiped
// (Event, Public, BlueprintEvent)

void AMarinerWeapon::OnEquiped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "OnEquiped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerWeapon.OnMontageBlendingOutStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerWeapon::OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "OnMontageBlendingOutStarted");

	Params::MarinerWeapon_OnMontageBlendingOutStarted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.OnMontageEnded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerWeapon::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "OnMontageEnded");

	Params::MarinerWeapon_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.OnMontageStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerWeapon::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "OnMontageStarted");

	Params::MarinerWeapon_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.OnRep_MyPawn
// (Final, Native, Protected)

void AMarinerWeapon::OnRep_MyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "OnRep_MyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.PlayMarinerWeaponMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerWeaponMontage*            WeaponMontage                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartSectionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalMontageListener                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerWeapon::PlayMarinerWeaponMontage(const class UMarinerWeaponMontage* WeaponMontage, float PlayRate, class FName StartSectionName, class UObject* OptionalMontageListener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "PlayMarinerWeaponMontage");

	Params::MarinerWeapon_PlayMarinerWeaponMontage Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.PlayRate = PlayRate;
	Parms.StartSectionName = StartSectionName;
	Parms.OptionalMontageListener = OptionalMontageListener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.StopMarinerWeaponMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerWeaponMontage*            WeaponMontage                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerWeapon::StopMarinerWeaponMontage(float BlendOutTime, const class UMarinerWeaponMontage* WeaponMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "StopMarinerWeaponMontage");

	Params::MarinerWeapon_StopMarinerWeaponMontage Parms{};

	Parms.BlendOutTime = BlendOutTime;
	Parms.WeaponMontage = WeaponMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeapon.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerWeaponState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerWeaponState AMarinerWeapon::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "GetCurrentState");

	Params::MarinerWeapon_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.GetMuzzleDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleAttachPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerWeapon::GetMuzzleDirection(class FName MuzzleAttachPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "GetMuzzleDirection");

	Params::MarinerWeapon_GetMuzzleDirection Parms{};

	Parms.MuzzleAttachPoint = MuzzleAttachPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.GetMuzzleLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MuzzleAttachPoint                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerWeapon::GetMuzzleLocation(class FName MuzzleAttachPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "GetMuzzleLocation");

	Params::MarinerWeapon_GetMuzzleLocation Parms{};

	Parms.MuzzleAttachPoint = MuzzleAttachPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.GetPawnOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerWeapon::GetPawnOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "GetPawnOwner");

	Params::MarinerWeapon_GetPawnOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.GetWeaponMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AMarinerWeapon::GetWeaponMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "GetWeaponMesh");

	Params::MarinerWeapon_GetWeaponMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.IsFirstPerson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerWeapon::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "IsFirstPerson");

	Params::MarinerWeapon_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWeapon.IsReloading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerWeapon::IsReloading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeapon", "IsReloading");

	Params::MarinerWeapon_IsReloading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinDataAsset.GetSkinAssetAsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMarinerSkinDataAsset>Asset                                                  (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerSkinDataAsset::GetSkinAssetAsString(const TSoftObjectPtr<class UMarinerSkinDataAsset>& Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerSkinDataAsset", "GetSkinAssetAsString");

	Params::MarinerSkinDataAsset_GetSkinAssetAsString Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FastCollisionManager.GetColliders
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerFastCollisionCollectionFlags    Collection                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UMarinerFastCollisionComponent*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UMarinerFastCollisionComponent*> UFastCollisionManager::GetColliders(EMarinerFastCollisionCollectionFlags Collection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastCollisionManager", "GetColliders");

	Params::FastCollisionManager_GetColliders Parms{};

	Parms.Collection = Collection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_MatSwap.MatSwapCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               MatSwappingMaterial                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaitingToMatSwapDuration                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MatSwapDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRevertMatOnThrowItem                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRevertMatOnDropItem                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRevertMatOnCatchItem                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_MatSwap*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_MatSwap* UMarinerTask_MatSwap::MatSwapCharacter(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UMaterialInterface* MatSwappingMaterial, float WaitingToMatSwapDuration, float MatSwapDuration, bool bRevertMatOnThrowItem, bool bRevertMatOnDropItem, bool bRevertMatOnCatchItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_MatSwap", "MatSwapCharacter");

	Params::MarinerTask_MatSwap_MatSwapCharacter Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.MatSwappingMaterial = MatSwappingMaterial;
	Parms.WaitingToMatSwapDuration = WaitingToMatSwapDuration;
	Parms.MatSwapDuration = MatSwapDuration;
	Parms.bRevertMatOnThrowItem = bRevertMatOnThrowItem;
	Parms.bRevertMatOnDropItem = bRevertMatOnDropItem;
	Parms.bRevertMatOnCatchItem = bRevertMatOnCatchItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_MatSwap.MatSwapServer
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void UMarinerTask_MatSwap::MatSwapServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "MatSwapServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.OnItemCaught_Interrupt
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_MatSwap::OnItemCaught_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "OnItemCaught_Interrupt");

	Params::MarinerTask_MatSwap_OnItemCaught_Interrupt Parms{};

	Parms.Character = Character;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.OnItemCaught_MatSwap
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_MatSwap::OnItemCaught_MatSwap(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "OnItemCaught_MatSwap");

	Params::MarinerTask_MatSwap_OnItemCaught_MatSwap Parms{};

	Parms.Character = Character;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.OnItemDropped_Interrupt
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_MatSwap::OnItemDropped_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "OnItemDropped_Interrupt");

	Params::MarinerTask_MatSwap_OnItemDropped_Interrupt Parms{};

	Parms.Character = Character;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.OnItemRelease_RevertMat
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_MatSwap::OnItemRelease_RevertMat(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "OnItemRelease_RevertMat");

	Params::MarinerTask_MatSwap_OnItemRelease_RevertMat Parms{};

	Parms.Character = Character;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.OnItemThrown_Interrupt
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_MatSwap::OnItemThrown_Interrupt(class AMarinerCharacter* Character, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "OnItemThrown_Interrupt");

	Params::MarinerTask_MatSwap_OnItemThrown_Interrupt Parms{};

	Parms.Character = Character;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.RevertMatServer
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void UMarinerTask_MatSwap::RevertMatServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "RevertMatServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_MatSwap.GetInterruptState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerMatSwapInterrupt                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerMatSwapInterrupt UMarinerTask_MatSwap::GetInterruptState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "GetInterruptState");

	Params::MarinerTask_MatSwap_GetInterruptState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_MatSwap.GetMatSwapState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerMatSwapState                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerMatSwapState UMarinerTask_MatSwap::GetMatSwapState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_MatSwap", "GetMatSwapState");

	Params::MarinerTask_MatSwap_GetMatSwapState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastSphereComponent.DoProjectileSweep
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    bIgnoreDamageableHitsBehind                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastSphereComponent::DoProjectileSweep(bool bIgnoreDamageableHitsBehind, const struct FVector& Start, const struct FVector& End, struct FHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastSphereComponent", "DoProjectileSweep");

	Params::MarinerFastSphereComponent_DoProjectileSweep Parms{};

	Parms.bIgnoreDamageableHitsBehind = bIgnoreDamageableHitsBehind;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastSphereComponent.SweepAgainstFastCollider
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFastCollisionComponent*   Other                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastSphereComponent::SweepAgainstFastCollider(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastSphereComponent", "SweepAgainstFastCollider");

	Params::MarinerFastSphereComponent_SweepAgainstFastCollider Parms{};

	Parms.Other = Other;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastSphereComponent.SweepCollideWithBox
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFastCollisionComponent*   Other                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastSphereComponent::SweepCollideWithBox(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastSphereComponent", "SweepCollideWithBox");

	Params::MarinerFastSphereComponent_SweepCollideWithBox Parms{};

	Parms.Other = Other;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastSphereComponent.SweepCollideWithCapsule
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFastCollisionComponent*   Other                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastSphereComponent::SweepCollideWithCapsule(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastSphereComponent", "SweepCollideWithCapsule");

	Params::MarinerFastSphereComponent_SweepCollideWithCapsule Parms{};

	Parms.Other = Other;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFastSphereComponent.SweepCollideWithSphere
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFastCollisionComponent*   Other                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionPoint                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerFastSphereComponent::SweepCollideWithSphere(const class UMarinerFastCollisionComponent* Other, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FVector* OutCollisionPoint, struct FVector* OutCollisionNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFastSphereComponent", "SweepCollideWithSphere");

	Params::MarinerFastSphereComponent_SweepCollideWithSphere Parms{};

	Parms.Other = Other;
	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCollisionPoint != nullptr)
		*OutCollisionPoint = std::move(Parms.OutCollisionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileMoveComponent.GetLobDistance
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerProjectileMoveComponent::GetLobDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "GetLobDistance");

	Params::MarinerProjectileMoveComponent_GetLobDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileMoveComponent.HandleBounceCount
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerProjectileMoveComponent::HandleBounceCount(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "HandleBounceCount");

	Params::MarinerProjectileMoveComponent_HandleBounceCount Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.IsTargetValidForHoming
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PotentialHomingTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerProjectileMoveComponent::IsTargetValidForHoming(class AActor* PotentialHomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "IsTargetValidForHoming");

	Params::MarinerProjectileMoveComponent_IsTargetValidForHoming Parms{};

	Parms.PotentialHomingTarget = PotentialHomingTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileMoveComponent.OnRep_StickToObjectData
// (Final, Native, Protected)

void UMarinerProjectileMoveComponent::OnRep_StickToObjectData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "OnRep_StickToObjectData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.ResetBounceDataOnEnabled
// (Final, Native, Public)

void UMarinerProjectileMoveComponent::ResetBounceDataOnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "ResetBounceDataOnEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.SetHomingPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerHomingPolicy                    NewHomingPolicy                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProjectileMoveComponent::SetHomingPolicy(EMarinerHomingPolicy NewHomingPolicy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "SetHomingPolicy");

	Params::MarinerProjectileMoveComponent_SetHomingPolicy Parms{};

	Parms.NewHomingPolicy = NewHomingPolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.SetMaxRotationalSpeedInDegrees
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMaxRotationalSpeedInDegrees                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProjectileMoveComponent::SetMaxRotationalSpeedInDegrees(float NewMaxRotationalSpeedInDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "SetMaxRotationalSpeedInDegrees");

	Params::MarinerProjectileMoveComponent_SetMaxRotationalSpeedInDegrees Parms{};

	Parms.NewMaxRotationalSpeedInDegrees = NewMaxRotationalSpeedInDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.SetMinRotationalSpeedInDegrees
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMinRotationalSpeedInDegrees                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProjectileMoveComponent::SetMinRotationalSpeedInDegrees(float NewMinRotationalSpeedInDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "SetMinRotationalSpeedInDegrees");

	Params::MarinerProjectileMoveComponent_SetMinRotationalSpeedInDegrees Parms{};

	Parms.NewMinRotationalSpeedInDegrees = NewMinRotationalSpeedInDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.SetTurnThresholdBeforeUsingUpVector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTurnThresholdBeforeUsingUpVector                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProjectileMoveComponent::SetTurnThresholdBeforeUsingUpVector(float NewTurnThresholdBeforeUsingUpVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "SetTurnThresholdBeforeUsingUpVector");

	Params::MarinerProjectileMoveComponent_SetTurnThresholdBeforeUsingUpVector Parms{};

	Parms.NewTurnThresholdBeforeUsingUpVector = NewTurnThresholdBeforeUsingUpVector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileMoveComponent.TrySetHomingTargetComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InHomingTargetComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerProjectileMoveComponent::TrySetHomingTargetComponent(class USceneComponent* InHomingTargetComponent, class FName InSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "TrySetHomingTargetComponent");

	Params::MarinerProjectileMoveComponent_TrySetHomingTargetComponent Parms{};

	Parms.InHomingTargetComponent = InHomingTargetComponent;
	Parms.InSocketName = InSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileMoveComponent.DidLastBounceAffectSpeed
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerProjectileMoveComponent::DidLastBounceAffectSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileMoveComponent", "DidLastBounceAffectSpeed");

	Params::MarinerProjectileMoveComponent_DidLastBounceAffectSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFluxProjectileMoveComponent.OnOwnerActorHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerFluxProjectileMoveComponent::OnOwnerActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFluxProjectileMoveComponent", "OnOwnerActorHit");

	Params::MarinerFluxProjectileMoveComponent_OnOwnerActorHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsFloatingPlatform.BombTrialPlatformMovement
// (Final, Native, Public)
// Parameters:
// float                                   TimeSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerTrialsFloatingPlatform::BombTrialPlatformMovement(float TimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsFloatingPlatform", "BombTrialPlatformMovement");

	Params::MarinerTrialsFloatingPlatform_BombTrialPlatformMovement Parms{};

	Parms.TimeSeconds = TimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsFloatingPlatform.OnEnterBombTrialStageChange
// (Final, Native, Public, BlueprintCallable)

void AMarinerTrialsFloatingPlatform::OnEnterBombTrialStageChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsFloatingPlatform", "OnEnterBombTrialStageChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsFloatingPlatform.OnMeshComponentHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerTrialsFloatingPlatform::OnMeshComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsFloatingPlatform", "OnMeshComponentHit");

	Params::MarinerTrialsFloatingPlatform_OnMeshComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthorityResetMovement
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerFollowSplineMovement::AuthorityResetMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthorityResetMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthorityReverseMovementDirection
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerFollowSplineMovement::AuthorityReverseMovementDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthorityReverseMovementDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetIsMoving
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsMoving                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetIsMoving(bool bInIsMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetIsMoving");

	Params::MarinerFollowSplineMovement_AuthoritySetIsMoving Parms{};

	Parms.bInIsMoving = bInIsMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMinimumProgressRatioUpdateFrequencyTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRatioUpdateFrequency                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetMinimumProgressRatioUpdateFrequencyTime(float NewRatioUpdateFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetMinimumProgressRatioUpdateFrequencyTime");

	Params::MarinerFollowSplineMovement_AuthoritySetMinimumProgressRatioUpdateFrequencyTime Parms{};

	Parms.NewRatioUpdateFrequency = NewRatioUpdateFrequency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMovementDirection
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerFollowSplineDirection           NewMovementDirection                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetMovementDirection(EMarinerFollowSplineDirection NewMovementDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetMovementDirection");

	Params::MarinerFollowSplineMovement_AuthoritySetMovementDirection Parms{};

	Parms.NewMovementDirection = NewMovementDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetMovementRotationSource
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerFollowSplineRotationSource      NewRotationSource                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetMovementRotationSource(EMarinerFollowSplineRotationSource NewRotationSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetMovementRotationSource");

	Params::MarinerFollowSplineMovement_AuthoritySetMovementRotationSource Parms{};

	Parms.NewRotationSource = NewRotationSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetProgressRatio
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewProgressRatio                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetProgressRatio(float NewProgressRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetProgressRatio");

	Params::MarinerFollowSplineMovement_AuthoritySetProgressRatio Parms{};

	Parms.NewProgressRatio = NewProgressRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetProgressRatioUpdateFrequency
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewUpdateFrequency                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetProgressRatioUpdateFrequency(int32 NewUpdateFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetProgressRatioUpdateFrequency");

	Params::MarinerFollowSplineMovement_AuthoritySetProgressRatioUpdateFrequency Parms{};

	Parms.NewUpdateFrequency = NewUpdateFrequency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetSplineToFollow
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 NewSplineToFollow                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetSplineToFollow(class USplineComponent* NewSplineToFollow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetSplineToFollow");

	Params::MarinerFollowSplineMovement_AuthoritySetSplineToFollow Parms{};

	Parms.NewSplineToFollow = NewSplineToFollow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.AuthoritySetSplineTravelDuration
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDuration                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::AuthoritySetSplineTravelDuration(const float NewDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthoritySetSplineTravelDuration");

	Params::MarinerFollowSplineMovement_AuthoritySetSplineTravelDuration Parms{};

	Parms.NewDuration = NewDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityReachedEndOfSplineDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerFollowSplineDirection           Param_MovementDirection                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnAuthorityReachedEndOfSplineDelegate__DelegateSignature(class AActor* MovingActor, EMarinerFollowSplineDirection Param_MovementDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnAuthorityReachedEndOfSplineDelegate__DelegateSignature");

	Params::MarinerFollowSplineMovement_OnAuthorityReachedEndOfSplineDelegate__DelegateSignature Parms{};

	Parms.MovingActor = MovingActor;
	Parms.Param_MovementDirection = Param_MovementDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerFollowSplineDirection           Param_MovementDirection                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature(class AActor* MovingActor, EMarinerFollowSplineDirection Param_MovementDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature");

	Params::MarinerFollowSplineMovement_OnAuthorityStartedMovingAlongSplineDelegate__DelegateSignature Parms{};

	Parms.MovingActor = MovingActor;
	Parms.Param_MovementDirection = Param_MovementDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProgressRatioAtTimeOfCollision                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       BlockingHit                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature(class AActor* MovingActor, float ProgressRatioAtTimeOfCollision, const struct FHitResult& BlockingHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature");

	Params::MarinerFollowSplineMovement_OnAuthorityStoppedFollowingSplineDueToCollision__DelegateSignature Parms{};

	Parms.MovingActor = MovingActor;
	Parms.ProgressRatioAtTimeOfCollision = ProgressRatioAtTimeOfCollision;
	Parms.BlockingHit = std::move(BlockingHit);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Mariner.MarinerFollowSplineMovement.OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProgressRatioAtTimeOfStop                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature(class AActor* MovingActor, float ProgressRatioAtTimeOfStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature");

	Params::MarinerFollowSplineMovement_OnAuthorityStoppedMovingAlongSplineDelegate__DelegateSignature Parms{};

	Parms.MovingActor = MovingActor;
	Parms.ProgressRatioAtTimeOfStop = ProgressRatioAtTimeOfStop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerFollowSplineMovement.OnRep_ReplicatedAuthoritativeProgressRatio
// (Final, Native, Protected)
// Parameters:
// float                                   PreviousReplicatedAuthoritativeProgressRatio           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnRep_ReplicatedAuthoritativeProgressRatio(float PreviousReplicatedAuthoritativeProgressRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnRep_ReplicatedAuthoritativeProgressRatio");

	Params::MarinerFollowSplineMovement_OnRep_ReplicatedAuthoritativeProgressRatio Parms{};

	Parms.PreviousReplicatedAuthoritativeProgressRatio = PreviousReplicatedAuthoritativeProgressRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerFollowSplineMovement.OnRep_SplineToFollow
// (Final, Native, Protected)

void UMarinerFollowSplineMovement::OnRep_SplineToFollow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnRep_SplineToFollow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Mariner.MarinerFollowSplineMovement.OnSetSplineToFollowComponentSignature__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class USplineComponent*                 SplineToFollowComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFollowSplineMovement::OnSetSplineToFollowComponentSignature__DelegateSignature(class USplineComponent* SplineToFollowComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "OnSetSplineToFollowComponentSignature__DelegateSignature");

	Params::MarinerFollowSplineMovement_OnSetSplineToFollowComponentSignature__DelegateSignature Parms{};

	Parms.SplineToFollowComponent = SplineToFollowComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerFollowSplineMovement.AuthorityGetMinimumProgressRatioUpdateFrequencyTime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerFollowSplineMovement::AuthorityGetMinimumProgressRatioUpdateFrequencyTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthorityGetMinimumProgressRatioUpdateFrequencyTime");

	Params::MarinerFollowSplineMovement_AuthorityGetMinimumProgressRatioUpdateFrequencyTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFollowSplineMovement.AuthorityGetProgressRatioUpdateFrequency
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerFollowSplineMovement::AuthorityGetProgressRatioUpdateFrequency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFollowSplineMovement", "AuthorityGetProgressRatioUpdateFrequency");

	Params::MarinerFollowSplineMovement_AuthorityGetProgressRatioUpdateFrequency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerFriendsPagedVerticalBox.OnSocialWidgetOpened
// (Final, Native, Private)
// Parameters:
// bool                                    bOpen                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerFriendsPagedVerticalBox::OnSocialWidgetOpened(const bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerFriendsPagedVerticalBox", "OnSocialWidgetOpened");

	Params::MarinerFriendsPagedVerticalBox_OnSocialWidgetOpened Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_SpawnProjectileBloomingSpread.SpawnProjectile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpreadDegrees                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnProjectileBloomingSpread*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnProjectileBloomingSpread* UMarinerTask_SpawnProjectileBloomingSpread::SpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float SpreadDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnProjectileBloomingSpread", "SpawnProjectile");

	Params::MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.SpreadDegrees = SpreadDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnProjectileBloomingSpread.SpawnProjectileWithPool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpreadDegrees                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnProjectileBloomingSpread*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnProjectileBloomingSpread* UMarinerTask_SpawnProjectileBloomingSpread::SpawnProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float SpreadDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnProjectileBloomingSpread", "SpawnProjectileWithPool");

	Params::MarinerTask_SpawnProjectileBloomingSpread_SpawnProjectileWithPool Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.SpreadDegrees = SpreadDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.FindPerspective
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerCameraPerspective        OutPerspective                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameGlobals::FindPerspective(const class FName& Key, struct FMarinerCameraPerspective* OutPerspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "FindPerspective");

	Params::MarinerGameGlobals_FindPerspective Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPerspective != nullptr)
		*OutPerspective = std::move(Parms.OutPerspective);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetDefaultItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCMSItemDataAsset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCMSItemDataAsset* UMarinerGameGlobals::GetDefaultItem(EMangoItemType ItemType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetDefaultItem");

	Params::MarinerGameGlobals_GetDefaultItem Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetDefaultMegaBlastTrail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMegaBlastDataAsset*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMegaBlastDataAsset* UMarinerGameGlobals::GetDefaultMegaBlastTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetDefaultMegaBlastTrail");

	Params::MarinerGameGlobals_GetDefaultMegaBlastTrail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetDefaultReturnTrail
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerReturnTrailDataAsset*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerReturnTrailDataAsset* UMarinerGameGlobals::GetDefaultReturnTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetDefaultReturnTrail");

	Params::MarinerGameGlobals_GetDefaultReturnTrail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetEnableRedReticle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameGlobals::GetEnableRedReticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetEnableRedReticle");

	Params::MarinerGameGlobals_GetEnableRedReticle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetRandomBotMegaBlastTrail
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMegaBlastDataAsset*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMegaBlastDataAsset* UMarinerGameGlobals::GetRandomBotMegaBlastTrail(int32* OutSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetRandomBotMegaBlastTrail");

	Params::MarinerGameGlobals_GetRandomBotMegaBlastTrail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetRandomBotReturnTrail
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerReturnTrailDataAsset*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerReturnTrailDataAsset* UMarinerGameGlobals::GetRandomBotReturnTrail(int32* OutSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetRandomBotReturnTrail");

	Params::MarinerGameGlobals_GetRandomBotReturnTrail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetRandomBotTotemPartArrayLength
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           OutSelectedIndexList                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerGameGlobals::GetRandomBotTotemPartArrayLength(TArray<int32>* OutSelectedIndexList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetRandomBotTotemPartArrayLength");

	Params::MarinerGameGlobals_GetRandomBotTotemPartArrayLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedIndexList != nullptr)
		*OutSelectedIndexList = std::move(Parms.OutSelectedIndexList);
}


// Function Mariner.MarinerGameGlobals.SetCurrentDetailLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerParticleSystemDetailLevel       InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameGlobals::SetCurrentDetailLevel(EMarinerParticleSystemDetailLevel InLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "SetCurrentDetailLevel");

	Params::MarinerGameGlobals_SetCurrentDetailLevel Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameGlobals.GetAllBotData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UMarinerPlayableCharacter*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UMarinerPlayableCharacter*> UMarinerGameGlobals::GetAllBotData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetAllBotData");

	Params::MarinerGameGlobals_GetAllBotData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetAllPlayableCharactersData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UMarinerPlayableCharacter*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class UMarinerPlayableCharacter*> UMarinerGameGlobals::GetAllPlayableCharactersData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetAllPlayableCharactersData");

	Params::MarinerGameGlobals_GetAllPlayableCharactersData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCharacterDataByClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetCharacterDataByClass(TSubclassOf<class AMarinerCharacter> Param_Class) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCharacterDataByClass");

	Params::MarinerGameGlobals_GetCharacterDataByClass Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCharacterDataByEngineID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           EngineId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetCharacterDataByEngineID(const class FString& EngineId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCharacterDataByEngineID");

	Params::MarinerGameGlobals_GetCharacterDataByEngineID Parms{};

	Parms.EngineId = std::move(EngineId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCharacterDataByItemRestriction
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetCharacterDataByItemRestriction(const class UObject* WorldContextObject, const struct FMangoItem& Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCharacterDataByItemRestriction");

	Params::MarinerGameGlobals_GetCharacterDataByItemRestriction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCharacterDataBySoftClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             Param_Class                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetCharacterDataBySoftClass(TSoftClassPtr<class UClass> Param_Class) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCharacterDataBySoftClass");

	Params::MarinerGameGlobals_GetCharacterDataBySoftClass Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCharacterDataForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetCharacterDataForPlayer(class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCharacterDataForPlayer");

	Params::MarinerGameGlobals_GetCharacterDataForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetComponentAbsorbsExplosionTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UMarinerGameGlobals::GetComponentAbsorbsExplosionTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetComponentAbsorbsExplosionTag");

	Params::MarinerGameGlobals_GetComponentAbsorbsExplosionTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetComponentInvulnerableTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UMarinerGameGlobals::GetComponentInvulnerableTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetComponentInvulnerableTag");

	Params::MarinerGameGlobals_GetComponentInvulnerableTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetCurrentDetailLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerParticleSystemDetailLevel       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerParticleSystemDetailLevel UMarinerGameGlobals::GetCurrentDetailLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetCurrentDetailLevel");

	Params::MarinerGameGlobals_GetCurrentDetailLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetDebugMPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialParameterCollection*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialParameterCollection* UMarinerGameGlobals::GetDebugMPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetDebugMPC");

	Params::MarinerGameGlobals_GetDebugMPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetDefaultRocketTotemCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerRocketTotemCollectionReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMarinerRocketTotemCollection UMarinerGameGlobals::GetDefaultRocketTotemCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetDefaultRocketTotemCollection");

	Params::MarinerGameGlobals_GetDefaultRocketTotemCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetEnvironmentMPC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialParameterCollection*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialParameterCollection* UMarinerGameGlobals::GetEnvironmentMPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetEnvironmentMPC");

	Params::MarinerGameGlobals_GetEnvironmentMPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetLongDistanceShotLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UMarinerGameGlobals::GetLongDistanceShotLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetLongDistanceShotLength");

	Params::MarinerGameGlobals_GetLongDistanceShotLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetMatchmakingIntermissionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UMarinerGameGlobals::GetMatchmakingIntermissionTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetMatchmakingIntermissionTime");

	Params::MarinerGameGlobals_GetMatchmakingIntermissionTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetPlayerStartMaxCapsuleDimensions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerCapsuleExtents     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FMarinerCapsuleExtents UMarinerGameGlobals::GetPlayerStartMaxCapsuleDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetPlayerStartMaxCapsuleDimensions");

	Params::MarinerGameGlobals_GetPlayerStartMaxCapsuleDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetPlayerStartMinCapsuleDimensions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerCapsuleExtents     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FMarinerCapsuleExtents UMarinerGameGlobals::GetPlayerStartMinCapsuleDimensions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetPlayerStartMinCapsuleDimensions");

	Params::MarinerGameGlobals_GetPlayerStartMinCapsuleDimensions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetSelectedCharacterDataForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerGameGlobals::GetSelectedCharacterDataForPlayer(class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetSelectedCharacterDataForPlayer");

	Params::MarinerGameGlobals_GetSelectedCharacterDataForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetShortDistanceShotLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UMarinerGameGlobals::GetShortDistanceShotLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetShortDistanceShotLength");

	Params::MarinerGameGlobals_GetShortDistanceShotLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetShortestCharacterType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerGameGlobals::GetShortestCharacterType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetShortestCharacterType");

	Params::MarinerGameGlobals_GetShortestCharacterType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetSkinniestCharacterType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerGameGlobals::GetSkinniestCharacterType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetSkinniestCharacterType");

	Params::MarinerGameGlobals_GetSkinniestCharacterType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetSortedPlayableCharactersData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerEnabledCharacterFilter          EnabledFilter                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMarinerPlayableCharacter*>CharactersOut                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerGameGlobals::GetSortedPlayableCharactersData(class UObject* WorldContextObject, EMarinerEnabledCharacterFilter EnabledFilter, TArray<class UMarinerPlayableCharacter*>* CharactersOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetSortedPlayableCharactersData");

	Params::MarinerGameGlobals_GetSortedPlayableCharactersData Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EnabledFilter = EnabledFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CharactersOut != nullptr)
		*CharactersOut = std::move(Parms.CharactersOut);
}


// Function Mariner.MarinerGameGlobals.GetTallestCharacterType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerGameGlobals::GetTallestCharacterType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetTallestCharacterType");

	Params::MarinerGameGlobals_GetTallestCharacterType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameGlobals.GetWidestCharacterType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerGameGlobals::GetWidestCharacterType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameGlobals", "GetWidestCharacterType");

	Params::MarinerGameGlobals_GetWidestCharacterType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetCharacterManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerCharacterManager*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterManager* UMarinerGameInstance::GetCharacterManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetCharacterManager");

	Params::MarinerGameInstance_GetCharacterManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetDamageDebugManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerDamageDebugManager*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDamageDebugManager* UMarinerGameInstance::GetDamageDebugManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetDamageDebugManager");

	Params::MarinerGameInstance_GetDamageDebugManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetInputOverlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerInputOverlay*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerInputOverlay* UMarinerGameInstance::GetInputOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetInputOverlay");

	Params::MarinerGameInstance_GetInputOverlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetMenuManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuManager* UMarinerGameInstance::GetMenuManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetMenuManager");

	Params::MarinerGameInstance_GetMenuManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetMessageBoxManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMessageBoxManager*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMessageBoxManager* UMarinerGameInstance::GetMessageBoxManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetMessageBoxManager");

	Params::MarinerGameInstance_GetMessageBoxManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetMusicManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMusicManager*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMusicManager* UMarinerGameInstance::GetMusicManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetMusicManager");

	Params::MarinerGameInstance_GetMusicManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetUserSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerGameUserSettings*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGameUserSettings* UMarinerGameInstance::GetUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetUserSettings");

	Params::MarinerGameInstance_GetUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetVoiceOverManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerVoiceOverManager*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerVoiceOverManager* UMarinerGameInstance::GetVoiceOverManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetVoiceOverManager");

	Params::MarinerGameInstance_GetVoiceOverManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GoToLobby
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameInstance::GoToLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GoToLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.LoadArtifacts
// (Final, Native, Private)

void UMarinerGameInstance::LoadArtifacts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "LoadArtifacts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.LoadArtifactsUnlockData
// (Final, Native, Private)

void UMarinerGameInstance::LoadArtifactsUnlockData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "LoadArtifactsUnlockData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.OnKickedMessageAcknowledged
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameInstance::OnKickedMessageAcknowledged(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "OnKickedMessageAcknowledged");

	Params::MarinerGameInstance_OnKickedMessageAcknowledged Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.OnMovieCompleted
// (Final, Native, Private)

void UMarinerGameInstance::OnMovieCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "OnMovieCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.PlayMovie
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMediaSource*                     MovieToPlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanSkipOnceLoaded                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       CompletionCallback                                     (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerGameInstance::PlayMovie(class UMediaSource* MovieToPlay, bool bCanSkipOnceLoaded, TDelegate<void()> CompletionCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "PlayMovie");

	Params::MarinerGameInstance_PlayMovie Parms{};

	Parms.MovieToPlay = MovieToPlay;
	Parms.bCanSkipOnceLoaded = bCanSkipOnceLoaded;
	Parms.CompletionCallback = CompletionCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.PlayScreenWipe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       OnWipeCoveringScreen                                   (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerGameInstance::PlayScreenWipe(TDelegate<void()> OnWipeCoveringScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "PlayScreenWipe");

	Params::MarinerGameInstance_PlayScreenWipe Parms{};

	Parms.OnWipeCoveringScreen = OnWipeCoveringScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.ReloadGameConfig
// (Final, Exec, Native, Public)

void UMarinerGameInstance::ReloadGameConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "ReloadGameConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.ReturnToMainMenu
// (Final, Native, Public, BlueprintCallable)

void UMarinerGameInstance::ReturnToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "ReturnToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.ServerTravel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerServerTravelConfig       Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerGameInstance::ServerTravel(const struct FMarinerServerTravelConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "ServerTravel");

	Params::MarinerGameInstance_ServerTravel Parms{};

	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.SetPracticeModeSelectedCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             InPracticeModeSelectedCharacter                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameInstance::SetPracticeModeSelectedCharacter(TSoftClassPtr<class UClass> InPracticeModeSelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "SetPracticeModeSelectedCharacter");

	Params::MarinerGameInstance_SetPracticeModeSelectedCharacter Parms{};

	Parms.InPracticeModeSelectedCharacter = InPracticeModeSelectedCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.SetStartedPracticeModeFromCharacterMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bStartedFromCharacterMenu                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGameInstance::SetStartedPracticeModeFromCharacterMenu(bool bStartedFromCharacterMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "SetStartedPracticeModeFromCharacterMenu");

	Params::MarinerGameInstance_SetStartedPracticeModeFromCharacterMenu Parms{};

	Parms.bStartedFromCharacterMenu = bStartedFromCharacterMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.ShowMessageBox
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerMessageBoxData           MessageBoxData                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerGameInstance::ShowMessageBox(const struct FMarinerMessageBoxData& MessageBoxData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "ShowMessageBox");

	Params::MarinerGameInstance_ShowMessageBox Parms{};

	Parms.MessageBoxData = std::move(MessageBoxData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameInstance.GetNarrationManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerNarrationManager*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerNarrationManager* UMarinerGameInstance::GetNarrationManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetNarrationManager");

	Params::MarinerGameInstance_GetNarrationManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetPracticeModeSelectedCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerGameInstance::GetPracticeModeSelectedCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetPracticeModeSelectedCharacter");

	Params::MarinerGameInstance_GetPracticeModeSelectedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.GetRealityObjectManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRealityObjectManager*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRealityObjectManager* UMarinerGameInstance::GetRealityObjectManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "GetRealityObjectManager");

	Params::MarinerGameInstance_GetRealityObjectManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGameInstance.IsInMainMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGameInstance::IsInMainMenu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameInstance", "IsInMainMenu");

	Params::MarinerGameInstance_IsInMainMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTripMine.ActivateParticles
// (Final, Native, Protected, BlueprintCallable)

void AMarinerTripMine::ActivateParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "ActivateParticles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.ArmMine
// (Final, Native, Protected, BlueprintCallable)

void AMarinerTripMine::ArmMine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "ArmMine");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.BP_OnTripMineArmed
// (Event, Protected, BlueprintEvent)

void AMarinerTripMine::BP_OnTripMineArmed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "BP_OnTripMineArmed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerTripMine.BP_OnTripMineAttached
// (Event, Protected, BlueprintEvent)

void AMarinerTripMine::BP_OnTripMineAttached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "BP_OnTripMineAttached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerTripMine.BP_OnTripMineTriggered
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AMarinerCharacter*>        DamagedMarinerCharacters                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerTripMine::BP_OnTripMineTriggered(const TArray<class AMarinerCharacter*>& DamagedMarinerCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "BP_OnTripMineTriggered");

	Params::MarinerTripMine_BP_OnTripMineTriggered Parms{};

	Parms.DamagedMarinerCharacters = std::move(DamagedMarinerCharacters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerTripMine.ClearTimers
// (Final, Native, Protected, BlueprintCallable)

void AMarinerTripMine::ClearTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "ClearTimers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.DeactivateParticles
// (Final, Native, Protected, BlueprintCallable)

void AMarinerTripMine::DeactivateParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "DeactivateParticles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.HandlePostTriggeredSequence
// (Final, Native, Protected)

void AMarinerTripMine::HandlePostTriggeredSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "HandlePostTriggeredSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.HandleStuckToObject
// (Final, Native, Protected)
// Parameters:
// struct FHitResult                       Hit                                                    (Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerTripMine::HandleStuckToObject(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "HandleStuckToObject");

	Params::MarinerTripMine_HandleStuckToObject Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.MulticastOnTripMineTriggered
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// TArray<class AMarinerCharacter*>        CharactersDamaged                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMarinerTripMine::MulticastOnTripMineTriggered(const TArray<class AMarinerCharacter*>& CharactersDamaged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "MulticastOnTripMineTriggered");

	Params::MarinerTripMine_MulticastOnTripMineTriggered Parms{};

	Parms.CharactersDamaged = std::move(CharactersDamaged);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.OnAttachedParentDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerTripMine::OnAttachedParentDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "OnAttachedParentDestroyed");

	Params::MarinerTripMine_OnAttachedParentDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTripMine.ResetVariables
// (Final, Native, Protected, BlueprintCallable)

void AMarinerTripMine::ResetVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTripMine", "ResetVariables");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGameViewportClient.OnMoviePlaybackFinished
// (Final, Native, Private)

void UMarinerGameViewportClient::OnMoviePlaybackFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGameViewportClient", "OnMoviePlaybackFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletPerformanceController.StartPerformanceTests
// (Final, Native, Private)

void UMarinerGauntletPerformanceController::StartPerformanceTests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletPerformanceController", "StartPerformanceTests");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletPerformanceController.StartProfiling
// (Final, Native, Private)

void UMarinerGauntletPerformanceController::StartProfiling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletPerformanceController", "StartProfiling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletPerformanceController.StopPerformanceTests
// (Final, Native, Private)

void UMarinerGauntletPerformanceController::StopPerformanceTests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletPerformanceController", "StopPerformanceTests");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGauntletPerformanceController.StopProfiling
// (Final, Native, Private)

void UMarinerGauntletPerformanceController::StopProfiling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGauntletPerformanceController", "StopProfiling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.AuthoritySpawnItem
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerItem>         ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ItemInstigator                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* UMarinerGlobalsFunctionLibrary::AuthoritySpawnItem(class UObject* WorldContextObject, TSubclassOf<class AMarinerItem> ItemType, class APawn* ItemInstigator, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "AuthoritySpawnItem");

	Params::MarinerGlobalsFunctionLibrary_AuthoritySpawnItem Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ItemType = ItemType;
	Parms.ItemInstigator = ItemInstigator;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.ComponentHasInvisibilityLock
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::ComponentHasInvisibilityLock(class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "ComponentHasInvisibilityLock");

	Params::MarinerGlobalsFunctionLibrary_ComponentHasInvisibilityLock Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.DebugEquipCharacterItemToProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterClass                                         (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRanked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoEquipItem                  ItemToEquip                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::DebugEquipCharacterItemToProfile(const TSoftClassPtr<class UClass> CharacterClass, EMangoItemType ItemType, bool bRanked, struct FMangoEquipItem& ItemToEquip, struct FMangoProfile& Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "DebugEquipCharacterItemToProfile");

	Params::MarinerGlobalsFunctionLibrary_DebugEquipCharacterItemToProfile Parms{};

	Parms.CharacterClass = CharacterClass;
	Parms.ItemType = ItemType;
	Parms.bRanked = bRanked;
	Parms.ItemToEquip = std::move(ItemToEquip);
	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ItemToEquip = std::move(Parms.ItemToEquip);
	Profile = std::move(Parms.Profile);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetAchievementsGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerAchievementsGlobals*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAchievementsGlobals* UMarinerGlobalsFunctionLibrary::GetAchievementsGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetAchievementsGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetAchievementsGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetActiveSettingsGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerSettingsGlobals*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSettingsGlobals* UMarinerGlobalsFunctionLibrary::GetActiveSettingsGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetActiveSettingsGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetActiveSettingsGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetActorRoleString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGlobalsFunctionLibrary::GetActorRoleString(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetActorRoleString");

	Params::MarinerGlobalsFunctionLibrary_GetActorRoleString Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetCameraGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerCameraGlobals*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCameraGlobals* UMarinerGlobalsFunctionLibrary::GetCameraGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetCameraGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetCameraGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetCharacterLiteGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerCharacterLiteGlobals*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterLiteGlobals* UMarinerGlobalsFunctionLibrary::GetCharacterLiteGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetCharacterLiteGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetCharacterLiteGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetChatGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerChatGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerChatGlobals* UMarinerGlobalsFunctionLibrary::GetChatGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetChatGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetChatGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetClassDefaultObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              ObjectClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UMarinerGlobalsFunctionLibrary::GetClassDefaultObject(TSubclassOf<class UObject> ObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetClassDefaultObject");

	Params::MarinerGlobalsFunctionLibrary_GetClassDefaultObject Parms{};

	Parms.ObjectClass = ObjectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetCurrentCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGlobalsFunctionLibrary::GetCurrentCulture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetCurrentCulture");

	Params::MarinerGlobalsFunctionLibrary_GetCurrentCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetDemoGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerDemoGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerDemoGlobals* UMarinerGlobalsFunctionLibrary::GetDemoGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetDemoGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetDemoGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetFastCollisionManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFastCollisionManager*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFastCollisionManager* UMarinerGlobalsFunctionLibrary::GetFastCollisionManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetFastCollisionManager");

	Params::MarinerGlobalsFunctionLibrary_GetFastCollisionManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetFrontEndGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerFrontEndGlobals*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerFrontEndGlobals* UMarinerGlobalsFunctionLibrary::GetFrontEndGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetFrontEndGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetFrontEndGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetGameGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerGameGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGameGlobals* UMarinerGlobalsFunctionLibrary::GetGameGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetGameGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetGameGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetHostilityBetweenTeams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TeamIndexA                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndexB                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerHostility                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerHostility UMarinerGlobalsFunctionLibrary::GetHostilityBetweenTeams(int32 TeamIndexA, int32 TeamIndexB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetHostilityBetweenTeams");

	Params::MarinerGlobalsFunctionLibrary_GetHostilityBetweenTeams Parms{};

	Parms.TeamIndexA = TeamIndexA;
	Parms.TeamIndexB = TeamIndexB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetInputGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerInputGlobals*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerInputGlobals* UMarinerGlobalsFunctionLibrary::GetInputGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetInputGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetInputGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetItemActivationUITexture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AMarinerItem>         Item                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMarinerGlobalsFunctionLibrary::GetItemActivationUITexture(const TSubclassOf<class AMarinerItem>& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetItemActivationUITexture");

	Params::MarinerGlobalsFunctionLibrary_GetItemActivationUITexture Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMangoRealm
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGlobalsFunctionLibrary::GetMangoRealm(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMangoRealm");

	Params::MarinerGlobalsFunctionLibrary_GetMangoRealm Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMapGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerMapGlobals*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMapGlobals* UMarinerGlobalsFunctionLibrary::GetMapGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMapGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetMapGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerGlobals
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerGlobals*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerGlobals* UMarinerGlobalsFunctionLibrary::GetMarinerGlobals(bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMarinerGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetMarinerGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerTeamColorByHostility
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerHostility                       InHostility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UMarinerGlobalsFunctionLibrary::GetMarinerTeamColorByHostility(const class UObject* WorldContextObject, bool* bIsValid, EMarinerHostility InHostility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMarinerTeamColorByHostility");

	Params::MarinerGlobalsFunctionLibrary_GetMarinerTeamColorByHostility Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InHostility = InHostility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMarinerTeamName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsValid                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerGlobalsFunctionLibrary::GetMarinerTeamName(const class UObject* WorldContextObject, bool* bIsValid, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMarinerTeamName");

	Params::MarinerGlobalsFunctionLibrary_GetMarinerTeamName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsValid != nullptr)
		*bIsValid = Parms.bIsValid;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetMenuGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerMenuGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuGlobals* UMarinerGlobalsFunctionLibrary::GetMenuGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetMenuGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetMenuGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetModeGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerModeGlobals*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerModeGlobals* UMarinerGlobalsFunctionLibrary::GetModeGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetModeGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetModeGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetPlatformDefaultCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGlobalsFunctionLibrary::GetPlatformDefaultCulture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetPlatformDefaultCulture");

	Params::MarinerGlobalsFunctionLibrary_GetPlatformDefaultCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetPoolingManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPoolingManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPoolingManager* UMarinerGlobalsFunctionLibrary::GetPoolingManager(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetPoolingManager");

	Params::MarinerGlobalsFunctionLibrary_GetPoolingManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetRealityManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerRealityObjectManager*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRealityObjectManager* UMarinerGlobalsFunctionLibrary::GetRealityManager(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetRealityManager");

	Params::MarinerGlobalsFunctionLibrary_GetRealityManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetRelativeTeamIndexToLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGlobalsFunctionLibrary::GetRelativeTeamIndexToLocalPlayer(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetRelativeTeamIndexToLocalPlayer");

	Params::MarinerGlobalsFunctionLibrary_GetRelativeTeamIndexToLocalPlayer Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetServerTickRate
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerGlobalsFunctionLibrary::GetServerTickRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetServerTickRate");

	Params::MarinerGlobalsFunctionLibrary_GetServerTickRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetSoftClassAssetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             SoftClass                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerGlobalsFunctionLibrary::GetSoftClassAssetName(const TSoftClassPtr<class UClass>& SoftClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetSoftClassAssetName");

	Params::MarinerGlobalsFunctionLibrary_GetSoftClassAssetName Parms{};

	Parms.SoftClass = SoftClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.GetUIGlobals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMarinerUIGlobals*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerUIGlobals* UMarinerGlobalsFunctionLibrary::GetUIGlobals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "GetUIGlobals");

	Params::MarinerGlobalsFunctionLibrary_GetUIGlobals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsBuildShipping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsBuildShipping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsBuildShipping");

	Params::MarinerGlobalsFunctionLibrary_IsBuildShipping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsChildOfSoftReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             PossibleParent                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EExecutionPins                          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGlobalsFunctionLibrary::IsChildOfSoftReference(const class UObject* Object, TSoftClassPtr<class UClass> PossibleParent, EExecutionPins* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsChildOfSoftReference");

	Params::MarinerGlobalsFunctionLibrary_IsChildOfSoftReference Parms{};

	Parms.Object = Object;
	Parms.PossibleParent = PossibleParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsChildOfSoftReferencePure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             PossibleParent                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsChildOfSoftReferencePure(const class UObject* Object, TSoftClassPtr<class UClass> PossibleParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsChildOfSoftReferencePure");

	Params::MarinerGlobalsFunctionLibrary_IsChildOfSoftReferencePure Parms{};

	Parms.Object = Object;
	Parms.PossibleParent = PossibleParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsEqualSoftReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             EqualTo                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EExecutionPins                          Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGlobalsFunctionLibrary::IsEqualSoftReference(const class UObject* Object, TSoftClassPtr<class UClass> EqualTo, EExecutionPins* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsEqualSoftReference");

	Params::MarinerGlobalsFunctionLibrary_IsEqualSoftReference Parms{};

	Parms.Object = Object;
	Parms.EqualTo = EqualTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsEqualSoftReferencePure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             EqualTo                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsEqualSoftReferencePure(const class UObject* Object, TSoftClassPtr<class UClass> EqualTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsEqualSoftReferencePure");

	Params::MarinerGlobalsFunctionLibrary_IsEqualSoftReferencePure Parms{};

	Parms.Object = Object;
	Parms.EqualTo = EqualTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsOSSOrigin
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsOSSOrigin(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsOSSOrigin");

	Params::MarinerGlobalsFunctionLibrary_IsOSSOrigin Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsOSSSteam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsOSSSteam(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsOSSSteam");

	Params::MarinerGlobalsFunctionLibrary_IsOSSSteam Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformPC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlatformPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlatformPC");

	Params::MarinerGlobalsFunctionLibrary_IsPlatformPC Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformPS4
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlatformPS4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlatformPS4");

	Params::MarinerGlobalsFunctionLibrary_IsPlatformPS4 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformStadia
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlatformStadia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlatformStadia");

	Params::MarinerGlobalsFunctionLibrary_IsPlatformStadia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformSwitch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlatformSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlatformSwitch");

	Params::MarinerGlobalsFunctionLibrary_IsPlatformSwitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlatformX1
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlatformX1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlatformX1");

	Params::MarinerGlobalsFunctionLibrary_IsPlatformX1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.IsPlayInEditorMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::IsPlayInEditorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "IsPlayInEditorMode");

	Params::MarinerGlobalsFunctionLibrary_IsPlayInEditorMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.SetComponentInvisibilityLock
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockInvisibility                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGlobalsFunctionLibrary::SetComponentInvisibilityLock(class USceneComponent* Component, bool bLockInvisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "SetComponentInvisibilityLock");

	Params::MarinerGlobalsFunctionLibrary_SetComponentInvisibilityLock Parms{};

	Parms.Component = Component;
	Parms.bLockInvisibility = bLockInvisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.SetCurrentCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCultureName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerGlobalsFunctionLibrary::SetCurrentCulture(const class FString& InCultureName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "SetCurrentCulture");

	Params::MarinerGlobalsFunctionLibrary_SetCurrentCulture Parms{};

	Parms.InCultureName = std::move(InCultureName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.SetVisibilityRelativeToLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewVisbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGlobalsFunctionLibrary::SetVisibilityRelativeToLocalPlayer(class USceneComponent* Component, bool bNewVisbility, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "SetVisibilityRelativeToLocalPlayer");

	Params::MarinerGlobalsFunctionLibrary_SetVisibilityRelativeToLocalPlayer Parms{};

	Parms.Component = Component;
	Parms.bNewVisbility = bNewVisbility;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.SpawnAIFromClassWithGivenController
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class APawn>                PawnClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AAIController*                    Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBehaviorTree*                    BehaviorTree                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bNoCollisionFail                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UMarinerGlobalsFunctionLibrary::SpawnAIFromClassWithGivenController(class UObject* WorldContextObject, TSubclassOf<class APawn> PawnClass, class AAIController* Controller, class UBehaviorTree* BehaviorTree, const struct FVector& Location, const struct FRotator& Rotation, bool bNoCollisionFail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "SpawnAIFromClassWithGivenController");

	Params::MarinerGlobalsFunctionLibrary_SpawnAIFromClassWithGivenController Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PawnClass = PawnClass;
	Parms.Controller = Controller;
	Parms.BehaviorTree = BehaviorTree;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bNoCollisionFail = bNoCollisionFail;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.SpawnMarinerEmitterAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerParticleSystemComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerParticleSystemComponent* UMarinerGlobalsFunctionLibrary::SpawnMarinerEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "SpawnMarinerEmitterAttached");

	Params::MarinerGlobalsFunctionLibrary_SpawnMarinerEmitterAttached Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.TryAndGetHostilityRelativeToLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerHostility                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerHostility UMarinerGlobalsFunctionLibrary::TryAndGetHostilityRelativeToLocalPlayer(const class UObject* WorldContextObject, int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "TryAndGetHostilityRelativeToLocalPlayer");

	Params::MarinerGlobalsFunctionLibrary_TryAndGetHostilityRelativeToLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.TryAndGetLocalPlayerController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerBasePlayerController*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerBasePlayerController* UMarinerGlobalsFunctionLibrary::TryAndGetLocalPlayerController(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "TryAndGetLocalPlayerController");

	Params::MarinerGlobalsFunctionLibrary_TryAndGetLocalPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGlobalsFunctionLibrary.UpdateAudioComponentRelativeHostility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkComponent*                     AkComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            SoundInstigator                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGlobalsFunctionLibrary::UpdateAudioComponentRelativeHostility(class UAkComponent* AkComponent, const class APawn* SoundInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerGlobalsFunctionLibrary", "UpdateAudioComponentRelativeHostility");

	Params::MarinerGlobalsFunctionLibrary_UpdateAudioComponentRelativeHostility Parms{};

	Parms.AkComponent = AkComponent;
	Parms.SoundInstigator = SoundInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.AddChildToGridWithColumnAndRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ColumnSpan                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RowSpan                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGridPanel::AddChildToGridWithColumnAndRow(class UUserWidget* Content, int32 Column, int32 Row, int32 ColumnSpan, int32 RowSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "AddChildToGridWithColumnAndRow");

	Params::MarinerGridPanel_AddChildToGridWithColumnAndRow Parms{};

	Parms.Content = Content;
	Parms.Column = Column;
	Parms.Row = Row;
	Parms.ColumnSpan = ColumnSpan;
	Parms.RowSpan = RowSpan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.AddChildToGridWithWrapping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGridSlot*                        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGridSlot* UMarinerGridPanel::AddChildToGridWithWrapping(class UUserWidget* Content, const int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "AddChildToGridWithWrapping");

	Params::MarinerGridPanel_AddChildToGridWithWrapping Parms{};

	Parms.Content = Content;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerGridPanel.ClearHighlighting
// (Final, Native, Public, BlueprintCallable)

void UMarinerGridPanel::ClearHighlighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "ClearHighlighting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.SetColumnFillMultiple
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           FillValues                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerGridPanel::SetColumnFillMultiple(const TArray<float>& FillValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "SetColumnFillMultiple");

	Params::MarinerGridPanel_SetColumnFillMultiple Parms{};

	Parms.FillValues = std::move(FillValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.SetFixedColumnFill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FillValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGridPanel::SetFixedColumnFill(float FillValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "SetFixedColumnFill");

	Params::MarinerGridPanel_SetFixedColumnFill Parms{};

	Parms.FillValue = FillValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.SetFixedRowFill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FillValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGridPanel::SetFixedRowFill(float FillValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "SetFixedRowFill");

	Params::MarinerGridPanel_SetFixedRowFill Parms{};

	Parms.FillValue = FillValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.SetHighlightedSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGridPanel::SetHighlightedSlot(int32 Column, int32 Row, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "SetHighlightedSlot");

	Params::MarinerGridPanel_SetHighlightedSlot Parms{};

	Parms.Column = Column;
	Parms.Row = Row;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.SetRowFillMultiple
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           FillValues                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerGridPanel::SetRowFillMultiple(const TArray<float>& FillValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "SetRowFillMultiple");

	Params::MarinerGridPanel_SetRowFillMultiple Parms{};

	Parms.FillValues = std::move(FillValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerGridPanel.GetHighlightedSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OutColumn                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutRow                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerGridPanel::GetHighlightedSlot(int32* OutColumn, int32* OutRow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "GetHighlightedSlot");

	Params::MarinerGridPanel_GetHighlightedSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColumn != nullptr)
		*OutColumn = Parms.OutColumn;

	if (OutRow != nullptr)
		*OutRow = Parms.OutRow;
}


// Function Mariner.MarinerGridPanel.GetHighlightedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMarinerGridPanel::GetHighlightedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerGridPanel", "GetHighlightedWidget");

	Params::MarinerGridPanel_GetHighlightedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHorizontalBox.ClearHighlighting
// (Final, Native, Public, BlueprintCallable)

void UMarinerHorizontalBox::ClearHighlighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHorizontalBox", "ClearHighlighting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHorizontalBox.HighlightWidgetViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerHorizontalBox::HighlightWidgetViaIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHorizontalBox", "HighlightWidgetViaIndex");

	Params::MarinerHorizontalBox_HighlightWidgetViaIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHorizontalBox.GetHighlightedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMarinerHorizontalBox::GetHighlightedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHorizontalBox", "GetHighlightedWidget");

	Params::MarinerHorizontalBox_GetHighlightedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.ApplyHUDState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::ApplyHUDState(const TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "ApplyHUDState");

	Params::MarinerHUD_ApplyHUDState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.ClearChatWheelState
// (Final, Native, Public, BlueprintCallable)

void AMarinerHUD::ClearChatWheelState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "ClearChatWheelState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnAddActiveItemWidgetWithDuration
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UObject*                          OwningCue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerActiveItemWidget>ItemWidget                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      Icon                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* AMarinerHUD::OnAddActiveItemWidgetWithDuration(class UObject* OwningCue, TSubclassOf<class UMarinerActiveItemWidget> ItemWidget, const struct FSlateBrush& Icon, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnAddActiveItemWidgetWithDuration");

	Params::MarinerHUD_OnAddActiveItemWidgetWithDuration Parms{};

	Parms.OwningCue = OwningCue;
	Parms.ItemWidget = ItemWidget;
	Parms.Icon = std::move(Icon);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.OnArenaStateChanged
// (Final, Native, Protected)
// Parameters:
// EMarinerArenaReturnState                PreviousState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerArenaReturnState                NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnArenaStateChanged(EMarinerArenaReturnState PreviousState, EMarinerArenaReturnState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnArenaStateChanged");

	Params::MarinerHUD_OnArenaStateChanged Parms{};

	Parms.PreviousState = PreviousState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnDamageCaused
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageWasAOE                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageWasMegablast                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DamagedActorTeamIndex                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpulseVector                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageApplied                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageBlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnDamageCaused(class AActor* DamagedActor, bool bDamageWasAOE, bool bDamageWasMegablast, int32 DamagedActorTeamIndex, TSubclassOf<class UDamageType> DamageType, const struct FVector& ImpulseVector, float DamageApplied, float DamageBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnDamageCaused");

	Params::MarinerHUD_OnDamageCaused Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.bDamageWasAOE = bDamageWasAOE;
	Parms.bDamageWasMegablast = bDamageWasMegablast;
	Parms.DamagedActorTeamIndex = DamagedActorTeamIndex;
	Parms.DamageType = DamageType;
	Parms.ImpulseVector = std::move(ImpulseVector);
	Parms.DamageApplied = DamageApplied;
	Parms.DamageBlocked = DamageBlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUD.OnDamageTaken
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageTaken                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            PawnInstigator                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnDamageTaken(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnDamageTaken");

	Params::MarinerHUD_OnDamageTaken Parms{};

	Parms.DamageTaken = DamageTaken;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.PawnInstigator = PawnInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUD.OnKillCaused
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           KilledActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDamageWasAOE                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KilledActorTeamIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnKillCaused(class AActor* KilledActor, bool bDamageWasAOE, int32 KilledActorTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnKillCaused");

	Params::MarinerHUD_OnKillCaused Parms{};

	Parms.KilledActor = KilledActor;
	Parms.bDamageWasAOE = bDamageWasAOE;
	Parms.KilledActorTeamIndex = KilledActorTeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUD.OnLocalizedMessageRecieved
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnLocalizedMessageRecieved(class UMarinerLocalMessage* MessageCDO, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnLocalizedMessageRecieved");

	Params::MarinerHUD_OnLocalizedMessageRecieved Parms{};

	Parms.MessageCDO = MessageCDO;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUD.OnMatchStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnMatchStateChanged(class FName State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnMatchStateChanged");

	Params::MarinerHUD_OnMatchStateChanged Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerHUD.OnMegablastApplied
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigatorPlayerState                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnMegablastApplied(class AMarinerPlayerState* MegablastInstigatorPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnMegablastApplied");

	Params::MarinerHUD_OnMegablastApplied Parms{};

	Parms.MegablastInstigatorPlayerState = MegablastInstigatorPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnMegablastRemoved
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              MegablastInstigatorPlayerState                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnMegablastRemoved(class AMarinerPlayerState* MegablastInstigatorPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnMegablastRemoved");

	Params::MarinerHUD_OnMegablastRemoved Parms{};

	Parms.MegablastInstigatorPlayerState = MegablastInstigatorPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnModeHUDStatesChanged
// (Final, Native, Private)
// Parameters:
// int32                                   ActiveModeHUDStates                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnModeHUDStatesChanged(int32 ActiveModeHUDStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnModeHUDStatesChanged");

	Params::MarinerHUD_OnModeHUDStatesChanged Parms{};

	Parms.ActiveModeHUDStates = ActiveModeHUDStates;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnPawnChanged
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerController*         PossessingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            PossessedPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnPawnChanged(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnPawnChanged");

	Params::MarinerHUD_OnPawnChanged Parms{};

	Parms.PossessingController = PossessingController;
	Parms.PossessedPawn = PossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnRootLayerChanged
// (Final, Native, Public)
// Parameters:
// class UMarinerMenuStackLayer*           NewRootLayer                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnRootLayerChanged(class UMarinerMenuStackLayer* NewRootLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnRootLayerChanged");

	Params::MarinerHUD_OnRootLayerChanged Parms{};

	Parms.NewRootLayer = NewRootLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.OnRoundTimerStarted
// (Final, Native, Private)
// Parameters:
// bool                                    bIsRoundTransition                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::OnRoundTimerStarted(bool bIsRoundTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "OnRoundTimerStarted");

	Params::MarinerHUD_OnRoundTimerStarted Parms{};

	Parms.bIsRoundTransition = bIsRoundTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.ReactToGameOver
// (Final, Native, Public, BlueprintCallable)

void AMarinerHUD::ReactToGameOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "ReactToGameOver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.RemoveHUDState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::RemoveHUDState(const TSubclassOf<class UMarinerHUDState> State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "RemoveHUDState");

	Params::MarinerHUD_RemoveHUDState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.SetGameplayActive
// (Final, Exec, Native, Private)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::SetGameplayActive(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "SetGameplayActive");

	Params::MarinerHUD_SetGameplayActive Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.SetHUDEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::SetHUDEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "SetHUDEnabled");

	Params::MarinerHUD_SetHUDEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.ShowScoreboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerHUD::ShowScoreboard(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "ShowScoreboard");

	Params::MarinerHUD_ShowScoreboard Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerHUD.CanCharacterSelect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerHUD::CanCharacterSelect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "CanCharacterSelect");

	Params::MarinerHUD_CanCharacterSelect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.CanPause
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerHUD::CanPause() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "CanPause");

	Params::MarinerHUD_CanPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.CanUseChatWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerHUD::CanUseChatWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "CanUseChatWheel");

	Params::MarinerHUD_CanUseChatWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.GetCharacterPinGameModeWidgetType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerPinGameModeWidget>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMarinerPinGameModeWidget> AMarinerHUD::GetCharacterPinGameModeWidgetType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "GetCharacterPinGameModeWidgetType");

	Params::MarinerHUD_GetCharacterPinGameModeWidgetType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerHUD.IsHUDStateActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerHUDState>     State                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerHUD::IsHUDStateActive(const TSubclassOf<class UMarinerHUDState>& State) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerHUD", "IsHUDStateActive");

	Params::MarinerHUD_IsHUDStateActive Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerInGameScoreBoard.Init
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerController*         MarinerPlayerController                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGameScoreBoard::Init(class AMarinerPlayerController* MarinerPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "Init");

	Params::MarinerInGameScoreBoard_Init Parms{};

	Parms.MarinerPlayerController = MarinerPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.OnPlayerAdded
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGameScoreBoard::OnPlayerAdded(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "OnPlayerAdded");

	Params::MarinerInGameScoreBoard_OnPlayerAdded Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.OnPlayerPawnClassSet
// (Final, Native, Protected)

void UMarinerInGameScoreBoard::OnPlayerPawnClassSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "OnPlayerPawnClassSet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.OnPlayerRemoved
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGameScoreBoard::OnPlayerRemoved(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "OnPlayerRemoved");

	Params::MarinerInGameScoreBoard_OnPlayerRemoved Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.OnPlayerTeamChanged
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGameScoreBoard::OnPlayerTeamChanged(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "OnPlayerTeamChanged");

	Params::MarinerInGameScoreBoard_OnPlayerTeamChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.OnScoreChanged
// (Final, Native, Protected)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewScore                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerInGameScoreBoard::OnScoreChanged(int32 TeamIndex, int32 NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "OnScoreChanged");

	Params::MarinerInGameScoreBoard_OnScoreChanged Parms{};

	Parms.TeamIndex = TeamIndex;
	Parms.NewScore = NewScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInGameScoreBoard.UpdatePrompts
// (Final, Native, Private)

void UMarinerInGameScoreBoard::UpdatePrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInGameScoreBoard", "UpdatePrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInstancedMeshComponent.MarkInstanceMeshDirty
// (Final, Native, Public, BlueprintCallable)

void UMarinerInstancedMeshComponent::MarkInstanceMeshDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerInstancedMeshComponent", "MarkInstanceMeshDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInteractableManager.ClearControllerInteractables
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  InteractableObjects                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerInteractableManager::ClearControllerInteractables(const TArray<class UObject*>& InteractableObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerInteractableManager", "ClearControllerInteractables");

	Params::MarinerInteractableManager_ClearControllerInteractables Parms{};

	Parms.InteractableObjects = std::move(InteractableObjects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerInteractableManager.RegisterControllerInteractables
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UObject*>                  InteractableObjects                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerInteractableManager::RegisterControllerInteractables(const TArray<class UObject*>& InteractableObjects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerInteractableManager", "RegisterControllerInteractables");

	Params::MarinerInteractableManager_RegisterControllerInteractables Parms{};

	Parms.InteractableObjects = std::move(InteractableObjects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerItemAttributes.OnRep_ItemUses
// (Final, Native, Private)

void UMarinerItemAttributes::OnRep_ItemUses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerItemAttributes", "OnRep_ItemUses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerJumpPad.OnActorLaunched
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerJumpPad::OnActorLaunched(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerJumpPad", "OnActorLaunched");

	Params::MarinerJumpPad_OnActorLaunched Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerJumpPad.SetBotLaunchAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewBotLaunchAngle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerJumpPad::SetBotLaunchAngle(float NewBotLaunchAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerJumpPad", "SetBotLaunchAngle");

	Params::MarinerJumpPad_SetBotLaunchAngle Parms{};

	Parms.NewBotLaunchAngle = NewBotLaunchAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerJumpPad.DoesRequireSpecialLaunchLogic
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class AActor*                           LaunchedActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerJumpPad::DoesRequireSpecialLaunchLogic(class AActor* LaunchedActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerJumpPad", "DoesRequireSpecialLaunchLogic");

	Params::MarinerJumpPad_DoesRequireSpecialLaunchLogic Parms{};

	Parms.LaunchedActor = LaunchedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLANLobbyGameMode.RequestLaunchGame
// (Final, Native, Public, BlueprintCallable)

void AMarinerLANLobbyGameMode::RequestLaunchGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLANLobbyGameMode", "RequestLaunchGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.AurthorityOnPregameStateChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NewPregameState                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::AurthorityOnPregameStateChanged(const class FName& NewPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "AurthorityOnPregameStateChanged");

	Params::MarinerPlayerState_AurthorityOnPregameStateChanged Parms{};

	Parms.NewPregameState = NewPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.BP_SetStatValue
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::BP_SetStatValue(class FName StatName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "BP_SetStatValue");

	Params::MarinerPlayerState_BP_SetStatValue Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.BP_SetStatValueAsFloat
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::BP_SetStatValueAsFloat(class FName StatName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "BP_SetStatValueAsFloat");

	Params::MarinerPlayerState_BP_SetStatValueAsFloat Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.CanPlayerSelectCharacter
// (Final, Native, Public)
// Parameters:
// TSoftClassPtr<class UClass>             Character                                              (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::CanPlayerSelectCharacter(const TSoftClassPtr<class UClass> Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "CanPlayerSelectCharacter");

	Params::MarinerPlayerState_CanPlayerSelectCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.CheckIfPerformedDoubleKnockOut
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::CheckIfPerformedDoubleKnockOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "CheckIfPerformedDoubleKnockOut");

	Params::MarinerPlayerState_CheckIfPerformedDoubleKnockOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.Client_OnCharacterRequestFailed
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class FString                           RequestedCharacterString                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LastKnownSelectedCharacterString                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Client_OnCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastKnownSelectedCharacterString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Client_OnCharacterRequestFailed");

	Params::MarinerPlayerState_Client_OnCharacterRequestFailed Parms{};

	Parms.RequestedCharacterString = std::move(RequestedCharacterString);
	Parms.LastKnownSelectedCharacterString = std::move(LastKnownSelectedCharacterString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.ClientInformAboutKnockout
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AMarinerPlayerState*              KnockoutPlayerState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPlayerState*              FallPlayerState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::ClientInformAboutKnockout(class AMarinerPlayerState* KnockoutPlayerState, const class UDamageType* DamageType, class AMarinerPlayerState* FallPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "ClientInformAboutKnockout");

	Params::MarinerPlayerState_ClientInformAboutKnockout Parms{};

	Parms.KnockoutPlayerState = KnockoutPlayerState;
	Parms.DamageType = DamageType;
	Parms.FallPlayerState = FallPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.DoChatEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::DoChatEmote(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "DoChatEmote");

	Params::MarinerPlayerState_DoChatEmote Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.DoPreGameReadyEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::DoPreGameReadyEmote(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "DoPreGameReadyEmote");

	Params::MarinerPlayerState_DoPreGameReadyEmote Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Editor_ServerSetUniqueId
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           InUniqueId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Editor_ServerSetUniqueId(const class FString& InUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Editor_ServerSetUniqueId");

	Params::MarinerPlayerState_Editor_ServerSetUniqueId Parms{};

	Parms.InUniqueId = std::move(InUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.IncrementFloatStatValue
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValidForAchievement                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::IncrementFloatStatValue(class FName StatName, float Value, bool bValidForAchievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IncrementFloatStatValue");

	Params::MarinerPlayerState_IncrementFloatStatValue Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;
	Parms.bValidForAchievement = bValidForAchievement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.IncrementStatValue
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bValidForAchievement                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::IncrementStatValue(class FName StatName, int32 Value, bool bValidForAchievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IncrementStatValue");

	Params::MarinerPlayerState_IncrementStatValue Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;
	Parms.bValidForAchievement = bValidForAchievement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Multicast_SetPawnClass
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromClientRequest                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Multicast_SetPawnClass(TSubclassOf<class AMarinerCharacter> NewPawn, bool bFromClientRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Multicast_SetPawnClass");

	Params::MarinerPlayerState_Multicast_SetPawnClass Parms{};

	Parms.NewPawn = NewPawn;
	Parms.bFromClientRequest = bFromClientRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnBotFakeProfileSkinUpdated
// (Final, Native, Protected)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::OnBotFakeProfileSkinUpdated(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnBotFakeProfileSkinUpdated");

	Params::MarinerPlayerState_OnBotFakeProfileSkinUpdated Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnDamageDealt
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              DamagedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageDealt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::OnDamageDealt(class AMarinerPlayerState* DamagedPlayer, float DamageDealt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnDamageDealt");

	Params::MarinerPlayerState_OnDamageDealt Parms{};

	Parms.DamagedPlayer = DamagedPlayer;
	Parms.DamageDealt = DamageDealt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnDamageRecieved
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              DamageDealingPlayer                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageDealt                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::OnDamageRecieved(class AMarinerPlayerState* DamageDealingPlayer, float DamageDealt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnDamageRecieved");

	Params::MarinerPlayerState_OnDamageRecieved Parms{};

	Parms.DamageDealingPlayer = DamageDealingPlayer;
	Parms.DamageDealt = DamageDealt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnPregameStateChanged
// (Final, Native, Private)
// Parameters:
// class FName                             NewPregameState                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::OnPregameStateChanged(const class FName NewPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnPregameStateChanged");

	Params::MarinerPlayerState_OnPregameStateChanged Parms{};

	Parms.NewPregameState = NewPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_BotProfileIndices
// (Final, Native, Protected)

void AMarinerPlayerState::OnRep_BotProfileIndices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_BotProfileIndices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_ChatEmoteData
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_ChatEmoteData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_ChatEmoteData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_HasRequestedPawnClass
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_HasRequestedPawnClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_HasRequestedPawnClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_InitialRandomCharacter
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_InitialRandomCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_InitialRandomCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_OnReactivatedByte
// (Final, Native, Protected)

void AMarinerPlayerState::OnRep_OnReactivatedByte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_OnReactivatedByte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_PawnClass
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_PawnClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_PawnClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_PreGameEmoteData
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_PreGameEmoteData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_PreGameEmoteData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_SelectedCharacter
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_SelectedCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_SelectedCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnRep_Stats
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FPlayerStat>              OldStats                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AMarinerPlayerState::OnRep_Stats(TArray<struct FPlayerStat>* OldStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_Stats");

	Params::MarinerPlayerState_OnRep_Stats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OldStats != nullptr)
		*OldStats = std::move(Parms.OldStats);
}


// Function Mariner.MarinerPlayerState.OnRep_TeamIndex
// (Final, Native, Private)

void AMarinerPlayerState::OnRep_TeamIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnRep_TeamIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.OnSelectedCharacterLoaded
// (Final, Native, Private)

void AMarinerPlayerState::OnSelectedCharacterLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "OnSelectedCharacterLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.ScorePoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::ScorePoints(int32 Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "ScorePoints");

	Params::MarinerPlayerState_ScorePoints Parms{};

	Parms.Points = Points;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Server_DoChatEmote
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Server_DoChatEmote(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Server_DoChatEmote");

	Params::MarinerPlayerState_Server_DoChatEmote Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Server_DoPreGameReadyEmote
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Server_DoPreGameReadyEmote(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Server_DoPreGameReadyEmote");

	Params::MarinerPlayerState_Server_DoPreGameReadyEmote Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Server_RequestPawnClass
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           SoftObjectString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Server_RequestPawnClass(const class FString& SoftObjectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Server_RequestPawnClass");

	Params::MarinerPlayerState_Server_RequestPawnClass Parms{};

	Parms.SoftObjectString = std::move(SoftObjectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Server_SetHasRequestedPawnClass
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bHasRequested                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Server_SetHasRequestedPawnClass(bool bHasRequested)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Server_SetHasRequestedPawnClass");

	Params::MarinerPlayerState_Server_SetHasRequestedPawnClass Parms{};

	Parms.bHasRequested = bHasRequested;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.Server_SoftSelectPawnClass
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           SoftObjectString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::Server_SoftSelectPawnClass(const class FString& SoftObjectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "Server_SoftSelectPawnClass");

	Params::MarinerPlayerState_Server_SoftSelectPawnClass Parms{};

	Parms.SoftObjectString = std::move(SoftObjectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.ServerSetPawnClassAndPlayerName
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromClientRequest                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPlayerName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::ServerSetPawnClassAndPlayerName(TSubclassOf<class AMarinerCharacter> InPawn, bool bFromClientRequest, const class FString& InPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "ServerSetPawnClassAndPlayerName");

	Params::MarinerPlayerState_ServerSetPawnClassAndPlayerName Parms{};

	Parms.InPawn = InPawn;
	Parms.bFromClientRequest = bFromClientRequest;
	Parms.InPlayerName = std::move(InPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.ServerSetTeamIndex
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   NewTeamIndex                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::ServerSetTeamIndex(const int32 NewTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "ServerSetTeamIndex");

	Params::MarinerPlayerState_ServerSetTeamIndex Parms{};

	Parms.NewTeamIndex = NewTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.SetIsIndependent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIndependent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::SetIsIndependent(bool bNewIndependent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "SetIsIndependent");

	Params::MarinerPlayerState_SetIsIndependent Parms{};

	Parms.bNewIndependent = bNewIndependent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.SetPawnClass
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromClientRequest                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::SetPawnClass(TSubclassOf<class AMarinerCharacter> NewPawn, bool bFromClientRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "SetPawnClass");

	Params::MarinerPlayerState_SetPawnClass Parms{};

	Parms.NewPawn = NewPawn;
	Parms.bFromClientRequest = bFromClientRequest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.SetSelectedPawnClassLocal
// (Final, Native, Public)
// Parameters:
// class FString                           SoftObjectString                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::SetSelectedPawnClassLocal(const class FString& SoftObjectString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "SetSelectedPawnClassLocal");

	Params::MarinerPlayerState_SetSelectedPawnClassLocal Parms{};

	Parms.SoftObjectString = std::move(SoftObjectString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewTeamIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerState::SetTeamIndex(int32 NewTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "SetTeamIndex");

	Params::MarinerPlayerState_SetTeamIndex Parms{};

	Parms.NewTeamIndex = NewTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void AMarinerPlayerState::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerState.GetControlledCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerPlayerState::GetControlledCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetControlledCharacter");

	Params::MarinerPlayerState_GetControlledCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetCurrentPlatform
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName AMarinerPlayerState::GetCurrentPlatform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetCurrentPlatform");

	Params::MarinerPlayerState_GetCurrentPlatform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetFakeBotActiveSkin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> AMarinerPlayerState::GetFakeBotActiveSkin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetFakeBotActiveSkin");

	Params::MarinerPlayerState_GetFakeBotActiveSkin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetHasRequestedPawnClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::GetHasRequestedPawnClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetHasRequestedPawnClass");

	Params::MarinerPlayerState_GetHasRequestedPawnClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetPawnClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AMarinerCharacter> AMarinerPlayerState::GetPawnClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetPawnClass");

	Params::MarinerPlayerState_GetPawnClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetProfileObjectManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerProfileObjectManager*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerProfileObjectManager* AMarinerPlayerState::GetProfileObjectManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetProfileObjectManager");

	Params::MarinerPlayerState_GetProfileObjectManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerPlayerState::GetScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetScore");

	Params::MarinerPlayerState_GetScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetSelectedCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> AMarinerPlayerState::GetSelectedCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetSelectedCharacter");

	Params::MarinerPlayerState_GetSelectedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetStatValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerPlayerState::GetStatValue(class FName StatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetStatValue");

	Params::MarinerPlayerState_GetStatValue Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetStatValueAsFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMarinerPlayerState::GetStatValueAsFloat(class FName StatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetStatValueAsFloat");

	Params::MarinerPlayerState_GetStatValueAsFloat Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetStatValueAsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AMarinerPlayerState::GetStatValueAsText(class FName StatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetStatValueAsText");

	Params::MarinerPlayerState_GetStatValueAsText Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMarinerPlayerState::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "GetTeamIndex");

	Params::MarinerPlayerState_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.IsBotTreatedLikePlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::IsBotTreatedLikePlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IsBotTreatedLikePlayer");

	Params::MarinerPlayerState_IsBotTreatedLikePlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.IsInActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::IsInActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IsInActive");

	Params::MarinerPlayerState_IsInActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.IsIndependent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::IsIndependent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IsIndependent");

	Params::MarinerPlayerState_IsIndependent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.IsStatFloatType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::IsStatFloatType(class FName StatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "IsStatFloatType");

	Params::MarinerPlayerState_IsStatFloatType Parms{};

	Parms.StatName = StatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.ShouldTreatAsPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerPlayerState::ShouldTreatAsPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "ShouldTreatAsPlayer");

	Params::MarinerPlayerState_ShouldTreatAsPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerState.TryAndGetControlledCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* AMarinerPlayerState::TryAndGetControlledCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerState", "TryAndGetControlledCharacter");

	Params::MarinerPlayerState_TryAndGetControlledCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFastOverlapResponseInterface.BeginProjectileFastOverlap
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerProjectile*               OverlappedProjectile                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OverlapHit                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerProjectileFastOverlapResponseInterface::BeginProjectileFastOverlap(class AMarinerProjectile* OverlappedProjectile, const struct FHitResult& OverlapHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFastOverlapResponseInterface", "BeginProjectileFastOverlap");

	Params::MarinerProjectileFastOverlapResponseInterface_BeginProjectileFastOverlap Parms{};

	Parms.OverlappedProjectile = OverlappedProjectile;
	Parms.OverlapHit = std::move(OverlapHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFastOverlapResponseInterface.EndProjectileFastOverlap
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerProjectile*               OverlappedProjectile                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OverlapHit                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IMarinerProjectileFastOverlapResponseInterface::EndProjectileFastOverlap(class AMarinerProjectile* OverlappedProjectile, const struct FHitResult& OverlapHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFastOverlapResponseInterface", "EndProjectileFastOverlap");

	Params::MarinerProjectileFastOverlapResponseInterface_EndProjectileFastOverlap Parms{};

	Parms.OverlappedProjectile = OverlappedProjectile;
	Parms.OverlapHit = std::move(OverlapHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLastMatchPlayersPanel.OnMangoProfileUpdated
// (Final, Native, Private, BlueprintCallable)

void UMarinerLastMatchPlayersPanel::OnMangoProfileUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLastMatchPlayersPanel", "OnMangoProfileUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLastMatchPlayerWidget.ResetInviteButton
// (Final, Native, Private)

void UMarinerLastMatchPlayerWidget::ResetInviteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLastMatchPlayerWidget", "ResetInviteButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLastMatchPlayerWidget.SendInvite
// (Final, Native, Public)

void UMarinerLastMatchPlayerWidget::SendInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLastMatchPlayerWidget", "SendInvite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLastMatchPlayerWidget.SetColorBySelection
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsSelected                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLastMatchPlayerWidget::SetColorBySelection(bool bIsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLastMatchPlayerWidget", "SetColorBySelection");

	Params::MarinerLastMatchPlayerWidget_SetColorBySelection Parms{};

	Parms.bIsSelected = bIsSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerPrompt.HandleInputBindingsChanged
// (Final, Native, Public)

void UMarinerPrompt::HandleInputBindingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "HandleInputBindingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.SetCustomInputWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InputWidget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPrompt::SetCustomInputWidget(class UObject* InputWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "SetCustomInputWidget");

	Params::MarinerPrompt_SetCustomInputWidget Parms{};

	Parms.InputWidget = InputWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.SetInputAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPrompt::SetInputAction(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "SetInputAction");

	Params::MarinerPrompt_SetInputAction Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.SetInputDisplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerPromptInputDisplay              InputDisplay                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPrompt::SetInputDisplay(EMarinerPromptInputDisplay InputDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "SetInputDisplay");

	Params::MarinerPrompt_SetInputDisplay Parms{};

	Parms.InputDisplay = InputDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.SetPrompt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerPromptData               Prompt                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerPrompt::SetPrompt(const struct FMarinerPromptData& Prompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "SetPrompt");

	Params::MarinerPrompt_SetPrompt Parms{};

	Parms.Prompt = std::move(Prompt);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UMarinerPrompt::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "SetText");

	Params::MarinerPrompt_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrompt.GetInputAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerPrompt::GetInputAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "GetInputAction");

	Params::MarinerPrompt_GetInputAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPrompt.GetPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerPromptData         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerPromptData UMarinerPrompt::GetPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "GetPrompt");

	Params::MarinerPrompt_GetPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPrompt.IsAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPrompt::IsAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrompt", "IsAllowed");

	Params::MarinerPrompt_IsAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRocketTrophySpawner.OnBeginRespawnTimer
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerRocketTrophySpawner::OnBeginRespawnTimer(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTrophySpawner", "OnBeginRespawnTimer");

	Params::MarinerRocketTrophySpawner_OnBeginRespawnTimer Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerLoadCMSItemInventoryData.LoadItemInventoryData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMangoItemInventory>      ItemInventoryData                                      (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UMarinerLoadCMSItemInventoryData* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadCMSItemInventoryData* UMarinerLoadCMSItemInventoryData::LoadItemInventoryData(const class UObject* Param_WorldContextObject, const TArray<struct FMangoItemInventory>& ItemInventoryData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadCMSItemInventoryData", "LoadItemInventoryData");

	Params::MarinerLoadCMSItemInventoryData_LoadItemInventoryData Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.ItemInventoryData = std::move(ItemInventoryData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadEquippedDataForCharacter.LoadEquippedDataForCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        CharacterData                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadEquippedDataForCharacter*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadEquippedDataForCharacter* UMarinerLoadEquippedDataForCharacter::LoadEquippedDataForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadEquippedDataForCharacter", "LoadEquippedDataForCharacter");

	Params::MarinerLoadEquippedDataForCharacter_LoadEquippedDataForCharacter Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.CharacterData = CharacterData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.FrontendSkinUILoadResponse.GetSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinCollectionDataAsset* UFrontendSkinUILoadResponse::GetSkinCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FrontendSkinUILoadResponse", "GetSkinCollection");

	Params::FrontendSkinUILoadResponse_GetSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadFrontendSkinDataForCharacter.LoadSkinsForCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerPlayableCharacter*        CharacterData                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOwnedItems                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnownedItems                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProgressionItems                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlastPassItems                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStoreOffers                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCollectionItems                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerLoadFrontendSkinDataForCharacter*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadFrontendSkinDataForCharacter* UMarinerLoadFrontendSkinDataForCharacter::LoadSkinsForCharacter(const class UObject* Param_WorldContextObject, const class UMarinerPlayableCharacter* CharacterData, bool bOwnedItems, bool bUnownedItems, bool bProgressionItems, bool bBlastPassItems, bool bStoreOffers, bool bCollectionItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadFrontendSkinDataForCharacter", "LoadSkinsForCharacter");

	Params::MarinerLoadFrontendSkinDataForCharacter_LoadSkinsForCharacter Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.CharacterData = CharacterData;
	Parms.bOwnedItems = bOwnedItems;
	Parms.bUnownedItems = bUnownedItems;
	Parms.bProgressionItems = bProgressionItems;
	Parms.bBlastPassItems = bBlastPassItems;
	Parms.bStoreOffers = bStoreOffers;
	Parms.bCollectionItems = bCollectionItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLoadingScreen.OnMovieCompleted
// (Final, Native, Private)

void UMarinerLoadingScreen::OnMovieCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLoadingScreen", "OnMovieCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLoadTotemDataFromProfile.LoadTotemDataForProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    InProfile                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerLoadTotemDataFromProfile* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerLoadTotemDataFromProfile* UMarinerLoadTotemDataFromProfile::LoadTotemDataForProfile(const class UObject* Param_WorldContextObject, const struct FMangoProfile& InProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerLoadTotemDataFromProfile", "LoadTotemDataForProfile");

	Params::MarinerLoadTotemDataFromProfile_LoadTotemDataForProfile Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.InProfile = std::move(InProfile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSplineComponent.AuthoritySetSplineDuration
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDuration                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSplineComponent::AuthoritySetSplineDuration(const float InDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineComponent", "AuthoritySetSplineDuration");

	Params::MarinerSplineComponent_AuthoritySetSplineDuration Parms{};

	Parms.InDuration = InDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSplineComponent.AuthoritySetStationaryEndpoints
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInStationaryEndpoints                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSplineComponent::AuthoritySetStationaryEndpoints(bool bInStationaryEndpoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineComponent", "AuthoritySetStationaryEndpoints");

	Params::MarinerSplineComponent_AuthoritySetStationaryEndpoints Parms{};

	Parms.bInStationaryEndpoints = bInStationaryEndpoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSplineComponent.OnSplineReplicationDataChanged
// (Final, Native, Protected)

void UMarinerSplineComponent::OnSplineReplicationDataChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineComponent", "OnSplineReplicationDataChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSplineComponent.GetSplineID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerSplineComponent::GetSplineID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineComponent", "GetSplineID");

	Params::MarinerSplineComponent_GetSplineID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLobbySlotWidget.LeavePartyConfirmed
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLobbySlotWidget::LeavePartyConfirmed(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "LeavePartyConfirmed");

	Params::MarinerLobbySlotWidget_LeavePartyConfirmed Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnAddBotSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnAddBotSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnAddBotSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnBotDifficultyEasySelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnBotDifficultyEasySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnBotDifficultyEasySelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnBotDifficultyExtremeSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnBotDifficultyExtremeSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnBotDifficultyExtremeSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnBotDifficultyHardSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnBotDifficultyHardSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnBotDifficultyHardSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnBotDifficultyNormalSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnBotDifficultyNormalSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnBotDifficultyNormalSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnChangeVoiceStatus
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnChangeVoiceStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnChangeVoiceStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnInviteSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnInviteSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnInviteSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnLeavePartySelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnLeavePartySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnLeavePartySelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnPromoteToPartyLeaderSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnPromoteToPartyLeaderSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnPromoteToPartyLeaderSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnRemoveBotSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnRemoveBotSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnRemoveBotSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnRemoveFromPartySelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnRemoveFromPartySelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnRemoveFromPartySelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnReportPlayerCheatsSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnReportPlayerCheatsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnReportPlayerCheatsSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnReportPlayerGriefingSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnReportPlayerGriefingSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnReportPlayerGriefingSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnReportPlayerInappropriateSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnReportPlayerInappropriateSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnReportPlayerInappropriateSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnReportPlayerOffensiveSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnReportPlayerOffensiveSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnReportPlayerOffensiveSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnSwitchTeamsSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnSwitchTeamsSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnSwitchTeamsSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.OnViewProfileSelected
// (Final, Native, Private)

void UMarinerLobbySlotWidget::OnViewProfileSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "OnViewProfileSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerLobbySlotWidget.PlaySizeWarningAnimation
// (Event, Public, BlueprintEvent)

void UMarinerLobbySlotWidget::PlaySizeWarningAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLobbySlotWidget", "PlaySizeWarningAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerLocalMessage.Blueprint_GetText
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerMessageText              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerMessageText UMarinerLocalMessage::Blueprint_GetText(class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLocalMessage", "Blueprint_GetText");

	Params::MarinerLocalMessage_Blueprint_GetText Parms{};

	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerLocalMessage.OnClientReceive
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class APlayerController*                LocalPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerLocalMessage::OnClientReceive(class APlayerController* LocalPC, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLocalMessage", "OnClientReceive");

	Params::MarinerLocalMessage_OnClientReceive Parms{};

	Parms.LocalPC = LocalPC;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerLocalMessage.ResolveMessage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerController*                LocalPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_1                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     RelatedPlayerState_2                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerMessageText              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerMessageText UMarinerLocalMessage::ResolveMessage(class APlayerController* LocalPC, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerLocalMessage", "ResolveMessage");

	Params::MarinerLocalMessage_ResolveMessage Parms{};

	Parms.LocalPC = LocalPC;
	Parms.RelatedPlayerState_1 = RelatedPlayerState_1;
	Parms.RelatedPlayerState_2 = RelatedPlayerState_2;
	Parms.OptionalObject = OptionalObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMainArtifactsMenu.OnMangoProfileChanged
// (Final, Native, Private)

void UMarinerMainArtifactsMenu::OnMangoProfileChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainArtifactsMenu", "OnMangoProfileChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainArtifactsMenu.OnPresetButtonSelected
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMainArtifactsMenu::OnPresetButtonSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainArtifactsMenu", "OnPresetButtonSelected");

	Params::MarinerMainArtifactsMenu_OnPresetButtonSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainArtifactsMenu.OnSubMenuButtonHovered
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMainArtifactsMenu::OnSubMenuButtonHovered(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainArtifactsMenu", "OnSubMenuButtonHovered");

	Params::MarinerMainArtifactsMenu_OnSubMenuButtonHovered Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainArtifactsMenu.SetCurrentCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        InCurrentCharacter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMainArtifactsMenu::SetCurrentCharacter(class UMarinerPlayableCharacter* InCurrentCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainArtifactsMenu", "SetCurrentCharacter");

	Params::MarinerMainArtifactsMenu_SetCurrentCharacter Parms{};

	Parms.InCurrentCharacter = InCurrentCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMainArtifactsMenu.GetCurrentCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPlayableCharacter*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPlayableCharacter* UMarinerMainArtifactsMenu::GetCurrentCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMainArtifactsMenu", "GetCurrentCharacter");

	Params::MarinerMainArtifactsMenu_GetCurrentCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileSpread.GenerateTransforms
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FMultiProjectileSpawnData>OutSpawnPaths                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USceneComponent*                  SocketSource                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProjectileSpread::GenerateTransforms(class UObject* WorldContextObject, const struct FTransform& SpawnTransform, TArray<struct FMultiProjectileSpawnData>* OutSpawnPaths, class USceneComponent* SocketSource) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileSpread", "GenerateTransforms");

	Params::MarinerProjectileSpread_GenerateTransforms Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.SocketSource = SocketSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSpawnPaths != nullptr)
		*OutSpawnPaths = std::move(Parms.OutSpawnPaths);
}


// Function Mariner.MarinerProjectileSpread.GetPathCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerProjectileSpread::GetPathCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileSpread", "GetPathCount");

	Params::MarinerProjectileSpread_GetPathCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults.GetOverrideAbilityRootMotionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerRootMotionMoveUpdateDefaults::GetOverrideAbilityRootMotionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults", "GetOverrideAbilityRootMotionName");

	Params::MarinerRootMotionMoveUpdateDefaults_GetOverrideAbilityRootMotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.GetMoveToDynamicForceRootMotionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::GetMoveToDynamicForceRootMotionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce", "GetMoveToDynamicForceRootMotionName");

	Params::MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetMoveToDynamicForceRootMotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.GetSmallValidDuration
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::GetSmallValidDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce", "GetSmallValidDuration");

	Params::MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_GetSmallValidDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.ResetLocationForMoveToDynamicForceRootMotionLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NewTargetLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::ResetLocationForMoveToDynamicForceRootMotionLocal(class UMarinerCharacterMovement* OwningMovementComponent, const struct FVector& NewTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce", "ResetLocationForMoveToDynamicForceRootMotionLocal");

	Params::MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ResetLocationForMoveToDynamicForceRootMotionLocal Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.NewTargetLocation = std::move(NewTargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce.ValidDurationForMoveToDynamicForce
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   DurationToTest                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce::ValidDurationForMoveToDynamicForce(float DurationToTest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce", "ValidDurationForMoveToDynamicForce");

	Params::MarinerRootMotionMoveUpdateDefaults_MoveToDynamicForce_ValidDurationForMoveToDynamicForce Parms{};

	Parms.DurationToTest = DurationToTest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapDataAsset.GetFullMapName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UMarinerMapDataAsset::GetFullMapName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapDataAsset", "GetFullMapName");

	Params::MarinerMapDataAsset_GetFullMapName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMapDataAsset.GetMapName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UMarinerMapDataAsset::GetMapName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapDataAsset", "GetMapName");

	Params::MarinerMapDataAsset_GetMapName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRarityWidget.InitRarityWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerItemLoaderButtonBase*     Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRarityWidget::InitRarityWidget(class UMarinerItemLoaderButtonBase* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRarityWidget", "InitRarityWidget");

	Params::MarinerRarityWidget_InitRarityWidget Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRarityWidget.SetRarityBrush
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      InBrush                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRarityWidget::SetRarityBrush(const struct FSlateBrush& InBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRarityWidget", "SetRarityBrush");

	Params::MarinerRarityWidget_SetRarityBrush Parms{};

	Parms.InBrush = std::move(InBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRarityWidget.SetRarityColor
// (Final, Native, Private)
// Parameters:
// class UMarinerItemLoaderButtonBase*     Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRarityWidget::SetRarityColor(class UMarinerItemLoaderButtonBase* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRarityWidget", "SetRarityColor");

	Params::MarinerRarityWidget_SetRarityColor Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMapSelectButton.OnMapImageLoadFinished
// (Final, Native, Private)

void UMarinerMapSelectButton::OnMapImageLoadFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapSelectButton", "OnMapImageLoadFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMapSelectButton.SetMap
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            InMapId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInShowMapText                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMapSelectButton::SetMap(const struct FGuid& InMapId, bool bInShowMapText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapSelectButton", "SetMap");

	Params::MarinerMapSelectButton_SetMap Parms{};

	Parms.InMapId = std::move(InMapId);
	Parms.bInShowMapText = bInShowMapText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMapSelectButton.GetMapId
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FGuid UMarinerMapSelectButton::GetMapId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMapSelectButton", "GetMapId");

	Params::MarinerMapSelectButton_GetMapId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMatchmakingMapSelection.Init
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            InPlaylistId                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            InMapId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFilterModeArray                 InModeIDs                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMatchmakingMapSelection::Init(const struct FGuid& InPlaylistId, const struct FGuid& InMapId, const struct FFilterModeArray& InModeIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMatchmakingMapSelection", "Init");

	Params::MarinerMatchmakingMapSelection_Init Parms{};

	Parms.InPlaylistId = std::move(InPlaylistId);
	Parms.InMapId = std::move(InMapId);
	Parms.InModeIDs = std::move(InModeIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMatchmakingMapSelection.SetModeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ModeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMatchmakingMapSelection::SetModeEnabled(int32 ModeIndex, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMatchmakingMapSelection", "SetModeEnabled");

	Params::MarinerMatchmakingMapSelection_SetModeEnabled Parms{};

	Parms.ModeIndex = ModeIndex;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMatchmakingMapSelection.GetModeCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerMatchmakingMapSelection::GetModeCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMatchmakingMapSelection", "GetModeCount");

	Params::MarinerMatchmakingMapSelection_GetModeCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMatchmakingMapSelection.GetModeData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ModeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ModeNameOut                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMatchmakingMapSelection::GetModeData(int32 ModeIndex, class FText* ModeNameOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMatchmakingMapSelection", "GetModeData");

	Params::MarinerMatchmakingMapSelection_GetModeData Parms{};

	Parms.ModeIndex = ModeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModeNameOut != nullptr)
		*ModeNameOut = std::move(Parms.ModeNameOut);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMatchmakingMapSelection.GetModeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ModeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMatchmakingMapSelection::GetModeEnabled(int32 ModeIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMatchmakingMapSelection", "GetModeEnabled");

	Params::MarinerMatchmakingMapSelection_GetModeEnabled Parms{};

	Parms.ModeIndex = ModeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPurchaseMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxPurchaseDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxPurchaseData UMarinerPurchaseMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPurchaseMessageBox", "GetData");

	Params::MarinerPurchaseMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.CalculateLaunchVelocity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LaunchLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LaunchAngle                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Gravity                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLaunchVelocity                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::CalculateLaunchVelocity(const struct FVector& LaunchLocation, const struct FVector& TargetLocation, const float LaunchAngle, const float Gravity, struct FVector* OutLaunchVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "CalculateLaunchVelocity");

	Params::MarinerMathUtils_CalculateLaunchVelocity Parms{};

	Parms.LaunchLocation = std::move(LaunchLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.LaunchAngle = LaunchAngle;
	Parms.Gravity = Gravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLaunchVelocity != nullptr)
		*OutLaunchVelocity = std::move(Parms.OutLaunchVelocity);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.CapsuleIntersectsBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          CapsulePos1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsulePos2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       BoxTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::CapsuleIntersectsBox(const struct FBox& Box, const struct FVector& CapsulePos1, const struct FVector& CapsulePos2, float SphereRadius, const struct FTransform& BoxTransform, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "CapsuleIntersectsBox");

	Params::MarinerMathUtils_CapsuleIntersectsBox Parms{};

	Parms.Box = std::move(Box);
	Parms.CapsulePos1 = std::move(CapsulePos1);
	Parms.CapsulePos2 = std::move(CapsulePos2);
	Parms.SphereRadius = SphereRadius;
	Parms.BoxTransform = std::move(BoxTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.CapsuleIntersectsCapsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Capsule1PosStart                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Capsule1PosEnd                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius1                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Capsule2PosStart                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Capsule2PosEnd                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius2                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::CapsuleIntersectsCapsule(const struct FVector& Capsule1PosStart, const struct FVector& Capsule1PosEnd, float CapsuleRadius1, const struct FVector& Capsule2PosStart, const struct FVector& Capsule2PosEnd, float CapsuleRadius2, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "CapsuleIntersectsCapsule");

	Params::MarinerMathUtils_CapsuleIntersectsCapsule Parms{};

	Parms.Capsule1PosStart = std::move(Capsule1PosStart);
	Parms.Capsule1PosEnd = std::move(Capsule1PosEnd);
	Parms.CapsuleRadius1 = CapsuleRadius1;
	Parms.Capsule2PosStart = std::move(Capsule2PosStart);
	Parms.Capsule2PosEnd = std::move(Capsule2PosEnd);
	Parms.CapsuleRadius2 = CapsuleRadius2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.CapsuleIntersectsCapsuleCone
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CapsulePosStart                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsulePosEnd                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsuleConePosOrigin                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsuleConeDirection                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleConeLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleConeRadiusAtEnd                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::CapsuleIntersectsCapsuleCone(const struct FVector& CapsulePosStart, const struct FVector& CapsulePosEnd, const float CapsuleRadius, const struct FVector& CapsuleConePosOrigin, const struct FVector& CapsuleConeDirection, float CapsuleConeLength, const float CapsuleConeRadiusAtEnd, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "CapsuleIntersectsCapsuleCone");

	Params::MarinerMathUtils_CapsuleIntersectsCapsuleCone Parms{};

	Parms.CapsulePosStart = std::move(CapsulePosStart);
	Parms.CapsulePosEnd = std::move(CapsulePosEnd);
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.CapsuleConePosOrigin = std::move(CapsuleConePosOrigin);
	Parms.CapsuleConeDirection = std::move(CapsuleConeDirection);
	Parms.CapsuleConeLength = CapsuleConeLength;
	Parms.CapsuleConeRadiusAtEnd = CapsuleConeRadiusAtEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.GetCapsulePointsFromExtents
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCapsuleStartPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCapsuleEndPoint                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMathUtils::GetCapsulePointsFromExtents(const class UCapsuleComponent* Capsule, struct FVector* OutCapsuleStartPoint, struct FVector* OutCapsuleEndPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "GetCapsulePointsFromExtents");

	Params::MarinerMathUtils_GetCapsulePointsFromExtents Parms{};

	Parms.Capsule = Capsule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCapsuleStartPoint != nullptr)
		*OutCapsuleStartPoint = std::move(Parms.OutCapsuleStartPoint);

	if (OutCapsuleEndPoint != nullptr)
		*OutCapsuleEndPoint = std::move(Parms.OutCapsuleEndPoint);
}


// Function Mariner.MarinerMathUtils.GetDepenetrationDistanceFromHitResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerMathUtils::GetDepenetrationDistanceFromHitResult(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "GetDepenetrationDistanceFromHitResult");

	Params::MarinerMathUtils_GetDepenetrationDistanceFromHitResult Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.GetPitchFromVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerMathUtils::GetPitchFromVector(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "GetPitchFromVector");

	Params::MarinerMathUtils_GetPitchFromVector Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.HexToLinearColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           HexColor                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UMarinerMathUtils::HexToLinearColor(const class FString& HexColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "HexToLinearColor");

	Params::MarinerMathUtils_HexToLinearColor Parms{};

	Parms.HexColor = std::move(HexColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.InterpTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Current                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Target                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerMathUtils::InterpTo(const float& Current, const float& Target, float DeltaTime, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "InterpTo");

	Params::MarinerMathUtils_InterpTo Parms{};

	Parms.Current = Current;
	Parms.Target = Target;
	Parms.DeltaTime = DeltaTime;
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.IsActorBehindPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            Pawn                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::IsActorBehindPawn(const class AActor* Actor, const class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "IsActorBehindPawn");

	Params::MarinerMathUtils_IsActorBehindPawn Parms{};

	Parms.Actor = Actor;
	Parms.Pawn = Pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.IsPointWithinCone
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ConeOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ConeDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CosConeHalfAngle                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ConeLength                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::IsPointWithinCone(const struct FVector& Point, const struct FVector& ConeOrigin, const struct FVector& ConeDirection, const float& CosConeHalfAngle, const float& ConeLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "IsPointWithinCone");

	Params::MarinerMathUtils_IsPointWithinCone Parms{};

	Parms.Point = std::move(Point);
	Parms.ConeOrigin = std::move(ConeOrigin);
	Parms.ConeDirection = std::move(ConeDirection);
	Parms.CosConeHalfAngle = CosConeHalfAngle;
	Parms.ConeLength = ConeLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.LinearColorToHex
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     LinearColor                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerMathUtils::LinearColorToHex(const struct FLinearColor& LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "LinearColorToHex");

	Params::MarinerMathUtils_LinearColorToHex Parms{};

	Parms.LinearColor = std::move(LinearColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.LineIntersectsSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LineOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LineDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SphereCenter                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::LineIntersectsSphere(const struct FVector& LineOrigin, const struct FVector& LineDirection, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "LineIntersectsSphere");

	Params::MarinerMathUtils_LineIntersectsSphere Parms{};

	Parms.LineOrigin = std::move(LineOrigin);
	Parms.LineDirection = std::move(LineDirection);
	Parms.SphereCenter = std::move(SphereCenter);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.LineSegmentIntersectsSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SegmentStart                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEnd                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SphereCenter                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::LineSegmentIntersectsSphere(const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "LineSegmentIntersectsSphere");

	Params::MarinerMathUtils_LineSegmentIntersectsSphere Parms{};

	Parms.SegmentStart = std::move(SegmentStart);
	Parms.SegmentEnd = std::move(SegmentEnd);
	Parms.SphereCenter = std::move(SphereCenter);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.PointInsideBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxExtents                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         BoxRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          BoxOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DebugLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLikelyInside                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::PointInsideBox(const class UObject* WorldContextObject, const struct FVector& BoxExtents, const struct FRotator& BoxRotation, const struct FVector& BoxOrigin, const struct FVector& Point, int32 DebugLevel, bool bIsLikelyInside)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "PointInsideBox");

	Params::MarinerMathUtils_PointInsideBox Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BoxExtents = std::move(BoxExtents);
	Parms.BoxRotation = std::move(BoxRotation);
	Parms.BoxOrigin = std::move(BoxOrigin);
	Parms.Point = std::move(Point);
	Parms.DebugLevel = DebugLevel;
	Parms.bIsLikelyInside = bIsLikelyInside;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.PointInsideCapsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CapsuleTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FullCapsuleHeight                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::PointInsideCapsule(const struct FVector& Point, const struct FTransform& CapsuleTransform, const float FullCapsuleHeight, const float CapsuleRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "PointInsideCapsule");

	Params::MarinerMathUtils_PointInsideCapsule Parms{};

	Parms.Point = std::move(Point);
	Parms.CapsuleTransform = std::move(CapsuleTransform);
	Parms.FullCapsuleHeight = FullCapsuleHeight;
	Parms.CapsuleRadius = CapsuleRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.PointInsideCylinder
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CylinderTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CylinderHeight                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CylinderRadius                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::PointInsideCylinder(const struct FVector& Point, const struct FTransform& CylinderTransform, const float CylinderHeight, const float CylinderRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "PointInsideCylinder");

	Params::MarinerMathUtils_PointInsideCylinder Parms{};

	Parms.Point = std::move(Point);
	Parms.CylinderTransform = std::move(CylinderTransform);
	Parms.CylinderHeight = CylinderHeight;
	Parms.CylinderRadius = CylinderRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.PointInsideSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SphereLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::PointInsideSphere(const struct FVector& Point, const struct FVector& SphereLocation, const float SphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "PointInsideSphere");

	Params::MarinerMathUtils_PointInsideSphere Parms{};

	Parms.Point = std::move(Point);
	Parms.SphereLocation = std::move(SphereLocation);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.ProjectWorldToScreenBidirectional
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTargetBehindCamera                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayerViewportRelative                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::ProjectWorldToScreenBidirectional(class APlayerController* PlayerController, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool* bTargetBehindCamera, bool bPlayerViewportRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "ProjectWorldToScreenBidirectional");

	Params::MarinerMathUtils_ProjectWorldToScreenBidirectional Parms{};

	Parms.PlayerController = PlayerController;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.bPlayerViewportRelative = bPlayerViewportRelative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ScreenPosition != nullptr)
		*ScreenPosition = std::move(Parms.ScreenPosition);

	if (bTargetBehindCamera != nullptr)
		*bTargetBehindCamera = Parms.bTargetBehindCamera;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.RayIntersectsCapsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          RayOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CapsuleTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FullCapsuleHeight                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::RayIntersectsCapsule(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FTransform& CapsuleTransform, const float FullCapsuleHeight, const float CapsuleRadius, TArray<struct FVector>* OutIntersectionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "RayIntersectsCapsule");

	Params::MarinerMathUtils_RayIntersectsCapsule Parms{};

	Parms.RayOrigin = std::move(RayOrigin);
	Parms.RayDirection = std::move(RayDirection);
	Parms.CapsuleTransform = std::move(CapsuleTransform);
	Parms.FullCapsuleHeight = FullCapsuleHeight;
	Parms.CapsuleRadius = CapsuleRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.RayIntersectsCylinder
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          RayOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CylinderTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CylinderHeight                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CylinderRadius                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowIntersectionWithCaps                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::RayIntersectsCylinder(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FTransform& CylinderTransform, const float CylinderHeight, const float CylinderRadius, const bool bAllowIntersectionWithCaps, TArray<struct FVector>* OutIntersectionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "RayIntersectsCylinder");

	Params::MarinerMathUtils_RayIntersectsCylinder Parms{};

	Parms.RayOrigin = std::move(RayOrigin);
	Parms.RayDirection = std::move(RayDirection);
	Parms.CylinderTransform = std::move(CylinderTransform);
	Parms.CylinderHeight = CylinderHeight;
	Parms.CylinderRadius = CylinderRadius;
	Parms.bAllowIntersectionWithCaps = bAllowIntersectionWithCaps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.RayIntersectsSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          RayOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RayDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SphereCenter                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::RayIntersectsSphere(const struct FVector& RayOrigin, const struct FVector& RayDirection, const struct FVector& SphereCenter, const float SphereRadius, TArray<struct FVector>* OutIntersectionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "RayIntersectsSphere");

	Params::MarinerMathUtils_RayIntersectsSphere Parms{};

	Parms.RayOrigin = std::move(RayOrigin);
	Parms.RayDirection = std::move(RayDirection);
	Parms.SphereCenter = std::move(SphereCenter);
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.RoundVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Vector                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerMathUtils::RoundVector(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "RoundVector");

	Params::MarinerMathUtils_RoundVector Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SegmentIntersection2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        SegmentStartA                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        SegmentEndA                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        SegmentStartB                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        SegmentEndB                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SegmentIntersection2D(const struct FVector2D& SegmentStartA, const struct FVector2D& SegmentEndA, const struct FVector2D& SegmentStartB, const struct FVector2D& SegmentEndB, struct FVector2D* OutIntersectionPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SegmentIntersection2D");

	Params::MarinerMathUtils_SegmentIntersection2D Parms{};

	Parms.SegmentStartA = std::move(SegmentStartA);
	Parms.SegmentEndA = std::move(SegmentEndA);
	Parms.SegmentStartB = std::move(SegmentStartB);
	Parms.SegmentEndB = std::move(SegmentEndB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SegmentIntersectsBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BoxExtents                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         BoxRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          BoxOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentStart                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SegmentEnd                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutIntersectionPoints                                  (Parm, OutParm, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// int32                                   DebugLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDoesLikelyIntersect                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SegmentIntersectsBox(class UObject* WorldContextObject, const struct FVector& BoxExtents, const struct FRotator& BoxRotation, const struct FVector& BoxOrigin, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, TArray<struct FVector>* OutIntersectionPoints, int32 DebugLevel, bool bDoesLikelyIntersect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SegmentIntersectsBox");

	Params::MarinerMathUtils_SegmentIntersectsBox Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BoxExtents = std::move(BoxExtents);
	Parms.BoxRotation = std::move(BoxRotation);
	Parms.BoxOrigin = std::move(BoxOrigin);
	Parms.SegmentStart = std::move(SegmentStart);
	Parms.SegmentEnd = std::move(SegmentEnd);
	Parms.DebugLevel = DebugLevel;
	Parms.bDoesLikelyIntersect = bDoesLikelyIntersect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoints != nullptr)
		*OutIntersectionPoints = std::move(Parms.OutIntersectionPoints);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SlabSegmentIntersection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   BoxMin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BoxMax                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pos1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pos2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutLastStartTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutLastEndTime                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SlabSegmentIntersection(float BoxMin, float BoxMax, float Pos1, float Pos2, float* OutLastStartTime, float* OutLastEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SlabSegmentIntersection");

	Params::MarinerMathUtils_SlabSegmentIntersection Parms{};

	Parms.BoxMin = BoxMin;
	Parms.BoxMax = BoxMax;
	Parms.Pos1 = Pos1;
	Parms.Pos2 = Pos2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLastStartTime != nullptr)
		*OutLastStartTime = Parms.OutLastStartTime;

	if (OutLastEndTime != nullptr)
		*OutLastEndTime = Parms.OutLastEndTime;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SphereIntersectsBox
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBox                             Box                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          SpherePos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadiusSquared                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       BoxTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SphereIntersectsBox(const struct FBox& Box, const struct FVector& SpherePos, float SphereRadiusSquared, const struct FTransform& BoxTransform, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SphereIntersectsBox");

	Params::MarinerMathUtils_SphereIntersectsBox Parms{};

	Parms.Box = std::move(Box);
	Parms.SpherePos = std::move(SpherePos);
	Parms.SphereRadiusSquared = SphereRadiusSquared;
	Parms.BoxTransform = std::move(BoxTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SphereIntersectsCapsule
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SpherePos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsulePos1                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CapsulePos2                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SphereIntersectsCapsule(const struct FVector& SpherePos, const struct FVector& CapsulePos1, const struct FVector& CapsulePos2, float SphereRadius, float CapsuleRadius, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SphereIntersectsCapsule");

	Params::MarinerMathUtils_SphereIntersectsCapsule Parms{};

	Parms.SpherePos = std::move(SpherePos);
	Parms.CapsulePos1 = std::move(CapsulePos1);
	Parms.CapsulePos2 = std::move(CapsulePos2);
	Parms.SphereRadius = SphereRadius;
	Parms.CapsuleRadius = CapsuleRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMathUtils.SphereIntersectsSphere
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Sphere1Pos                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Sphere2Pos                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Sphere1Radius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Sphere2Radius                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutIntersectionPoint                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutCollisionNormal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMathUtils::SphereIntersectsSphere(const struct FVector& Sphere1Pos, const struct FVector& Sphere2Pos, float Sphere1Radius, float Sphere2Radius, struct FVector* OutIntersectionPoint, struct FVector* OutCollisionNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMathUtils", "SphereIntersectsSphere");

	Params::MarinerMathUtils_SphereIntersectsSphere Parms{};

	Parms.Sphere1Pos = std::move(Sphere1Pos);
	Parms.Sphere2Pos = std::move(Sphere2Pos);
	Parms.Sphere1Radius = Sphere1Radius;
	Parms.Sphere2Radius = Sphere2Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntersectionPoint != nullptr)
		*OutIntersectionPoint = std::move(Parms.OutIntersectionPoint);

	if (OutCollisionNormal != nullptr)
		*OutCollisionNormal = std::move(Parms.OutCollisionNormal);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMedalManagement.CreateMedal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerLocalMessage*             MessageCDO                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMedalManagement::CreateMedal(class UMarinerLocalMessage* MessageCDO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMedalManagement", "CreateMedal");

	Params::MarinerMedalManagement_CreateMedal Parms{};

	Parms.MessageCDO = MessageCDO;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardPreview.PopulateRewardPreview
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FMangoReward                     Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardPreview::PopulateRewardPreview(const struct FMangoReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardPreview", "PopulateRewardPreview");

	Params::MarinerRewardPreview_PopulateRewardPreview Parms{};

	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerRewardPreview.PopulateUpcomingRewardPreview
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bFeatured                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RewardLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoReward                     Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardPreview::PopulateUpcomingRewardPreview(bool bFeatured, int32 RewardLevel, const struct FMangoReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardPreview", "PopulateUpcomingRewardPreview");

	Params::MarinerRewardPreview_PopulateUpcomingRewardPreview Parms{};

	Parms.bFeatured = bFeatured;
	Parms.RewardLevel = RewardLevel;
	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMediaPlayerWidget.MuteMovie
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInMuted                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::MuteMovie(bool bInMuted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "MuteMovie");

	Params::MarinerMediaPlayerWidget_MuteMovie Parms{};

	Parms.bInMuted = bInMuted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.OnMediaOpened
// (Final, Native, Private)
// Parameters:
// class FString                           OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::OnMediaOpened(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "OnMediaOpened");

	Params::MarinerMediaPlayerWidget_OnMediaOpened Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.OnMediaOpenFailed
// (Final, Native, Private)
// Parameters:
// class FString                           FailedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::OnMediaOpenFailed(const class FString& FailedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "OnMediaOpenFailed");

	Params::MarinerMediaPlayerWidget_OnMediaOpenFailed Parms{};

	Parms.FailedUrl = std::move(FailedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.OnMediaStopped
// (Final, Native, Private)

void UMarinerMediaPlayerWidget::OnMediaStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "OnMediaStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.PauseMovie
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInPaused                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::PauseMovie(bool bInPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "PauseMovie");

	Params::MarinerMediaPlayerWidget_PauseMovie Parms{};

	Parms.bInPaused = bInPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.PlayMovie
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMediaSource*                     MediaSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       MovieCompletedCallback                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::PlayMovie(class UMediaSource* MediaSource, bool bLooping, TDelegate<void()> MovieCompletedCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "PlayMovie");

	Params::MarinerMediaPlayerWidget_PlayMovie Parms{};

	Parms.MediaSource = MediaSource;
	Parms.bLooping = bLooping;
	Parms.MovieCompletedCallback = MovieCompletedCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.SetVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMediaPlayerWidget::SetVolume(float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "SetVolume");

	Params::MarinerMediaPlayerWidget_SetVolume Parms{};

	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.StopMovie
// (Final, Native, Public, BlueprintCallable)

void UMarinerMediaPlayerWidget::StopMovie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "StopMovie");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMediaPlayerWidget.IsMoviePaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMediaPlayerWidget::IsMoviePaused() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "IsMoviePaused");

	Params::MarinerMediaPlayerWidget_IsMoviePaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMediaPlayerWidget.IsMoviePlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMediaPlayerWidget::IsMoviePlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMediaPlayerWidget", "IsMoviePlaying");

	Params::MarinerMediaPlayerWidget_IsMoviePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuSequence.Advance
// (Final, Native, Public, BlueprintCallable)

void UMarinerMenuSequence::Advance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "Advance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuSequence.IsStepAllowed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuSequence::IsStepAllowed(TSubclassOf<class UMarinerMenuStackLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "IsStepAllowed");

	Params::MarinerMenuSequence_IsStepAllowed Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuSequence.OnContentLayerStateChange
// (Final, Native, Private)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetAnimationState                   NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuSequence::OnContentLayerStateChange(class UMarinerAnimatedWidget* Widget, EWidgetAnimationState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "OnContentLayerStateChange");

	Params::MarinerMenuSequence_OnContentLayerStateChange Parms{};

	Parms.Widget = Widget;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuSequence.OnPopulateContentLayer
// (Final, Native, Private)
// Parameters:
// class UMarinerAnimatedWidget*           Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuSequence::OnPopulateContentLayer(class UMarinerAnimatedWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "OnPopulateContentLayer");

	Params::MarinerMenuSequence_OnPopulateContentLayer Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuSequence.OnStepReached
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UMarinerMenuStackLayer>Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuSequence::OnStepReached(TSubclassOf<class UMarinerMenuStackLayer> Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "OnStepReached");

	Params::MarinerMenuSequence_OnStepReached Parms{};

	Parms.Layer = Layer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMenuSequence.GetActiveStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class UMarinerMenuStackLayer>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class UMarinerMenuStackLayer> UMarinerMenuSequence::GetActiveStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "GetActiveStep");

	Params::MarinerMenuSequence_GetActiveStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuSequence.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerMenuSequenceAssets       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerMenuSequenceAssets UMarinerMenuSequence::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuSequence", "GetAssets");

	Params::MarinerMenuSequence_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPrivateMatchMenu.OnLeavePrivateMatchConfirm
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPrivateMatchMenu::OnLeavePrivateMatchConfirm(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrivateMatchMenu", "OnLeavePrivateMatchConfirm");

	Params::MarinerPrivateMatchMenu_OnLeavePrivateMatchConfirm Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPrivateMatchMenu.OnStartSelected
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPrivateMatchMenu::OnStartSelected(class UMarinerLayeredButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPrivateMatchMenu", "OnStartSelected");

	Params::MarinerPrivateMatchMenu_OnStartSelected Parms{};

	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMenuStackBaseWidget.GetStackManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerMenuStackManager*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackManager* UMarinerMenuStackBaseWidget::GetStackManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackBaseWidget", "GetStackManager");

	Params::MarinerMenuStackBaseWidget_GetStackManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackBaseWidget.GetCustomBackPrompt
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMarinerPromptData               OutPrompt                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMenuStackBaseWidget::GetCustomBackPrompt(struct FMarinerPromptData* OutPrompt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackBaseWidget", "GetCustomBackPrompt");

	Params::MarinerMenuStackBaseWidget_GetCustomBackPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrompt != nullptr)
		*OutPrompt = std::move(Parms.OutPrompt);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuStackBaseWidget.GetWidgetSetup
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerMenuStackBaseWidgetSetup ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerMenuStackBaseWidgetSetup UMarinerMenuStackBaseWidget::GetWidgetSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuStackBaseWidget", "GetWidgetSetup");

	Params::MarinerMenuStackBaseWidget_GetWidgetSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMenuTooltipWidget.EnableHeader
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMenuTooltipWidget::EnableHeader(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuTooltipWidget", "EnableHeader");

	Params::MarinerMenuTooltipWidget_EnableHeader Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMenuTooltipWidget.Populate
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InDescription                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerMenuTooltipWidget::Populate(const class FText& InDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMenuTooltipWidget", "Populate");

	Params::MarinerMenuTooltipWidget_Populate Parms{};

	Parms.InDescription = std::move(InDescription);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerMessageBox.DisplayTimerUpdate
// (Final, Native, Private)

void UMarinerMessageBox::DisplayTimerUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBox", "DisplayTimerUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxData     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxData UMarinerMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMessageBox", "GetData");

	Params::MarinerMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSingleAnimationWidget.PlaySingleAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPlayOnce                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRestoreState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UMarinerSingleAnimationWidget* Instance)>OnCompletedEvent                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerSingleAnimationWidget::PlaySingleAnimation(bool bPlayOnce, bool bRestoreState, TDelegate<void(class UMarinerSingleAnimationWidget* Instance)> OnCompletedEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSingleAnimationWidget", "PlaySingleAnimation");

	Params::MarinerSingleAnimationWidget_PlaySingleAnimation Parms{};

	Parms.bPlayOnce = bPlayOnce;
	Parms.bRestoreState = bRestoreState;
	Parms.OnCompletedEvent = OnCompletedEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSingleAnimationWidget.IsSingleAnimationPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSingleAnimationWidget::IsSingleAnimationPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSingleAnimationWidget", "IsSingleAnimationPlaying");

	Params::MarinerSingleAnimationWidget_IsSingleAnimationPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetHostCanEditBots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerModeDataAsset::GetHostCanEditBots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetHostCanEditBots");

	Params::MarinerModeDataAsset_GetHostCanEditBots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerModeDataAsset::GetIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetIcon");

	Params::MarinerModeDataAsset_GetIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetLinkedGameMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerGameMode                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerGameMode UMarinerModeDataAsset::GetLinkedGameMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetLinkedGameMode");

	Params::MarinerModeDataAsset_GetLinkedGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetModeSupportFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerModeDataAsset::GetModeSupportFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetModeSupportFlags");

	Params::MarinerModeDataAsset_GetModeSupportFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetPostGameStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class FText>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, class FText> UMarinerModeDataAsset::GetPostGameStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetPostGameStats");

	Params::MarinerModeDataAsset_GetPostGameStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetPreviewImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateBrush                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSlateBrush UMarinerModeDataAsset::GetPreviewImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetPreviewImage");

	Params::MarinerModeDataAsset_GetPreviewImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetPrivateMatchMaxPartySize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerModeDataAsset::GetPrivateMatchMaxPartySize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetPrivateMatchMaxPartySize");

	Params::MarinerModeDataAsset_GetPrivateMatchMaxPartySize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetScoreboardStats
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, class FText>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, class FText> UMarinerModeDataAsset::GetScoreboardStats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetScoreboardStats");

	Params::MarinerModeDataAsset_GetScoreboardStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetSupportsBots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerModeDataAsset::GetSupportsBots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetSupportsBots");

	Params::MarinerModeDataAsset_GetSupportsBots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerModeDataAsset.GetSupportsTeams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerModeDataAsset::GetSupportsTeams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerModeDataAsset", "GetSupportsTeams");

	Params::MarinerModeDataAsset_GetSupportsTeams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSpringArmComponent.ApplyCameraLagPropertiesOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerSpringArmCameraLagPropertiesCameraLagProperties                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerSpringArmComponent::ApplyCameraLagPropertiesOverride(const struct FMarinerSpringArmCameraLagProperties& CameraLagProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "ApplyCameraLagPropertiesOverride");

	Params::MarinerSpringArmComponent_ApplyCameraLagPropertiesOverride Parms{};

	Parms.CameraLagProperties = std::move(CameraLagProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.ClearAllCameraLagPropertiesOverrides
// (Final, Native, Public, BlueprintCallable)

void UMarinerSpringArmComponent::ClearAllCameraLagPropertiesOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "ClearAllCameraLagPropertiesOverrides");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.ClearTargetArmLengthOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerSpringArmComponent::ClearTargetArmLengthOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "ClearTargetArmLengthOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.RemoveCameraLagPropertiesOverride
// (Final, Native, Public, BlueprintCallable)

void UMarinerSpringArmComponent::RemoveCameraLagPropertiesOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "RemoveCameraLagPropertiesOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.ServerUpdateProjectileSpawnLocation_Internal
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FVector_NetQuantize              Location                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSpringArmComponent::ServerUpdateProjectileSpawnLocation_Internal(const struct FVector_NetQuantize& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "ServerUpdateProjectileSpawnLocation_Internal");

	Params::MarinerSpringArmComponent_ServerUpdateProjectileSpawnLocation_Internal Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.SetLockedSocketTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LockedWorldLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSpringArmComponent::SetLockedSocketTargetLocation(const struct FVector& LockedWorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "SetLockedSocketTargetLocation");

	Params::MarinerSpringArmComponent_SetLockedSocketTargetLocation Parms{};

	Parms.LockedWorldLocation = std::move(LockedWorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.SetTargetArmLengthOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTargetArmLength                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSpringArmComponent::SetTargetArmLengthOverride(float NewTargetArmLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "SetTargetArmLengthOverride");

	Params::MarinerSpringArmComponent_SetTargetArmLengthOverride Parms{};

	Parms.NewTargetArmLength = NewTargetArmLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpringArmComponent.GetProjectileSpawnLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UMarinerSpringArmComponent::GetProjectileSpawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpringArmComponent", "GetProjectileSpawnLocation");

	Params::MarinerSpringArmComponent_GetProjectileSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMontageListenerInterface.OnMontageBlendingOutStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerMontageListenerInterface::OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMontageListenerInterface", "OnMontageBlendingOutStarted");

	Params::MarinerMontageListenerInterface_OnMontageBlendingOutStarted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMontageListenerInterface.OnMontageEnded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerMontageListenerInterface::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMontageListenerInterface", "OnMontageEnded");

	Params::MarinerMontageListenerInterface_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMontageListenerInterface.OnMontageStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerMontageListenerInterface::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMontageListenerInterface", "OnMontageStarted");

	Params::MarinerMontageListenerInterface_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMoveUpdate_TeleportDefaults.IsPendingTeleport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerMoveUpdate_TeleportDefaults::IsPendingTeleport(class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMoveUpdate_TeleportDefaults", "IsPendingTeleport");

	Params::MarinerMoveUpdate_TeleportDefaults_IsPendingTeleport Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMoveUpdate_TeleportDefaults.RequestTeleport
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMoveUpdate_TeleportDefaults>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  TeleportLocations                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   OverrideMaxSpeedClamp                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideResetJumps                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRejectTeleportRequestIfHoldingPriorityItem            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerTeleportRequestResponse         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerTeleportRequestResponse UMarinerMoveUpdate_TeleportDefaults::RequestTeleport(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_TeleportDefaults> Defaults, TArray<struct FVector>& TeleportLocations, float OverrideMaxSpeedClamp, bool bOverrideResetJumps, bool bRejectTeleportRequestIfHoldingPriorityItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMoveUpdate_TeleportDefaults", "RequestTeleport");

	Params::MarinerMoveUpdate_TeleportDefaults_RequestTeleport Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.Defaults = Defaults;
	Parms.TeleportLocations = std::move(TeleportLocations);
	Parms.OverrideMaxSpeedClamp = OverrideMaxSpeedClamp;
	Parms.bOverrideResetJumps = bOverrideResetJumps;
	Parms.bRejectTeleportRequestIfHoldingPriorityItem = bRejectTeleportRequestIfHoldingPriorityItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeleportLocations = std::move(Parms.TeleportLocations);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerMoveUpdate_SwapActiveMeshDefaults.ApplyActiveMeshSwap
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   MeshToSwapTo                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerChangeMeshEnum                  OverrideMeshTypeToSwap                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideDelayBetweenSwap                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideForcePerspective                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMoveUpdate_SwapActiveMeshDefaults::ApplyActiveMeshSwap(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults, class UMeshComponent* MeshToSwapTo, EMarinerChangeMeshEnum OverrideMeshTypeToSwap, float OverrideDelayBetweenSwap, bool bOverrideForcePerspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMoveUpdate_SwapActiveMeshDefaults", "ApplyActiveMeshSwap");

	Params::MarinerMoveUpdate_SwapActiveMeshDefaults_ApplyActiveMeshSwap Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.Defaults = Defaults;
	Parms.MeshToSwapTo = MeshToSwapTo;
	Parms.OverrideMeshTypeToSwap = OverrideMeshTypeToSwap;
	Parms.OverrideDelayBetweenSwap = OverrideDelayBetweenSwap;
	Parms.bOverrideForcePerspective = bOverrideForcePerspective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMoveUpdate_SwapActiveMeshDefaults.RevertActiveMeshSwap
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   MeshToSwapTo                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerChangeMeshEnum                  OverrideMeshTypeToSwap                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideDelayBetweenSwap                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideForcePerspective                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerMoveUpdate_SwapActiveMeshDefaults::RevertActiveMeshSwap(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerMoveUpdate_SwapActiveMeshDefaults> Defaults, class UMeshComponent* MeshToSwapTo, EMarinerChangeMeshEnum OverrideMeshTypeToSwap, float OverrideDelayBetweenSwap, bool bOverrideForcePerspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerMoveUpdate_SwapActiveMeshDefaults", "RevertActiveMeshSwap");

	Params::MarinerMoveUpdate_SwapActiveMeshDefaults_RevertActiveMeshSwap Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.Defaults = Defaults;
	Parms.MeshToSwapTo = MeshToSwapTo;
	Parms.OverrideMeshTypeToSwap = OverrideMeshTypeToSwap;
	Parms.OverrideDelayBetweenSwap = OverrideDelayBetweenSwap;
	Parms.bOverrideForcePerspective = bOverrideForcePerspective;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSubtitleManager.OnAudioEvent
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         In_eType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  In_pCallbackInfo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSubtitleManager::OnAudioEvent(EAkCallbackType In_eType, class UAkCallbackInfo* In_pCallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSubtitleManager", "OnAudioEvent");

	Params::MarinerSubtitleManager_OnAudioEvent Parms{};

	Parms.In_eType = In_eType;
	Parms.In_pCallbackInfo = In_pCallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSubtitleManager.OnUserSettingsChanged
// (Final, Native, Private)

void UMarinerSubtitleManager::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSubtitleManager", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSubtitleManager.OnVoiceChatTextMessageReceived
// (Final, Native, Private)
// Parameters:
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSubtitleManager::OnVoiceChatTextMessageReceived(const class FString& UserId, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSubtitleManager", "OnVoiceChatTextMessageReceived");

	Params::MarinerSubtitleManager_OnVoiceChatTextMessageReceived Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMutePlayerCheckBox.OnButtonClicked
// (Final, Native, Private)

void UMarinerMutePlayerCheckBox::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMutePlayerCheckBox", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMutePlayerCheckBox.OnButtonHovered
// (Final, Native, Private)

void UMarinerMutePlayerCheckBox::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMutePlayerCheckBox", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMutePlayerCheckBox.OnButtonUnhovered
// (Final, Native, Private)

void UMarinerMutePlayerCheckBox::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMutePlayerCheckBox", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerNativePurchaseMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxNativePurchaseDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxNativePurchaseData UMarinerNativePurchaseMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNativePurchaseMessageBox", "GetData");

	Params::MarinerNativePurchaseMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_DeflectProjectile.DeflectProjectile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ProjectileDetectionComponent                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AMarinerProjectile>>ProjectileIgnoreTypeList                               (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AMarinerItem>> ItemIgnoreTypeList                                     (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bUseAimAssist                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDeflectAngle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AimAssistConeAngle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MoveSpawnLocationTowardsCenterRatio                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpawnBufferDistance                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngleVersusDistanceAimAssistRatio                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AimAssistScoreAngleMax                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AimAssistScoreDistanceMax                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_DeflectProjectile*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_DeflectProjectile* UMarinerTask_DeflectProjectile::DeflectProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UPrimitiveComponent* ProjectileDetectionComponent, const struct FHitResult& SweepResult, class AActor* OverlappedActor, const TArray<TSubclassOf<class AMarinerProjectile>>& ProjectileIgnoreTypeList, const TArray<TSubclassOf<class AMarinerItem>>& ItemIgnoreTypeList, bool bUseAimAssist, float MaxDeflectAngle, float AimAssistConeAngle, float MoveSpawnLocationTowardsCenterRatio, float SpawnBufferDistance, float AngleVersusDistanceAimAssistRatio, float AimAssistScoreAngleMax, float AimAssistScoreDistanceMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_DeflectProjectile", "DeflectProjectile");

	Params::MarinerTask_DeflectProjectile_DeflectProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.ProjectileDetectionComponent = ProjectileDetectionComponent;
	Parms.SweepResult = std::move(SweepResult);
	Parms.OverlappedActor = OverlappedActor;
	Parms.ProjectileIgnoreTypeList = std::move(ProjectileIgnoreTypeList);
	Parms.ItemIgnoreTypeList = std::move(ItemIgnoreTypeList);
	Parms.bUseAimAssist = bUseAimAssist;
	Parms.MaxDeflectAngle = MaxDeflectAngle;
	Parms.AimAssistConeAngle = AimAssistConeAngle;
	Parms.MoveSpawnLocationTowardsCenterRatio = MoveSpawnLocationTowardsCenterRatio;
	Parms.SpawnBufferDistance = SpawnBufferDistance;
	Parms.AngleVersusDistanceAimAssistRatio = AngleVersusDistanceAimAssistRatio;
	Parms.AimAssistScoreAngleMax = AimAssistScoreAngleMax;
	Parms.AimAssistScoreDistanceMax = AimAssistScoreDistanceMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerNewsGlobals.RequestImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ImageId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class FName& ImageId, class UTexture2D* Texture)>OnLoadedCallback                                       (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerNewsGlobals::RequestImage(const class FName& ImageId, TDelegate<void(class FName& ImageId, class UTexture2D* Texture)> OnLoadedCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerNewsGlobals", "RequestImage");

	Params::MarinerNewsGlobals_RequestImage Parms{};

	Parms.ImageId = ImageId;
	Parms.OnLoadedCallback = OnLoadedCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOfferButton.OnEmoteCharacterPortraitLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerOfferButton::OnEmoteCharacterPortraitLoaded(const struct FSlateBrush& Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferButton", "OnEmoteCharacterPortraitLoaded");

	Params::MarinerOfferButton_OnEmoteCharacterPortraitLoaded Parms{};

	Parms.Brush = std::move(Brush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOfferButton.OnInventoryChanged
// (Final, Native, Private)

void UMarinerOfferButton::OnInventoryChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferButton", "OnInventoryChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOfferButton.SetOffer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPurchaseOffer              InOffer                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerOfferButton::SetOffer(const struct FMangoPurchaseOffer& InOffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferButton", "SetOffer");

	Params::MarinerOfferButton_SetOffer Parms{};

	Parms.InOffer = std::move(InOffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOfferButton.GetOffer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoPurchaseOffer        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoPurchaseOffer UMarinerOfferButton::GetOffer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferButton", "GetOffer");

	Params::MarinerOfferButton_GetOffer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOfferButton.IsOfferOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerOfferButton::IsOfferOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOfferButton", "IsOfferOwned");

	Params::MarinerOfferButton_IsOfferOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTrustedBotLauncherInterface.PrepareBotForLaunch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                BotToLaunch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IMarinerTrustedBotLauncherInterface::PrepareBotForLaunch(class AMarinerCharacter* BotToLaunch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrustedBotLauncherInterface", "PrepareBotForLaunch");

	Params::MarinerTrustedBotLauncherInterface_PrepareBotForLaunch Parms{};

	Parms.BotToLaunch = BotToLaunch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOptionListMessageBox.ButtonCallback
// (Final, Native, Private)
// Parameters:
// class UMarinerSettingBase*              Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerOptionListMessageBox::ButtonCallback(class UMarinerSettingBase* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOptionListMessageBox", "ButtonCallback");

	Params::MarinerOptionListMessageBox_ButtonCallback Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerOptionListMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxOptionListDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxOptionListData UMarinerOptionListMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOptionListMessageBox", "GetData");

	Params::MarinerOptionListMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerOrderDetailsMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxOrderDetailsDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxOrderDetailsData UMarinerOrderDetailsMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerOrderDetailsMessageBox", "GetData");

	Params::MarinerOrderDetailsMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerServerBrowser.RefreshServers
// (Final, Native, Public, BlueprintCallable)

void UMarinerServerBrowser::RefreshServers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerServerBrowser", "RefreshServers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerServerBrowser.GetNumServers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerServerBrowser::GetNumServers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerServerBrowser", "GetNumServers");

	Params::MarinerServerBrowser_GetNumServers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPaneSwitcher.AssignOwnerAndAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      AnimationOwner                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 EnterScreenAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 LeaveScreenAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ForwardAnimationIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ForwardAnimationOut                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 BackwardAnimationIn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 BackwardAnimationOut                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPaneSwitcher::AssignOwnerAndAnimations(class UUserWidget* AnimationOwner, class UWidgetAnimation* EnterScreenAnim, class UWidgetAnimation* LeaveScreenAnim, class UWidgetAnimation* ForwardAnimationIn, class UWidgetAnimation* ForwardAnimationOut, class UWidgetAnimation* BackwardAnimationIn, class UWidgetAnimation* BackwardAnimationOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPaneSwitcher", "AssignOwnerAndAnimations");

	Params::MarinerPaneSwitcher_AssignOwnerAndAnimations Parms{};

	Parms.AnimationOwner = AnimationOwner;
	Parms.EnterScreenAnim = EnterScreenAnim;
	Parms.LeaveScreenAnim = LeaveScreenAnim;
	Parms.ForwardAnimationIn = ForwardAnimationIn;
	Parms.ForwardAnimationOut = ForwardAnimationOut;
	Parms.BackwardAnimationIn = BackwardAnimationIn;
	Parms.BackwardAnimationOut = BackwardAnimationOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPaneSwitcher.Event_AnimationCompleted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 AnimationJustCompleted                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPaneSwitcher::Event_AnimationCompleted(class UWidgetAnimation* AnimationJustCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPaneSwitcher", "Event_AnimationCompleted");

	Params::MarinerPaneSwitcher_Event_AnimationCompleted Parms{};

	Parms.AnimationJustCompleted = AnimationJustCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPaneSwitcher.GetIsAnimating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPaneSwitcher::GetIsAnimating() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPaneSwitcher", "GetIsAnimating");

	Params::MarinerPaneSwitcher_GetIsAnimating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPaneSwitcher.GetIsOnScreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPaneSwitcher::GetIsOnScreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPaneSwitcher", "GetIsOnScreen");

	Params::MarinerPaneSwitcher_GetIsOnScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerParticlePoolEntry.OnParticleDone
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*         Particles                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerParticlePoolEntry::OnParticleDone(class UParticleSystemComponent* Particles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerParticlePoolEntry", "OnParticleDone");

	Params::MarinerParticlePoolEntry_OnParticleDone Parms{};

	Parms.Particles = Particles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.OnButtonClicked
// (Final, Native, Protected)

void UMarinerMousePrompt::OnButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "OnButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.OnButtonHovered
// (Final, Native, Protected)

void UMarinerMousePrompt::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.OnButtonPressed
// (Final, Native, Protected)

void UMarinerMousePrompt::OnButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "OnButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.OnButtonReleased
// (Final, Native, Protected)

void UMarinerMousePrompt::OnButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "OnButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.OnButtonUnhovered
// (Final, Native, Protected)

void UMarinerMousePrompt::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerMousePrompt.GetPromptAssets
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// struct FMarinerMousePromptAssets        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerMousePromptAssets UMarinerMousePrompt::GetPromptAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerMousePrompt", "GetPromptAssets");

	Params::MarinerMousePrompt_GetPromptAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerParticleComponentPool.InitializePool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxCount                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PreloadCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerParticleComponentPool::InitializePool(class UParticleSystem* EmitterTemplate, const int32 MaxCount, const int32 PreloadCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerParticleComponentPool", "InitializePool");

	Params::MarinerParticleComponentPool_InitializePool Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.MaxCount = MaxCount;
	Parms.PreloadCount = PreloadCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerParticleComponentPool.SpawnEmitter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAllowForceReset                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerParticleComponentPool::SpawnEmitter(const struct FVector& Position, const struct FRotator& Rotation, const bool bAllowForceReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerParticleComponentPool", "SpawnEmitter");

	Params::MarinerParticleComponentPool_SpawnEmitter Parms{};

	Parms.Position = std::move(Position);
	Parms.Rotation = std::move(Rotation);
	Parms.bAllowForceReset = bAllowForceReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPartyWidget.OnLeavePartyButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            ButtonInstance                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPartyWidget::OnLeavePartyButtonClicked(class UMarinerLayeredButton* ButtonInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPartyWidget", "OnLeavePartyButtonClicked");

	Params::MarinerPartyWidget_OnLeavePartyButtonClicked Parms{};

	Parms.ButtonInstance = ButtonInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPartyWidget.OnLeavePartyConfirmed
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPartyWidget::OnLeavePartyConfirmed(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPartyWidget", "OnLeavePartyConfirmed");

	Params::MarinerPartyWidget_OnLeavePartyConfirmed Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyDamageOnTick.CreateInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   AOEDamage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanHitSameActorsAgain                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyDamageOnTick*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyDamageOnTick* UMarinerTask_ApplyDamageOnTick::CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class UMarinerDamageType> AOEDamage, bool bCanHitSameActorsAgain, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyDamageOnTick", "CreateInstance");

	Params::MarinerTask_ApplyDamageOnTick_CreateInstance Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.AOEDamage = AOEDamage;
	Parms.bCanHitSameActorsAgain = bCanHitSameActorsAgain;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPinComponent.OnLocalPlayerPawnSet
// (Final, Native, Private)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPinComponent::OnLocalPlayerPawnSet(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPinComponent", "OnLocalPlayerPawnSet");

	Params::MarinerPinComponent_OnLocalPlayerPawnSet Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPinComponent.GetPinWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerBasePinWidget*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerBasePinWidget* UMarinerPinComponent::GetPinWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPinComponent", "GetPinWidget");

	Params::MarinerPinComponent_GetPinWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetRandomBotSkinCollection
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerSkinCollectionDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinCollectionDataAsset* UMarinerPlayableCharacter::GetRandomBotSkinCollection(int32* OutSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetRandomBotSkinCollection");

	Params::MarinerPlayableCharacter_GetRandomBotSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetActiveSkin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMarinerSkinCollectionDataAsset>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> UMarinerPlayableCharacter::GetActiveSkin(class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetActiveSkin");

	Params::MarinerPlayableCharacter_GetActiveSkin Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetActiveSkinForProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoProfile                    Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UMarinerSkinCollectionDataAsset*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UMarinerSkinCollectionDataAsset* UMarinerPlayableCharacter::GetActiveSkinForProfile(class UObject* WorldContextObject, const struct FMangoProfile& Profile) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetActiveSkinForProfile");

	Params::MarinerPlayableCharacter_GetActiveSkinForProfile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetBaseUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UMarinerBaseCharacterUIData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UMarinerBaseCharacterUIData> UMarinerPlayableCharacter::GetBaseUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetBaseUIData");

	Params::MarinerPlayableCharacter_GetBaseUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetCharacterLockState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerEnabledCharacterFilter          Filter                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerCharacterLockState              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerCharacterLockState UMarinerPlayableCharacter::GetCharacterLockState(class UObject* WorldContextObject, EMarinerEnabledCharacterFilter Filter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetCharacterLockState");

	Params::MarinerPlayableCharacter_GetCharacterLockState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Filter = Filter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetIsIndependentCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPlayableCharacter::GetIsIndependentCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetIsIndependentCharacter");

	Params::MarinerPlayableCharacter_GetIsIndependentCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayableCharacter.GetSkinByEngineID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           EngineId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UMarinerSkinCollectionDataAsset*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UMarinerSkinCollectionDataAsset* UMarinerPlayableCharacter::GetSkinByEngineID(const class FString& EngineId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayableCharacter", "GetSkinByEngineID");

	Params::MarinerPlayableCharacter_GetSkinByEngineID Parms{};

	Parms.EngineId = std::move(EngineId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlayerCameraManager.PreallocateCameraLensEffectForController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerCameraLensEffect>LensEffectEmitterClass                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerCameraManager::PreallocateCameraLensEffectForController(class APlayerController* PlayerController, TSubclassOf<class AMarinerCameraLensEffect> LensEffectEmitterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPlayerCameraManager", "PreallocateCameraLensEffectForController");

	Params::MarinerPlayerCameraManager_PreallocateCameraLensEffectForController Parms{};

	Parms.PlayerController = PlayerController;
	Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerCameraManager.PreallocateCameraLensEffectForLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerCameraLensEffect>LensEffectEmitterClass                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerCameraManager::PreallocateCameraLensEffectForLocalPlayer(class UObject* WorldContextObject, TSubclassOf<class AMarinerCameraLensEffect> LensEffectEmitterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPlayerCameraManager", "PreallocateCameraLensEffectForLocalPlayer");

	Params::MarinerPlayerCameraManager_PreallocateCameraLensEffectForLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerHeader.OnIntermissionEnded
// (Final, Native, Protected)

void UMarinerPlayerHeader::OnIntermissionEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerHeader", "OnIntermissionEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerHeader.OnIntermissionStarted
// (Final, Native, Protected)

void UMarinerPlayerHeader::OnIntermissionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerHeader", "OnIntermissionStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerHeader.SetIsOnGameTabs
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bGameTabs                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlayerHeader::SetIsOnGameTabs(bool bGameTabs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerHeader", "SetIsOnGameTabs");

	Params::MarinerPlayerHeader_SetIsOnGameTabs Parms{};

	Parms.bGameTabs = bGameTabs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerHeader.SetPartyWidgetEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlayerHeader::SetPartyWidgetEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerHeader", "SetPartyWidgetEnabled");

	Params::MarinerPlayerHeader_SetPartyWidgetEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerPlayerHeader.SetProfileWidgetEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlayerHeader::SetProfileWidgetEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerHeader", "SetProfileWidgetEnabled");

	Params::MarinerPlayerHeader_SetProfileWidgetEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnMatchStateChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NewMatchState                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnMatchStateChanged(const class FName& NewMatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnMatchStateChanged");

	Params::MarinerPlayerStateCharacterSpawner_OnMatchStateChanged Parms{};

	Parms.NewMatchState = NewMatchState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterRequestFailed
// (Final, Native, Protected)
// Parameters:
// class FString                           RequestedCharacterString                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LastSeenSelectedCharacter                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnPlayerStateCharacterRequestFailed(const class FString& RequestedCharacterString, const class FString& LastSeenSelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPlayerStateCharacterRequestFailed");

	Params::MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterRequestFailed Parms{};

	Parms.RequestedCharacterString = std::move(RequestedCharacterString);
	Parms.LastSeenSelectedCharacter = std::move(LastSeenSelectedCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterSelected
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             SelectedCharacter                                      (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnPlayerStateCharacterSelected(class AMarinerPlayerState* InPlayerState, TSoftClassPtr<class UClass> SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPlayerStateCharacterSelected");

	Params::MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterSelected Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.SelectedCharacter = SelectedCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateCharacterUpdated
// (Final, Native, Protected)
// Parameters:
// bool                                    bClearDelayAyncLoadHandle                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnPlayerStateCharacterUpdated(bool bClearDelayAyncLoadHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPlayerStateCharacterUpdated");

	Params::MarinerPlayerStateCharacterSpawner_OnPlayerStateCharacterUpdated Parms{};

	Parms.bClearDelayAyncLoadHandle = bClearDelayAyncLoadHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateSelectedCharacterChanged
// (Final, Native, Protected)
// Parameters:
// class FString                           SelectedCharacter                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnPlayerStateSelectedCharacterChanged(const class FString& SelectedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPlayerStateSelectedCharacterChanged");

	Params::MarinerPlayerStateCharacterSpawner_OnPlayerStateSelectedCharacterChanged Parms{};

	Parms.SelectedCharacter = std::move(SelectedCharacter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPlayerStateSelectedCharacterRequestStateChanged
// (Final, Native, Protected)

void AMarinerPlayerStateCharacterSpawner::OnPlayerStateSelectedCharacterRequestStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPlayerStateSelectedCharacterRequestStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlayerStateCharacterSpawner.OnPregameStateChanged
// (Final, Native, Private)
// Parameters:
// class FName                             NewPregameState                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPlayerStateCharacterSpawner::OnPregameStateChanged(const class FName NewPregameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlayerStateCharacterSpawner", "OnPregameStateChanged");

	Params::MarinerPlayerStateCharacterSpawner_OnPregameStateChanged Parms{};

	Parms.NewPregameState = NewPregameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistGlobals.BuildMapModeDataMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPlaylist                   Playlist                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<struct FGuid, struct FFilterModeArray>OutDataMap                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerPlaylistGlobals::BuildMapModeDataMap(const struct FMangoPlaylist& Playlist, TMap<struct FGuid, struct FFilterModeArray>* OutDataMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGlobals", "BuildMapModeDataMap");

	Params::MarinerPlaylistGlobals_BuildMapModeDataMap Parms{};

	Parms.Playlist = std::move(Playlist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDataMap != nullptr)
		*OutDataMap = std::move(Parms.OutDataMap);
}


// Function Mariner.MarinerPlaylistGlobals.ConvertPlaylistToMenuButtonData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoPlaylist                   Playlist                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerCrossplayState                  CrossplayState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerMenuButtonData           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMarinerMenuButtonData UMarinerPlaylistGlobals::ConvertPlaylistToMenuButtonData(const struct FMangoPlaylist& Playlist, EMarinerCrossplayState CrossplayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGlobals", "ConvertPlaylistToMenuButtonData");

	Params::MarinerPlaylistGlobals_ConvertPlaylistToMenuButtonData Parms{};

	Parms.Playlist = std::move(Playlist);
	Parms.CrossplayState = CrossplayState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlaylistGlobals.GetIcon
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             IconID                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      IconBrushOut                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPlaylistGlobals::GetIcon(const class FName& IconID, struct FSlateBrush* IconBrushOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGlobals", "GetIcon");

	Params::MarinerPlaylistGlobals_GetIcon Parms{};

	Parms.IconID = IconID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IconBrushOut != nullptr)
		*IconBrushOut = std::move(Parms.IconBrushOut);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlaylistGlobals.GetMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             MaterialID                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      MaterialOut                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPlaylistGlobals::GetMaterial(const class FName& MaterialID, struct FSlateBrush* MaterialOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistGlobals", "GetMaterial");

	Params::MarinerPlaylistGlobals_GetMaterial Parms{};

	Parms.MaterialID = MaterialID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MaterialOut != nullptr)
		*MaterialOut = std::move(Parms.MaterialOut);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRankWidget.InitRankWidget
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AMarinerPlayerState*              MarinerPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            PlaylistUniqueId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRankWidget::InitRankWidget(class AMarinerPlayerState* MarinerPlayerState, const struct FGuid& PlaylistUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRankWidget", "InitRankWidget");

	Params::MarinerRankWidget_InitRankWidget Parms{};

	Parms.MarinerPlayerState = MarinerPlayerState;
	Parms.PlaylistUniqueId = std::move(PlaylistUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRankWidget.OnOwnerMangoUserUpdated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRankWidget::OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRankWidget", "OnOwnerMangoUserUpdated");

	Params::MarinerRankWidget_OnOwnerMangoUserUpdated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRankWidget.PopulateLocalPlayerRankByPlaylist
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGuid                            PlaylistUniqueId                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRankWidget::PopulateLocalPlayerRankByPlaylist(const struct FGuid& PlaylistUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRankWidget", "PopulateLocalPlayerRankByPlaylist");

	Params::MarinerRankWidget_PopulateLocalPlayerRankByPlaylist Parms{};

	Parms.PlaylistUniqueId = std::move(PlaylistUniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRankWidget.PopulateRankByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Rank                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRankedSession                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRankWidget::PopulateRankByValue(int32 Rank, bool bRankedSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRankWidget", "PopulateRankByValue");

	Params::MarinerRankWidget_PopulateRankByValue Parms{};

	Parms.Rank = Rank;
	Parms.bRankedSession = bRankedSession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistLockedWidget.Refresh
// (Final, Native, Private)

void UMarinerPlaylistLockedWidget::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistLockedWidget", "Refresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingCheckBox.SetChecked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingCheckBox::SetChecked(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingCheckBox", "SetChecked");

	Params::MarinerSettingCheckBox_SetChecked Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingCheckBox.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingCheckBoxAssets    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingCheckBoxAssets UMarinerSettingCheckBox::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingCheckBox", "GetAssets");

	Params::MarinerSettingCheckBox_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingCheckBox.GetConfirmOverride
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerMessageBoxData           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerMessageBoxData UMarinerSettingCheckBox::GetConfirmOverride(bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingCheckBox", "GetConfirmOverride");

	Params::MarinerSettingCheckBox_GetConfirmOverride Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingCheckBox.IsStateChangeAllowed
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerSettingCheckBox::IsStateChangeAllowed(bool bNewValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingCheckBox", "IsStateChangeAllowed");

	Params::MarinerSettingCheckBox_IsStateChangeAllowed Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPlaylistMenu.OnAbandonmentPenaltyExpired
// (Final, Native, Private)

void UMarinerPlaylistMenu::OnAbandonmentPenaltyExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistMenu", "OnAbandonmentPenaltyExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistMenu.OnPresenceChanged
// (Final, Native, Private)

void UMarinerPlaylistMenu::OnPresenceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistMenu", "OnPresenceChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistMenu.OnUpdatePartyBusyState
// (Final, Native, Private)
// Parameters:
// EMangoPartyBusyState                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPlaylistMenu::OnUpdatePartyBusyState(EMangoPartyBusyState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistMenu", "OnUpdatePartyBusyState");

	Params::MarinerPlaylistMenu_OnUpdatePartyBusyState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPlaylistMenu.RebuildPlaylistMenu
// (Final, Native, Private)

void UMarinerPlaylistMenu::RebuildPlaylistMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPlaylistMenu", "RebuildPlaylistMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPoolingManager.Tick
// (Final, Native, Public)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPoolingManager::Tick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPoolingManager", "Tick");

	Params::MarinerPoolingManager_Tick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostgameManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPostgameManager*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPostgameManager* AMarinerPostgameManager::GetInstance(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPostgameManager", "GetInstance");

	Params::MarinerPostgameManager_GetInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostgameManager.OnAnySpawnerCharacterLoaded
// (Final, Native, Private)
// Parameters:
// class AMarinerCharacterSpawner*         Spawner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPostgameManager::OnAnySpawnerCharacterLoaded(class AMarinerCharacterSpawner* Spawner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostgameManager", "OnAnySpawnerCharacterLoaded");

	Params::MarinerPostgameManager_OnAnySpawnerCharacterLoaded Parms{};

	Parms.Spawner = Spawner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostgameManager.OnLocalPlayerStateReplicated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         ControllerHostingState                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPostgameManager::OnLocalPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostgameManager", "OnLocalPlayerStateReplicated");

	Params::MarinerPostgameManager_OnLocalPlayerStateReplicated Parms{};

	Parms.ControllerHostingState = ControllerHostingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostgameManager.OnPlayerAdded
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     AddedPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPostgameManager::OnPlayerAdded(class APlayerState* AddedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostgameManager", "OnPlayerAdded");

	Params::MarinerPostgameManager_OnPlayerAdded Parms{};

	Parms.AddedPlayer = AddedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostgameManager.OnPlayerChangedTeam
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerChangedTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPostgameManager::OnPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostgameManager", "OnPlayerChangedTeam");

	Params::MarinerPostgameManager_OnPlayerChangedTeam Parms{};

	Parms.PlayerChangedTeam = PlayerChangedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostgameManager.OnPlayerRemoved
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     RemovedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPostgameManager::OnPlayerRemoved(class APlayerState* RemovedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostgameManager", "OnPlayerRemoved");

	Params::MarinerPostgameManager_OnPlayerRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.EnableWorldUI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::EnableWorldUI(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "EnableWorldUI");

	Params::MarinerPostGameSequence_EnableWorldUI Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.GetParsedQuestsAndBattlePassRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMangoReward>             OutRewards                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::GetParsedQuestsAndBattlePassRewards(TArray<struct FMangoReward>* OutRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetParsedQuestsAndBattlePassRewards");

	Params::MarinerPostGameSequence_GetParsedQuestsAndBattlePassRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRewards != nullptr)
		*OutRewards = std::move(Parms.OutRewards);
}


// Function Mariner.MarinerPostGameSequence.GetParsedRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMangoReward>             OutRewards                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::GetParsedRewards(TArray<struct FMangoReward>* OutRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetParsedRewards");

	Params::MarinerPostGameSequence_GetParsedRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRewards != nullptr)
		*OutRewards = std::move(Parms.OutRewards);
}


// Function Mariner.MarinerPostGameSequence.OnMatchEndDataSet
// (Native, Protected, HasOutParams)
// Parameters:
// struct FMatchEnd                        InMatchEndData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::OnMatchEndDataSet(const struct FMatchEnd& InMatchEndData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "OnMatchEndDataSet");

	Params::MarinerPostGameSequence_OnMatchEndDataSet Parms{};

	Parms.InMatchEndData = std::move(InMatchEndData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.OnRequestComplete
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bResultSuccess                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::OnRequestComplete(bool bResultSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "OnRequestComplete");

	Params::MarinerPostGameSequence_OnRequestComplete Parms{};

	Parms.bResultSuccess = bResultSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerPostGameSequence.ParseMangoRewards
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoRewards                    MangoRewards                                           (Parm, NativeAccessSpecifierPublic)
// TArray<struct FMangoReward>             OutParsedRewards                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::ParseMangoRewards(const struct FMangoRewards& MangoRewards, TArray<struct FMangoReward>* OutParsedRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "ParseMangoRewards");

	Params::MarinerPostGameSequence_ParseMangoRewards Parms{};

	Parms.MangoRewards = std::move(MangoRewards);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutParsedRewards != nullptr)
		*OutParsedRewards = std::move(Parms.OutParsedRewards);
}


// Function Mariner.MarinerPostGameSequence.RequestLocalPlayerCamera
// (Final, Native, Public, BlueprintCallable)

void UMarinerPostGameSequence::RequestLocalPlayerCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "RequestLocalPlayerCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.RequestMatchResultCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerGameOutcome                     Outcome                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::RequestMatchResultCamera(EMarinerGameOutcome Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "RequestMatchResultCamera");

	Params::MarinerPostGameSequence_RequestMatchResultCamera Parms{};

	Parms.Outcome = Outcome;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.SeamlessTravelToMainMenu
// (Final, Native, Public, BlueprintCallable)

void UMarinerPostGameSequence::SeamlessTravelToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "SeamlessTravelToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.SetAchievementsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::SetAchievementsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "SetAchievementsEnabled");

	Params::MarinerPostGameSequence_SetAchievementsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.ShowWorldUILocalPlayerOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerPostGameSequence::ShowWorldUILocalPlayerOnly(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "ShowWorldUILocalPlayerOnly");

	Params::MarinerPostGameSequence_ShowWorldUILocalPlayerOnly Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPostGameSequence.GetLocalPlayerPostGameData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerPostGameData       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerPostGameData UMarinerPostGameSequence::GetLocalPlayerPostGameData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetLocalPlayerPostGameData");

	Params::MarinerPostGameSequence_GetLocalPlayerPostGameData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameSequence.GetMatchEndData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMatchEnd                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMatchEnd UMarinerPostGameSequence::GetMatchEndData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetMatchEndData");

	Params::MarinerPostGameSequence_GetMatchEndData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameSequence.GetMatchResultLocalQuests
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FMarinerQuestProgress>    OutQuests                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPostGameSequence::GetMatchResultLocalQuests(TArray<struct FMarinerQuestProgress>* OutQuests) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetMatchResultLocalQuests");

	Params::MarinerPostGameSequence_GetMatchResultLocalQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQuests != nullptr)
		*OutQuests = std::move(Parms.OutQuests);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameSequence.GetMatchResultLocalQuestsWithProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FMarinerQuestProgress>    OutQuests                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPostGameSequence::GetMatchResultLocalQuestsWithProgress(TArray<struct FMarinerQuestProgress>* OutQuests) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetMatchResultLocalQuestsWithProgress");

	Params::MarinerPostGameSequence_GetMatchResultLocalQuestsWithProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQuests != nullptr)
		*OutQuests = std::move(Parms.OutQuests);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameSequence.GetMatchResultResponse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMangoMatchResultResponse  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMangoMatchResultResponse UMarinerPostGameSequence::GetMatchResultResponse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "GetMatchResultResponse");

	Params::MarinerPostGameSequence_GetMatchResultResponse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameSequence.IsRequestComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bResultSuccess                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPostGameSequence::IsRequestComplete(bool* bResultSuccess) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameSequence", "IsRequestComplete");

	Params::MarinerPostGameSequence_IsRequestComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bResultSuccess != nullptr)
		*bResultSuccess = Parms.bResultSuccess;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPostGameStatsMenu.PopulatePostGameStats
// (Final, Native, Protected, BlueprintCallable)

void UMarinerPostGameStatsMenu::PopulatePostGameStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPostGameStatsMenu", "PopulatePostGameStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPregameManager.GetInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerPregameManager*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPregameManager* AMarinerPregameManager::GetInstance(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerPregameManager", "GetInstance");

	Params::MarinerPregameManager_GetInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPregameManager.OnLocalPlayerStateReplicated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         ControllerHostingState                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPregameManager::OnLocalPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameManager", "OnLocalPlayerStateReplicated");

	Params::MarinerPregameManager_OnLocalPlayerStateReplicated Parms{};

	Parms.ControllerHostingState = ControllerHostingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPregameManager.OnPlayerAdded
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     AddedPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPregameManager::OnPlayerAdded(class APlayerState* AddedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameManager", "OnPlayerAdded");

	Params::MarinerPregameManager_OnPlayerAdded Parms{};

	Parms.AddedPlayer = AddedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPregameManager.OnPlayerChangedTeam
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerChangedTeam                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPregameManager::OnPlayerChangedTeam(class AMarinerPlayerState* PlayerChangedTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameManager", "OnPlayerChangedTeam");

	Params::MarinerPregameManager_OnPlayerChangedTeam Parms{};

	Parms.PlayerChangedTeam = PlayerChangedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPregameManager.OnPlayerRemoved
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     RemovedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPregameManager::OnPlayerRemoved(class APlayerState* RemovedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameManager", "OnPlayerRemoved");

	Params::MarinerPregameManager_OnPlayerRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPregameManager.OnPregameStateChanged
// (Final, Native, Private)
// Parameters:
// class FName                             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerPregameManager::OnPregameStateChanged(class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPregameManager", "OnPregameStateChanged");

	Params::MarinerPregameManager_OnPregameStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnArtifactLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnArtifactLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnArtifactLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnChatEmoteLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnChatEmoteLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnChatEmoteLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnMegaBlastLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnMegaBlastLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnMegaBlastLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnPreGameEmoteLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnPreGameEmoteLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnPreGameEmoteLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnReturnTrailLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnReturnTrailLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnReturnTrailLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnSkinCollectionAnimBPLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnSkinCollectionAnimBPLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnSkinCollectionAnimBPLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnSkinCollectionMembersLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnSkinCollectionMembersLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnSkinCollectionMembersLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.DebugOnVictoryPoseLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::DebugOnVictoryPoseLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "DebugOnVictoryPoseLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.Dedi_OnArtifactLoaded
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    LoadedCharacterClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::Dedi_OnArtifactLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "Dedi_OnArtifactLoaded");

	Params::MarinerProfileObjectManager_Dedi_OnArtifactLoaded Parms{};

	Parms.LoadedCharacterClass = LoadedCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.Dedi_StartLoadProfileObjects
// (Final, Native, Private)

void UMarinerProfileObjectManager::Dedi_StartLoadProfileObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "Dedi_StartLoadProfileObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.GetChatEmoteByInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerChatEmote*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerChatEmote* UMarinerProfileObjectManager::GetChatEmoteByInput(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetChatEmoteByInput");

	Params::MarinerProfileObjectManager_GetChatEmoteByInput Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetPregameReadyEmoteByInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UMarinerProfileObjectManager::GetPregameReadyEmoteByInput(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetPregameReadyEmoteByInput");

	Params::MarinerProfileObjectManager_GetPregameReadyEmoteByInput Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMarinerPlayerState*              NewOwningPlayerState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::Init(class AMarinerPlayerState* NewOwningPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "Init");

	Params::MarinerProfileObjectManager_Init Parms{};

	Parms.NewOwningPlayerState = NewOwningPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugArtifact
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FString                           ArtifactPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugArtifact(const class FString& ArtifactPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugArtifact");

	Params::MarinerProfileObjectManager_MulticastSetDebugArtifact Parms{};

	Parms.ArtifactPath = std::move(ArtifactPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugChatEmote
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   Slot                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChatEmotePath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugChatEmote(const int32 Slot, const class FString& ChatEmotePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugChatEmote");

	Params::MarinerProfileObjectManager_MulticastSetDebugChatEmote Parms{};

	Parms.Slot = Slot;
	Parms.ChatEmotePath = std::move(ChatEmotePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugMegaBlast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FString                           MegaBlastPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugMegaBlast(const class FString& MegaBlastPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugMegaBlast");

	Params::MarinerProfileObjectManager_MulticastSetDebugMegaBlast Parms{};

	Parms.MegaBlastPath = std::move(MegaBlastPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugPreGameEmote
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   Slot                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PreGameEmotePath                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugPreGameEmote(const int32 Slot, const class FString& PreGameEmotePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugPreGameEmote");

	Params::MarinerProfileObjectManager_MulticastSetDebugPreGameEmote Parms{};

	Parms.Slot = Slot;
	Parms.PreGameEmotePath = std::move(PreGameEmotePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugReturnTrail
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FString                           ReturnTrailPath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugReturnTrail(const class FString& ReturnTrailPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugReturnTrail");

	Params::MarinerProfileObjectManager_MulticastSetDebugReturnTrail Parms{};

	Parms.ReturnTrailPath = std::move(ReturnTrailPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugSkin
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  SkinToLoad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugSkin(class UMarinerSkinCollectionDataAsset* SkinToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugSkin");

	Params::MarinerProfileObjectManager_MulticastSetDebugSkin Parms{};

	Parms.SkinToLoad = SkinToLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.MulticastSetDebugVictoryPose
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FString                           VictoryPosePath                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::MulticastSetDebugVictoryPose(const class FString& VictoryPosePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "MulticastSetDebugVictoryPose");

	Params::MarinerProfileObjectManager_MulticastSetDebugVictoryPose Parms{};

	Parms.VictoryPosePath = std::move(VictoryPosePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnBotTreatedAsPlayerCharacterObjectsLoaded
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    LoadedCharacterClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnBotTreatedAsPlayerCharacterObjectsLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnBotTreatedAsPlayerCharacterObjectsLoaded");

	Params::MarinerProfileObjectManager_OnBotTreatedAsPlayerCharacterObjectsLoaded Parms{};

	Parms.LoadedCharacterClass = LoadedCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnCharacterObjectsLoaded
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    LoadedCharacterClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnCharacterObjectsLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnCharacterObjectsLoaded");

	Params::MarinerProfileObjectManager_OnCharacterObjectsLoaded Parms{};

	Parms.LoadedCharacterClass = LoadedCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnOwnerMangoUserUpdated
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnOwnerMangoUserUpdated(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnOwnerMangoUserUpdated");

	Params::MarinerProfileObjectManager_OnOwnerMangoUserUpdated Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnPawnClassChanged
// (Final, Native, Private)

void UMarinerProfileObjectManager::OnPawnClassChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnPawnClassChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnPawnPossessed
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerController*         PossessingController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            PossessedPawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnPawnPossessed(class AMarinerPlayerController* PossessingController, class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnPawnPossessed");

	Params::MarinerProfileObjectManager_OnPawnPossessed Parms{};

	Parms.PossessingController = PossessingController;
	Parms.PossessedPawn = PossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnPlayerLeftGame
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     LeavingPlayerState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnPlayerLeftGame(class APlayerState* LeavingPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnPlayerLeftGame");

	Params::MarinerProfileObjectManager_OnPlayerLeftGame Parms{};

	Parms.LeavingPlayerState = LeavingPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnPreGameEmotesLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::OnPreGameEmotesLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnPreGameEmotesLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnPreGameEmotesSkinLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::OnPreGameEmotesSkinLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnPreGameEmotesSkinLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnSelectedCharacterChanged
// (Final, Native, Private)
// Parameters:
// class FString                           RequestedCharacterData                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnSelectedCharacterChanged(const class FString& RequestedCharacterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnSelectedCharacterChanged");

	Params::MarinerProfileObjectManager_OnSelectedCharacterChanged Parms{};

	Parms.RequestedCharacterData = std::move(RequestedCharacterData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnSkinAnimBPLoaded
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    LoadedCharacterClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnSkinAnimBPLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnSkinAnimBPLoaded");

	Params::MarinerProfileObjectManager_OnSkinAnimBPLoaded Parms{};

	Parms.LoadedCharacterClass = LoadedCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnSkinCollectionMembersLoaded
// (Final, Native, Private)
// Parameters:
// TSubclassOf<class AMarinerCharacter>    LoadedCharacterClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::OnSkinCollectionMembersLoaded(TSubclassOf<class AMarinerCharacter> LoadedCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnSkinCollectionMembersLoaded");

	Params::MarinerProfileObjectManager_OnSkinCollectionMembersLoaded Parms{};

	Parms.LoadedCharacterClass = LoadedCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.OnTotemObjectsLoaded
// (Final, Native, Private)

void UMarinerProfileObjectManager::OnTotemObjectsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "OnTotemObjectsLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.RegisterProxyManagersToNotify
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMarinerProfileObjectManager*     ProxyProfile                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::RegisterProxyManagersToNotify(class UMarinerProfileObjectManager* ProxyProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "RegisterProxyManagersToNotify");

	Params::MarinerProfileObjectManager_RegisterProxyManagersToNotify Parms{};

	Parms.ProxyProfile = ProxyProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.SetIsUsingProxyPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsProxy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerProfileObjectManager*     SourcePOM                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::SetIsUsingProxyPlayerState(bool bIsProxy, class UMarinerProfileObjectManager* SourcePOM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "SetIsUsingProxyPlayerState");

	Params::MarinerProfileObjectManager_SetIsUsingProxyPlayerState Parms{};

	Parms.bIsProxy = bIsProxy;
	Parms.SourcePOM = SourcePOM;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.SetupBindings
// (Final, Native, Private)
// Parameters:
// class AMarinerPlayerState*              PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProfileObjectManager::SetupBindings(class AMarinerPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "SetupBindings");

	Params::MarinerProfileObjectManager_SetupBindings Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.StartLoadCharacterObjects
// (Final, Native, Private)

void UMarinerProfileObjectManager::StartLoadCharacterObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "StartLoadCharacterObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.StartLoadProfileObjects
// (Final, Native, Private)

void UMarinerProfileObjectManager::StartLoadProfileObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "StartLoadProfileObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProfileObjectManager.GetAbilitySkins
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerAbilitySkinMap*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerAbilitySkinMap* UMarinerProfileObjectManager::GetAbilitySkins() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetAbilitySkins");

	Params::MarinerProfileObjectManager_GetAbilitySkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetAnimBP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UAnimInstance>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UAnimInstance> UMarinerProfileObjectManager::GetAnimBP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetAnimBP");

	Params::MarinerProfileObjectManager_GetAnimBP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetArtifact
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMangoItemType                          ItemType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerArtifactDataAsset*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerArtifactDataAsset* UMarinerProfileObjectManager::GetArtifact(EMangoItemType ItemType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetArtifact");

	Params::MarinerProfileObjectManager_GetArtifact Parms{};

	Parms.ItemType = ItemType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetArtifacts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<EMangoItemType, class UMarinerArtifactDataAsset*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TMap<EMangoItemType, class UMarinerArtifactDataAsset*> UMarinerProfileObjectManager::GetArtifacts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetArtifacts");

	Params::MarinerProfileObjectManager_GetArtifacts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetChatEmotes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<EMarinerInputActions, class UMarinerChatEmote*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<EMarinerInputActions, class UMarinerChatEmote*> UMarinerProfileObjectManager::GetChatEmotes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetChatEmotes");

	Params::MarinerProfileObjectManager_GetChatEmotes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetCueSkins
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCueSkinMap*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCueSkinMap* UMarinerProfileObjectManager::GetCueSkins() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetCueSkins");

	Params::MarinerProfileObjectManager_GetCueSkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetFrontendUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerCharacterFrontendSkinUIData*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerCharacterFrontendSkinUIData* UMarinerProfileObjectManager::GetFrontendUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetFrontendUIData");

	Params::MarinerProfileObjectManager_GetFrontendUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetMegaBlast
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerMegaBlastDataAsset*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMegaBlastDataAsset* UMarinerProfileObjectManager::GetMegaBlast() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetMegaBlast");

	Params::MarinerProfileObjectManager_GetMegaBlast Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetPostGameVictoryPose
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerPostGameVictoryPose*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerPostGameVictoryPose* UMarinerProfileObjectManager::GetPostGameVictoryPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetPostGameVictoryPose");

	Params::MarinerProfileObjectManager_GetPostGameVictoryPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetReturnTrail
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerReturnTrailDataAsset*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerReturnTrailDataAsset* UMarinerProfileObjectManager::GetReturnTrail() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetReturnTrail");

	Params::MarinerProfileObjectManager_GetReturnTrail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetSkinCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinCollectionDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinCollectionDataAsset* UMarinerProfileObjectManager::GetSkinCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetSkinCollection");

	Params::MarinerProfileObjectManager_GetSkinCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetSkinDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinDataAsset*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinDataAsset* UMarinerProfileObjectManager::GetSkinDataAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetSkinDataAsset");

	Params::MarinerProfileObjectManager_GetSkinDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetSkinUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinUIData*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinUIData* UMarinerProfileObjectManager::GetSkinUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetSkinUIData");

	Params::MarinerProfileObjectManager_GetSkinUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemBorder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemBorderDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemBorderDataAsset* UMarinerProfileObjectManager::GetTotemBorder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemBorder");

	Params::MarinerProfileObjectManager_GetTotemBorder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemCompanion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemCompanionDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemCompanionDataAsset* UMarinerProfileObjectManager::GetTotemCompanion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemCompanion");

	Params::MarinerProfileObjectManager_GetTotemCompanion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemPattern
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemPatternDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemPatternDataAsset* UMarinerProfileObjectManager::GetTotemPattern() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemPattern");

	Params::MarinerProfileObjectManager_GetTotemPattern Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemShape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemShapeDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemShapeDataAsset* UMarinerProfileObjectManager::GetTotemShape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemShape");

	Params::MarinerProfileObjectManager_GetTotemShape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemStand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemStandDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemStandDataAsset* UMarinerProfileObjectManager::GetTotemStand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemStand");

	Params::MarinerProfileObjectManager_GetTotemStand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemSymbol
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemSymbolsDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemSymbolsDataAsset* UMarinerProfileObjectManager::GetTotemSymbol() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemSymbol");

	Params::MarinerProfileObjectManager_GetTotemSymbol Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProfileObjectManager.GetTotemVFX
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerRocketTotemVFXDataAsset*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerRocketTotemVFXDataAsset* UMarinerProfileObjectManager::GetTotemVFX() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProfileObjectManager", "GetTotemVFX");

	Params::MarinerProfileObjectManager_GetTotemVFX Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProgressionRewardPreview.HideUpcomingAndFeaturePreviews
// (Final, Native, Public, BlueprintCallable)

void UMarinerProgressionRewardPreview::HideUpcomingAndFeaturePreviews()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProgressionRewardPreview", "HideUpcomingAndFeaturePreviews");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProgressionRewardPreview.InitAnimatedCharacterProgressionPreview
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoMatchCharacterProgression  CharacterProgression                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DurationPerLevelInSeconds                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalDelayInSeconds                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProgressionRewardPreview::InitAnimatedCharacterProgressionPreview(const class UMarinerPlayableCharacter* Character, const struct FMangoMatchCharacterProgression& CharacterProgression, float DurationPerLevelInSeconds, float FinalDelayInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProgressionRewardPreview", "InitAnimatedCharacterProgressionPreview");

	Params::MarinerProgressionRewardPreview_InitAnimatedCharacterProgressionPreview Parms{};

	Parms.Character = Character;
	Parms.CharacterProgression = std::move(CharacterProgression);
	Parms.DurationPerLevelInSeconds = DurationPerLevelInSeconds;
	Parms.FinalDelayInSeconds = FinalDelayInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProgressionRewardPreview.InitCharacterProgressionPreview
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMarinerPlayableCharacter*        Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoMatchCharacterProgression  CharacterProgression                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bShowEndValues                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerProgressionRewardPreview::InitCharacterProgressionPreview(const class UMarinerPlayableCharacter* Character, const struct FMangoMatchCharacterProgression& CharacterProgression, bool bShowEndValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProgressionRewardPreview", "InitCharacterProgressionPreview");

	Params::MarinerProgressionRewardPreview_InitCharacterProgressionPreview Parms{};

	Parms.Character = Character;
	Parms.CharacterProgression = std::move(CharacterProgression);
	Parms.bShowEndValues = bShowEndValues;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.AuthorityAdvanceToState
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMarinerFluxProjectileState             RequestedState                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::AuthorityAdvanceToState(const EMarinerFluxProjectileState& RequestedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "AuthorityAdvanceToState");

	Params::MarinerProjectileFlux_AuthorityAdvanceToState Parms{};

	Parms.RequestedState = RequestedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.AuthorityClearFetchingTarget
// (Final, Native, Protected, BlueprintCallable)

void AMarinerProjectileFlux::AuthorityClearFetchingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "AuthorityClearFetchingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.AuthorityFallbackToState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::AuthorityFallbackToState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "AuthorityFallbackToState");

	Params::MarinerProjectileFlux_AuthorityFallbackToState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.AuthorityOnGuidedHomingTargetLost
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerProjectileFlux::AuthorityOnGuidedHomingTargetLost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "AuthorityOnGuidedHomingTargetLost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.AuthorityTryDestroyFetchingTarget
// (Final, Native, Protected, BlueprintCallable)

void AMarinerProjectileFlux::AuthorityTryDestroyFetchingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "AuthorityTryDestroyFetchingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.BP_GetItemAttachPointLocation
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerProjectileFlux::BP_GetItemAttachPointLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "BP_GetItemAttachPointLocation");

	Params::MarinerProjectileFlux_BP_GetItemAttachPointLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.BP_OverrideCanTraverseToState
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// EMarinerFluxProjectileState             StateRequestingEnter                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerFluxProjectileState             MyCurrentState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::BP_OverrideCanTraverseToState(EMarinerFluxProjectileState StateRequestingEnter, EMarinerFluxProjectileState MyCurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "BP_OverrideCanTraverseToState");

	Params::MarinerProjectileFlux_BP_OverrideCanTraverseToState Parms{};

	Parms.StateRequestingEnter = StateRequestingEnter;
	Parms.MyCurrentState = MyCurrentState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.CheckInstigatorMaxProximity
// (Final, Native, Protected)

void AMarinerProjectileFlux::CheckInstigatorMaxProximity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "CheckInstigatorMaxProximity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.DropItemNearInstigator
// (Final, Native, Protected)

void AMarinerProjectileFlux::DropItemNearInstigator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "DropItemNearInstigator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.ExplodeAfterDroppingItemNearCharacter
// (Final, Native, Protected, BlueprintCallable)

void AMarinerProjectileFlux::ExplodeAfterDroppingItemNearCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "ExplodeAfterDroppingItemNearCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.ExplodeAfterHomingStopDelay
// (Final, Native, Protected)

void AMarinerProjectileFlux::ExplodeAfterHomingStopDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "ExplodeAfterHomingStopDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.GetCurrentStateExec
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMarinerFluxProjectileState             OutStateExec                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::GetCurrentStateExec(EMarinerFluxProjectileState* OutStateExec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "GetCurrentStateExec");

	Params::MarinerProjectileFlux_GetCurrentStateExec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStateExec != nullptr)
		*OutStateExec = Parms.OutStateExec;
}


// Function Mariner.MarinerProjectileFlux.MulticastSetGuidedHomingTarget
// (BlueprintAuthorityOnly, Net, NetReliable, Native, Event, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class AMarinerCharacter*                AimTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::MulticastSetGuidedHomingTarget(class AMarinerCharacter* AimTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "MulticastSetGuidedHomingTarget");

	Params::MarinerProjectileFlux_MulticastSetGuidedHomingTarget Parms{};

	Parms.AimTarget = AimTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.MulticastTransitionState
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// EMarinerFluxProjectileState             RequestedState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousTransitionTimeStamp                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::MulticastTransitionState(EMarinerFluxProjectileState RequestedState, float PreviousTransitionTimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "MulticastTransitionState");

	Params::MarinerProjectileFlux_MulticastTransitionState Parms{};

	Parms.RequestedState = RequestedState;
	Parms.PreviousTransitionTimeStamp = PreviousTransitionTimeStamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnAuthorityCharacterInstigatorKnockedOutWhileFetching
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnAuthorityCharacterInstigatorKnockedOutWhileFetching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnAuthorityCharacterInstigatorKnockedOutWhileFetching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnFetchedItemPickedUp
// (Final, Native, Protected)
// Parameters:
// class AMarinerItem*                     Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                NewItemCarrier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::OnFetchedItemPickedUp(class AMarinerItem* Item, class AMarinerCharacter* NewItemCarrier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnFetchedItemPickedUp");

	Params::MarinerProjectileFlux_OnFetchedItemPickedUp Parms{};

	Parms.Item = Item;
	Parms.NewItemCarrier = NewItemCarrier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnInstigatorAcquiredHomingTarget
// (Final, Native, Protected)
// Parameters:
// class AActor*                           PotentialGuidedHomingTarget                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::OnInstigatorAcquiredHomingTarget(class AActor* PotentialGuidedHomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnInstigatorAcquiredHomingTarget");

	Params::MarinerProjectileFlux_OnInstigatorAcquiredHomingTarget Parms{};

	Parms.PotentialGuidedHomingTarget = PotentialGuidedHomingTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnInstigatorLostHomingTarget
// (Final, Native, Protected)
// Parameters:
// class AActor*                           PreviousAimAssistTarget                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::OnInstigatorLostHomingTarget(class AActor* PreviousAimAssistTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnInstigatorLostHomingTarget");

	Params::MarinerProjectileFlux_OnInstigatorLostHomingTarget Parms{};

	Parms.PreviousAimAssistTarget = PreviousAimAssistTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnInstigatorSwappedHomingTarget
// (Final, Native, Protected)
// Parameters:
// class AActor*                           PreviousAimAssistTarget                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewPotentialGuidedHomingTarget                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::OnInstigatorSwappedHomingTarget(class AActor* PreviousAimAssistTarget, class AActor* NewPotentialGuidedHomingTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnInstigatorSwappedHomingTarget");

	Params::MarinerProjectileFlux_OnInstigatorSwappedHomingTarget Parms{};

	Parms.PreviousAimAssistTarget = PreviousAimAssistTarget;
	Parms.NewPotentialGuidedHomingTarget = NewPotentialGuidedHomingTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnPlayProjectileBounceSound
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnPlayProjectileBounceSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnPlayProjectileBounceSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnProjectileBounce
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// struct FHitResult                       ImpactResult                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          ImpactVelocity                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerProjectileFlux::OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnProjectileBounce");

	Params::MarinerProjectileFlux_OnProjectileBounce Parms{};

	Parms.ImpactResult = std::move(ImpactResult);
	Parms.ImpactVelocity = std::move(ImpactVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnRep_ArcBouncePlaneConstraintYaw
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnRep_ArcBouncePlaneConstraintYaw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnRep_ArcBouncePlaneConstraintYaw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnRep_CachedAutoHomingTarget
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnRep_CachedAutoHomingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnRep_CachedAutoHomingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnRep_CachedFetchingTarget
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnRep_CachedFetchingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnRep_CachedFetchingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.OnRep_CachedGuidedHomingTarget
// (Final, Native, Protected)

void AMarinerProjectileFlux::OnRep_CachedGuidedHomingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "OnRep_CachedGuidedHomingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.StopAtCloseHomingTarget
// (Final, Native, Protected)

void AMarinerProjectileFlux::StopAtCloseHomingTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "StopAtCloseHomingTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerProjectileFlux.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMarinerFluxProjectileState             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerFluxProjectileState AMarinerProjectileFlux::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "GetCurrentState");

	Params::MarinerProjectileFlux_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.GetFetchedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerItem* AMarinerProjectileFlux::GetFetchedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "GetFetchedItem");

	Params::MarinerProjectileFlux_GetFetchedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.GetFluxMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFluxProjectileMoveComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerFluxProjectileMoveComponent* AMarinerProjectileFlux::GetFluxMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "GetFluxMovementComponent");

	Params::MarinerProjectileFlux_GetFluxMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsAnyOtherFluxProjectileFetching
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsAnyOtherFluxProjectileFetching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsAnyOtherFluxProjectileFetching");

	Params::MarinerProjectileFlux_IsAnyOtherFluxProjectileFetching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsAutoHoming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsAutoHoming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsAutoHoming");

	Params::MarinerProjectileFlux_IsAutoHoming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsBouncing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsBouncing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsBouncing");

	Params::MarinerProjectileFlux_IsBouncing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsFetching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsFetching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsFetching");

	Params::MarinerProjectileFlux_IsFetching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsGuidedHoming
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsGuidedHoming() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsGuidedHoming");

	Params::MarinerProjectileFlux_IsGuidedHoming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerProjectileFlux.IsGuiding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerProjectileFlux::IsGuiding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerProjectileFlux", "IsGuiding");

	Params::MarinerProjectileFlux_IsGuiding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerPromptBanner.AddPrompt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerPromptData               Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerPromptBanner::AddPrompt(const struct FMarinerPromptData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPromptBanner", "AddPrompt");

	Params::MarinerPromptBanner_AddPrompt Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPromptBanner.ClearAllPrompts
// (Final, Native, Public, BlueprintCallable)

void UMarinerPromptBanner::ClearAllPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPromptBanner", "ClearAllPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerPromptBanner.ClearPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerPromptBanner::ClearPrompt(EMarinerInputActions InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerPromptBanner", "ClearPrompt");

	Params::MarinerPromptBanner_ClearPrompt Parms{};

	Parms.InputAction = InputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerQuestRewardMessageBox.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerMessageBoxQuestRewardDataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FMarinerMessageBoxQuestRewardData UMarinerQuestRewardMessageBox::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerQuestRewardMessageBox", "GetData");

	Params::MarinerQuestRewardMessageBox_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRealityObjectManager.ChangeLocalReality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMarinerRealityState                    NewReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRealityObjectManager::ChangeLocalReality(EMarinerRealityState NewReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRealityObjectManager", "ChangeLocalReality");

	Params::MarinerRealityObjectManager_ChangeLocalReality Parms{};

	Parms.NewReality = NewReality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRealityObjectManager.ResetReality
// (Final, Native, Protected, BlueprintCallable)

void UMarinerRealityObjectManager::ResetReality()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRealityObjectManager", "ResetReality");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRealityObjectManager.GetCurrentReality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EMarinerRealityState              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EMarinerRealityState UMarinerRealityObjectManager::GetCurrentReality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRealityObjectManager", "GetCurrentReality");

	Params::MarinerRealityObjectManager_GetCurrentReality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRealityObjectManager.IsLocalPlayerDefaultReality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerRealityObjectManager::IsLocalPlayerDefaultReality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRealityObjectManager", "IsLocalPlayerDefaultReality");

	Params::MarinerRealityObjectManager_IsLocalPlayerDefaultReality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRewardButton.OnEmoteCharacterPortraitLoaded
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::OnEmoteCharacterPortraitLoaded(const struct FSlateBrush& Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "OnEmoteCharacterPortraitLoaded");

	Params::MarinerRewardButton_OnEmoteCharacterPortraitLoaded Parms{};

	Parms.Brush = std::move(Brush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateBlastPass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OfferId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoOrderBlastpass             BlastPassOrder                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateBlastPass(const class FString& OfferId, const struct FMangoOrderBlastpass& BlastPassOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateBlastPass");

	Params::MarinerRewardButton_PopulateBlastPass Parms{};

	Parms.OfferId = std::move(OfferId);
	Parms.BlastPassOrder = std::move(BlastPassOrder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateBlastPassReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoBlastPassReward            Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateBlastPassReward(const struct FMangoBlastPassReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateBlastPassReward");

	Params::MarinerRewardButton_PopulateBlastPassReward Parms{};

	Parms.Reward = std::move(Reward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoItem                       Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   DupRocketpartsValue                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateItem(const struct FMangoItem& Item, int32 DupRocketpartsValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateItem");

	Params::MarinerRewardButton_PopulateItem Parms{};

	Parms.Item = std::move(Item);
	Parms.DupRocketpartsValue = DupRocketpartsValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateMangoReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoReward                     Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateMangoReward(const struct FMangoReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateMangoReward");

	Params::MarinerRewardButton_PopulateMangoReward Parms{};

	Parms.Reward = std::move(Reward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateNativeOffer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoNativeOffer                Nativeoffer                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateNativeOffer(const struct FMangoNativeOffer& Nativeoffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateNativeOffer");

	Params::MarinerRewardButton_PopulateNativeOffer Parms{};

	Parms.Nativeoffer = std::move(Nativeoffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateQuestReward
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoQuestReward                Reward                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateQuestReward(const struct FMangoQuestReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateQuestReward");

	Params::MarinerRewardButton_PopulateQuestReward Parms{};

	Parms.Reward = std::move(Reward);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateRocketbucks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RocketBucks                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateRocketbucks(int32 RocketBucks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateRocketbucks");

	Params::MarinerRewardButton_PopulateRocketbucks Parms{};

	Parms.RocketBucks = RocketBucks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateRocketparts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RocketParts                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateRocketparts(int32 RocketParts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateRocketparts");

	Params::MarinerRewardButton_PopulateRocketparts Parms{};

	Parms.RocketParts = RocketParts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateUIItemData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerUIItemButtonData         UIItemButtonData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateUIItemData(const struct FMarinerUIItemButtonData& UIItemButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateUIItemData");

	Params::MarinerRewardButton_PopulateUIItemData Parms{};

	Parms.UIItemButtonData = std::move(UIItemButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateXP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Xp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateXP(int32 Xp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateXP");

	Params::MarinerRewardButton_PopulateXP Parms{};

	Parms.Xp = Xp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.PopulateXPBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMangoBlastPassXPBonusType              BonusType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BonusPct                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRewardButton::PopulateXPBonus(EMangoBlastPassXPBonusType BonusType, int32 BonusPct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "PopulateXPBonus");

	Params::MarinerRewardButton_PopulateXPBonus Parms{};

	Parms.BonusType = BonusType;
	Parms.BonusPct = BonusPct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRewardButton.GetRarityImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UImage*                           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UImage* UMarinerRewardButton::GetRarityImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "GetRarityImage");

	Params::MarinerRewardButton_GetRarityImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRewardButton.GetUIItemButtonData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMarinerUIItemButtonData   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMarinerUIItemButtonData UMarinerRewardButton::GetUIItemButtonData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardButton", "GetUIItemButtonData");

	Params::MarinerRewardButton_GetUIItemButtonData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRewardsPreview.InitRewardsPreview
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMangoQuestReward                InRewards                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoQuest                      InQuest                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerRewardsPreview::InitRewardsPreview(const struct FMangoQuestReward& InRewards, const struct FMangoQuest& InQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRewardsPreview", "InitRewardsPreview");

	Params::MarinerRewardsPreview_InitRewardsPreview Parms{};

	Parms.InRewards = std::move(InRewards);
	Parms.InQuest = std::move(InQuest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRocketTotemCompanionAnim.CheckForPostGame
// (Final, Native, Protected, BlueprintCallable)

void UMarinerRocketTotemCompanionAnim::CheckForPostGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerRocketTotemCompanionAnim", "CheckForPostGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_ConstantForce.ApplyConstantForceRootMotion
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UMarinerCharacterMovement*        OwningMovementComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_ConstantForce>Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAdditive                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      StrengthOverTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERootMotionFinishVelocityMode           VelocityOnFinishMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampVelocityOnFinish                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SetVelocityOnFinish                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerRootMotionMoveUpdateDefaults_ConstantForce::ApplyConstantForceRootMotion(class UMarinerCharacterMovement* OwningMovementComponent, TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults_ConstantForce> Defaults, const struct FVector& WorldDirection, float Duration, bool bIsAdditive, class UCurveFloat* StrengthOverTime, float Strength, ERootMotionFinishVelocityMode VelocityOnFinishMode, float ClampVelocityOnFinish, const struct FVector& SetVelocityOnFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_ConstantForce", "ApplyConstantForceRootMotion");

	Params::MarinerRootMotionMoveUpdateDefaults_ConstantForce_ApplyConstantForceRootMotion Parms{};

	Parms.OwningMovementComponent = OwningMovementComponent;
	Parms.Defaults = Defaults;
	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Duration = Duration;
	Parms.bIsAdditive = bIsAdditive;
	Parms.StrengthOverTime = StrengthOverTime;
	Parms.Strength = Strength;
	Parms.VelocityOnFinishMode = VelocityOnFinishMode;
	Parms.ClampVelocityOnFinish = ClampVelocityOnFinish;
	Parms.SetVelocityOnFinish = std::move(SetVelocityOnFinish);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_ConstantForce.GetConstantForceRootMotionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerRootMotionMoveUpdateDefaults_ConstantForce::GetConstantForceRootMotionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_ConstantForce", "GetConstantForceRootMotionName");

	Params::MarinerRootMotionMoveUpdateDefaults_ConstantForce_GetConstantForceRootMotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_LerpToSpeed.GetLerpToSpeedRootMotionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerRootMotionMoveUpdateDefaults_LerpToSpeed::GetLerpToSpeedRootMotionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_LerpToSpeed", "GetLerpToSpeedRootMotionName");

	Params::MarinerRootMotionMoveUpdateDefaults_LerpToSpeed_GetLerpToSpeedRootMotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerRootMotionMoveUpdateDefaults_SlowToStop.GetSlowToStopRootMotionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerRootMotionMoveUpdateDefaults_SlowToStop::GetSlowToStopRootMotionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerRootMotionMoveUpdateDefaults_SlowToStop", "GetSlowToStopRootMotionName");

	Params::MarinerRootMotionMoveUpdateDefaults_SlowToStop_GetSlowToStopRootMotionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSafeToLeaveInfoWidget.OnGameSafeToLeave
// (Final, Native, Public)
// Parameters:
// bool                                    bEarlyDisconnect                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSafeToLeaveInfoWidget::OnGameSafeToLeave(bool bEarlyDisconnect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSafeToLeaveInfoWidget", "OnGameSafeToLeave");

	Params::MarinerSafeToLeaveInfoWidget_OnGameSafeToLeave Parms{};

	Parms.bEarlyDisconnect = bEarlyDisconnect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerScoreboardStats.OnPlayerStateReplicated
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerController*         ControllerHostingState                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerScoreboardStats::OnPlayerStateReplicated(class AMarinerPlayerController* ControllerHostingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerScoreboardStats", "OnPlayerStateReplicated");

	Params::MarinerScoreboardStats_OnPlayerStateReplicated Parms{};

	Parms.ControllerHostingState = ControllerHostingState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerScoreboardStats.OnStatChanged
// (Final, Native, Protected)
// Parameters:
// class AMarinerPlayerState*              PlayerWithStatChange                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StatName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StatValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerScoreboardStats::OnStatChanged(class AMarinerPlayerState* PlayerWithStatChange, class FName StatName, int32 StatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerScoreboardStats", "OnStatChanged");

	Params::MarinerScoreboardStats_OnStatChanged Parms{};

	Parms.PlayerWithStatChange = PlayerWithStatChange;
	Parms.StatName = StatName;
	Parms.StatValue = StatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerScrollBox.ClearHighlighting
// (Final, Native, Public, BlueprintCallable)

void UMarinerScrollBox::ClearHighlighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerScrollBox", "ClearHighlighting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerScrollBox.HighlightWidgetViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerScrollBox::HighlightWidgetViaIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerScrollBox", "HighlightWidgetViaIndex");

	Params::MarinerScrollBox_HighlightWidgetViaIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerScrollBox.ScrollByAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerScrollBox::ScrollByAmount(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerScrollBox", "ScrollByAmount");

	Params::MarinerScrollBox_ScrollByAmount Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerServerWidget.Join
// (Final, Native, Protected, BlueprintCallable)

void UMarinerServerWidget::Join()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerServerWidget", "Join");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerServerWidget.OnServerWidgetCreated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Param_Name                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Ping                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             PlayerCount                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerServerWidget::OnServerWidgetCreated(const class FText& Param_Name, const class FText& Ping, const class FText& PlayerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerServerWidget", "OnServerWidgetCreated");

	Params::MarinerServerWidget_OnServerWidgetCreated Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Ping = std::move(Ping);
	Parms.PlayerCount = std::move(PlayerCount);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSettingButton.HandleSelected
// (Final, Native, Private)

void UMarinerSettingButton::HandleSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingButton", "HandleSelected");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingButton.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingButtonAssets      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingButtonAssets UMarinerSettingButton::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingButton", "GetAssets");

	Params::MarinerSettingButton_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingKeyBinding.CheckBindingInUse
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             Binding                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::CheckBindingInUse(const struct FKey& Binding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "CheckBindingInUse");

	Params::MarinerSettingKeyBinding_CheckBindingInUse Parms{};

	Parms.Binding = std::move(Binding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.HandleInputBindingsChanged
// (Final, Native, Public)

void UMarinerSettingKeyBinding::HandleInputBindingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "HandleInputBindingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.InUseCancelCallback
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::InUseCancelCallback(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "InUseCancelCallback");

	Params::MarinerSettingKeyBinding_InUseCancelCallback Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.InUseConfirmCallback
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::InUseConfirmCallback(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "InUseConfirmCallback");

	Params::MarinerSettingKeyBinding_InUseConfirmCallback Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.MenuActionCallBack
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::MenuActionCallBack(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "MenuActionCallBack");

	Params::MarinerSettingKeyBinding_MenuActionCallBack Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.SetBinding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Binding                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::SetBinding(const struct FKey& Binding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "SetBinding");

	Params::MarinerSettingKeyBinding_SetBinding Parms{};

	Parms.Binding = std::move(Binding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.ShowBindingMessageBox
// (Final, Native, Private)

void UMarinerSettingKeyBinding::ShowBindingMessageBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "ShowBindingMessageBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.ShowInUseMessageBox
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    PrevBoundAction                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingKeyBinding::ShowInUseMessageBox(const struct FKey& Key, EMarinerInputActions PrevBoundAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "ShowInUseMessageBox");

	Params::MarinerSettingKeyBinding_ShowInUseMessageBox Parms{};

	Parms.Key = std::move(Key);
	Parms.PrevBoundAction = PrevBoundAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.ShowMenuActionMessageBox
// (Final, Native, Private)

void UMarinerSettingKeyBinding::ShowMenuActionMessageBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "ShowMenuActionMessageBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingKeyBinding.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingKeyBindingAssets  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingKeyBindingAssets UMarinerSettingKeyBinding::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingKeyBinding", "GetAssets");

	Params::MarinerSettingKeyBinding_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSettingSlider.SetDisplayRange
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InRange                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingSlider::SetDisplayRange(const struct FVector2D& InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingSlider", "SetDisplayRange");

	Params::MarinerSettingSlider_SetDisplayRange Parms{};

	Parms.InRange = std::move(InRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingSlider.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingSlider::SetValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingSlider", "SetValue");

	Params::MarinerSettingSlider_SetValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingSlider.SetValueByDisplayRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingSlider::SetValueByDisplayRange(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingSlider", "SetValueByDisplayRange");

	Params::MarinerSettingSlider_SetValueByDisplayRange Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingSlider.SliderValueChangedCB
// (Final, Native, Private)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSettingSlider::SliderValueChangedCB(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingSlider", "SliderValueChangedCB");

	Params::MarinerSettingSlider_SliderValueChangedCB Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSettingSlider.GetAssets
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FMarinerSettingSliderAssets      ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FMarinerSettingSliderAssets UMarinerSettingSlider::GetAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSettingSlider", "GetAssets");

	Params::MarinerSettingSlider_GetAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinBlueprintLibrary.ApplyMaterialOverridesToSkeletalMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMaterialOverride>        MaterialOverrides                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerSkinBlueprintLibrary::ApplyMaterialOverridesToSkeletalMesh(class USkeletalMeshComponent* Component, const TArray<struct FMaterialOverride>& MaterialOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerSkinBlueprintLibrary", "ApplyMaterialOverridesToSkeletalMesh");

	Params::MarinerSkinBlueprintLibrary_ApplyMaterialOverridesToSkeletalMesh Parms{};

	Parms.Component = Component;
	Parms.MaterialOverrides = std::move(MaterialOverrides);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinCollectionDataAsset.LoadLargePortraitAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(struct FSlateBrush& Brush)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerSkinCollectionDataAsset::LoadLargePortraitAsync(const TDelegate<void(struct FSlateBrush& Brush)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "LoadLargePortraitAsync");

	Params::MarinerSkinCollectionDataAsset_LoadLargePortraitAsync Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinCollectionDataAsset.LoadSmallPortraitAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(struct FSlateBrush& Brush)>Callback                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMarinerSkinCollectionDataAsset::LoadSmallPortraitAsync(const TDelegate<void(struct FSlateBrush& Brush)>& Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "LoadSmallPortraitAsync");

	Params::MarinerSkinCollectionDataAsset_LoadSmallPortraitAsync Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetAbilitySkins
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMarinerAbilitySkinMap>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMarinerAbilitySkinMap> UMarinerSkinCollectionDataAsset::GetAbilitySkins() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetAbilitySkins");

	Params::MarinerSkinCollectionDataAsset_GetAbilitySkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetCueSkins
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMarinerCueSkinMap>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMarinerCueSkinMap> UMarinerSkinCollectionDataAsset::GetCueSkins() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetCueSkins");

	Params::MarinerSkinCollectionDataAsset_GetCueSkins Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetFrontendUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMarinerCharacterFrontendSkinUIData> UMarinerSkinCollectionDataAsset::GetFrontendUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetFrontendUIData");

	Params::MarinerSkinCollectionDataAsset_GetFrontendUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetPortraitBackground
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMarinerSkinCollectionDataAsset::GetPortraitBackground() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetPortraitBackground");

	Params::MarinerSkinCollectionDataAsset_GetPortraitBackground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMarinerSkinDataAsset>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMarinerSkinDataAsset> UMarinerSkinCollectionDataAsset::GetSkinAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetSkinAsset");

	Params::MarinerSkinCollectionDataAsset_GetSkinAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftObjectPtr<class UMarinerSkinUIData>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UMarinerSkinUIData> UMarinerSkinCollectionDataAsset::GetSkinUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetSkinUIData");

	Params::MarinerSkinCollectionDataAsset_GetSkinUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetSkinUIData_ForceLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerSkinUIData*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerSkinUIData* UMarinerSkinCollectionDataAsset::GetSkinUIData_ForceLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetSkinUIData_ForceLoaded");

	Params::MarinerSkinCollectionDataAsset_GetSkinUIData_ForceLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSkinCollectionDataAsset.GetUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSoftClassPtr<class UClass>       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftClassPtr<class UClass> UMarinerSkinCollectionDataAsset::GetUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSkinCollectionDataAsset", "GetUIData");

	Params::MarinerSkinCollectionDataAsset_GetUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSocialRequestsWidget.OnSocialRequestCanceled
// (Final, Native, Private)
// Parameters:
// class UMarinerSocialWidget*             SocialWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSocialRequestsWidget::OnSocialRequestCanceled(class UMarinerSocialWidget* SocialWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSocialRequestsWidget", "OnSocialRequestCanceled");

	Params::MarinerSocialRequestsWidget_OnSocialRequestCanceled Parms{};

	Parms.SocialWidget = SocialWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpikeTrap.CauseDamage
// (Final, Native, Private)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   TargetDamageType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSpikeTrap::CauseDamage(class AActor* DamagedActor, TSubclassOf<class UMarinerDamageType> TargetDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "CauseDamage");

	Params::MarinerSpikeTrap_CauseDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.TargetDamageType = TargetDamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpikeTrap.ChangeState
// (Final, Native, Protected, HasOutParams)
// Parameters:
// EMarinerSpikeTrapMovementState          NewESpikeTrapMovementState                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSpikeTrap::ChangeState(const EMarinerSpikeTrapMovementState& NewESpikeTrapMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "ChangeState");

	Params::MarinerSpikeTrap_ChangeState Parms{};

	Parms.NewESpikeTrapMovementState = NewESpikeTrapMovementState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpikeTrap.OnDamageVolumeBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerSpikeTrap::OnDamageVolumeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "OnDamageVolumeBeginOverlap");

	Params::MarinerSpikeTrap_OnDamageVolumeBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpikeTrap.OnMovementStateChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EMarinerSpikeTrapMovementState          NewESpikeTrapMovementState                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSpikeTrap::OnMovementStateChanged(const EMarinerSpikeTrapMovementState& NewESpikeTrapMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "OnMovementStateChanged");

	Params::MarinerSpikeTrap_OnMovementStateChanged Parms{};

	Parms.NewESpikeTrapMovementState = NewESpikeTrapMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSpikeTrap.OnTimelineEnded
// (Final, Native, Private)

void AMarinerSpikeTrap::OnTimelineEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "OnTimelineEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSpikeTrap.TimelineFloatReturn
// (Final, Native, Private)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSpikeTrap::TimelineFloatReturn(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSpikeTrap", "TimelineFloatReturn");

	Params::MarinerSpikeTrap_TimelineFloatReturn Parms{};

	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSplineFollowActor.AddMoveableActorComponents
// (Final, Native, Protected, BlueprintCallable)

void AMarinerSplineFollowActor::AddMoveableActorComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineFollowActor", "AddMoveableActorComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSplineFollowActor.BP_CalculateOverlappingItemImpulseVelocity
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerItem*                     ItemToImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ItemLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OverlappedOwnedComponent                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          HitComponentForwardDirection                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          VectorFromComponentToItem                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AMarinerSplineFollowActor::BP_CalculateOverlappingItemImpulseVelocity(class AMarinerItem* ItemToImpulse, const struct FVector& ItemLocation, class UPrimitiveComponent* OverlappedOwnedComponent, const struct FVector& HitComponentForwardDirection, const struct FVector& VectorFromComponentToItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineFollowActor", "BP_CalculateOverlappingItemImpulseVelocity");

	Params::MarinerSplineFollowActor_BP_CalculateOverlappingItemImpulseVelocity Parms{};

	Parms.ItemToImpulse = ItemToImpulse;
	Parms.ItemLocation = std::move(ItemLocation);
	Parms.OverlappedOwnedComponent = OverlappedOwnedComponent;
	Parms.HitComponentForwardDirection = std::move(HitComponentForwardDirection);
	Parms.VectorFromComponentToItem = std::move(VectorFromComponentToItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSplineFollowActor.BP_HandleSplineMovementCompletion
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bHasSplineReachedEnd                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentAuthoritativeProgressRatio                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSplineFollowActor::BP_HandleSplineMovementCompletion(bool bHasSplineReachedEnd, float CurrentAuthoritativeProgressRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineFollowActor", "BP_HandleSplineMovementCompletion");

	Params::MarinerSplineFollowActor_BP_HandleSplineMovementCompletion Parms{};

	Parms.bHasSplineReachedEnd = bHasSplineReachedEnd;
	Parms.CurrentAuthoritativeProgressRatio = CurrentAuthoritativeProgressRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSplineFollowingProp.GetFollowSplineMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMarinerFollowSplineMovement*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerFollowSplineMovement* AMarinerSplineFollowingProp::GetFollowSplineMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSplineFollowingProp", "GetFollowSplineMovementComponent");

	Params::MarinerSplineFollowingProp_GetFollowSplineMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStartScreenMenu.OnLoginComplete
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStartScreenMenu::OnLoginComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStartScreenMenu", "OnLoginComplete");

	Params::MarinerStartScreenMenu_OnLoginComplete Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStartScreenMenu.OnQuitGameConfirmed
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FKey                             KeyPressed                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStartScreenMenu::OnQuitGameConfirmed(const struct FKey& KeyPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStartScreenMenu", "OnQuitGameConfirmed");

	Params::MarinerStartScreenMenu_OnQuitGameConfirmed Parms{};

	Parms.KeyPressed = std::move(KeyPressed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStartScreenMenu.OnSkipButtonClicked
// (Final, Native, Protected)

void UMarinerStartScreenMenu::OnSkipButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStartScreenMenu", "OnSkipButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStartScreenMenu.IsLoggingIn
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStartScreenMenu::IsLoggingIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStartScreenMenu", "IsLoggingIn");

	Params::MarinerStartScreenMenu_IsLoggingIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStatsFrame.PopulatePlayerStats
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FMatchEnd                        MatchEndData                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
// struct FMatchEndPlayer                  MatchEndPlayerData                                     (Parm, NativeAccessSpecifierPublic)
// bool                                    bIsLocalPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsClientTeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Rank                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStatsFrame::PopulatePlayerStats(const struct FMatchEnd& MatchEndData, const struct FMatchEndPlayer& MatchEndPlayerData, bool bIsLocalPlayer, bool bIsClientTeam, int32 Rank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStatsFrame", "PopulatePlayerStats");

	Params::MarinerStatsFrame_PopulatePlayerStats Parms{};

	Parms.MatchEndData = std::move(MatchEndData);
	Parms.MatchEndPlayerData = std::move(MatchEndPlayerData);
	Parms.bIsLocalPlayer = bIsLocalPlayer;
	Parms.bIsClientTeam = bIsClientTeam;
	Parms.Rank = Rank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStoreGlobals.GetImage
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ImageId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseDefaultBrush                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ImageBrushOut                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStoreGlobals::GetImage(const class FName& ImageId, bool bUseDefaultBrush, struct FSlateBrush* ImageBrushOut) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreGlobals", "GetImage");

	Params::MarinerStoreGlobals_GetImage Parms{};

	Parms.ImageId = ImageId;
	Parms.bUseDefaultBrush = bUseDefaultBrush;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ImageBrushOut != nullptr)
		*ImageBrushOut = std::move(Parms.ImageBrushOut);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStoreGlobals.GetOfferTypeName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMangoPurchaseOffer              InOffer                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             OutOfferName                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerStoreGlobals::GetOfferTypeName(const struct FMangoPurchaseOffer& InOffer, class FText* OutOfferName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreGlobals", "GetOfferTypeName");

	Params::MarinerStoreGlobals_GetOfferTypeName Parms{};

	Parms.InOffer = std::move(InOffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOfferName != nullptr)
		*OutOfferName = std::move(Parms.OutOfferName);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerStoreRootMenu.OnGameVersionChanged
// (Final, Native, Private)
// Parameters:
// EMarinerGameVersion                     NewVersion                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStoreRootMenu::OnGameVersionChanged(EMarinerGameVersion NewVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreRootMenu", "OnGameVersionChanged");

	Params::MarinerStoreRootMenu_OnGameVersionChanged Parms{};

	Parms.NewVersion = NewVersion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStoreRootMenu.OnInventoryChanged
// (Final, Native, Private)

void UMarinerStoreRootMenu::OnInventoryChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreRootMenu", "OnInventoryChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStoreRootMenu.OnOfferSelected
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStoreRootMenu::OnOfferSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreRootMenu", "OnOfferSelected");

	Params::MarinerStoreRootMenu_OnOfferSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStoreRootMenu.OnOfferStateChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FMangoPurchaseOffer>      StartingOffers                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FMangoPurchaseOffer>      EndingOffers                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerStoreRootMenu::OnOfferStateChanged(const TArray<struct FMangoPurchaseOffer>& StartingOffers, const TArray<struct FMangoPurchaseOffer>& EndingOffers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreRootMenu", "OnOfferStateChanged");

	Params::MarinerStoreRootMenu_OnOfferStateChanged Parms{};

	Parms.StartingOffers = std::move(StartingOffers);
	Parms.EndingOffers = std::move(EndingOffers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerStoreRootMenu.OnPurchaseFlowComplete
// (Final, Native, Private)
// Parameters:
// bool                                    bOfferPurchased                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerStoreRootMenu::OnPurchaseFlowComplete(bool bOfferPurchased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerStoreRootMenu", "OnPurchaseFlowComplete");

	Params::MarinerStoreRootMenu_OnPurchaseFlowComplete Parms{};

	Parms.bOfferPurchased = bOfferPurchased;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSubArtifactsMenu.OnArtifactWidgetHover
// (Final, Native, Private)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromKeyboard                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromMouse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerSubArtifactsMenu::OnArtifactWidgetHover(class UMarinerLayeredButton* Instance, bool bFromKeyboard, bool bFromMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSubArtifactsMenu", "OnArtifactWidgetHover");

	Params::MarinerSubArtifactsMenu_OnArtifactWidgetHover Parms{};

	Parms.Instance = Instance;
	Parms.bFromKeyboard = bFromKeyboard;
	Parms.bFromMouse = bFromMouse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSynchronousPickup.BP_OnBeginFading
// (Event, Protected, BlueprintEvent)

void AMarinerSynchronousPickup::BP_OnBeginFading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "BP_OnBeginFading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSynchronousPickup.BP_OnDespawn
// (Event, Protected, BlueprintEvent)

void AMarinerSynchronousPickup::BP_OnDespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "BP_OnDespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSynchronousPickup.BP_OnPickedUp
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMarinerPlayerState*              PlayerWhoPickedUp                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSynchronousPickup::BP_OnPickedUp(class AMarinerPlayerState* PlayerWhoPickedUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "BP_OnPickedUp");

	Params::MarinerSynchronousPickup_BP_OnPickedUp Parms{};

	Parms.PlayerWhoPickedUp = PlayerWhoPickedUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Mariner.MarinerSynchronousPickup.BP_OnSpawn
// (Event, Protected, BlueprintEvent)

void AMarinerSynchronousPickup::BP_OnSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "BP_OnSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Mariner.MarinerSynchronousPickup.BP_CanBePickedUp
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class AMarinerCharacter*                InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerSynchronousPickup::BP_CanBePickedUp(class AMarinerCharacter* InPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "BP_CanBePickedUp");

	Params::MarinerSynchronousPickup_BP_CanBePickedUp Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSynchronousPickup.GetPickedUpBy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerPlayerState*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerPlayerState* AMarinerSynchronousPickup::GetPickedUpBy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickup", "GetPickedUpBy");

	Params::MarinerSynchronousPickup_GetPickedUpBy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSynchronousPickupManager.DeactivatePickups
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerSynchronousPickupManager::DeactivatePickups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "DeactivatePickups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSynchronousPickupManager.InitiateFadeOnActivePickups
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AMarinerSynchronousPickupManager::InitiateFadeOnActivePickups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "InitiateFadeOnActivePickups");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSynchronousPickupManager.OnLocalPlayerRealityChanged
// (Final, Native, Protected)
// Parameters:
// EMarinerRealityState                    OldReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerRealityState                    NewReality                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerSynchronousPickupManager::OnLocalPlayerRealityChanged(EMarinerRealityState OldReality, EMarinerRealityState NewReality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "OnLocalPlayerRealityChanged");

	Params::MarinerSynchronousPickupManager_OnLocalPlayerRealityChanged Parms{};

	Parms.OldReality = OldReality;
	Parms.NewReality = NewReality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSynchronousPickupManager.OnRep_NonDormantPickupsPayload
// (Final, Native, Protected)
// Parameters:
// struct FMarinerSynchronousPickupsPayloadPreviousState                                          (Parm, NativeAccessSpecifierPublic)

void AMarinerSynchronousPickupManager::OnRep_NonDormantPickupsPayload(const struct FMarinerSynchronousPickupsPayload& PreviousState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "OnRep_NonDormantPickupsPayload");

	Params::MarinerSynchronousPickupManager_OnRep_NonDormantPickupsPayload Parms{};

	Parms.PreviousState = std::move(PreviousState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerSynchronousPickupManager.SpawnAllPickups
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerSynchronousPickupManager::SpawnAllPickups()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "SpawnAllPickups");

	Params::MarinerSynchronousPickupManager_SpawnAllPickups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSynchronousPickupManager.SpawnPickups
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SetIndexToSpawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMarinerSynchronousPickupManager::SpawnPickups(int32 SetIndexToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "SpawnPickups");

	Params::MarinerSynchronousPickupManager_SpawnPickups Parms{};

	Parms.SetIndexToSpawn = SetIndexToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerSynchronousPickupManager.GetNonDormantPickupState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EMarinerPickupState               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EMarinerPickupState AMarinerSynchronousPickupManager::GetNonDormantPickupState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerSynchronousPickupManager", "GetNonDormantPickupState");

	Params::MarinerSynchronousPickupManager_GetNonDormantPickupState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyAreaOfEffectDamage.ApplyAreaOfEffectDamage
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerDamageType>   AOEDamageType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyAreaOfEffectDamage*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyAreaOfEffectDamage* UMarinerTask_ApplyAreaOfEffectDamage::ApplyAreaOfEffectDamage(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class UMarinerDamageType> AOEDamageType, const struct FVector& Origin, const TArray<class AActor*>& IgnoreActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyAreaOfEffectDamage", "ApplyAreaOfEffectDamage");

	Params::MarinerTask_ApplyAreaOfEffectDamage_ApplyAreaOfEffectDamage Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.AOEDamageType = AOEDamageType;
	Parms.Origin = std::move(Origin);
	Parms.IgnoreActors = std::move(IgnoreActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRecovery.ApplyRecovery
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetJumpCount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaximumVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyRecovery*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyRecovery* UMarinerTask_ApplyRecovery::ApplyRecovery(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bResetJumpCount, float MaximumVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyRecovery", "ApplyRecovery");

	Params::MarinerTask_ApplyRecovery_ApplyRecovery Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.bResetJumpCount = bResetJumpCount;
	Parms.MaximumVelocity = MaximumVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRecovery.ApplyRecoverySynced
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetJumpCount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults>LerpToSpeedRootMotionDefaults                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyRecovery*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyRecovery* UMarinerTask_ApplyRecovery::ApplyRecoverySynced(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bResetJumpCount, TSubclassOf<class UMarinerRootMotionMoveUpdateDefaults> LerpToSpeedRootMotionDefaults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyRecovery", "ApplyRecoverySynced");

	Params::MarinerTask_ApplyRecovery_ApplyRecoverySynced Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.bResetJumpCount = bResetJumpCount;
	Parms.LerpToSpeedRootMotionDefaults = LerpToSpeedRootMotionDefaults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRecovery.RecoveryAppliedCallback
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FName                             InRootMotionName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_ApplyRecovery::RecoveryAppliedCallback(const class FName& InRootMotionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRecovery", "RecoveryAppliedCallback");

	Params::MarinerTask_ApplyRecovery_RecoveryAppliedCallback Parms{};

	Parms.InRootMotionName = InRootMotionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.CreateInstance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle Param_AimDataHandle                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Param_Duration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_MoveRange                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      Param_PathProgressionCurve                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampVelocityOnFinish                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bRestrictSpeedToExpected                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       Param_NonDamageableActorTypesToIgnoreHit               (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyRootMotionMoveToDynamicForce*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyRootMotionMoveToDynamicForce* UMarinerTask_ApplyRootMotionMoveToDynamicForce::CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, struct FGameplayAbilityTargetDataHandle& Param_AimDataHandle, float Param_Duration, float Param_MoveRange, class UCurveFloat* Param_PathProgressionCurve, float ClampVelocityOnFinish, bool Param_bRestrictSpeedToExpected, const TArray<TSubclassOf<class AActor>>& Param_NonDamageableActorTypesToIgnoreHit, bool bDrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "CreateInstance");

	Params::MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstance Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_AimDataHandle = std::move(Param_AimDataHandle);
	Parms.Param_Duration = Param_Duration;
	Parms.Param_MoveRange = Param_MoveRange;
	Parms.Param_PathProgressionCurve = Param_PathProgressionCurve;
	Parms.ClampVelocityOnFinish = ClampVelocityOnFinish;
	Parms.Param_bRestrictSpeedToExpected = Param_bRestrictSpeedToExpected;
	Parms.Param_NonDamageableActorTypesToIgnoreHit = std::move(Param_NonDamageableActorTypesToIgnoreHit);
	Parms.bDrawDebug = bDrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Param_AimDataHandle = std::move(Parms.Param_AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.CreateInstanceWithDamageSphere
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle Param_AimDataHandle                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Param_Duration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_MoveRange                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      Param_PathProgressionCurve                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampVelocityOnFinish                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bRestrictSpeedToExpected                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Param_DamageSphereCollisionChannel                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_DamageOverlapSphereRadius                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       Param_ActorTypesNotToDamageOverlap                     (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       Param_NonDamageableActorTypesToIgnoreHit               (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyRootMotionMoveToDynamicForce*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyRootMotionMoveToDynamicForce* UMarinerTask_ApplyRootMotionMoveToDynamicForce::CreateInstanceWithDamageSphere(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, struct FGameplayAbilityTargetDataHandle& Param_AimDataHandle, float Param_Duration, float Param_MoveRange, class UCurveFloat* Param_PathProgressionCurve, float ClampVelocityOnFinish, bool Param_bRestrictSpeedToExpected, ECollisionChannel Param_DamageSphereCollisionChannel, float Param_DamageOverlapSphereRadius, const TArray<TSubclassOf<class AActor>>& Param_ActorTypesNotToDamageOverlap, const TArray<TSubclassOf<class AActor>>& Param_NonDamageableActorTypesToIgnoreHit, bool bDrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "CreateInstanceWithDamageSphere");

	Params::MarinerTask_ApplyRootMotionMoveToDynamicForce_CreateInstanceWithDamageSphere Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_AimDataHandle = std::move(Param_AimDataHandle);
	Parms.Param_Duration = Param_Duration;
	Parms.Param_MoveRange = Param_MoveRange;
	Parms.Param_PathProgressionCurve = Param_PathProgressionCurve;
	Parms.ClampVelocityOnFinish = ClampVelocityOnFinish;
	Parms.Param_bRestrictSpeedToExpected = Param_bRestrictSpeedToExpected;
	Parms.Param_DamageSphereCollisionChannel = Param_DamageSphereCollisionChannel;
	Parms.Param_DamageOverlapSphereRadius = Param_DamageOverlapSphereRadius;
	Parms.Param_ActorTypesNotToDamageOverlap = std::move(Param_ActorTypesNotToDamageOverlap);
	Parms.Param_NonDamageableActorTypesToIgnoreHit = std::move(Param_NonDamageableActorTypesToIgnoreHit);
	Parms.bDrawDebug = bDrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Param_AimDataHandle = std::move(Parms.Param_AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.FinishTask
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_ApplyRootMotionMoveToDynamicForce::FinishTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "FinishTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.InterruptRootMotion
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_ApplyRootMotionMoveToDynamicForce::InterruptRootMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "InterruptRootMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnAvatarActorHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerTask_ApplyRootMotionMoveToDynamicForce::OnAvatarActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "OnAvatarActorHit");

	Params::MarinerTask_ApplyRootMotionMoveToDynamicForce_OnAvatarActorHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnDamageSphereOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerTask_ApplyRootMotionMoveToDynamicForce::OnDamageSphereOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "OnDamageSphereOverlap");

	Params::MarinerTask_ApplyRootMotionMoveToDynamicForce_OnDamageSphereOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionMoveToDynamicForce.OnImpendingMegablast
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                CharacterExpectingMegablast                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_ApplyRootMotionMoveToDynamicForce::OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionMoveToDynamicForce", "OnImpendingMegablast");

	Params::MarinerTask_ApplyRootMotionMoveToDynamicForce_OnImpendingMegablast Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.CharacterExpectingMegablast = CharacterExpectingMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.CreateInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_Duration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      Param_DecelerationCurve                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ApplyRootMotionSlowToStop*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ApplyRootMotionSlowToStop* UMarinerTask_ApplyRootMotionSlowToStop::CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_Duration, class UCurveFloat* Param_DecelerationCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ApplyRootMotionSlowToStop", "CreateInstance");

	Params::MarinerTask_ApplyRootMotionSlowToStop_CreateInstance Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_Duration = Param_Duration;
	Parms.Param_DecelerationCurve = Param_DecelerationCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.EndStopEarly
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UMarinerTask_ApplyRootMotionSlowToStop::EndStopEarly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionSlowToStop", "EndStopEarly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.OnImpendingMegablast
// (Final, Native, Protected)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                CharacterExpectingMegablast                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_ApplyRootMotionSlowToStop::OnImpendingMegablast(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionSlowToStop", "OnImpendingMegablast");

	Params::MarinerTask_ApplyRootMotionSlowToStop_OnImpendingMegablast Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.CharacterExpectingMegablast = CharacterExpectingMegablast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ApplyRootMotionSlowToStop.OnRep_Duration
// (Final, Native, Protected)

void UMarinerTask_ApplyRootMotionSlowToStop::OnRep_Duration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ApplyRootMotionSlowToStop", "OnRep_Duration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_DropItems.DropItemsByPriority
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPriorityStatusToRemove                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_DropItems*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_DropItems* UMarinerTask_DropItems::DropItemsByPriority(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bPriorityStatusToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_DropItems", "DropItemsByPriority");

	Params::MarinerTask_DropItems_DropItemsByPriority Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.bPriorityStatusToRemove = bPriorityStatusToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_LaunchCharacter.LaunchCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LaunchUpStrength                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LaunchForwardStrength                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_LaunchCharacter*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_LaunchCharacter* UMarinerTask_LaunchCharacter::LaunchCharacter(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float LaunchUpStrength, float LaunchForwardStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_LaunchCharacter", "LaunchCharacter");

	Params::MarinerTask_LaunchCharacter_LaunchCharacter Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.LaunchUpStrength = LaunchUpStrength;
	Parms.LaunchForwardStrength = LaunchForwardStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_LimitItemUsage.LimitItemUsage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldPreventItemUsage                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlotsToLimit                SlotsToPreventPickUpsIn                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlotsToLimit                SlotsToImmediatelyDropContentsFrom                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_LimitItemUsage*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_LimitItemUsage* UMarinerTask_LimitItemUsage::LimitItemUsage(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bShouldPreventItemUsage, EMarinerItemSlotsToLimit SlotsToPreventPickUpsIn, EMarinerItemSlotsToLimit SlotsToImmediatelyDropContentsFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_LimitItemUsage", "LimitItemUsage");

	Params::MarinerTask_LimitItemUsage_LimitItemUsage Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.bShouldPreventItemUsage = bShouldPreventItemUsage;
	Parms.SlotsToPreventPickUpsIn = SlotsToPreventPickUpsIn;
	Parms.SlotsToImmediatelyDropContentsFrom = SlotsToImmediatelyDropContentsFrom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_LimitItemUsage.OnItemPickedUp
// (Final, Native, Protected)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerItemSlot                        ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_LimitItemUsage::OnItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_LimitItemUsage", "OnItemPickedUp");

	Params::MarinerTask_LimitItemUsage_OnItemPickedUp Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.ListenForDamageTaken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_DamageThreshold                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeOutDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ResetAccumulationTimerDuration                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bListenToIncomingDamageVsDamageTaken                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForDamageTaken*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForDamageTaken* UMarinerTask_ListenForDamageTaken::ListenForDamageTaken(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_DamageThreshold, float TimeOutDuration, float ResetAccumulationTimerDuration, bool bListenToIncomingDamageVsDamageTaken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForDamageTaken", "ListenForDamageTaken");

	Params::MarinerTask_ListenForDamageTaken_ListenForDamageTaken Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_DamageThreshold = Param_DamageThreshold;
	Parms.TimeOutDuration = TimeOutDuration;
	Parms.ResetAccumulationTimerDuration = ResetAccumulationTimerDuration;
	Parms.bListenToIncomingDamageVsDamageTaken = bListenToIncomingDamageVsDamageTaken;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.ListenForDamageTakenRollingPeriod
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_DamageThreshold                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeOutDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RollingTimePeriod                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForDamageTaken*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForDamageTaken* UMarinerTask_ListenForDamageTaken::ListenForDamageTakenRollingPeriod(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, float Param_DamageThreshold, float TimeOutDuration, float RollingTimePeriod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForDamageTaken", "ListenForDamageTakenRollingPeriod");

	Params::MarinerTask_ListenForDamageTaken_ListenForDamageTakenRollingPeriod Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_DamageThreshold = Param_DamageThreshold;
	Parms.TimeOutDuration = TimeOutDuration;
	Parms.RollingTimePeriod = RollingTimePeriod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.GetAccumulatedRollingDamage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerTask_ListenForDamageTaken::GetAccumulatedRollingDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "GetAccumulatedRollingDamage");

	Params::MarinerTask_ListenForDamageTaken_GetAccumulatedRollingDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.OnAvatarTakeDamage
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_ListenForDamageTaken::OnAvatarTakeDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "OnAvatarTakeDamage");

	Params::MarinerTask_ListenForDamageTaken_OnAvatarTakeDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.OnRep_AccumulatedDamage
// (Final, Native, Protected)

void UMarinerTask_ListenForDamageTaken::OnRep_AccumulatedDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "OnRep_AccumulatedDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.OnResetAccumulationTimerExpired
// (Final, Native, Protected)

void UMarinerTask_ListenForDamageTaken::OnResetAccumulationTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "OnResetAccumulationTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.OnThresholdHit
// (Final, Native, Protected)

void UMarinerTask_ListenForDamageTaken::OnThresholdHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "OnThresholdHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForDamageTaken.OnTimeOut
// (Final, Native, Protected)

void UMarinerTask_ListenForDamageTaken::OnTimeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForDamageTaken", "OnTimeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtActorLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bManagedOverlapsEnabled                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSimulateOnNonOwningClients                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Param_OverlapOriginActor                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_OverlapRadius                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Param_OverlapCollisionChannel                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Param_FastCollisionCollection                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Param_IgnoreActors                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<TSoftClassPtr<class UClass>>     Param_IgnoreActorTypes                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForFastOverlaps*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForFastOverlaps* UMarinerTask_ListenForFastOverlaps::ListenForFastSphereOverlapsAtActorLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, class AActor* Param_OverlapOriginActor, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForFastOverlaps", "ListenForFastSphereOverlapsAtActorLocation");

	Params::MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtActorLocation Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_bManagedOverlapsEnabled = Param_bManagedOverlapsEnabled;
	Parms.bSimulateOnNonOwningClients = bSimulateOnNonOwningClients;
	Parms.Param_OverlapOriginActor = Param_OverlapOriginActor;
	Parms.Param_OverlapRadius = Param_OverlapRadius;
	Parms.Param_OverlapCollisionChannel = Param_OverlapCollisionChannel;
	Parms.Param_FastCollisionCollection = Param_FastCollisionCollection;
	Parms.Param_IgnoreActors = std::move(Param_IgnoreActors);
	Parms.Param_IgnoreActorTypes = std::move(Param_IgnoreActorTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bManagedOverlapsEnabled                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSimulateOnNonOwningClients                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Param_OverlapOrigin                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_OverlapRadius                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Param_OverlapCollisionChannel                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Param_FastCollisionCollection                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Param_IgnoreActors                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<TSoftClassPtr<class UClass>>     Param_IgnoreActorTypes                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForFastOverlaps*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForFastOverlaps* UMarinerTask_ListenForFastOverlaps::ListenForFastSphereOverlapsAtLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, const struct FVector& Param_OverlapOrigin, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForFastOverlaps", "ListenForFastSphereOverlapsAtLocation");

	Params::MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtLocation Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_bManagedOverlapsEnabled = Param_bManagedOverlapsEnabled;
	Parms.bSimulateOnNonOwningClients = bSimulateOnNonOwningClients;
	Parms.Param_OverlapOrigin = std::move(Param_OverlapOrigin);
	Parms.Param_OverlapRadius = Param_OverlapRadius;
	Parms.Param_OverlapCollisionChannel = Param_OverlapCollisionChannel;
	Parms.Param_FastCollisionCollection = Param_FastCollisionCollection;
	Parms.Param_IgnoreActors = std::move(Param_IgnoreActors);
	Parms.Param_IgnoreActorTypes = std::move(Param_IgnoreActorTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForFastOverlaps.ListenForFastSphereOverlapsAtMovingActorLocation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_bManagedOverlapsEnabled                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSimulateOnNonOwningClients                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMovementComponent*               Param_OverlapOriginMovementComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_OverlapRadius                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Param_OverlapCollisionChannel                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Param_FastCollisionCollection                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Param_IgnoreActors                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<TSoftClassPtr<class UClass>>     Param_IgnoreActorTypes                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForFastOverlaps*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForFastOverlaps* UMarinerTask_ListenForFastOverlaps::ListenForFastSphereOverlapsAtMovingActorLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool Param_bManagedOverlapsEnabled, bool bSimulateOnNonOwningClients, class UMovementComponent* Param_OverlapOriginMovementComponent, float Param_OverlapRadius, ECollisionChannel Param_OverlapCollisionChannel, uint8 Param_FastCollisionCollection, const TArray<class AActor*>& Param_IgnoreActors, const TArray<TSoftClassPtr<class UClass>>& Param_IgnoreActorTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForFastOverlaps", "ListenForFastSphereOverlapsAtMovingActorLocation");

	Params::MarinerTask_ListenForFastOverlaps_ListenForFastSphereOverlapsAtMovingActorLocation Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_bManagedOverlapsEnabled = Param_bManagedOverlapsEnabled;
	Parms.bSimulateOnNonOwningClients = bSimulateOnNonOwningClients;
	Parms.Param_OverlapOriginMovementComponent = Param_OverlapOriginMovementComponent;
	Parms.Param_OverlapRadius = Param_OverlapRadius;
	Parms.Param_OverlapCollisionChannel = Param_OverlapCollisionChannel;
	Parms.Param_FastCollisionCollection = Param_FastCollisionCollection;
	Parms.Param_IgnoreActors = std::move(Param_IgnoreActors);
	Parms.Param_IgnoreActorTypes = std::move(Param_IgnoreActorTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForFastOverlaps.FinishTask
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_ListenForFastOverlaps::FinishTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForFastOverlaps", "FinishTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.ListenForGameplayEffectRemoved
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEndOnAllGameplayEffectStacksRemoved                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyGameplayEffectOnStartListening                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMarinerCharacter*                TargetCharacter                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UGameplayEffect>      GameplayEffectToListenFor                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_ListenForGameplayEffectRemoved*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_ListenForGameplayEffectRemoved* UMarinerTask_ListenForGameplayEffectRemoved::ListenForGameplayEffectRemoved(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, bool bEndOnAllGameplayEffectStacksRemoved, bool bApplyGameplayEffectOnStartListening, class AMarinerCharacter* TargetCharacter, TSubclassOf<class UGameplayEffect> GameplayEffectToListenFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_ListenForGameplayEffectRemoved", "ListenForGameplayEffectRemoved");

	Params::MarinerTask_ListenForGameplayEffectRemoved_ListenForGameplayEffectRemoved Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.bEndOnAllGameplayEffectStacksRemoved = bEndOnAllGameplayEffectStacksRemoved;
	Parms.bApplyGameplayEffectOnStartListening = bApplyGameplayEffectOnStartListening;
	Parms.TargetCharacter = TargetCharacter;
	Parms.GameplayEffectToListenFor = GameplayEffectToListenFor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.ApplyGameplayEffect
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_ListenForGameplayEffectRemoved::ApplyGameplayEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForGameplayEffectRemoved", "ApplyGameplayEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.FinishTask
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_ListenForGameplayEffectRemoved::FinishTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForGameplayEffectRemoved", "FinishTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_ListenForGameplayEffectRemoved.OnAnyGameplayEffectRemoved
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FActiveGameplayEffect            RemovedEffect                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerTask_ListenForGameplayEffectRemoved::OnAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& RemovedEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_ListenForGameplayEffectRemoved", "OnAnyGameplayEffectRemoved");

	Params::MarinerTask_ListenForGameplayEffectRemoved_OnAnyGameplayEffectRemoved Parms{};

	Parms.RemovedEffect = std::move(RemovedEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.CreateInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerCharacterMontage*         Param_MontageToPlay                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWaitTimeTillCompletion                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_PlayMontageAndWait*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_PlayMontageAndWait* UMarinerTask_PlayMontageAndWait::CreateInstance(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UMarinerCharacterMontage* Param_MontageToPlay, float MaxWaitTimeTillCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_PlayMontageAndWait", "CreateInstance");

	Params::MarinerTask_PlayMontageAndWait_CreateInstance Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_MontageToPlay = Param_MontageToPlay;
	Parms.MaxWaitTimeTillCompletion = MaxWaitTimeTillCompletion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.OnAnimNotifyCharacterEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EAnimNotifyCharacterEventType           EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_PlayMontageAndWait::OnAnimNotifyCharacterEvent(EAnimNotifyCharacterEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_PlayMontageAndWait", "OnAnimNotifyCharacterEvent");

	Params::MarinerTask_PlayMontageAndWait_OnAnimNotifyCharacterEvent Parms{};

	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageBlendingOutStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_PlayMontageAndWait::OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_PlayMontageAndWait", "OnMontageBlendingOutStarted");

	Params::MarinerTask_PlayMontageAndWait_OnMontageBlendingOutStarted Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageEnded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_PlayMontageAndWait::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_PlayMontageAndWait", "OnMontageEnded");

	Params::MarinerTask_PlayMontageAndWait_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageInterrupted
// (Final, Native, Private)

void UMarinerTask_PlayMontageAndWait::OnMontageInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_PlayMontageAndWait", "OnMontageInterrupted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_PlayMontageAndWait.OnMontageStarted
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_PlayMontageAndWait::OnMontageStarted(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_PlayMontageAndWait", "OnMontageStarted");

	Params::MarinerTask_PlayMontageAndWait_OnMontageStarted Parms{};

	Parms.Montage = Montage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_SpawnActor.SpawnActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Param_ActorType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DesiredLocation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         DesiredRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsPositioningRelativeToCaster                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnActor*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnActor* UMarinerTask_SpawnActor::SpawnActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class AActor> Param_ActorType, const struct FVector& DesiredLocation, const struct FRotator& DesiredRotation, bool bIsPositioningRelativeToCaster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnActor", "SpawnActor");

	Params::MarinerTask_SpawnActor_SpawnActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_ActorType = Param_ActorType;
	Parms.DesiredLocation = std::move(DesiredLocation);
	Parms.DesiredRotation = std::move(DesiredRotation);
	Parms.bIsPositioningRelativeToCaster = bIsPositioningRelativeToCaster;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.CreateInstanceUsingCapsuleFromActorAsMask
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Param_ReticleActorType                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinimumReticleRenderDistance                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaximumReticleDistance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleTracerRadiusModifier                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleTracerHalfHeightModifier                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       CapsuleTracerClassesToIgnoreHits                       (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bSpinOnTouchAnything                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReticleSpinDegreesPerSecond                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseDamageSphere                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereDamageableTracerRadius                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       DamageSphereTracerCollisionChannel                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class AActor>>       DamageableSphereActorTypeWhitelist                     (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    bAlwaysPlaceReticleAtMaxRange                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnAimingReticle*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnAimingReticle* UMarinerTask_SpawnAimingReticle::CreateInstanceUsingCapsuleFromActorAsMask(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, TSubclassOf<class AActor> Param_ReticleActorType, float MinimumReticleRenderDistance, float MaximumReticleDistance, float CapsuleTracerRadiusModifier, float CapsuleTracerHalfHeightModifier, const TArray<TSubclassOf<class AActor>>& CapsuleTracerClassesToIgnoreHits, bool bSpinOnTouchAnything, float ReticleSpinDegreesPerSecond, bool bUseDamageSphere, float SphereDamageableTracerRadius, ECollisionChannel DamageSphereTracerCollisionChannel, const TArray<TSubclassOf<class AActor>>& DamageableSphereActorTypeWhitelist, bool bAlwaysPlaceReticleAtMaxRange, bool bDrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnAimingReticle", "CreateInstanceUsingCapsuleFromActorAsMask");

	Params::MarinerTask_SpawnAimingReticle_CreateInstanceUsingCapsuleFromActorAsMask Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.Param_ReticleActorType = Param_ReticleActorType;
	Parms.MinimumReticleRenderDistance = MinimumReticleRenderDistance;
	Parms.MaximumReticleDistance = MaximumReticleDistance;
	Parms.CapsuleTracerRadiusModifier = CapsuleTracerRadiusModifier;
	Parms.CapsuleTracerHalfHeightModifier = CapsuleTracerHalfHeightModifier;
	Parms.CapsuleTracerClassesToIgnoreHits = std::move(CapsuleTracerClassesToIgnoreHits);
	Parms.bSpinOnTouchAnything = bSpinOnTouchAnything;
	Parms.ReticleSpinDegreesPerSecond = ReticleSpinDegreesPerSecond;
	Parms.bUseDamageSphere = bUseDamageSphere;
	Parms.SphereDamageableTracerRadius = SphereDamageableTracerRadius;
	Parms.DamageSphereTracerCollisionChannel = DamageSphereTracerCollisionChannel;
	Parms.DamageableSphereActorTypeWhitelist = std::move(DamageableSphereActorTypeWhitelist);
	Parms.bAlwaysPlaceReticleAtMaxRange = bAlwaysPlaceReticleAtMaxRange;
	Parms.bDrawDebug = bDrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.FinishTask
// (Final, Native, Public, BlueprintCallable)

void UMarinerTask_SpawnAimingReticle::FinishTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "FinishTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.FreezeReticle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerTask_SpawnAimingReticle::FreezeReticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "FreezeReticle");

	Params::MarinerTask_SpawnAimingReticle_FreezeReticle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.UpdateReticleRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRange                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_SpawnAimingReticle::UpdateReticleRange(float NewRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "UpdateReticleRange");

	Params::MarinerTask_SpawnAimingReticle_UpdateReticleRange Parms{};

	Parms.NewRange = NewRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.GetDamagableTouched
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UMarinerTask_SpawnAimingReticle::GetDamagableTouched() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "GetDamagableTouched");

	Params::MarinerTask_SpawnAimingReticle_GetDamagableTouched Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.GetFurthestNonDamageableImpactPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMarinerTask_SpawnAimingReticle::GetFurthestNonDamageableImpactPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "GetFurthestNonDamageableImpactPoint");

	Params::MarinerTask_SpawnAimingReticle_GetFurthestNonDamageableImpactPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.GetLastCharacterReticleOverlapped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMarinerCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMarinerCharacter* UMarinerTask_SpawnAimingReticle::GetLastCharacterReticleOverlapped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "GetLastCharacterReticleOverlapped");

	Params::MarinerTask_SpawnAimingReticle_GetLastCharacterReticleOverlapped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.GetReticleActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UMarinerTask_SpawnAimingReticle::GetReticleActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "GetReticleActor");

	Params::MarinerTask_SpawnAimingReticle_GetReticleActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.IsReticleTouchingAnything
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerTask_SpawnAimingReticle::IsReticleTouchingAnything() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "IsReticleTouchingAnything");

	Params::MarinerTask_SpawnAimingReticle_IsReticleTouchingAnything Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnAimingReticle.IsReticleTouchingDamagable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerTask_SpawnAimingReticle::IsReticleTouchingDamagable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_SpawnAimingReticle", "IsReticleTouchingDamagable");

	Params::MarinerTask_SpawnAimingReticle_IsReticleTouchingDamagable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnMultiProjectile.SpawnMultiProjectile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UMarinerProjectileSpread>>Param_ProjectileSpreads                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_SpawnPathBatchingTimeTolerance                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnMultiProjectile*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnMultiProjectile* UMarinerTask_SpawnMultiProjectile::SpawnMultiProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const TArray<TSubclassOf<class UMarinerProjectileSpread>>& Param_ProjectileSpreads, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float Param_SpawnPathBatchingTimeTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnMultiProjectile", "SpawnMultiProjectile");

	Params::MarinerTask_SpawnMultiProjectile_SpawnMultiProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.Param_ProjectileSpreads = std::move(Param_ProjectileSpreads);
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.Param_SpawnPathBatchingTimeTolerance = Param_SpawnPathBatchingTimeTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AimDataHandle = std::move(Parms.AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnMultiProjectile.SpawnMultiProjectileWithPool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class UMarinerProjectileSpread>>Param_ProjectileSpreads                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Param_SpawnPathBatchingTimeTolerance                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OptionalMaximumProjectilesToSpawn                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnMultiProjectile*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnMultiProjectile* UMarinerTask_SpawnMultiProjectile::SpawnMultiProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, const TArray<TSubclassOf<class UMarinerProjectileSpread>>& Param_ProjectileSpreads, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, float Param_SpawnPathBatchingTimeTolerance, int32 OptionalMaximumProjectilesToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnMultiProjectile", "SpawnMultiProjectileWithPool");

	Params::MarinerTask_SpawnMultiProjectile_SpawnMultiProjectileWithPool Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.Param_ProjectileSpreads = std::move(Param_ProjectileSpreads);
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.Param_SpawnPathBatchingTimeTolerance = Param_SpawnPathBatchingTimeTolerance;
	Parms.OptionalMaximumProjectilesToSpawn = OptionalMaximumProjectilesToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AimDataHandle = std::move(Parms.AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnProjectile.SpawnProjectile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocationOffset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnProjectile*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnProjectile* UMarinerTask_SpawnProjectile::SpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, const struct FVector& SpawnLocationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnProjectile", "SpawnProjectile");

	Params::MarinerTask_SpawnProjectile_SpawnProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.SpawnLocationOffset = std::move(SpawnLocationOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AimDataHandle = std::move(Parms.AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnProjectile.SpawnProjectileWithPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketToSpawnAt                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocationOffset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnProjectile*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnProjectile* UMarinerTask_SpawnProjectile::SpawnProjectileWithPool(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, struct FGameplayAbilityTargetDataHandle& AimDataHandle, EMarinerSpawnSocketSource SocketSource, class FName SocketToSpawnAt, const struct FVector& SpawnLocationOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnProjectile", "SpawnProjectileWithPool");

	Params::MarinerTask_SpawnProjectile_SpawnProjectileWithPool Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.SocketSource = SocketSource;
	Parms.SocketToSpawnAt = SocketToSpawnAt;
	Parms.SpawnLocationOffset = std::move(SpawnLocationOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	AimDataHandle = std::move(Parms.AimDataHandle);

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_SpawnProjectileAtSafeLocation.SpawnGroundedProjectile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AMarinerProjectile>   DefaultProjectileType                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerSpawnSocketSource               SocketSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SweepFromOrigin                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SweepDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSpawnDistance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SweepCapsuleHalfHeightScale                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SweepCapsuleRadiusScale                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Param_CapsuleSource                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   Param_IgnoredActors                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FVector                          HitLocationSpawnOffset                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_SpawnProjectileAtSafeLocation*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_SpawnProjectileAtSafeLocation* UMarinerTask_SpawnProjectileAtSafeLocation::SpawnGroundedProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const TSubclassOf<class AMarinerProjectile>& DefaultProjectileType, EMarinerSpawnSocketSource SocketSource, const struct FVector& SweepFromOrigin, const struct FVector& SweepDirection, float MaxSpawnDistance, float SweepCapsuleHalfHeightScale, float SweepCapsuleRadiusScale, class AActor* Param_CapsuleSource, ETraceTypeQuery TraceChannel, const TArray<class AActor*>& Param_IgnoredActors, const struct FVector& HitLocationSpawnOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_SpawnProjectileAtSafeLocation", "SpawnGroundedProjectile");

	Params::MarinerTask_SpawnProjectileAtSafeLocation_SpawnGroundedProjectile Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.DefaultProjectileType = DefaultProjectileType;
	Parms.SocketSource = SocketSource;
	Parms.SweepFromOrigin = std::move(SweepFromOrigin);
	Parms.SweepDirection = std::move(SweepDirection);
	Parms.MaxSpawnDistance = MaxSpawnDistance;
	Parms.SweepCapsuleHalfHeightScale = SweepCapsuleHalfHeightScale;
	Parms.SweepCapsuleRadiusScale = SweepCapsuleRadiusScale;
	Parms.Param_CapsuleSource = Param_CapsuleSource;
	Parms.TraceChannel = TraceChannel;
	Parms.Param_IgnoredActors = std::move(Param_IgnoredActors);
	Parms.HitLocationSpawnOffset = std::move(HitLocationSpawnOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_TeleportToActor.SwapActors
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorToTeleportInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           TeleportationTarget                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlaceSecondActorNearestDownLocation                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDestroyTargetOnFailedSwap                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TeleportDestinationOffset                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SecondDestinationOffset                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSwapProbeDepth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartSwapProbeHeightAboveActorLoc                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxVelocityAfterTeleport                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleHalfHeightScale                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleRadiusScale                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  BackupLocations                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UMarinerTask_TeleportToActor*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_TeleportToActor* UMarinerTask_TeleportToActor::SwapActors(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FGameplayAbilityActorInfo& ActorToTeleportInfo, class AActor* TeleportationTarget, bool bPlaceSecondActorNearestDownLocation, bool bDestroyTargetOnFailedSwap, const struct FVector& TeleportDestinationOffset, const struct FVector& SecondDestinationOffset, float MaxSwapProbeDepth, float StartSwapProbeHeightAboveActorLoc, float MaxVelocityAfterTeleport, float CapsuleHalfHeightScale, float CapsuleRadiusScale, ETraceTypeQuery TraceChannel, const TArray<struct FVector>& BackupLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_TeleportToActor", "SwapActors");

	Params::MarinerTask_TeleportToActor_SwapActors Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.ActorToTeleportInfo = std::move(ActorToTeleportInfo);
	Parms.TeleportationTarget = TeleportationTarget;
	Parms.bPlaceSecondActorNearestDownLocation = bPlaceSecondActorNearestDownLocation;
	Parms.bDestroyTargetOnFailedSwap = bDestroyTargetOnFailedSwap;
	Parms.TeleportDestinationOffset = std::move(TeleportDestinationOffset);
	Parms.SecondDestinationOffset = std::move(SecondDestinationOffset);
	Parms.MaxSwapProbeDepth = MaxSwapProbeDepth;
	Parms.StartSwapProbeHeightAboveActorLoc = StartSwapProbeHeightAboveActorLoc;
	Parms.MaxVelocityAfterTeleport = MaxVelocityAfterTeleport;
	Parms.CapsuleHalfHeightScale = CapsuleHalfHeightScale;
	Parms.CapsuleRadiusScale = CapsuleRadiusScale;
	Parms.TraceChannel = TraceChannel;
	Parms.BackupLocations = std::move(BackupLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_TeleportToActor.TeleportToActor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayAbilityActorInfo        ActorToTeleportInfo                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           TeleportationTarget                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerTeleportBehavior                TeleportBehavior                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TeleportDestinationOffset                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxVelocityAfterTeleport                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  BackupLocations                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UMarinerTask_TeleportToActor*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_TeleportToActor* UMarinerTask_TeleportToActor::TeleportToActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FGameplayAbilityActorInfo& ActorToTeleportInfo, class AActor* TeleportationTarget, EMarinerTeleportBehavior TeleportBehavior, const struct FVector& TeleportDestinationOffset, float MaxVelocityAfterTeleport, const TArray<struct FVector>& BackupLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_TeleportToActor", "TeleportToActor");

	Params::MarinerTask_TeleportToActor_TeleportToActor Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.ActorToTeleportInfo = std::move(ActorToTeleportInfo);
	Parms.TeleportationTarget = TeleportationTarget;
	Parms.TeleportBehavior = TeleportBehavior;
	Parms.TeleportDestinationOffset = std::move(TeleportDestinationOffset);
	Parms.MaxVelocityAfterTeleport = MaxVelocityAfterTeleport;
	Parms.BackupLocations = std::move(BackupLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_WaitForAimData.WaitForAimData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTask_WaitForAimData*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTask_WaitForAimData* UMarinerTask_WaitForAimData::WaitForAimData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTask_WaitForAimData", "WaitForAimData");

	Params::MarinerTask_WaitForAimData_WaitForAimData Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTask_WaitForAimData.OnAimDataReceived
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayAbilityTargetDataHandle AimDataHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ActivationTag                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTask_WaitForAimData::OnAimDataReceived(const struct FGameplayAbilityTargetDataHandle& AimDataHandle, const struct FGameplayTag& ActivationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTask_WaitForAimData", "OnAimDataReceived");

	Params::MarinerTask_WaitForAimData_OnAimDataReceived Parms{};

	Parms.AimDataHandle = std::move(AimDataHandle);
	Parms.ActivationTag = std::move(ActivationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTeamAffiliatedObjectInterface.SetTeamIndex
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InTeamIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMarinerTeamAffiliatedObjectInterface::SetTeamIndex(int32 InTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTeamAffiliatedObjectInterface", "SetTeamIndex");

	Params::MarinerTeamAffiliatedObjectInterface_SetTeamIndex Parms{};

	Parms.InTeamIndex = InTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTeamAffiliatedObjectInterface.UpdateTeamColors
// (Native, Event, Public, BlueprintEvent)

void IMarinerTeamAffiliatedObjectInterface::UpdateTeamColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTeamAffiliatedObjectInterface", "UpdateTeamColors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTeamAffiliatedObjectInterface.GetTeamIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IMarinerTeamAffiliatedObjectInterface::GetTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTeamAffiliatedObjectInterface", "GetTeamIndex");

	Params::MarinerTeamAffiliatedObjectInterface_GetTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTimerWidget.RefreshTimer
// (Final, Native, Private)

void UMarinerTimerWidget::RefreshTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTimerWidget", "RefreshTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTimerWidget.StartCountdownTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeRemainingSeconds                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTimerWidget::StartCountdownTimer(float TimeRemainingSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTimerWidget", "StartCountdownTimer");

	Params::MarinerTimerWidget_StartCountdownTimer Parms{};

	Parms.TimeRemainingSeconds = TimeRemainingSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemFlagTextures.ConfigureMaterialUsingTextures
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         MaterialToConfigure                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemFlagTextures::ConfigureMaterialUsingTextures(class UMaterialInstanceDynamic* MaterialToConfigure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTotemFlagTextures", "ConfigureMaterialUsingTextures");

	Params::MarinerTotemFlagTextures_ConfigureMaterialUsingTextures Parms{};

	Parms.MaterialToConfigure = MaterialToConfigure;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemFlagTextures.GetBakedMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UMarinerTotemFlagTextures::GetBakedMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTotemFlagTextures", "GetBakedMaterial");

	Params::MarinerTotemFlagTextures_GetBakedMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTotemFlagTextures.GetBakedUIMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UMarinerTotemFlagTextures::GetBakedUIMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTotemFlagTextures", "GetBakedUIMaterial");

	Params::MarinerTotemFlagTextures_GetBakedUIMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTotemRenderUtilities.GenerateTotemFlagPreviewFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UMarinerTotemRenderUtilities::GenerateTotemFlagPreviewFromCollection(class UObject* WorldContextObject, const struct FMarinerRocketTotemCollection& TotemCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "GenerateTotemFlagPreviewFromCollection");

	Params::MarinerTotemRenderUtilities_GenerateTotemFlagPreviewFromCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TotemCollection = std::move(TotemCollection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTotemRenderUtilities.RenderTotemFlagFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMarinerTotemFlagTextures*        ExistingTextures                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerTotemFlagTextures*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerTotemFlagTextures* UMarinerTotemRenderUtilities::RenderTotemFlagFromCollection(class UObject* WorldContextObject, const struct FMarinerRocketTotemCollection& TotemCollection, class UMarinerTotemFlagTextures* ExistingTextures)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "RenderTotemFlagFromCollection");

	Params::MarinerTotemRenderUtilities_RenderTotemFlagFromCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TotemCollection = std::move(TotemCollection);
	Parms.ExistingTextures = ExistingTextures;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTotemRenderUtilities.SetBorderRenderParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemBorderDataAsset*DataAsset                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetBorderRenderParameters(const class UMarinerRocketTotemBorderDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetBorderRenderParameters");

	Params::MarinerTotemRenderUtilities_SetBorderRenderParameters Parms{};

	Parms.DataAsset = DataAsset;
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemRenderUtilities.SetBorderRenderParametersFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetBorderRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetBorderRenderParametersFromCollection");

	Params::MarinerTotemRenderUtilities_SetBorderRenderParametersFromCollection Parms{};

	Parms.TotemCollection = std::move(TotemCollection);
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemRenderUtilities.SetIconRenderParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemSymbolsDataAsset*DataAsset                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetIconRenderParameters(const class UMarinerRocketTotemSymbolsDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetIconRenderParameters");

	Params::MarinerTotemRenderUtilities_SetIconRenderParameters Parms{};

	Parms.DataAsset = DataAsset;
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemRenderUtilities.SetIconRenderParametersFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetIconRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetIconRenderParametersFromCollection");

	Params::MarinerTotemRenderUtilities_SetIconRenderParametersFromCollection Parms{};

	Parms.TotemCollection = std::move(TotemCollection);
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemRenderUtilities.SetPatternRenderParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMarinerRocketTotemPatternDataAsset*DataAsset                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetPatternRenderParameters(const class UMarinerRocketTotemPatternDataAsset* DataAsset, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetPatternRenderParameters");

	Params::MarinerTotemRenderUtilities_SetPatternRenderParameters Parms{};

	Parms.DataAsset = DataAsset;
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTotemRenderUtilities.SetPatternRenderParametersFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerRocketTotemCollection    TotemCollection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Renderer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTotemRenderUtilities::SetPatternRenderParametersFromCollection(const struct FMarinerRocketTotemCollection& TotemCollection, class UMaterialInstanceDynamic* Renderer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerTotemRenderUtilities", "SetPatternRenderParametersFromCollection");

	Params::MarinerTotemRenderUtilities_SetPatternRenderParametersFromCollection Parms{};

	Parms.TotemCollection = std::move(TotemCollection);
	Parms.Renderer = Renderer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrailComponent.SetTrailColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           NewTrailColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTrailComponent::SetTrailColor(const struct FColor& NewTrailColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrailComponent", "SetTrailColor");

	Params::MarinerTrailComponent_SetTrailColor Parms{};

	Parms.NewTrailColor = std::move(NewTrailColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrailComponent.SetTrailDisplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewTrailDisplay                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTrailComponent::SetTrailDisplay(bool bNewTrailDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrailComponent", "SetTrailDisplay");

	Params::MarinerTrailComponent_SetTrailDisplay Parms{};

	Parms.bNewTrailDisplay = bNewTrailDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrainColliderSkeletalActor.OnTrainHitDetected
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMarinerTrainColliderSkeletalActor::OnTrainHitDetected(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrainColliderSkeletalActor", "OnTrainHitDetected");

	Params::MarinerTrainColliderSkeletalActor_OnTrainHitDetected Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsGameState.BeginTravel
// (Final, Native, Public)

void AMarinerTrialsGameState::BeginTravel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsGameState", "BeginTravel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsGameState.RetryClicked
// (Final, Native, Public, BlueprintCallable)

void AMarinerTrialsGameState::RetryClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsGameState", "RetryClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsGameState.SetTimerPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPauseTimer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMarinerTrialsGameState::SetTimerPaused(bool bPauseTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsGameState", "SetTimerPaused");

	Params::MarinerTrialsGameState_SetTimerPaused Parms{};

	Parms.bPauseTimer = bPauseTimer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsMenu.OnModeSelected
// (Final, Native, Protected)
// Parameters:
// class UMarinerLayeredButton*            Instance                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTrialsMenu::OnModeSelected(class UMarinerLayeredButton* Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsMenu", "OnModeSelected");

	Params::MarinerTrialsMenu_OnModeSelected Parms{};

	Parms.Instance = Instance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTrialsPostGameSequence.BeginRestartTravel
// (Final, Native, Private)

void UMarinerTrialsPostGameSequence::BeginRestartTravel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTrialsPostGameSequence", "BeginRestartTravel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTTSDialogConsole.OnVKeyboardTextCommited
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTTSDialogConsole::OnVKeyboardTextCommited(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTTSDialogConsole", "OnVKeyboardTextCommited");

	Params::MarinerTTSDialogConsole_OnVKeyboardTextCommited Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTTSDialogPC.OnWidgetTextCommited
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerTTSDialogPC::OnWidgetTextCommited(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTTSDialogPC", "OnWidgetTextCommited");

	Params::MarinerTTSDialogPC_OnWidgetTextCommited Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTTSDialogPC.SendText
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerTTSDialogPC::SendText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTTSDialogPC", "SendText");

	Params::MarinerTTSDialogPC_SendText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTugOfWarCaptureVolume.OnRep_CaptureAmount
// (Final, Native, Protected)

void UMarinerTugOfWarCaptureVolume::OnRep_CaptureAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTugOfWarCaptureVolume", "OnRep_CaptureAmount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerTugOfWarCaptureVolume.GetCapturePercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerTugOfWarCaptureVolume::GetCapturePercentage(int32 TeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTugOfWarCaptureVolume", "GetCapturePercentage");

	Params::MarinerTugOfWarCaptureVolume_GetCapturePercentage Parms{};

	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTugOfWarCaptureVolume.GetMostValuableOverlappingPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* UMarinerTugOfWarCaptureVolume::GetMostValuableOverlappingPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTugOfWarCaptureVolume", "GetMostValuableOverlappingPlayer");

	Params::MarinerTugOfWarCaptureVolume_GetMostValuableOverlappingPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerTugOfWarCaptureVolume.IsCaptured
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerTugOfWarCaptureVolume::IsCaptured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerTugOfWarCaptureVolume", "IsCaptured");

	Params::MarinerTugOfWarCaptureVolume_IsCaptured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.ChangePlatformUser
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIBlueprintLibrary::ChangePlatformUser(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "ChangePlatformUser");

	Params::MarinerUIBlueprintLibrary_ChangePlatformUser Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIBlueprintLibrary.Conv_GuidToStringLower
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGuid                            InGuid                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerUIBlueprintLibrary::Conv_GuidToStringLower(const struct FGuid& InGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "Conv_GuidToStringLower");

	Params::MarinerUIBlueprintLibrary_Conv_GuidToStringLower Parms{};

	Parms.InGuid = std::move(InGuid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.GetBindingTypeDataFromInputAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMarinerInputActions                    InAction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMarinerBindingTypeData          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMarinerBindingTypeData UMarinerUIBlueprintLibrary::GetBindingTypeDataFromInputAction(EMarinerInputActions InAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "GetBindingTypeDataFromInputAction");

	Params::MarinerUIBlueprintLibrary_GetBindingTypeDataFromInputAction Parms{};

	Parms.InAction = InAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.GetGamepadKeyFromInputActionBinding
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMarinerInputActions                    InAction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UMarinerUIBlueprintLibrary::GetGamepadKeyFromInputActionBinding(EMarinerInputActions InAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "GetGamepadKeyFromInputActionBinding");

	Params::MarinerUIBlueprintLibrary_GetGamepadKeyFromInputActionBinding Parms{};

	Parms.InAction = InAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.GetInputActionFromBindingTypeData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMarinerBindingTypeData          InBindingTypeData                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerUIBlueprintLibrary::GetInputActionFromBindingTypeData(const struct FMarinerBindingTypeData& InBindingTypeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "GetInputActionFromBindingTypeData");

	Params::MarinerUIBlueprintLibrary_GetInputActionFromBindingTypeData Parms{};

	Parms.InBindingTypeData = std::move(InBindingTypeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.GetInputActionFromInputName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InName                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMarinerInputActions UMarinerUIBlueprintLibrary::GetInputActionFromInputName(const class FName& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "GetInputActionFromInputName");

	Params::MarinerUIBlueprintLibrary_GetInputActionFromInputName Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.GetInputNameFromInputAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMarinerInputActions                    InAction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UMarinerUIBlueprintLibrary::GetInputNameFromInputAction(EMarinerInputActions InAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "GetInputNameFromInputAction");

	Params::MarinerUIBlueprintLibrary_GetInputNameFromInputAction Parms{};

	Parms.InAction = InAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.MangoIdToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMangoId                         MangoId                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerUIBlueprintLibrary::MangoIdToString(const struct FMangoId& MangoId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "MangoIdToString");

	Params::MarinerUIBlueprintLibrary_MangoIdToString Parms{};

	Parms.MangoId = std::move(MangoId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIBlueprintLibrary.RemapController
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMarinerControllerConfiguration  Configuration                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMarinerUIBlueprintLibrary::RemapController(const struct FMarinerControllerConfiguration& Configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "RemapController");

	Params::MarinerUIBlueprintLibrary_RemapController Parms{};

	Parms.Configuration = std::move(Configuration);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIBlueprintLibrary.RemapControllerCompletly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Configuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIBlueprintLibrary::RemapControllerCompletly(class UDataTable* Configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "RemapControllerCompletly");

	Params::MarinerUIBlueprintLibrary_RemapControllerCompletly Parms{};

	Parms.Configuration = Configuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIBlueprintLibrary.SaveKeyMappings
// (Final, Native, Static, Public, BlueprintCallable)

void UMarinerUIBlueprintLibrary::SaveKeyMappings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "SaveKeyMappings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIBlueprintLibrary.SwapControllerAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMarinerInputActions                    FirstAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMarinerInputActions                    SecondAction                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIBlueprintLibrary::SwapControllerAction(EMarinerInputActions FirstAction, EMarinerInputActions SecondAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIBlueprintLibrary", "SwapControllerAction");

	Params::MarinerUIBlueprintLibrary_SwapControllerAction Parms{};

	Parms.FirstAction = FirstAction;
	Parms.SecondAction = SecondAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIArtifactsForTypeData.LoadFromCMSFailed
// (Final, Native, Public)

void UMarinerUIArtifactsForTypeData::LoadFromCMSFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIArtifactsForTypeData", "LoadFromCMSFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIArtifactsForTypeData.LoadFromCMSFinished
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<class UItemLoadResponse*>        LoadedDataResponse                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMarinerGameInstance>MarinerGameInstance                                    (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIArtifactsForTypeData::LoadFromCMSFinished(const TArray<class UItemLoadResponse*>& LoadedDataResponse, const TSoftObjectPtr<class UMarinerGameInstance> MarinerGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUIArtifactsForTypeData", "LoadFromCMSFinished");

	Params::MarinerUIArtifactsForTypeData_LoadFromCMSFinished Parms{};

	Parms.LoadedDataResponse = std::move(LoadedDataResponse);
	Parms.MarinerGameInstance = MarinerGameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIHelpers.CopyToClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           StringToCopy                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUIHelpers::CopyToClipboard(const class FString& StringToCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "CopyToClipboard");

	Params::MarinerUIHelpers_CopyToClipboard Parms{};

	Parms.StringToCopy = std::move(StringToCopy);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUIHelpers.CreateWidgetWithOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          UserWidgetClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          OwningWidget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UMarinerUIHelpers::CreateWidgetWithOwner(TSubclassOf<class UUserWidget> UserWidgetClass, class UWidget* OwningWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "CreateWidgetWithOwner");

	Params::MarinerUIHelpers_CreateWidgetWithOwner Parms{};

	Parms.UserWidgetClass = UserWidgetClass;
	Parms.OwningWidget = OwningWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.EnterInGameStore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEntered                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::EnterInGameStore(const class UObject* WorldContextObject, bool bEntered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "EnterInGameStore");

	Params::MarinerUIHelpers_EnterInGameStore Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bEntered = bEntered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.Equal_ItemLoadResponse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UItemLoadResponse*                A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemLoadResponse*                B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::Equal_ItemLoadResponse(const class UItemLoadResponse* A, const class UItemLoadResponse* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "Equal_ItemLoadResponse");

	Params::MarinerUIHelpers_Equal_ItemLoadResponse Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.Equal_MangoProgressionCharacterItemUnlock
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMangoProgressionCharacterItemUnlockA                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoProgressionCharacterItemUnlockB                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::Equal_MangoProgressionCharacterItemUnlock(const struct FMangoProgressionCharacterItemUnlock& A, const struct FMangoProgressionCharacterItemUnlock& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "Equal_MangoProgressionCharacterItemUnlock");

	Params::MarinerUIHelpers_Equal_MangoProgressionCharacterItemUnlock Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.FormatEventTimeRemaining
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   TimeInSeconds                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerUIHelpers::FormatEventTimeRemaining(float TimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "FormatEventTimeRemaining");

	Params::MarinerUIHelpers_FormatEventTimeRemaining Parms{};

	Parms.TimeInSeconds = TimeInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.FormatTimeRemaining
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   TimeInSeconds                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UMarinerUIHelpers::FormatTimeRemaining(float TimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "FormatTimeRemaining");

	Params::MarinerUIHelpers_FormatTimeRemaining Parms{};

	Parms.TimeInSeconds = TimeInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetClosestResolution
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FIntPoint>                ResolutionList                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FIntPoint                        Resolution                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMarinerUIHelpers::GetClosestResolution(const TArray<struct FIntPoint>& ResolutionList, const struct FIntPoint& Resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetClosestResolution");

	Params::MarinerUIHelpers_GetClosestResolution Parms{};

	Parms.ResolutionList = std::move(ResolutionList);
	Parms.Resolution = std::move(Resolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetMatchmakingInteractionState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMatchmakingInteractionState            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMatchmakingInteractionState UMarinerUIHelpers::GetMatchmakingInteractionState(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetMatchmakingInteractionState");

	Params::MarinerUIHelpers_GetMatchmakingInteractionState Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetPlaylistInteractionState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMangoPlaylist                   InPlaylist                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EMatchmakingInteractionState            OutMatchmakingState                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlaylistInteractionState               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlaylistInteractionState UMarinerUIHelpers::GetPlaylistInteractionState(const class UObject* WorldContextObject, const struct FMangoPlaylist& InPlaylist, EMatchmakingInteractionState* OutMatchmakingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetPlaylistInteractionState");

	Params::MarinerUIHelpers_GetPlaylistInteractionState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InPlaylist = std::move(InPlaylist);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMatchmakingState != nullptr)
		*OutMatchmakingState = Parms.OutMatchmakingState;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetTruncatedUserName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMarinerUIHelpers::GetTruncatedUserName(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetTruncatedUserName");

	Params::MarinerUIHelpers_GetTruncatedUserName Parms{};

	Parms.UserName = std::move(UserName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetWidgetAnimationLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 WidgetAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMarinerUIHelpers::GetWidgetAnimationLength(class UWidgetAnimation* WidgetAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetWidgetAnimationLength");

	Params::MarinerUIHelpers_GetWidgetAnimationLength Parms{};

	Parms.WidgetAnimation = WidgetAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.GetWidgetOwningLayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerMenuStackLayer*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerMenuStackLayer* UMarinerUIHelpers::GetWidgetOwningLayer(const class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "GetWidgetOwningLayer");

	Params::MarinerUIHelpers_GetWidgetOwningLayer Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.IsEUBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::IsEUBuild(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "IsEUBuild");

	Params::MarinerUIHelpers_IsEUBuild Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.IsPracticeModeAllowed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::IsPracticeModeAllowed(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "IsPracticeModeAllowed");

	Params::MarinerUIHelpers_IsPracticeModeAllowed Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.NotEqual_ItemLoadResponse
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UItemLoadResponse*                A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemLoadResponse*                B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::NotEqual_ItemLoadResponse(const class UItemLoadResponse* A, const class UItemLoadResponse* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "NotEqual_ItemLoadResponse");

	Params::MarinerUIHelpers_NotEqual_ItemLoadResponse Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.NotEqual_MangoProgressionCharacterItemUnlock
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMangoProgressionCharacterItemUnlockA                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FMangoProgressionCharacterItemUnlockB                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::NotEqual_MangoProgressionCharacterItemUnlock(const struct FMangoProgressionCharacterItemUnlock& A, const struct FMangoProgressionCharacterItemUnlock& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "NotEqual_MangoProgressionCharacterItemUnlock");

	Params::MarinerUIHelpers_NotEqual_MangoProgressionCharacterItemUnlock Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUIHelpers.SendTextToSpeechMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TextToSend                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMarinerUIHelpers::SendTextToSpeechMessage(const class UObject* WorldContextObject, const class FString& TextToSend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MarinerUIHelpers", "SendTextToSpeechMessage");

	Params::MarinerUIHelpers_SendTextToSpeechMessage Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TextToSend = std::move(TextToSend);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerUniformGridPanel.ClearHighlighting
// (Final, Native, Public, BlueprintCallable)

void UMarinerUniformGridPanel::ClearHighlighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUniformGridPanel", "ClearHighlighting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUniformGridPanel.SetHighlightedSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Column                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Row                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerUniformGridPanel::SetHighlightedSlot(int32 Column, int32 Row, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUniformGridPanel", "SetHighlightedSlot");

	Params::MarinerUniformGridPanel_SetHighlightedSlot Parms{};

	Parms.Column = Column;
	Parms.Row = Row;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerUniformGridPanel.GetHighlightedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMarinerUniformGridPanel::GetHighlightedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerUniformGridPanel", "GetHighlightedWidget");

	Params::MarinerUniformGridPanel_GetHighlightedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerVerticalBox.ClearHighlighting
// (Final, Native, Public, BlueprintCallable)

void UMarinerVerticalBox::ClearHighlighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVerticalBox", "ClearHighlighting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVerticalBox.HighlightWidgetViaIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVerticalBox::HighlightWidgetViaIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVerticalBox", "HighlightWidgetViaIndex");

	Params::MarinerVerticalBox_HighlightWidgetViaIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVerticalBox.GetHighlightedWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UMarinerVerticalBox::GetHighlightedWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVerticalBox", "GetHighlightedWidget");

	Params::MarinerVerticalBox_GetHighlightedWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerVoiceChatPlayerWidget.OnPlayerTalking
// (Final, Native, Public)
// Parameters:
// class FString                           ChannelName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsTalking                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceChatPlayerWidget::OnPlayerTalking(const class FString& ChannelName, const class FString& PlayerName, bool bIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceChatPlayerWidget", "OnPlayerTalking");

	Params::MarinerVoiceChatPlayerWidget_OnPlayerTalking Parms{};

	Parms.ChannelName = std::move(ChannelName);
	Parms.PlayerName = std::move(PlayerName);
	Parms.bIsTalking = bIsTalking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceChatPlayerWidget.OnUserSettingsChanged
// (Final, Native, Public)

void UMarinerVoiceChatPlayerWidget::OnUserSettingsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceChatPlayerWidget", "OnUserSettingsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceOverManager.OnAudioEvent
// (Final, Native, Protected)
// Parameters:
// EAkCallbackType                         In_eType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  In_pCallbackInfo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceOverManager::OnAudioEvent(const EAkCallbackType In_eType, class UAkCallbackInfo* In_pCallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceOverManager", "OnAudioEvent");

	Params::MarinerVoiceOverManager_OnAudioEvent Parms{};

	Parms.In_eType = In_eType;
	Parms.In_pCallbackInfo = In_pCallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceOverManager.PlayVoiceOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceOverManager::PlayVoiceOver(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceOverManager", "PlayVoiceOver");

	Params::MarinerVoiceOverManager_PlayVoiceOver Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceOverManager.PlayVoiceOverIfQueueIsEmpty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceOverManager::PlayVoiceOverIfQueueIsEmpty(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceOverManager", "PlayVoiceOverIfQueueIsEmpty");

	Params::MarinerVoiceOverManager_PlayVoiceOverIfQueueIsEmpty Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerVoiceOverManager.QueueVoiceOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerVoiceOverManager::QueueVoiceOver(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerVoiceOverManager", "QueueVoiceOver");

	Params::MarinerVoiceOverManager_QueueVoiceOver Parms{};

	Parms.AkEvent = AkEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWeaponAnimInstance.InitializeWeaponAnimBP
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWeaponAnimInstance::InitializeWeaponAnimBP(class AMarinerCharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWeaponAnimInstance", "InitializeWeaponAnimBP");

	Params::MarinerWeaponAnimInstance_InitializeWeaponAnimBP Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWidgetPool.CreatePool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWidgetPoolData                  PoolData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UMarinerWidgetPool::CreatePool(const struct FWidgetPoolData& PoolData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWidgetPool", "CreatePool");

	Params::MarinerWidgetPool_CreatePool Parms{};

	Parms.PoolData = std::move(PoolData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWidgetPool.DestroyAllPools
// (Final, Native, Public, BlueprintCallable)

void UMarinerWidgetPool::DestroyAllPools()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWidgetPool", "DestroyAllPools");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWidgetPool.DestroyPool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWidgetPool::DestroyPool(TSubclassOf<class UUserWidget> WidgetType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWidgetPool", "DestroyPool");

	Params::MarinerWidgetPool_DestroyPool Parms{};

	Parms.WidgetType = WidgetType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWidgetPool.GetWidgetFromPool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          NewOwner                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UMarinerWidgetPool::GetWidgetFromPool(TSubclassOf<class UUserWidget> WidgetType, class UWidget* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWidgetPool", "GetWidgetFromPool");

	Params::MarinerWidgetPool_GetWidgetFromPool Parms{};

	Parms.WidgetType = WidgetType;
	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWrapBox.AddChildWrapBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMarinerWrapBoxSlot*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMarinerWrapBoxSlot* UMarinerWrapBox::AddChildWrapBox(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBox", "AddChildWrapBox");

	Params::MarinerWrapBox_AddChildWrapBox Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Mariner.MarinerWrapBox.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBox::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBox", "SetHorizontalAlignment");

	Params::MarinerWrapBox_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Mariner.MarinerWrapBox.SetInnerSlotPadding
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMarinerWrapBox::SetInnerSlotPadding(const struct FVector2D& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MarinerWrapBox", "SetInnerSlotPadding");

	Params::MarinerWrapBox_SetInnerSlotPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

