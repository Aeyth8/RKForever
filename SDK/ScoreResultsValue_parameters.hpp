#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScoreResultsValue

#include "Basic.hpp"

#include "MangoClient_structs.hpp"
#include "GameModeEnums_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ScoreResultsValue.ScoreResultsValue_C.PopulateFromData
// 0x0020 (0x0020 - 0x0000)
struct ScoreResultsValue_C_PopulateFromData final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerTeam;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerGameOutcome                           TeamOutcome;                                       // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(ScoreResultsValue_C_PopulateFromData) == 0x000008, "Wrong alignment on ScoreResultsValue_C_PopulateFromData");
static_assert(sizeof(ScoreResultsValue_C_PopulateFromData) == 0x000020, "Wrong size on ScoreResultsValue_C_PopulateFromData");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, Score) == 0x000000, "Member 'ScoreResultsValue_C_PopulateFromData::Score' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, IsPlayerTeam) == 0x000004, "Member 'ScoreResultsValue_C_PopulateFromData::IsPlayerTeam' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, TeamOutcome) == 0x000005, "Member 'ScoreResultsValue_C_PopulateFromData::TeamOutcome' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'ScoreResultsValue_C_PopulateFromData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000007, "Member 'ScoreResultsValue_C_PopulateFromData::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromData, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'ScoreResultsValue_C_PopulateFromData::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function ScoreResultsValue.ScoreResultsValue_C.PopulateFromMatchEnd
// 0x0148 (0x0148 - 0x0000)
struct ScoreResultsValue_C_PopulateFromMatchEnd final
{
public:
	struct FMatchEnd                              MatchEnd;                                          // 0x0000(0x0068)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         TeamIndex_0;                                       // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerTeam;                                      // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerGameOutcome                           TeamOutcome;                                       // 0x006D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMangoCMSManager*                       CallFunc_Get_ReturnValue;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMatchEndTeam                          CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TMap<struct FGuid, struct FMangoMode>         CallFunc_GetModes_ReturnValue;                     // 0x0098(0x0050)(ConstParm, ZeroConstructor)
	struct FMangoMode                             CallFunc_Map_Find_Value;                           // 0x00E8(0x0058)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_StriStri_ReturnValue;            // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ScoreResultsValue_C_PopulateFromMatchEnd) == 0x000008, "Wrong alignment on ScoreResultsValue_C_PopulateFromMatchEnd");
static_assert(sizeof(ScoreResultsValue_C_PopulateFromMatchEnd) == 0x000148, "Wrong size on ScoreResultsValue_C_PopulateFromMatchEnd");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, MatchEnd) == 0x000000, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::MatchEnd' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, TeamIndex_0) == 0x000068, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::TeamIndex_0' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, IsPlayerTeam) == 0x00006C, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::IsPlayerTeam' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, TeamOutcome) == 0x00006D, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::TeamOutcome' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, Temp_int_Array_Index_Variable) == 0x000080, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Get_ReturnValue) == 0x000088, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Array_Get_Item) == 0x000090, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_GetModes_ReturnValue) == 0x000098, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_GetModes_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Map_Find_Value) == 0x0000E8, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_Map_Find_ReturnValue) == 0x000140, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000141, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_PopulateFromMatchEnd, CallFunc_NotEqual_StriStri_ReturnValue) == 0x000142, "Member 'ScoreResultsValue_C_PopulateFromMatchEnd::CallFunc_NotEqual_StriStri_ReturnValue' has a wrong offset!");

// Function ScoreResultsValue.ScoreResultsValue_C.SetModeImage
// 0x0098 (0x0098 - 0x0000)
struct ScoreResultsValue_C_SetModeImage final
{
public:
	bool                                          bWin;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPlayerTeam;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewLocalVar_0;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerMenuManager*                    CallFunc_GetMenuManager_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerMenuSequence*                   CallFunc_GetActiveSequence_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerPostGameSequence*               K2Node_DynamicCast_AsMariner_Post_Game_Sequence;   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchEnd                              CallFunc_GetMatchEndData_ReturnValue;              // 0x0028(0x0068)(ConstParm)
	EGameModeEnums                                CallFunc_GetGameModeViaMatchEnd_GameMode;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ScoreResultsValue_C_SetModeImage) == 0x000008, "Wrong alignment on ScoreResultsValue_C_SetModeImage");
static_assert(sizeof(ScoreResultsValue_C_SetModeImage) == 0x000098, "Wrong size on ScoreResultsValue_C_SetModeImage");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, bWin) == 0x000000, "Member 'ScoreResultsValue_C_SetModeImage::bWin' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, bPlayerTeam) == 0x000001, "Member 'ScoreResultsValue_C_SetModeImage::bPlayerTeam' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, NewLocalVar_0) == 0x000002, "Member 'ScoreResultsValue_C_SetModeImage::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, CallFunc_GetMenuManager_ReturnValue) == 0x000008, "Member 'ScoreResultsValue_C_SetModeImage::CallFunc_GetMenuManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, CallFunc_GetActiveSequence_ReturnValue) == 0x000010, "Member 'ScoreResultsValue_C_SetModeImage::CallFunc_GetActiveSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, K2Node_DynamicCast_AsMariner_Post_Game_Sequence) == 0x000018, "Member 'ScoreResultsValue_C_SetModeImage::K2Node_DynamicCast_AsMariner_Post_Game_Sequence' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ScoreResultsValue_C_SetModeImage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, CallFunc_GetMatchEndData_ReturnValue) == 0x000028, "Member 'ScoreResultsValue_C_SetModeImage::CallFunc_GetMatchEndData_ReturnValue' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, CallFunc_GetGameModeViaMatchEnd_GameMode) == 0x000090, "Member 'ScoreResultsValue_C_SetModeImage::CallFunc_GetGameModeViaMatchEnd_GameMode' has a wrong offset!");
static_assert(offsetof(ScoreResultsValue_C_SetModeImage, K2Node_SwitchEnum_CmpSuccess) == 0x000091, "Member 'ScoreResultsValue_C_SetModeImage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

