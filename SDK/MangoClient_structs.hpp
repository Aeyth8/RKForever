#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MangoClient

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MangoClient.EMapRecommendedNumberOfPlayers
// NumValues: 0x0003
enum class EMapRecommendedNumberOfPlayers : uint8
{
	TwoVsTwo                                 = 0,
	ThreeVsThree                             = 1,
	EMapRecommendedNumberOfPlayers_MAX       = 2,
};

// Enum MangoClient.EMangoBlastPassXPBonusType
// NumValues: 0x0004
enum class EMangoBlastPassXPBonusType : uint8
{
	Personal                                 = 0,
	Party                                    = 1,
	Invalid                                  = 2,
	EMangoBlastPassXPBonusType_MAX           = 3,
};

// Enum MangoClient.EMangoNativeOfferType
// NumValues: 0x0005
enum class EMangoNativeOfferType : uint8
{
	Hidden                                   = 0,
	Currency                                 = 1,
	Bundle                                   = 2,
	BlastPass                                = 3,
	EMangoNativeOfferType_MAX                = 4,
};

// Enum MangoClient.EMangoOfferType
// NumValues: 0x0005
enum class EMangoOfferType : uint8
{
	Hidden                                   = 0,
	Item                                     = 1,
	Character                                = 2,
	BlastPass                                = 3,
	EMangoOfferType_MAX                      = 4,
};

// Enum MangoClient.EMangoItemType
// NumValues: 0x0016
enum class EMangoItemType : uint8
{
	Invalid                                  = 0,
	Artifact                                 = 1,
	Character                                = 2,
	MegaBlastTrail                           = 3,
	ReturnTrail                              = 4,
	Skin                                     = 5,
	TotemBorder                              = 6,
	TotemPattern                             = 7,
	TotemShape                               = 8,
	TotemStand                               = 9,
	TotemSymbols                             = 10,
	TotemVFX                                 = 11,
	CoreArtifact                             = 12,
	SecondaryArtifact                        = 13,
	UtilityArtifact                          = 14,
	CharacterArtifact                        = 15,
	PreGameEmote                             = 16,
	ChatEmote                                = 17,
	VictoryPose                              = 18,
	TotemCompanion                           = 19,
	Last                                     = 20,
	EMangoItemType_MAX                       = 21,
};

// Enum MangoClient.EMarinerGameOutcome
// NumValues: 0x0006
enum class EMarinerGameOutcome : uint8
{
	Unknown                                  = 0,
	Win                                      = 1,
	Loss                                     = 2,
	Draw                                     = 3,
	Quit                                     = 4,
	EMarinerGameOutcome_MAX                  = 5,
};

// Enum MangoClient.EMangoQuestSlot
// NumValues: 0x0007
enum class EMangoQuestSlot : uint8
{
	Daily1                                   = 0,
	Daily2                                   = 1,
	Login                                    = 2,
	Weekly                                   = 3,
	Weekly2                                  = 4,
	Daily3                                   = 5,
	EMangoQuestSlot_MAX                      = 6,
};

// Enum MangoClient.EMangoQuestState
// NumValues: 0x0005
enum class EMangoQuestState : uint8
{
	Active                                   = 0,
	Complete                                 = 1,
	Dismissed                                = 2,
	Claimed                                  = 3,
	EMangoQuestState_MAX                     = 4,
};

// Enum MangoClient.EMangoStatType
// NumValues: 0x0004
enum class EMangoStatType : uint8
{
	Max                                      = 0,
	Min                                      = 1,
	Mean                                     = 2,
	Sum                                      = 3,
};

// Enum MangoClient.EMangoStatGroupType
// NumValues: 0x0003
enum class EMangoStatGroupType : uint8
{
	Lifetime                                 = 0,
	Playlist                                 = 1,
	EMangoStatGroupType_MAX                  = 2,
};

// ScriptStruct MangoClient.MatchEndTeam
// 0x0008 (0x0008 - 0x0000)
struct FMatchEndTeam final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchEndTeam) == 0x000004, "Wrong alignment on FMatchEndTeam");
static_assert(sizeof(FMatchEndTeam) == 0x000008, "Wrong size on FMatchEndTeam");
static_assert(offsetof(FMatchEndTeam, TeamIndex) == 0x000000, "Member 'FMatchEndTeam::TeamIndex' has a wrong offset!");
static_assert(offsetof(FMatchEndTeam, Score) == 0x000004, "Member 'FMatchEndTeam::Score' has a wrong offset!");

// ScriptStruct MangoClient.MangoCharacterRestriction
// 0x0020 (0x0020 - 0x0000)
struct FMangoCharacterRestriction final
{
public:
	class FString                                 Item_name;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lookup_field;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoCharacterRestriction) == 0x000008, "Wrong alignment on FMangoCharacterRestriction");
static_assert(sizeof(FMangoCharacterRestriction) == 0x000020, "Wrong size on FMangoCharacterRestriction");
static_assert(offsetof(FMangoCharacterRestriction, Item_name) == 0x000000, "Member 'FMangoCharacterRestriction::Item_name' has a wrong offset!");
static_assert(offsetof(FMangoCharacterRestriction, Lookup_field) == 0x000010, "Member 'FMangoCharacterRestriction::Lookup_field' has a wrong offset!");

// ScriptStruct MangoClient.MangoItem
// 0x0050 (0x0050 - 0x0000)
struct FMangoItem final
{
public:
	class FString                                 Item_name;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lookup_field;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Engine_asset_id;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                Item_type;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Parts_value;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Equip_on_acquire;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoCharacterRestriction>     Character_restriction;                             // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoItem) == 0x000008, "Wrong alignment on FMangoItem");
static_assert(sizeof(FMangoItem) == 0x000050, "Wrong size on FMangoItem");
static_assert(offsetof(FMangoItem, Item_name) == 0x000000, "Member 'FMangoItem::Item_name' has a wrong offset!");
static_assert(offsetof(FMangoItem, Lookup_field) == 0x000010, "Member 'FMangoItem::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoItem, Engine_asset_id) == 0x000020, "Member 'FMangoItem::Engine_asset_id' has a wrong offset!");
static_assert(offsetof(FMangoItem, Item_type) == 0x000030, "Member 'FMangoItem::Item_type' has a wrong offset!");
static_assert(offsetof(FMangoItem, Parts_value) == 0x000034, "Member 'FMangoItem::Parts_value' has a wrong offset!");
static_assert(offsetof(FMangoItem, Equip_on_acquire) == 0x000038, "Member 'FMangoItem::Equip_on_acquire' has a wrong offset!");
static_assert(offsetof(FMangoItem, Character_restriction) == 0x000040, "Member 'FMangoItem::Character_restriction' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemTreasureBoxItemContainer
// 0x0020 (0x0020 - 0x0000)
struct FMangoItemTreasureBoxItemContainer final
{
public:
	class FString                                 Container_name;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItem>                     Item_list;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoItemTreasureBoxItemContainer) == 0x000008, "Wrong alignment on FMangoItemTreasureBoxItemContainer");
static_assert(sizeof(FMangoItemTreasureBoxItemContainer) == 0x000020, "Wrong size on FMangoItemTreasureBoxItemContainer");
static_assert(offsetof(FMangoItemTreasureBoxItemContainer, Container_name) == 0x000000, "Member 'FMangoItemTreasureBoxItemContainer::Container_name' has a wrong offset!");
static_assert(offsetof(FMangoItemTreasureBoxItemContainer, Item_list) == 0x000010, "Member 'FMangoItemTreasureBoxItemContainer::Item_list' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemTreasureBoxItemContainers
// 0x0028 (0x0028 - 0x0000)
struct FMangoItemTreasureBoxItemContainers final
{
public:
	int32                                         Container_weight;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItemTreasureBoxItemContainer     Item_container;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoItemTreasureBoxItemContainers) == 0x000008, "Wrong alignment on FMangoItemTreasureBoxItemContainers");
static_assert(sizeof(FMangoItemTreasureBoxItemContainers) == 0x000028, "Wrong size on FMangoItemTreasureBoxItemContainers");
static_assert(offsetof(FMangoItemTreasureBoxItemContainers, Container_weight) == 0x000000, "Member 'FMangoItemTreasureBoxItemContainers::Container_weight' has a wrong offset!");
static_assert(offsetof(FMangoItemTreasureBoxItemContainers, Item_container) == 0x000008, "Member 'FMangoItemTreasureBoxItemContainers::Item_container' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuestFilter
// 0x0028 (0x0028 - 0x0000)
struct FMangoQuestFilter final
{
public:
	class FName                                   Lookup_field;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Values;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuestFilter) == 0x000008, "Wrong alignment on FMangoQuestFilter");
static_assert(sizeof(FMangoQuestFilter) == 0x000028, "Wrong size on FMangoQuestFilter");
static_assert(offsetof(FMangoQuestFilter, Lookup_field) == 0x000000, "Member 'FMangoQuestFilter::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoQuestFilter, Key) == 0x000008, "Member 'FMangoQuestFilter::Key' has a wrong offset!");
static_assert(offsetof(FMangoQuestFilter, Values) == 0x000018, "Member 'FMangoQuestFilter::Values' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuest
// 0x0068 (0x0068 - 0x0000)
struct FMangoQuest final
{
public:
	class FName                                   Lookup_field;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duration;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Metric;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blastpass_xp_reward;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoQuestFilter>              Filters;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuest) == 0x000008, "Wrong alignment on FMangoQuest");
static_assert(sizeof(FMangoQuest) == 0x000068, "Wrong size on FMangoQuest");
static_assert(offsetof(FMangoQuest, Lookup_field) == 0x000000, "Member 'FMangoQuest::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Name) == 0x000008, "Member 'FMangoQuest::Name' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Description) == 0x000018, "Member 'FMangoQuest::Description' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Duration) == 0x000028, "Member 'FMangoQuest::Duration' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Goal) == 0x000038, "Member 'FMangoQuest::Goal' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Metric) == 0x000040, "Member 'FMangoQuest::Metric' has a wrong offset!");
static_assert(offsetof(FMangoQuest, blastpass_xp_reward) == 0x000050, "Member 'FMangoQuest::blastpass_xp_reward' has a wrong offset!");
static_assert(offsetof(FMangoQuest, Filters) == 0x000058, "Member 'FMangoQuest::Filters' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemTreasureBoxItemSlot
// 0x0020 (0x0020 - 0x0000)
struct FMangoItemTreasureBoxItemSlot final
{
public:
	class FString                                 Table_name;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemTreasureBoxItemContainers> Item_containers;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoItemTreasureBoxItemSlot) == 0x000008, "Wrong alignment on FMangoItemTreasureBoxItemSlot");
static_assert(sizeof(FMangoItemTreasureBoxItemSlot) == 0x000020, "Wrong size on FMangoItemTreasureBoxItemSlot");
static_assert(offsetof(FMangoItemTreasureBoxItemSlot, Table_name) == 0x000000, "Member 'FMangoItemTreasureBoxItemSlot::Table_name' has a wrong offset!");
static_assert(offsetof(FMangoItemTreasureBoxItemSlot, Item_containers) == 0x000010, "Member 'FMangoItemTreasureBoxItemSlot::Item_containers' has a wrong offset!");

// ScriptStruct MangoClient.MangoTreasureBox
// 0x0040 (0x0040 - 0x0000)
struct FMangoTreasureBox final
{
public:
	class FString                                 box_name;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lookup_field;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Display_engine_asset_id;                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemTreasureBoxItemSlot>  Item_slots;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoTreasureBox) == 0x000008, "Wrong alignment on FMangoTreasureBox");
static_assert(sizeof(FMangoTreasureBox) == 0x000040, "Wrong size on FMangoTreasureBox");
static_assert(offsetof(FMangoTreasureBox, box_name) == 0x000000, "Member 'FMangoTreasureBox::box_name' has a wrong offset!");
static_assert(offsetof(FMangoTreasureBox, Lookup_field) == 0x000010, "Member 'FMangoTreasureBox::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoTreasureBox, Display_engine_asset_id) == 0x000020, "Member 'FMangoTreasureBox::Display_engine_asset_id' has a wrong offset!");
static_assert(offsetof(FMangoTreasureBox, Item_slots) == 0x000030, "Member 'FMangoTreasureBox::Item_slots' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuestReward
// 0x00C8 (0x00C8 - 0x0000)
struct FMangoQuestReward final
{
public:
	class FName                                   Lookup_field;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoItem                             Item;                                              // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FMangoTreasureBox                      Treasurebox;                                       // 0x0058(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Treasurebox_quantity;                              // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Image_id;                                          // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp;                                                // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_bucks;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_parts;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Login_cost;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuestReward) == 0x000008, "Wrong alignment on FMangoQuestReward");
static_assert(sizeof(FMangoQuestReward) == 0x0000C8, "Wrong size on FMangoQuestReward");
static_assert(offsetof(FMangoQuestReward, Lookup_field) == 0x000000, "Member 'FMangoQuestReward::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Item) == 0x000008, "Member 'FMangoQuestReward::Item' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Treasurebox) == 0x000058, "Member 'FMangoQuestReward::Treasurebox' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Treasurebox_quantity) == 0x000098, "Member 'FMangoQuestReward::Treasurebox_quantity' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Image_id) == 0x00009C, "Member 'FMangoQuestReward::Image_id' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Description) == 0x0000A8, "Member 'FMangoQuestReward::Description' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Xp) == 0x0000B8, "Member 'FMangoQuestReward::Xp' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Rocket_bucks) == 0x0000BC, "Member 'FMangoQuestReward::Rocket_bucks' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Rocket_parts) == 0x0000C0, "Member 'FMangoQuestReward::Rocket_parts' has a wrong offset!");
static_assert(offsetof(FMangoQuestReward, Login_cost) == 0x0000C4, "Member 'FMangoQuestReward::Login_cost' has a wrong offset!");

// ScriptStruct MangoClient.MangoLoginReward
// 0x00D8 (0x00D8 - 0x0000)
struct FMangoLoginReward final
{
public:
	class FName                                   Lookup_field;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoQuestReward                      Reward;                                            // 0x0010(0x00C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoLoginReward) == 0x000008, "Wrong alignment on FMangoLoginReward");
static_assert(sizeof(FMangoLoginReward) == 0x0000D8, "Wrong size on FMangoLoginReward");
static_assert(offsetof(FMangoLoginReward, Lookup_field) == 0x000000, "Member 'FMangoLoginReward::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoLoginReward, Active) == 0x000008, "Member 'FMangoLoginReward::Active' has a wrong offset!");
static_assert(offsetof(FMangoLoginReward, Reward) == 0x000010, "Member 'FMangoLoginReward::Reward' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetQuestDocResponse
// 0x0030 (0x0030 - 0x0000)
struct FMangoGetQuestDocResponse final
{
public:
	TArray<struct FMangoQuest>                    Quests;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoQuestReward>              Rewards;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoLoginReward>              Loginrewards;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetQuestDocResponse) == 0x000008, "Wrong alignment on FMangoGetQuestDocResponse");
static_assert(sizeof(FMangoGetQuestDocResponse) == 0x000030, "Wrong size on FMangoGetQuestDocResponse");
static_assert(offsetof(FMangoGetQuestDocResponse, Quests) == 0x000000, "Member 'FMangoGetQuestDocResponse::Quests' has a wrong offset!");
static_assert(offsetof(FMangoGetQuestDocResponse, Rewards) == 0x000010, "Member 'FMangoGetQuestDocResponse::Rewards' has a wrong offset!");
static_assert(offsetof(FMangoGetQuestDocResponse, Loginrewards) == 0x000020, "Member 'FMangoGetQuestDocResponse::Loginrewards' has a wrong offset!");

// ScriptStruct MangoClient.MatchEndArtifact
// 0x0020 (0x0020 - 0x0000)
struct FMatchEndArtifact final
{
public:
	class FString                                 ArtifactType;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ArtifactId;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchEndArtifact) == 0x000008, "Wrong alignment on FMatchEndArtifact");
static_assert(sizeof(FMatchEndArtifact) == 0x000020, "Wrong size on FMatchEndArtifact");
static_assert(offsetof(FMatchEndArtifact, ArtifactType) == 0x000000, "Member 'FMatchEndArtifact::ArtifactType' has a wrong offset!");
static_assert(offsetof(FMatchEndArtifact, ArtifactId) == 0x000010, "Member 'FMatchEndArtifact::ArtifactId' has a wrong offset!");

// ScriptStruct MangoClient.MatchEndPlayer
// 0x00E8 (0x00E8 - 0x0000)
struct FMatchEndPlayer final
{
public:
	class FString                                 MangoId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSharingUsageData;                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSharingExternalUsageData;                       // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnderage;                                       // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartyId;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Platform;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      Stats;                                             // 0x0040(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLevelStart;                               // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterLevelEnd;                                 // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinId;                                            // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchEndArtifact>              EquippedArtifacts;                                 // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarinerGameOutcome                           GameOutcome;                                       // 0x00DC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RejoinCount;                                       // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsABot;                                           // 0x00E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchEndPlayer) == 0x000008, "Wrong alignment on FMatchEndPlayer");
static_assert(sizeof(FMatchEndPlayer) == 0x0000E8, "Wrong size on FMatchEndPlayer");
static_assert(offsetof(FMatchEndPlayer, MangoId) == 0x000000, "Member 'FMatchEndPlayer::MangoId' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, PlatformId) == 0x000010, "Member 'FMatchEndPlayer::PlatformId' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, bIsSharingUsageData) == 0x000020, "Member 'FMatchEndPlayer::bIsSharingUsageData' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, bIsSharingExternalUsageData) == 0x000021, "Member 'FMatchEndPlayer::bIsSharingExternalUsageData' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, bIsUnderage) == 0x000022, "Member 'FMatchEndPlayer::bIsUnderage' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, PartyId) == 0x000028, "Member 'FMatchEndPlayer::PartyId' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, Platform) == 0x000038, "Member 'FMatchEndPlayer::Platform' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, Stats) == 0x000040, "Member 'FMatchEndPlayer::Stats' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, PlayerName) == 0x000090, "Member 'FMatchEndPlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, CharacterId) == 0x0000A0, "Member 'FMatchEndPlayer::CharacterId' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, CharacterLevelStart) == 0x0000B0, "Member 'FMatchEndPlayer::CharacterLevelStart' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, CharacterLevelEnd) == 0x0000B4, "Member 'FMatchEndPlayer::CharacterLevelEnd' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, SkinId) == 0x0000B8, "Member 'FMatchEndPlayer::SkinId' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, EquippedArtifacts) == 0x0000C8, "Member 'FMatchEndPlayer::EquippedArtifacts' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, TeamIndex) == 0x0000D8, "Member 'FMatchEndPlayer::TeamIndex' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, GameOutcome) == 0x0000DC, "Member 'FMatchEndPlayer::GameOutcome' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, RejoinCount) == 0x0000E0, "Member 'FMatchEndPlayer::RejoinCount' has a wrong offset!");
static_assert(offsetof(FMatchEndPlayer, bIsABot) == 0x0000E4, "Member 'FMatchEndPlayer::bIsABot' has a wrong offset!");

// ScriptStruct MangoClient.MatchEnd
// 0x0068 (0x0068 - 0x0000)
struct FMatchEnd final
{
public:
	struct FGuid                                  MatchID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlaylistUniqueId;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchEndPlayer>                Players;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchEndTeam>                  Teams;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MatchTime;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Map;                                               // 0x0044(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Mode;                                              // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMatchmadeSession;                               // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRankedSession;                                  // 0x0065(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchEnd) == 0x000008, "Wrong alignment on FMatchEnd");
static_assert(sizeof(FMatchEnd) == 0x000068, "Wrong size on FMatchEnd");
static_assert(offsetof(FMatchEnd, MatchID) == 0x000000, "Member 'FMatchEnd::MatchID' has a wrong offset!");
static_assert(offsetof(FMatchEnd, PlaylistUniqueId) == 0x000010, "Member 'FMatchEnd::PlaylistUniqueId' has a wrong offset!");
static_assert(offsetof(FMatchEnd, Players) == 0x000020, "Member 'FMatchEnd::Players' has a wrong offset!");
static_assert(offsetof(FMatchEnd, Teams) == 0x000030, "Member 'FMatchEnd::Teams' has a wrong offset!");
static_assert(offsetof(FMatchEnd, MatchTime) == 0x000040, "Member 'FMatchEnd::MatchTime' has a wrong offset!");
static_assert(offsetof(FMatchEnd, Map) == 0x000044, "Member 'FMatchEnd::Map' has a wrong offset!");
static_assert(offsetof(FMatchEnd, Mode) == 0x000054, "Member 'FMatchEnd::Mode' has a wrong offset!");
static_assert(offsetof(FMatchEnd, bIsMatchmadeSession) == 0x000064, "Member 'FMatchEnd::bIsMatchmadeSession' has a wrong offset!");
static_assert(offsetof(FMatchEnd, bIsRankedSession) == 0x000065, "Member 'FMatchEnd::bIsRankedSession' has a wrong offset!");

// ScriptStruct MangoClient.MangoBotLevelPvP
// 0x0008 (0x0008 - 0x0000)
struct FMangoBotLevelPvP final
{
public:
	int32                                         bot_level;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_min;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBotLevelPvP) == 0x000004, "Wrong alignment on FMangoBotLevelPvP");
static_assert(sizeof(FMangoBotLevelPvP) == 0x000008, "Wrong size on FMangoBotLevelPvP");
static_assert(offsetof(FMangoBotLevelPvP, bot_level) == 0x000000, "Member 'FMangoBotLevelPvP::bot_level' has a wrong offset!");
static_assert(offsetof(FMangoBotLevelPvP, Skill_min) == 0x000004, "Member 'FMangoBotLevelPvP::Skill_min' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassSeason
// 0x0058 (0x0058 - 0x0000)
struct FMangoBlastPassSeason final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Offer_id;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Season_num;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Start_date;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End_date;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FName                                   Splash_texture;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassSeason) == 0x000008, "Wrong alignment on FMangoBlastPassSeason");
static_assert(sizeof(FMangoBlastPassSeason) == 0x000058, "Wrong size on FMangoBlastPassSeason");
static_assert(offsetof(FMangoBlastPassSeason, Lookup_field) == 0x000000, "Member 'FMangoBlastPassSeason::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, Offer_id) == 0x000010, "Member 'FMangoBlastPassSeason::Offer_id' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, Season_num) == 0x000020, "Member 'FMangoBlastPassSeason::Season_num' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, Start_date) == 0x000028, "Member 'FMangoBlastPassSeason::Start_date' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, End_date) == 0x000030, "Member 'FMangoBlastPassSeason::End_date' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, Description) == 0x000038, "Member 'FMangoBlastPassSeason::Description' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassSeason, Splash_texture) == 0x000050, "Member 'FMangoBlastPassSeason::Splash_texture' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassTier
// 0x0030 (0x0030 - 0x0000)
struct FMangoBlastPassTier final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 blast_pass_lookup_field;                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier_number;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_val;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_fuel_cost;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoBlastPassTier) == 0x000008, "Wrong alignment on FMangoBlastPassTier");
static_assert(sizeof(FMangoBlastPassTier) == 0x000030, "Wrong size on FMangoBlastPassTier");
static_assert(offsetof(FMangoBlastPassTier, Lookup_field) == 0x000000, "Member 'FMangoBlastPassTier::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassTier, blast_pass_lookup_field) == 0x000010, "Member 'FMangoBlastPassTier::blast_pass_lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassTier, Tier_number) == 0x000020, "Member 'FMangoBlastPassTier::Tier_number' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassTier, Xp_val) == 0x000024, "Member 'FMangoBlastPassTier::Xp_val' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassTier, Rocket_fuel_cost) == 0x000028, "Member 'FMangoBlastPassTier::Rocket_fuel_cost' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassXPBonus
// 0x0008 (0x0008 - 0x0000)
struct FMangoBlastPassXPBonus final
{
public:
	int32                                         Pct_bonus;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoBlastPassXPBonusType                    bonus_type;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoBlastPassXPBonus) == 0x000004, "Wrong alignment on FMangoBlastPassXPBonus");
static_assert(sizeof(FMangoBlastPassXPBonus) == 0x000008, "Wrong size on FMangoBlastPassXPBonus");
static_assert(offsetof(FMangoBlastPassXPBonus, Pct_bonus) == 0x000000, "Member 'FMangoBlastPassXPBonus::Pct_bonus' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassXPBonus, bonus_type) == 0x000004, "Member 'FMangoBlastPassXPBonus::bonus_type' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassReward
// 0x00A8 (0x00A8 - 0x0000)
struct FMangoBlastPassReward final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoBlastPassTier                    blast_pass_tier;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FMangoItem                             Item_reward;                                       // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FMangoBlastPassXPBonus                 Xp_bonus_reward;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Rocket_fuel_reward;                                // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_part_reward;                                // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_free_tier;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoBlastPassReward) == 0x000008, "Wrong alignment on FMangoBlastPassReward");
static_assert(sizeof(FMangoBlastPassReward) == 0x0000A8, "Wrong size on FMangoBlastPassReward");
static_assert(offsetof(FMangoBlastPassReward, Lookup_field) == 0x000000, "Member 'FMangoBlastPassReward::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, blast_pass_tier) == 0x000010, "Member 'FMangoBlastPassReward::blast_pass_tier' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, Item_reward) == 0x000040, "Member 'FMangoBlastPassReward::Item_reward' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, Xp_bonus_reward) == 0x000090, "Member 'FMangoBlastPassReward::Xp_bonus_reward' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, Rocket_fuel_reward) == 0x000098, "Member 'FMangoBlastPassReward::Rocket_fuel_reward' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, Rocket_part_reward) == 0x00009C, "Member 'FMangoBlastPassReward::Rocket_part_reward' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassReward, Is_free_tier) == 0x0000A0, "Member 'FMangoBlastPassReward::Is_free_tier' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassTierDefinition
// 0x0040 (0x0040 - 0x0000)
struct FMangoBlastPassTierDefinition final
{
public:
	struct FMangoBlastPassTier                    Tier;                                              // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassReward>          Rewards;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassTierDefinition) == 0x000008, "Wrong alignment on FMangoBlastPassTierDefinition");
static_assert(sizeof(FMangoBlastPassTierDefinition) == 0x000040, "Wrong size on FMangoBlastPassTierDefinition");
static_assert(offsetof(FMangoBlastPassTierDefinition, Tier) == 0x000000, "Member 'FMangoBlastPassTierDefinition::Tier' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassTierDefinition, Rewards) == 0x000030, "Member 'FMangoBlastPassTierDefinition::Rewards' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassDefinition
// 0x0068 (0x0068 - 0x0000)
struct FMangoBlastPassDefinition final
{
public:
	struct FMangoBlastPassSeason                  Season;                                            // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassTierDefinition>  Tiers;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassDefinition) == 0x000008, "Wrong alignment on FMangoBlastPassDefinition");
static_assert(sizeof(FMangoBlastPassDefinition) == 0x000068, "Wrong size on FMangoBlastPassDefinition");
static_assert(offsetof(FMangoBlastPassDefinition, Season) == 0x000000, "Member 'FMangoBlastPassDefinition::Season' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassDefinition, Tiers) == 0x000058, "Member 'FMangoBlastPassDefinition::Tiers' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionCharacterSpecificReward
// 0x0030 (0x0030 - 0x0000)
struct FMangoProgressionCharacterSpecificReward final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Character;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItem>                     Direct_items;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionCharacterSpecificReward) == 0x000008, "Wrong alignment on FMangoProgressionCharacterSpecificReward");
static_assert(sizeof(FMangoProgressionCharacterSpecificReward) == 0x000030, "Wrong size on FMangoProgressionCharacterSpecificReward");
static_assert(offsetof(FMangoProgressionCharacterSpecificReward, Lookup_field) == 0x000000, "Member 'FMangoProgressionCharacterSpecificReward::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterSpecificReward, Character) == 0x000010, "Member 'FMangoProgressionCharacterSpecificReward::Character' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterSpecificReward, Direct_items) == 0x000020, "Member 'FMangoProgressionCharacterSpecificReward::Direct_items' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionLevelReward
// 0x0030 (0x0030 - 0x0000)
struct FMangoProgressionLevelReward final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Treasure_box_set_description;                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoProgressionCharacterSpecificReward> Members;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionLevelReward) == 0x000008, "Wrong alignment on FMangoProgressionLevelReward");
static_assert(sizeof(FMangoProgressionLevelReward) == 0x000030, "Wrong size on FMangoProgressionLevelReward");
static_assert(offsetof(FMangoProgressionLevelReward, Lookup_field) == 0x000000, "Member 'FMangoProgressionLevelReward::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoProgressionLevelReward, Treasure_box_set_description) == 0x000010, "Member 'FMangoProgressionLevelReward::Treasure_box_set_description' has a wrong offset!");
static_assert(offsetof(FMangoProgressionLevelReward, Members) == 0x000020, "Member 'FMangoProgressionLevelReward::Members' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionCharacterLevel
// 0x0058 (0x0058 - 0x0000)
struct FMangoProgressionCharacterLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_start;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_end;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoProgressionLevelReward           Treasure_box_award;                                // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Rocket_parts;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_fuel;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lookup_field;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionCharacterLevel) == 0x000008, "Wrong alignment on FMangoProgressionCharacterLevel");
static_assert(sizeof(FMangoProgressionCharacterLevel) == 0x000058, "Wrong size on FMangoProgressionCharacterLevel");
static_assert(offsetof(FMangoProgressionCharacterLevel, Level) == 0x000000, "Member 'FMangoProgressionCharacterLevel::Level' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Xp_start) == 0x000004, "Member 'FMangoProgressionCharacterLevel::Xp_start' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Xp_end) == 0x000008, "Member 'FMangoProgressionCharacterLevel::Xp_end' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Treasure_box_award) == 0x000010, "Member 'FMangoProgressionCharacterLevel::Treasure_box_award' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Rocket_parts) == 0x000040, "Member 'FMangoProgressionCharacterLevel::Rocket_parts' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Rocket_fuel) == 0x000044, "Member 'FMangoProgressionCharacterLevel::Rocket_fuel' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevel, Lookup_field) == 0x000048, "Member 'FMangoProgressionCharacterLevel::Lookup_field' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionArtifactUnlock
// 0x0070 (0x0070 - 0x0000)
struct FMangoProgressionArtifactUnlock final
{
public:
	struct FMangoItem                             Granted_artifact;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Lookup_field;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_start;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_end;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionArtifactUnlock) == 0x000008, "Wrong alignment on FMangoProgressionArtifactUnlock");
static_assert(sizeof(FMangoProgressionArtifactUnlock) == 0x000070, "Wrong size on FMangoProgressionArtifactUnlock");
static_assert(offsetof(FMangoProgressionArtifactUnlock, Granted_artifact) == 0x000000, "Member 'FMangoProgressionArtifactUnlock::Granted_artifact' has a wrong offset!");
static_assert(offsetof(FMangoProgressionArtifactUnlock, Level) == 0x000050, "Member 'FMangoProgressionArtifactUnlock::Level' has a wrong offset!");
static_assert(offsetof(FMangoProgressionArtifactUnlock, Lookup_field) == 0x000058, "Member 'FMangoProgressionArtifactUnlock::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoProgressionArtifactUnlock, Xp_start) == 0x000068, "Member 'FMangoProgressionArtifactUnlock::Xp_start' has a wrong offset!");
static_assert(offsetof(FMangoProgressionArtifactUnlock, Xp_end) == 0x00006C, "Member 'FMangoProgressionArtifactUnlock::Xp_end' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetProgressionDocResponse
// 0x0020 (0x0020 - 0x0000)
struct FMangoGetProgressionDocResponse final
{
public:
	TArray<struct FMangoProgressionCharacterLevel> Character_progression;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoProgressionArtifactUnlock> Artifact_unlock_level;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetProgressionDocResponse) == 0x000008, "Wrong alignment on FMangoGetProgressionDocResponse");
static_assert(sizeof(FMangoGetProgressionDocResponse) == 0x000020, "Wrong size on FMangoGetProgressionDocResponse");
static_assert(offsetof(FMangoGetProgressionDocResponse, Character_progression) == 0x000000, "Member 'FMangoGetProgressionDocResponse::Character_progression' has a wrong offset!");
static_assert(offsetof(FMangoGetProgressionDocResponse, Artifact_unlock_level) == 0x000010, "Member 'FMangoGetProgressionDocResponse::Artifact_unlock_level' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionCharacterItemUnlock
// 0x0018 (0x0018 - 0x0000)
struct FMangoProgressionCharacterItemUnlock final
{
public:
	class FString                                 Character;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoProgressionCharacterItemUnlock) == 0x000008, "Wrong alignment on FMangoProgressionCharacterItemUnlock");
static_assert(sizeof(FMangoProgressionCharacterItemUnlock) == 0x000018, "Wrong size on FMangoProgressionCharacterItemUnlock");
static_assert(offsetof(FMangoProgressionCharacterItemUnlock, Character) == 0x000000, "Member 'FMangoProgressionCharacterItemUnlock::Character' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterItemUnlock, Level) == 0x000010, "Member 'FMangoProgressionCharacterItemUnlock::Level' has a wrong offset!");

// ScriptStruct MangoClient.MangoBotLevelPvE
// 0x0004 (0x0004 - 0x0000)
struct FMangoBotLevelPvE final
{
public:
	int32                                         bot_level;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBotLevelPvE) == 0x000004, "Wrong alignment on FMangoBotLevelPvE");
static_assert(sizeof(FMangoBotLevelPvE) == 0x000004, "Wrong size on FMangoBotLevelPvE");
static_assert(offsetof(FMangoBotLevelPvE, bot_level) == 0x000000, "Member 'FMangoBotLevelPvE::bot_level' has a wrong offset!");

// ScriptStruct MangoClient.MangoMapModePair
// 0x0020 (0x0020 - 0x0000)
struct FMangoMapModePair final
{
public:
	struct FGuid                                  Map;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Mode;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMapModePair) == 0x000004, "Wrong alignment on FMangoMapModePair");
static_assert(sizeof(FMangoMapModePair) == 0x000020, "Wrong size on FMangoMapModePair");
static_assert(offsetof(FMangoMapModePair, Map) == 0x000000, "Member 'FMangoMapModePair::Map' has a wrong offset!");
static_assert(offsetof(FMangoMapModePair, Mode) == 0x000010, "Member 'FMangoMapModePair::Mode' has a wrong offset!");

// ScriptStruct MangoClient.MangoMatchSize
// 0x0018 (0x0018 - 0x0000)
struct FMangoMatchSize final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Playlist_definition;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMatchSize) == 0x000004, "Wrong alignment on FMangoMatchSize");
static_assert(sizeof(FMangoMatchSize) == 0x000018, "Wrong size on FMangoMatchSize");
static_assert(offsetof(FMangoMatchSize, ID) == 0x000000, "Member 'FMangoMatchSize::ID' has a wrong offset!");
static_assert(offsetof(FMangoMatchSize, Size) == 0x000004, "Member 'FMangoMatchSize::Size' has a wrong offset!");
static_assert(offsetof(FMangoMatchSize, Playlist_definition) == 0x000008, "Member 'FMangoMatchSize::Playlist_definition' has a wrong offset!");

// ScriptStruct MangoClient.MangoModePercentages
// 0x0014 (0x0014 - 0x0000)
struct FMangoModePercentages final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Mode;                                              // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoModePercentages) == 0x000004, "Wrong alignment on FMangoModePercentages");
static_assert(sizeof(FMangoModePercentages) == 0x000014, "Wrong size on FMangoModePercentages");
static_assert(offsetof(FMangoModePercentages, Percentage) == 0x000000, "Member 'FMangoModePercentages::Percentage' has a wrong offset!");
static_assert(offsetof(FMangoModePercentages, Mode) == 0x000004, "Member 'FMangoModePercentages::Mode' has a wrong offset!");

// ScriptStruct MangoClient.MangoPlaylist
// 0x00F8 (0x00F8 - 0x0000)
struct FMangoPlaylist final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  Unique_id;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoMapModePair>              Map_mode_list;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoMatchSize>                Matchsizes;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FName                                   Icon_id;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Material_id;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_filters;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Target_player_count;                               // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gamelift_id;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_party_size;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Onboarding_alt_playlist;                           // 0x008C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_ranked;                                         // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_pve_only;                                       // 0x009D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Supports_intermission;                             // 0x009E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fill_with_bots;                                    // 0x009F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Text_color;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Outline_color;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   background_id;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Xp_multiplier;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Event_name;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End_date;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoModePercentages>          Mode_percentages;                                  // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPlaylist) == 0x000008, "Wrong alignment on FMangoPlaylist");
static_assert(sizeof(FMangoPlaylist) == 0x0000F8, "Wrong size on FMangoPlaylist");
static_assert(offsetof(FMangoPlaylist, Name) == 0x000000, "Member 'FMangoPlaylist::Name' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Description) == 0x000018, "Member 'FMangoPlaylist::Description' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Unique_id) == 0x000030, "Member 'FMangoPlaylist::Unique_id' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Map_mode_list) == 0x000040, "Member 'FMangoPlaylist::Map_mode_list' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Matchsizes) == 0x000050, "Member 'FMangoPlaylist::Matchsizes' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Icon_id) == 0x000060, "Member 'FMangoPlaylist::Icon_id' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Material_id) == 0x000068, "Member 'FMangoPlaylist::Material_id' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Max_filters) == 0x000070, "Member 'FMangoPlaylist::Max_filters' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Target_player_count) == 0x000074, "Member 'FMangoPlaylist::Target_player_count' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Gamelift_id) == 0x000078, "Member 'FMangoPlaylist::Gamelift_id' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Max_party_size) == 0x000088, "Member 'FMangoPlaylist::Max_party_size' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Onboarding_alt_playlist) == 0x00008C, "Member 'FMangoPlaylist::Onboarding_alt_playlist' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Is_ranked) == 0x00009C, "Member 'FMangoPlaylist::Is_ranked' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Is_pve_only) == 0x00009D, "Member 'FMangoPlaylist::Is_pve_only' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Supports_intermission) == 0x00009E, "Member 'FMangoPlaylist::Supports_intermission' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Fill_with_bots) == 0x00009F, "Member 'FMangoPlaylist::Fill_with_bots' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Text_color) == 0x0000A0, "Member 'FMangoPlaylist::Text_color' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Outline_color) == 0x0000B0, "Member 'FMangoPlaylist::Outline_color' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, background_id) == 0x0000C0, "Member 'FMangoPlaylist::background_id' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Enabled) == 0x0000C8, "Member 'FMangoPlaylist::Enabled' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Xp_multiplier) == 0x0000CC, "Member 'FMangoPlaylist::Xp_multiplier' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Event_name) == 0x0000D0, "Member 'FMangoPlaylist::Event_name' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, End_date) == 0x0000E0, "Member 'FMangoPlaylist::End_date' has a wrong offset!");
static_assert(offsetof(FMangoPlaylist, Mode_percentages) == 0x0000E8, "Member 'FMangoPlaylist::Mode_percentages' has a wrong offset!");

// ScriptStruct MangoClient.MangoFreePromotionalOffer
// 0x0030 (0x0030 - 0x0000)
struct FMangoFreePromotionalOffer final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Free_offer;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Start_date;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End_date;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoFreePromotionalOffer) == 0x000008, "Wrong alignment on FMangoFreePromotionalOffer");
static_assert(sizeof(FMangoFreePromotionalOffer) == 0x000030, "Wrong size on FMangoFreePromotionalOffer");
static_assert(offsetof(FMangoFreePromotionalOffer, Lookup_field) == 0x000000, "Member 'FMangoFreePromotionalOffer::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoFreePromotionalOffer, Free_offer) == 0x000010, "Member 'FMangoFreePromotionalOffer::Free_offer' has a wrong offset!");
static_assert(offsetof(FMangoFreePromotionalOffer, Start_date) == 0x000020, "Member 'FMangoFreePromotionalOffer::Start_date' has a wrong offset!");
static_assert(offsetof(FMangoFreePromotionalOffer, End_date) == 0x000028, "Member 'FMangoFreePromotionalOffer::End_date' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquipItem
// 0x0018 (0x0018 - 0x0000)
struct FMangoEquipItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipSlot;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoEquipItem) == 0x000008, "Wrong alignment on FMangoEquipItem");
static_assert(sizeof(FMangoEquipItem) == 0x000018, "Wrong size on FMangoEquipItem");
static_assert(offsetof(FMangoEquipItem, ItemID) == 0x000000, "Member 'FMangoEquipItem::ItemID' has a wrong offset!");
static_assert(offsetof(FMangoEquipItem, EquipSlot) == 0x000010, "Member 'FMangoEquipItem::EquipSlot' has a wrong offset!");
static_assert(offsetof(FMangoEquipItem, ItemType) == 0x000014, "Member 'FMangoEquipItem::ItemType' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquipmentSet
// 0x0028 (0x0028 - 0x0000)
struct FMangoEquipmentSet final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRanked;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoEquipItem>                Equipment;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoEquipmentSet) == 0x000008, "Wrong alignment on FMangoEquipmentSet");
static_assert(sizeof(FMangoEquipmentSet) == 0x000028, "Wrong size on FMangoEquipmentSet");
static_assert(offsetof(FMangoEquipmentSet, Name) == 0x000000, "Member 'FMangoEquipmentSet::Name' has a wrong offset!");
static_assert(offsetof(FMangoEquipmentSet, IsRanked) == 0x000010, "Member 'FMangoEquipmentSet::IsRanked' has a wrong offset!");
static_assert(offsetof(FMangoEquipmentSet, Equipment) == 0x000018, "Member 'FMangoEquipmentSet::Equipment' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquippedEmoteWithSlot
// 0x0018 (0x0018 - 0x0000)
struct FMangoEquippedEmoteWithSlot final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoEquippedEmoteWithSlot) == 0x000008, "Wrong alignment on FMangoEquippedEmoteWithSlot");
static_assert(sizeof(FMangoEquippedEmoteWithSlot) == 0x000018, "Wrong size on FMangoEquippedEmoteWithSlot");
static_assert(offsetof(FMangoEquippedEmoteWithSlot, ItemID) == 0x000000, "Member 'FMangoEquippedEmoteWithSlot::ItemID' has a wrong offset!");
static_assert(offsetof(FMangoEquippedEmoteWithSlot, Slot) == 0x000010, "Member 'FMangoEquippedEmoteWithSlot::Slot' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquippedEmote
// 0x0010 (0x0010 - 0x0000)
struct FMangoEquippedEmote final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoEquippedEmote) == 0x000008, "Wrong alignment on FMangoEquippedEmote");
static_assert(sizeof(FMangoEquippedEmote) == 0x000010, "Wrong size on FMangoEquippedEmote");
static_assert(offsetof(FMangoEquippedEmote, ItemID) == 0x000000, "Member 'FMangoEquippedEmote::ItemID' has a wrong offset!");

// ScriptStruct MangoClient.MangoCharacterProgression
// 0x0058 (0x0058 - 0x0000)
struct FMangoCharacterProgression final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Experience;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoEquipmentSet>             EquipmentSets;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    PreGameEmotes;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    ChatEmotes;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMangoEquippedEmote                    VictoryPose;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoCharacterProgression) == 0x000008, "Wrong alignment on FMangoCharacterProgression");
static_assert(sizeof(FMangoCharacterProgression) == 0x000058, "Wrong size on FMangoCharacterProgression");
static_assert(offsetof(FMangoCharacterProgression, CharacterId) == 0x000000, "Member 'FMangoCharacterProgression::CharacterId' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, Level) == 0x000008, "Member 'FMangoCharacterProgression::Level' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, Experience) == 0x00000C, "Member 'FMangoCharacterProgression::Experience' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, Progress) == 0x000010, "Member 'FMangoCharacterProgression::Progress' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, EquipmentSets) == 0x000018, "Member 'FMangoCharacterProgression::EquipmentSets' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, PreGameEmotes) == 0x000028, "Member 'FMangoCharacterProgression::PreGameEmotes' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, ChatEmotes) == 0x000038, "Member 'FMangoCharacterProgression::ChatEmotes' has a wrong offset!");
static_assert(offsetof(FMangoCharacterProgression, VictoryPose) == 0x000048, "Member 'FMangoCharacterProgression::VictoryPose' has a wrong offset!");

// ScriptStruct MangoClient.MangoOrderItem
// 0x0020 (0x0020 - 0x0000)
struct FMangoOrderItem final
{
public:
	class FString                                 ItemLookup;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                ItemType;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RocketBuxFromDupes;                                // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RocketPartsFromDupes;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoOrderItem) == 0x000008, "Wrong alignment on FMangoOrderItem");
static_assert(sizeof(FMangoOrderItem) == 0x000020, "Wrong size on FMangoOrderItem");
static_assert(offsetof(FMangoOrderItem, ItemLookup) == 0x000000, "Member 'FMangoOrderItem::ItemLookup' has a wrong offset!");
static_assert(offsetof(FMangoOrderItem, ItemType) == 0x000010, "Member 'FMangoOrderItem::ItemType' has a wrong offset!");
static_assert(offsetof(FMangoOrderItem, RocketBuxFromDupes) == 0x000014, "Member 'FMangoOrderItem::RocketBuxFromDupes' has a wrong offset!");
static_assert(offsetof(FMangoOrderItem, RocketPartsFromDupes) == 0x000018, "Member 'FMangoOrderItem::RocketPartsFromDupes' has a wrong offset!");

// ScriptStruct MangoClient.MangoOrderXPBonus
// 0x0008 (0x0008 - 0x0000)
struct FMangoOrderXPBonus final
{
public:
	EMangoBlastPassXPBonusType                    BonusType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PercentGranted;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoOrderXPBonus) == 0x000004, "Wrong alignment on FMangoOrderXPBonus");
static_assert(sizeof(FMangoOrderXPBonus) == 0x000008, "Wrong size on FMangoOrderXPBonus");
static_assert(offsetof(FMangoOrderXPBonus, BonusType) == 0x000000, "Member 'FMangoOrderXPBonus::BonusType' has a wrong offset!");
static_assert(offsetof(FMangoOrderXPBonus, PercentGranted) == 0x000004, "Member 'FMangoOrderXPBonus::PercentGranted' has a wrong offset!");

// ScriptStruct MangoClient.MangoOrderBlastpass
// 0x0018 (0x0018 - 0x0000)
struct FMangoOrderBlastpass final
{
public:
	class FString                                 BlastpassLookup;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TiersGranted;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoOrderBlastpass) == 0x000008, "Wrong alignment on FMangoOrderBlastpass");
static_assert(sizeof(FMangoOrderBlastpass) == 0x000018, "Wrong size on FMangoOrderBlastpass");
static_assert(offsetof(FMangoOrderBlastpass, BlastpassLookup) == 0x000000, "Member 'FMangoOrderBlastpass::BlastpassLookup' has a wrong offset!");
static_assert(offsetof(FMangoOrderBlastpass, TiersGranted) == 0x000010, "Member 'FMangoOrderBlastpass::TiersGranted' has a wrong offset!");

// ScriptStruct MangoClient.MangoOrderDetails
// 0x0050 (0x0050 - 0x0000)
struct FMangoOrderDetails final
{
public:
	TArray<int32>                                 RocketBuxGranted;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoOrderItem>                ItemsGranted;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoOrderXPBonus>             XPBonusesGranted;                                  // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMangoOrderBlastpass                   BlastpassGranted;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ProfileModified;                                   // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoOrderDetails) == 0x000008, "Wrong alignment on FMangoOrderDetails");
static_assert(sizeof(FMangoOrderDetails) == 0x000050, "Wrong size on FMangoOrderDetails");
static_assert(offsetof(FMangoOrderDetails, RocketBuxGranted) == 0x000000, "Member 'FMangoOrderDetails::RocketBuxGranted' has a wrong offset!");
static_assert(offsetof(FMangoOrderDetails, ItemsGranted) == 0x000010, "Member 'FMangoOrderDetails::ItemsGranted' has a wrong offset!");
static_assert(offsetof(FMangoOrderDetails, XPBonusesGranted) == 0x000020, "Member 'FMangoOrderDetails::XPBonusesGranted' has a wrong offset!");
static_assert(offsetof(FMangoOrderDetails, BlastpassGranted) == 0x000030, "Member 'FMangoOrderDetails::BlastpassGranted' has a wrong offset!");
static_assert(offsetof(FMangoOrderDetails, ProfileModified) == 0x000048, "Member 'FMangoOrderDetails::ProfileModified' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemOffer
// 0x0058 (0x0058 - 0x0000)
struct FMangoItemOffer final
{
public:
	int32                                         Refund_value;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoItem                             Item;                                              // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoItemOffer) == 0x000008, "Wrong alignment on FMangoItemOffer");
static_assert(sizeof(FMangoItemOffer) == 0x000058, "Wrong size on FMangoItemOffer");
static_assert(offsetof(FMangoItemOffer, Refund_value) == 0x000000, "Member 'FMangoItemOffer::Refund_value' has a wrong offset!");
static_assert(offsetof(FMangoItemOffer, Item) == 0x000008, "Member 'FMangoItemOffer::Item' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassOffer
// 0x0070 (0x0070 - 0x0000)
struct FMangoBlastPassOffer final
{
public:
	struct FMangoBlastPassSeason                  blast_pass;                                        // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Refund_value;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num_included_tiers;                                // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Included_character;                                // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassOffer) == 0x000008, "Wrong alignment on FMangoBlastPassOffer");
static_assert(sizeof(FMangoBlastPassOffer) == 0x000070, "Wrong size on FMangoBlastPassOffer");
static_assert(offsetof(FMangoBlastPassOffer, blast_pass) == 0x000000, "Member 'FMangoBlastPassOffer::blast_pass' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassOffer, Refund_value) == 0x000058, "Member 'FMangoBlastPassOffer::Refund_value' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassOffer, Num_included_tiers) == 0x00005C, "Member 'FMangoBlastPassOffer::Num_included_tiers' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassOffer, Included_character) == 0x000060, "Member 'FMangoBlastPassOffer::Included_character' has a wrong offset!");

// ScriptStruct MangoClient.MangoPurchaseOfferBase
// 0x0018 (0x0018 - 0x0000)
struct FMangoPurchaseOfferBase
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoPurchaseOfferBase) == 0x000008, "Wrong alignment on FMangoPurchaseOfferBase");
static_assert(sizeof(FMangoPurchaseOfferBase) == 0x000018, "Wrong size on FMangoPurchaseOfferBase");
static_assert(offsetof(FMangoPurchaseOfferBase, Lookup_field) == 0x000000, "Member 'FMangoPurchaseOfferBase::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOfferBase, ID) == 0x000010, "Member 'FMangoPurchaseOfferBase::ID' has a wrong offset!");

// ScriptStruct MangoClient.MangoPurchaseOffer
// 0x00C0 (0x00D8 - 0x0018)
struct FMangoPurchaseOffer final : public FMangoPurchaseOfferBase
{
public:
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Texture_id;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price_rocketbux;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price_rocketparts;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemOffer>                Offer_items;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassOffer>           Offer_blastpass;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	bool                                          buy_once;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoOfferType                               Offer_type;                                        // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Offer_start_date;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Offer_end_date;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Sale_start_date;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Sale_end_date;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sale_price_rocketbux;                              // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sale_price_rocketparts;                            // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 banner_text;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 banner_text_color;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 banner_text_outline_color;                         // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 banner_color;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPurchaseOffer) == 0x000008, "Wrong alignment on FMangoPurchaseOffer");
static_assert(sizeof(FMangoPurchaseOffer) == 0x0000D8, "Wrong size on FMangoPurchaseOffer");
static_assert(offsetof(FMangoPurchaseOffer, Name) == 0x000018, "Member 'FMangoPurchaseOffer::Name' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Description) == 0x000028, "Member 'FMangoPurchaseOffer::Description' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Texture_id) == 0x000038, "Member 'FMangoPurchaseOffer::Texture_id' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Price_rocketbux) == 0x000040, "Member 'FMangoPurchaseOffer::Price_rocketbux' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Price_rocketparts) == 0x000044, "Member 'FMangoPurchaseOffer::Price_rocketparts' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Offer_items) == 0x000048, "Member 'FMangoPurchaseOffer::Offer_items' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Offer_blastpass) == 0x000058, "Member 'FMangoPurchaseOffer::Offer_blastpass' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, buy_once) == 0x000068, "Member 'FMangoPurchaseOffer::buy_once' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Offer_type) == 0x000069, "Member 'FMangoPurchaseOffer::Offer_type' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Offer_start_date) == 0x000070, "Member 'FMangoPurchaseOffer::Offer_start_date' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Offer_end_date) == 0x000078, "Member 'FMangoPurchaseOffer::Offer_end_date' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Sale_start_date) == 0x000080, "Member 'FMangoPurchaseOffer::Sale_start_date' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Sale_end_date) == 0x000088, "Member 'FMangoPurchaseOffer::Sale_end_date' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Sale_price_rocketbux) == 0x000090, "Member 'FMangoPurchaseOffer::Sale_price_rocketbux' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, Sale_price_rocketparts) == 0x000094, "Member 'FMangoPurchaseOffer::Sale_price_rocketparts' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, banner_text) == 0x000098, "Member 'FMangoPurchaseOffer::banner_text' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, banner_text_color) == 0x0000A8, "Member 'FMangoPurchaseOffer::banner_text_color' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, banner_text_outline_color) == 0x0000B8, "Member 'FMangoPurchaseOffer::banner_text_outline_color' has a wrong offset!");
static_assert(offsetof(FMangoPurchaseOffer, banner_color) == 0x0000C8, "Member 'FMangoPurchaseOffer::banner_color' has a wrong offset!");

// ScriptStruct MangoClient.MangoDefaults
// 0x0040 (0x0040 - 0x0000)
struct FMangoDefaults final
{
public:
	struct FMangoMapModePair                      Lobby_map_mode;                                    // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FMangoMapModePair                      Private_match_map_mode;                            // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoDefaults) == 0x000004, "Wrong alignment on FMangoDefaults");
static_assert(sizeof(FMangoDefaults) == 0x000040, "Wrong size on FMangoDefaults");
static_assert(offsetof(FMangoDefaults, Lobby_map_mode) == 0x000000, "Member 'FMangoDefaults::Lobby_map_mode' has a wrong offset!");
static_assert(offsetof(FMangoDefaults, Private_match_map_mode) == 0x000020, "Member 'FMangoDefaults::Private_match_map_mode' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemInventory
// 0x0018 (0x0018 - 0x0000)
struct FMangoItemInventory final
{
public:
	class FString                                 CMSItemID;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Viewed;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PopUpNotification;                                 // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoItemInventory) == 0x000008, "Wrong alignment on FMangoItemInventory");
static_assert(sizeof(FMangoItemInventory) == 0x000018, "Wrong size on FMangoItemInventory");
static_assert(offsetof(FMangoItemInventory, CMSItemID) == 0x000000, "Member 'FMangoItemInventory::CMSItemID' has a wrong offset!");
static_assert(offsetof(FMangoItemInventory, Viewed) == 0x000010, "Member 'FMangoItemInventory::Viewed' has a wrong offset!");
static_assert(offsetof(FMangoItemInventory, PopUpNotification) == 0x000011, "Member 'FMangoItemInventory::PopUpNotification' has a wrong offset!");

// ScriptStruct MangoClient.RewardGrant
// 0x0040 (0x0040 - 0x0000)
struct FRewardGrant final
{
public:
	class FString                                 Provider;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_parts;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_fuel;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Item_lookup_keys;                                  // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          backfill;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRewardGrant) == 0x000008, "Wrong alignment on FRewardGrant");
static_assert(sizeof(FRewardGrant) == 0x000040, "Wrong size on FRewardGrant");
static_assert(offsetof(FRewardGrant, Provider) == 0x000000, "Member 'FRewardGrant::Provider' has a wrong offset!");
static_assert(offsetof(FRewardGrant, ID) == 0x000010, "Member 'FRewardGrant::ID' has a wrong offset!");
static_assert(offsetof(FRewardGrant, Rocket_parts) == 0x000020, "Member 'FRewardGrant::Rocket_parts' has a wrong offset!");
static_assert(offsetof(FRewardGrant, Rocket_fuel) == 0x000024, "Member 'FRewardGrant::Rocket_fuel' has a wrong offset!");
static_assert(offsetof(FRewardGrant, Item_lookup_keys) == 0x000028, "Member 'FRewardGrant::Item_lookup_keys' has a wrong offset!");
static_assert(offsetof(FRewardGrant, backfill) == 0x000038, "Member 'FRewardGrant::backfill' has a wrong offset!");

// ScriptStruct MangoClient.MangoLevelRewardItem
// 0x0028 (0x0028 - 0x0000)
struct FMangoLevelRewardItem final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item_name;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                Item_type;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Parts_value;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoLevelRewardItem) == 0x000008, "Wrong alignment on FMangoLevelRewardItem");
static_assert(sizeof(FMangoLevelRewardItem) == 0x000028, "Wrong size on FMangoLevelRewardItem");
static_assert(offsetof(FMangoLevelRewardItem, Lookup_field) == 0x000000, "Member 'FMangoLevelRewardItem::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoLevelRewardItem, Item_name) == 0x000010, "Member 'FMangoLevelRewardItem::Item_name' has a wrong offset!");
static_assert(offsetof(FMangoLevelRewardItem, Item_type) == 0x000020, "Member 'FMangoLevelRewardItem::Item_type' has a wrong offset!");
static_assert(offsetof(FMangoLevelRewardItem, Parts_value) == 0x000024, "Member 'FMangoLevelRewardItem::Parts_value' has a wrong offset!");

// ScriptStruct MangoClient.MangoRewards
// 0x0038 (0x0038 - 0x0000)
struct FMangoRewards final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoLevelRewardItem>          DirectItem;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RocketParts;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocketfuel;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BpProgress;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsATease;                                          // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XpBonus;                                           // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyXpBonus;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRewards) == 0x000008, "Wrong alignment on FMangoRewards");
static_assert(sizeof(FMangoRewards) == 0x000038, "Wrong size on FMangoRewards");
static_assert(offsetof(FMangoRewards, CharacterId) == 0x000000, "Member 'FMangoRewards::CharacterId' has a wrong offset!");
static_assert(offsetof(FMangoRewards, DirectItem) == 0x000010, "Member 'FMangoRewards::DirectItem' has a wrong offset!");
static_assert(offsetof(FMangoRewards, RocketParts) == 0x000020, "Member 'FMangoRewards::RocketParts' has a wrong offset!");
static_assert(offsetof(FMangoRewards, Rocketfuel) == 0x000024, "Member 'FMangoRewards::Rocketfuel' has a wrong offset!");
static_assert(offsetof(FMangoRewards, BpProgress) == 0x000028, "Member 'FMangoRewards::BpProgress' has a wrong offset!");
static_assert(offsetof(FMangoRewards, IsATease) == 0x00002C, "Member 'FMangoRewards::IsATease' has a wrong offset!");
static_assert(offsetof(FMangoRewards, XpBonus) == 0x000030, "Member 'FMangoRewards::XpBonus' has a wrong offset!");
static_assert(offsetof(FMangoRewards, PartyXpBonus) == 0x000034, "Member 'FMangoRewards::PartyXpBonus' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuestDescription
// 0x0118 (0x0118 - 0x0000)
struct FMangoQuestDescription final
{
public:
	bool                                          BeforeMatch;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  MatchID;                                           // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestId;                                           // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoQuestSlot                               SlotId;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CmsId;                                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoQuestState                              State;                                             // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartTime;                                         // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndTime;                                           // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpiresTime;                                       // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DismissCooldown;                                   // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastDismissTime;                                   // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastUpdateTime;                                    // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectedRewardId;                                  // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlastPassXpReward;                                 // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UpdatedAt;                                         // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreatedAt;                                         // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoRewards                          Rewards;                                           // 0x00E0(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuestDescription) == 0x000008, "Wrong alignment on FMangoQuestDescription");
static_assert(sizeof(FMangoQuestDescription) == 0x000118, "Wrong size on FMangoQuestDescription");
static_assert(offsetof(FMangoQuestDescription, BeforeMatch) == 0x000000, "Member 'FMangoQuestDescription::BeforeMatch' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, MatchID) == 0x000004, "Member 'FMangoQuestDescription::MatchID' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, QuestId) == 0x000014, "Member 'FMangoQuestDescription::QuestId' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, PlayerId) == 0x000020, "Member 'FMangoQuestDescription::PlayerId' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, SlotId) == 0x000030, "Member 'FMangoQuestDescription::SlotId' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, CmsId) == 0x000038, "Member 'FMangoQuestDescription::CmsId' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, Goal) == 0x000048, "Member 'FMangoQuestDescription::Goal' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, Progress) == 0x00004C, "Member 'FMangoQuestDescription::Progress' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, State) == 0x000050, "Member 'FMangoQuestDescription::State' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, StartTime) == 0x000058, "Member 'FMangoQuestDescription::StartTime' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, EndTime) == 0x000068, "Member 'FMangoQuestDescription::EndTime' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, ExpiresTime) == 0x000078, "Member 'FMangoQuestDescription::ExpiresTime' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, DismissCooldown) == 0x000088, "Member 'FMangoQuestDescription::DismissCooldown' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, LastDismissTime) == 0x000090, "Member 'FMangoQuestDescription::LastDismissTime' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, LastUpdateTime) == 0x0000A0, "Member 'FMangoQuestDescription::LastUpdateTime' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, SelectedRewardId) == 0x0000B0, "Member 'FMangoQuestDescription::SelectedRewardId' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, BlastPassXpReward) == 0x0000B8, "Member 'FMangoQuestDescription::BlastPassXpReward' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, UpdatedAt) == 0x0000C0, "Member 'FMangoQuestDescription::UpdatedAt' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, CreatedAt) == 0x0000D0, "Member 'FMangoQuestDescription::CreatedAt' has a wrong offset!");
static_assert(offsetof(FMangoQuestDescription, Rewards) == 0x0000E0, "Member 'FMangoQuestDescription::Rewards' has a wrong offset!");

// ScriptStruct MangoClient.PlaylistRank
// 0x0030 (0x0030 - 0x0000)
struct FPlaylistRank final
{
public:
	struct FGuid                                  PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillMean;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillStdDev;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesPlayed;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesWon;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesQuit;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Streak;                                            // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotLevel;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaylistRank) == 0x000004, "Wrong alignment on FPlaylistRank");
static_assert(sizeof(FPlaylistRank) == 0x000030, "Wrong size on FPlaylistRank");
static_assert(offsetof(FPlaylistRank, PlaylistId) == 0x000000, "Member 'FPlaylistRank::PlaylistId' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, SkillMean) == 0x000010, "Member 'FPlaylistRank::SkillMean' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, SkillStdDev) == 0x000014, "Member 'FPlaylistRank::SkillStdDev' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, Rank) == 0x000018, "Member 'FPlaylistRank::Rank' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, GamesPlayed) == 0x00001C, "Member 'FPlaylistRank::GamesPlayed' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, GamesWon) == 0x000020, "Member 'FPlaylistRank::GamesWon' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, GamesQuit) == 0x000024, "Member 'FPlaylistRank::GamesQuit' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, Streak) == 0x000028, "Member 'FPlaylistRank::Streak' has a wrong offset!");
static_assert(offsetof(FPlaylistRank, BotLevel) == 0x00002C, "Member 'FPlaylistRank::BotLevel' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassProgression
// 0x0028 (0x0028 - 0x0000)
struct FMangoBlastPassProgression final
{
public:
	class FString                                 blast_pass_id;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blast_pass_xp;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         blast_pass_level;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bp_progress;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_bonus;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Party_xp_bonus;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Viewed;                                            // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoBlastPassProgression) == 0x000008, "Wrong alignment on FMangoBlastPassProgression");
static_assert(sizeof(FMangoBlastPassProgression) == 0x000028, "Wrong size on FMangoBlastPassProgression");
static_assert(offsetof(FMangoBlastPassProgression, blast_pass_id) == 0x000000, "Member 'FMangoBlastPassProgression::blast_pass_id' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, blast_pass_xp) == 0x000010, "Member 'FMangoBlastPassProgression::blast_pass_xp' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, blast_pass_level) == 0x000014, "Member 'FMangoBlastPassProgression::blast_pass_level' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, bp_progress) == 0x000018, "Member 'FMangoBlastPassProgression::bp_progress' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, Xp_bonus) == 0x00001C, "Member 'FMangoBlastPassProgression::Xp_bonus' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, Party_xp_bonus) == 0x000020, "Member 'FMangoBlastPassProgression::Party_xp_bonus' has a wrong offset!");
static_assert(offsetof(FMangoBlastPassProgression, Viewed) == 0x000024, "Member 'FMangoBlastPassProgression::Viewed' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemLevelData
// 0x0030 (0x0030 - 0x0000)
struct FMangoItemLevelData final
{
public:
	class FString                                 User_id;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item_id;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total_xp;                                          // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoItemLevelData) == 0x000008, "Wrong alignment on FMangoItemLevelData");
static_assert(sizeof(FMangoItemLevelData) == 0x000030, "Wrong size on FMangoItemLevelData");
static_assert(offsetof(FMangoItemLevelData, User_id) == 0x000000, "Member 'FMangoItemLevelData::User_id' has a wrong offset!");
static_assert(offsetof(FMangoItemLevelData, Item_id) == 0x000010, "Member 'FMangoItemLevelData::Item_id' has a wrong offset!");
static_assert(offsetof(FMangoItemLevelData, Level) == 0x000020, "Member 'FMangoItemLevelData::Level' has a wrong offset!");
static_assert(offsetof(FMangoItemLevelData, Total_xp) == 0x000024, "Member 'FMangoItemLevelData::Total_xp' has a wrong offset!");
static_assert(offsetof(FMangoItemLevelData, Progress) == 0x000028, "Member 'FMangoItemLevelData::Progress' has a wrong offset!");

// ScriptStruct MangoClient.MangoStat
// 0x0020 (0x0020 - 0x0000)
struct FMangoStat final
{
public:
	class FString                                 Metric;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mean;                                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sum;                                               // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoStat) == 0x000008, "Wrong alignment on FMangoStat");
static_assert(sizeof(FMangoStat) == 0x000020, "Wrong size on FMangoStat");
static_assert(offsetof(FMangoStat, Metric) == 0x000000, "Member 'FMangoStat::Metric' has a wrong offset!");
static_assert(offsetof(FMangoStat, Min) == 0x000010, "Member 'FMangoStat::Min' has a wrong offset!");
static_assert(offsetof(FMangoStat, Max) == 0x000014, "Member 'FMangoStat::Max' has a wrong offset!");
static_assert(offsetof(FMangoStat, Mean) == 0x000018, "Member 'FMangoStat::Mean' has a wrong offset!");
static_assert(offsetof(FMangoStat, Sum) == 0x00001C, "Member 'FMangoStat::Sum' has a wrong offset!");

// ScriptStruct MangoClient.MangoStatsGroup
// 0x0040 (0x0040 - 0x0000)
struct FMangoStatsGroup final
{
public:
	TArray<struct FMangoStat>                     Stats;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SliceType;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesPlayed;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesWon;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesQuit;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesDrawn;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoStatsGroup) == 0x000008, "Wrong alignment on FMangoStatsGroup");
static_assert(sizeof(FMangoStatsGroup) == 0x000040, "Wrong size on FMangoStatsGroup");
static_assert(offsetof(FMangoStatsGroup, Stats) == 0x000000, "Member 'FMangoStatsGroup::Stats' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, SliceType) == 0x000010, "Member 'FMangoStatsGroup::SliceType' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, GamesPlayed) == 0x000020, "Member 'FMangoStatsGroup::GamesPlayed' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, GamesWon) == 0x000024, "Member 'FMangoStatsGroup::GamesWon' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, GamesQuit) == 0x000028, "Member 'FMangoStatsGroup::GamesQuit' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, GamesDrawn) == 0x00002C, "Member 'FMangoStatsGroup::GamesDrawn' has a wrong offset!");
static_assert(offsetof(FMangoStatsGroup, PlayerId) == 0x000030, "Member 'FMangoStatsGroup::PlayerId' has a wrong offset!");

// ScriptStruct MangoClient.MangoSlicedStats
// 0x0190 (0x0190 - 0x0000)
struct FMangoSlicedStats final
{
public:
	TMap<struct FGuid, struct FMangoStatsGroup>   blastpass;                                         // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoStatsGroup>  Character;                                         // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FMangoStatsGroup>   Map;                                               // 0x00A0(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FMangoStatsGroup>   Mode;                                              // 0x00F0(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FMangoStatsGroup>   Playlist;                                          // 0x0140(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoSlicedStats) == 0x000008, "Wrong alignment on FMangoSlicedStats");
static_assert(sizeof(FMangoSlicedStats) == 0x000190, "Wrong size on FMangoSlicedStats");
static_assert(offsetof(FMangoSlicedStats, blastpass) == 0x000000, "Member 'FMangoSlicedStats::blastpass' has a wrong offset!");
static_assert(offsetof(FMangoSlicedStats, Character) == 0x000050, "Member 'FMangoSlicedStats::Character' has a wrong offset!");
static_assert(offsetof(FMangoSlicedStats, Map) == 0x0000A0, "Member 'FMangoSlicedStats::Map' has a wrong offset!");
static_assert(offsetof(FMangoSlicedStats, Mode) == 0x0000F0, "Member 'FMangoSlicedStats::Mode' has a wrong offset!");
static_assert(offsetof(FMangoSlicedStats, Playlist) == 0x000140, "Member 'FMangoSlicedStats::Playlist' has a wrong offset!");

// ScriptStruct MangoClient.MangoStats
// 0x01D0 (0x01D0 - 0x0000)
struct FMangoStats final
{
public:
	struct FMangoStatsGroup                       Lifetime;                                          // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoSlicedStats                      SlicedStats;                                       // 0x0040(0x0190)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoStats) == 0x000008, "Wrong alignment on FMangoStats");
static_assert(sizeof(FMangoStats) == 0x0001D0, "Wrong size on FMangoStats");
static_assert(offsetof(FMangoStats, Lifetime) == 0x000000, "Member 'FMangoStats::Lifetime' has a wrong offset!");
static_assert(offsetof(FMangoStats, SlicedStats) == 0x000040, "Member 'FMangoStats::SlicedStats' has a wrong offset!");

// ScriptStruct MangoClient.MangoProfile
// 0x02E0 (0x02E0 - 0x0000)
struct FMangoProfile final
{
public:
	class FString                                 MangoId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesPlayed;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CareerLevel;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CareerXp;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArtifactUnlockLevel;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArtifactUnlockProgress;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlaylistRank>                  PlaylistRankings;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGuid, float>                     Ranks;                                             // 0x0038(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastPlayedMatchId;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoCharacterProgression>     CharacterProgression;                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquipItem>                Equipment;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemLevelData>            ItemLevels;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         OnboardingState;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdvertState;                                       // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoBlastPassProgression>     BlastPassLevels;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          MotdViews;                                         // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMangoStats                            Stats;                                             // 0x00F8(0x01D0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BanLevel;                                          // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnbanTime;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BanMock;                                           // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoProfile) == 0x000008, "Wrong alignment on FMangoProfile");
static_assert(sizeof(FMangoProfile) == 0x0002E0, "Wrong size on FMangoProfile");
static_assert(offsetof(FMangoProfile, MangoId) == 0x000000, "Member 'FMangoProfile::MangoId' has a wrong offset!");
static_assert(offsetof(FMangoProfile, GamesPlayed) == 0x000010, "Member 'FMangoProfile::GamesPlayed' has a wrong offset!");
static_assert(offsetof(FMangoProfile, CareerLevel) == 0x000014, "Member 'FMangoProfile::CareerLevel' has a wrong offset!");
static_assert(offsetof(FMangoProfile, CareerXp) == 0x000018, "Member 'FMangoProfile::CareerXp' has a wrong offset!");
static_assert(offsetof(FMangoProfile, ArtifactUnlockLevel) == 0x00001C, "Member 'FMangoProfile::ArtifactUnlockLevel' has a wrong offset!");
static_assert(offsetof(FMangoProfile, ArtifactUnlockProgress) == 0x000020, "Member 'FMangoProfile::ArtifactUnlockProgress' has a wrong offset!");
static_assert(offsetof(FMangoProfile, PlaylistRankings) == 0x000028, "Member 'FMangoProfile::PlaylistRankings' has a wrong offset!");
static_assert(offsetof(FMangoProfile, Ranks) == 0x000038, "Member 'FMangoProfile::Ranks' has a wrong offset!");
static_assert(offsetof(FMangoProfile, Progress) == 0x000088, "Member 'FMangoProfile::Progress' has a wrong offset!");
static_assert(offsetof(FMangoProfile, LastPlayedMatchId) == 0x000090, "Member 'FMangoProfile::LastPlayedMatchId' has a wrong offset!");
static_assert(offsetof(FMangoProfile, CharacterProgression) == 0x0000A0, "Member 'FMangoProfile::CharacterProgression' has a wrong offset!");
static_assert(offsetof(FMangoProfile, Equipment) == 0x0000B0, "Member 'FMangoProfile::Equipment' has a wrong offset!");
static_assert(offsetof(FMangoProfile, ItemLevels) == 0x0000C0, "Member 'FMangoProfile::ItemLevels' has a wrong offset!");
static_assert(offsetof(FMangoProfile, OnboardingState) == 0x0000D0, "Member 'FMangoProfile::OnboardingState' has a wrong offset!");
static_assert(offsetof(FMangoProfile, AdvertState) == 0x0000D4, "Member 'FMangoProfile::AdvertState' has a wrong offset!");
static_assert(offsetof(FMangoProfile, BlastPassLevels) == 0x0000D8, "Member 'FMangoProfile::BlastPassLevels' has a wrong offset!");
static_assert(offsetof(FMangoProfile, MotdViews) == 0x0000E8, "Member 'FMangoProfile::MotdViews' has a wrong offset!");
static_assert(offsetof(FMangoProfile, Stats) == 0x0000F8, "Member 'FMangoProfile::Stats' has a wrong offset!");
static_assert(offsetof(FMangoProfile, BanLevel) == 0x0002C8, "Member 'FMangoProfile::BanLevel' has a wrong offset!");
static_assert(offsetof(FMangoProfile, UnbanTime) == 0x0002D0, "Member 'FMangoProfile::UnbanTime' has a wrong offset!");
static_assert(offsetof(FMangoProfile, BanMock) == 0x0002D8, "Member 'FMangoProfile::BanMock' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetProfileResponse
// 0x02E0 (0x02E0 - 0x0000)
struct FMangoGetProfileResponse final
{
public:
	struct FMangoProfile                          Profile;                                           // 0x0000(0x02E0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetProfileResponse) == 0x000008, "Wrong alignment on FMangoGetProfileResponse");
static_assert(sizeof(FMangoGetProfileResponse) == 0x0002E0, "Wrong size on FMangoGetProfileResponse");
static_assert(offsetof(FMangoGetProfileResponse, Profile) == 0x000000, "Member 'FMangoGetProfileResponse::Profile' has a wrong offset!");

// ScriptStruct MangoClient.ProcessRewardsRequest
// 0x0010 (0x0010 - 0x0000)
struct FProcessRewardsRequest final
{
public:
	class FString                                 EAAuthToken;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcessRewardsRequest) == 0x000008, "Wrong alignment on FProcessRewardsRequest");
static_assert(sizeof(FProcessRewardsRequest) == 0x000010, "Wrong size on FProcessRewardsRequest");
static_assert(offsetof(FProcessRewardsRequest, EAAuthToken) == 0x000000, "Member 'FProcessRewardsRequest::EAAuthToken' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionCharacterLevelReward
// 0x0020 (0x0020 - 0x0000)
struct FMangoProgressionCharacterLevelReward final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoItem>                     Direct_items;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	int32                                         Rocket_parts;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocket_fuel;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionCharacterLevelReward) == 0x000008, "Wrong alignment on FMangoProgressionCharacterLevelReward");
static_assert(sizeof(FMangoProgressionCharacterLevelReward) == 0x000020, "Wrong size on FMangoProgressionCharacterLevelReward");
static_assert(offsetof(FMangoProgressionCharacterLevelReward, Level) == 0x000000, "Member 'FMangoProgressionCharacterLevelReward::Level' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevelReward, Direct_items) == 0x000008, "Member 'FMangoProgressionCharacterLevelReward::Direct_items' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevelReward, Rocket_parts) == 0x000018, "Member 'FMangoProgressionCharacterLevelReward::Rocket_parts' has a wrong offset!");
static_assert(offsetof(FMangoProgressionCharacterLevelReward, Rocket_fuel) == 0x00001C, "Member 'FMangoProgressionCharacterLevelReward::Rocket_fuel' has a wrong offset!");

// ScriptStruct MangoClient.MangoProgressionCharacterReward
// 0x0010 (0x0010 - 0x0000)
struct FMangoProgressionCharacterReward final
{
public:
	TArray<struct FMangoProgressionCharacterLevelReward> Levels;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoProgressionCharacterReward) == 0x000008, "Wrong alignment on FMangoProgressionCharacterReward");
static_assert(sizeof(FMangoProgressionCharacterReward) == 0x000010, "Wrong size on FMangoProgressionCharacterReward");
static_assert(offsetof(FMangoProgressionCharacterReward, Levels) == 0x000000, "Member 'FMangoProgressionCharacterReward::Levels' has a wrong offset!");

// ScriptStruct MangoClient.MangoMatchmakingConfig
// 0x000C (0x000C - 0x0000)
struct FMangoMatchmakingConfig final
{
public:
	bool                                          Crossplay_kill_switch;                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Games_required_for_social_play;                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Games_required_for_ranked_play;                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMatchmakingConfig) == 0x000004, "Wrong alignment on FMangoMatchmakingConfig");
static_assert(sizeof(FMangoMatchmakingConfig) == 0x00000C, "Wrong size on FMangoMatchmakingConfig");
static_assert(offsetof(FMangoMatchmakingConfig, Crossplay_kill_switch) == 0x000000, "Member 'FMangoMatchmakingConfig::Crossplay_kill_switch' has a wrong offset!");
static_assert(offsetof(FMangoMatchmakingConfig, Games_required_for_social_play) == 0x000004, "Member 'FMangoMatchmakingConfig::Games_required_for_social_play' has a wrong offset!");
static_assert(offsetof(FMangoMatchmakingConfig, Games_required_for_ranked_play) == 0x000008, "Member 'FMangoMatchmakingConfig::Games_required_for_ranked_play' has a wrong offset!");

// ScriptStruct MangoClient.MangoMap
// 0x0060 (0x0060 - 0x0000)
struct FMangoMap final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  Unique_id;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Engine_asset_id;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Image_lookup_id;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapRecommendedNumberOfPlayers                Recommended_num_players;                           // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoMap) == 0x000008, "Wrong alignment on FMangoMap");
static_assert(sizeof(FMangoMap) == 0x000060, "Wrong size on FMangoMap");
static_assert(offsetof(FMangoMap, Name) == 0x000000, "Member 'FMangoMap::Name' has a wrong offset!");
static_assert(offsetof(FMangoMap, Description) == 0x000018, "Member 'FMangoMap::Description' has a wrong offset!");
static_assert(offsetof(FMangoMap, Unique_id) == 0x000030, "Member 'FMangoMap::Unique_id' has a wrong offset!");
static_assert(offsetof(FMangoMap, Engine_asset_id) == 0x000040, "Member 'FMangoMap::Engine_asset_id' has a wrong offset!");
static_assert(offsetof(FMangoMap, Image_lookup_id) == 0x000050, "Member 'FMangoMap::Image_lookup_id' has a wrong offset!");
static_assert(offsetof(FMangoMap, Recommended_num_players) == 0x000058, "Member 'FMangoMap::Recommended_num_players' has a wrong offset!");

// ScriptStruct MangoClient.MangoRelayCreateOrUpdateGameSessionRequest
// 0x0030 (0x0030 - 0x0000)
struct FMangoRelayCreateOrUpdateGameSessionRequest final
{
public:
	TArray<class FString>                         MemberXuids;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTemplate;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRelayCreateOrUpdateGameSessionRequest) == 0x000008, "Wrong alignment on FMangoRelayCreateOrUpdateGameSessionRequest");
static_assert(sizeof(FMangoRelayCreateOrUpdateGameSessionRequest) == 0x000030, "Wrong size on FMangoRelayCreateOrUpdateGameSessionRequest");
static_assert(offsetof(FMangoRelayCreateOrUpdateGameSessionRequest, MemberXuids) == 0x000000, "Member 'FMangoRelayCreateOrUpdateGameSessionRequest::MemberXuids' has a wrong offset!");
static_assert(offsetof(FMangoRelayCreateOrUpdateGameSessionRequest, SessionName) == 0x000010, "Member 'FMangoRelayCreateOrUpdateGameSessionRequest::SessionName' has a wrong offset!");
static_assert(offsetof(FMangoRelayCreateOrUpdateGameSessionRequest, SessionTemplate) == 0x000020, "Member 'FMangoRelayCreateOrUpdateGameSessionRequest::SessionTemplate' has a wrong offset!");

// ScriptStruct MangoClient.MangoNativeOffer
// 0x00C0 (0x00C0 - 0x0000)
struct FMangoNativeOffer final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lookup_identifier;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Texture_id;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount_usd;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Xbl_related_product;                               // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steam_app_id;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Psn_related_product;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Origin_related_product;                            // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Steam_related_product;                             // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image_engine_asset_id;                             // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoNativeOfferType                         Offer_type;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMangoPurchaseOfferBase>        Linked_offers;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoNativeOffer) == 0x000008, "Wrong alignment on FMangoNativeOffer");
static_assert(sizeof(FMangoNativeOffer) == 0x0000C0, "Wrong size on FMangoNativeOffer");
static_assert(offsetof(FMangoNativeOffer, Lookup_field) == 0x000000, "Member 'FMangoNativeOffer::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Name) == 0x000010, "Member 'FMangoNativeOffer::Name' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Description) == 0x000020, "Member 'FMangoNativeOffer::Description' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Lookup_identifier) == 0x000030, "Member 'FMangoNativeOffer::Lookup_identifier' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Texture_id) == 0x000040, "Member 'FMangoNativeOffer::Texture_id' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Amount_usd) == 0x000048, "Member 'FMangoNativeOffer::Amount_usd' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Xbl_related_product) == 0x000050, "Member 'FMangoNativeOffer::Xbl_related_product' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Steam_app_id) == 0x000060, "Member 'FMangoNativeOffer::Steam_app_id' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Psn_related_product) == 0x000068, "Member 'FMangoNativeOffer::Psn_related_product' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Origin_related_product) == 0x000078, "Member 'FMangoNativeOffer::Origin_related_product' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Steam_related_product) == 0x000088, "Member 'FMangoNativeOffer::Steam_related_product' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Image_engine_asset_id) == 0x000098, "Member 'FMangoNativeOffer::Image_engine_asset_id' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Offer_type) == 0x0000A8, "Member 'FMangoNativeOffer::Offer_type' has a wrong offset!");
static_assert(offsetof(FMangoNativeOffer, Linked_offers) == 0x0000B0, "Member 'FMangoNativeOffer::Linked_offers' has a wrong offset!");

// ScriptStruct MangoClient.MangoPurchasableCharacter
// 0x00F0 (0x00F0 - 0x0000)
struct FMangoPurchasableCharacter final
{
public:
	class FName                                   Lookup_field;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Character;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoPurchaseOfferBase                Offer_definition;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FMangoNativeOffer                      Native_offer;                                      // 0x0030(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPurchasableCharacter) == 0x000008, "Wrong alignment on FMangoPurchasableCharacter");
static_assert(sizeof(FMangoPurchasableCharacter) == 0x0000F0, "Wrong size on FMangoPurchasableCharacter");
static_assert(offsetof(FMangoPurchasableCharacter, Lookup_field) == 0x000000, "Member 'FMangoPurchasableCharacter::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoPurchasableCharacter, Character) == 0x000008, "Member 'FMangoPurchasableCharacter::Character' has a wrong offset!");
static_assert(offsetof(FMangoPurchasableCharacter, Offer_definition) == 0x000018, "Member 'FMangoPurchasableCharacter::Offer_definition' has a wrong offset!");
static_assert(offsetof(FMangoPurchasableCharacter, Native_offer) == 0x000030, "Member 'FMangoPurchasableCharacter::Native_offer' has a wrong offset!");

// ScriptStruct MangoClient.MangoFeaturedOffer
// 0x0030 (0x0030 - 0x0000)
struct FMangoFeaturedOffer final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Offer_id;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoFeaturedOffer) == 0x000008, "Wrong alignment on FMangoFeaturedOffer");
static_assert(sizeof(FMangoFeaturedOffer) == 0x000030, "Wrong size on FMangoFeaturedOffer");
static_assert(offsetof(FMangoFeaturedOffer, Lookup_field) == 0x000000, "Member 'FMangoFeaturedOffer::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoFeaturedOffer, Name) == 0x000010, "Member 'FMangoFeaturedOffer::Name' has a wrong offset!");
static_assert(offsetof(FMangoFeaturedOffer, Offer_id) == 0x000020, "Member 'FMangoFeaturedOffer::Offer_id' has a wrong offset!");

// ScriptStruct MangoClient.ProcessRewardsResponse
// 0x0010 (0x0010 - 0x0000)
struct FProcessRewardsResponse final
{
public:
	TArray<struct FRewardGrant>                   Grants;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcessRewardsResponse) == 0x000008, "Wrong alignment on FProcessRewardsResponse");
static_assert(sizeof(FProcessRewardsResponse) == 0x000010, "Wrong size on FProcessRewardsResponse");
static_assert(offsetof(FProcessRewardsResponse, Grants) == 0x000000, "Member 'FProcessRewardsResponse::Grants' has a wrong offset!");

// ScriptStruct MangoClient.MangoFreeRotationCharacter
// 0x0050 (0x0050 - 0x0000)
struct FMangoFreeRotationCharacter final
{
public:
	struct FMangoItem                             Character;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoFreeRotationCharacter) == 0x000008, "Wrong alignment on FMangoFreeRotationCharacter");
static_assert(sizeof(FMangoFreeRotationCharacter) == 0x000050, "Wrong size on FMangoFreeRotationCharacter");
static_assert(offsetof(FMangoFreeRotationCharacter, Character) == 0x000000, "Member 'FMangoFreeRotationCharacter::Character' has a wrong offset!");

// ScriptStruct MangoClient.MangoMode
// 0x0058 (0x0058 - 0x0000)
struct FMangoMode final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  Unique_id;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Engine_asset_id;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Image_lookup_id;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMode) == 0x000008, "Wrong alignment on FMangoMode");
static_assert(sizeof(FMangoMode) == 0x000058, "Wrong size on FMangoMode");
static_assert(offsetof(FMangoMode, Name) == 0x000000, "Member 'FMangoMode::Name' has a wrong offset!");
static_assert(offsetof(FMangoMode, Description) == 0x000018, "Member 'FMangoMode::Description' has a wrong offset!");
static_assert(offsetof(FMangoMode, Unique_id) == 0x000030, "Member 'FMangoMode::Unique_id' has a wrong offset!");
static_assert(offsetof(FMangoMode, Engine_asset_id) == 0x000040, "Member 'FMangoMode::Engine_asset_id' has a wrong offset!");
static_assert(offsetof(FMangoMode, Image_lookup_id) == 0x000050, "Member 'FMangoMode::Image_lookup_id' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetMatchmakingDocResponse
// 0x00A0 (0x00A0 - 0x0000)
struct FMangoGetMatchmakingDocResponse final
{
public:
	TArray<struct FMangoBotLevelPvP>              botlevelspvp;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBotLevelPvE>              botlevelspve;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoDefaults>                 Defaults;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoMap>                      Map;                                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoMode>                     Mode;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoPlaylist>                 Playlist;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          Privatematchmodes;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          Privatematchmaps;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoMapModePair>              Trialsmapsmodes;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FMangoMatchmakingConfig                Config;                                            // 0x0090(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoGetMatchmakingDocResponse) == 0x000008, "Wrong alignment on FMangoGetMatchmakingDocResponse");
static_assert(sizeof(FMangoGetMatchmakingDocResponse) == 0x0000A0, "Wrong size on FMangoGetMatchmakingDocResponse");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, botlevelspvp) == 0x000000, "Member 'FMangoGetMatchmakingDocResponse::botlevelspvp' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, botlevelspve) == 0x000010, "Member 'FMangoGetMatchmakingDocResponse::botlevelspve' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Defaults) == 0x000020, "Member 'FMangoGetMatchmakingDocResponse::Defaults' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Map) == 0x000030, "Member 'FMangoGetMatchmakingDocResponse::Map' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Mode) == 0x000040, "Member 'FMangoGetMatchmakingDocResponse::Mode' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Playlist) == 0x000050, "Member 'FMangoGetMatchmakingDocResponse::Playlist' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Privatematchmodes) == 0x000060, "Member 'FMangoGetMatchmakingDocResponse::Privatematchmodes' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Privatematchmaps) == 0x000070, "Member 'FMangoGetMatchmakingDocResponse::Privatematchmaps' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Trialsmapsmodes) == 0x000080, "Member 'FMangoGetMatchmakingDocResponse::Trialsmapsmodes' has a wrong offset!");
static_assert(offsetof(FMangoGetMatchmakingDocResponse, Config) == 0x000090, "Member 'FMangoGetMatchmakingDocResponse::Config' has a wrong offset!");

// ScriptStruct MangoClient.MangoNews
// 0x0048 (0x0048 - 0x0000)
struct FMangoNews final
{
public:
	struct FGuid                                  Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	class FName                                   Icon_path;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoNews) == 0x000008, "Wrong alignment on FMangoNews");
static_assert(sizeof(FMangoNews) == 0x000048, "Wrong size on FMangoNews");
static_assert(offsetof(FMangoNews, Lookup_field) == 0x000000, "Member 'FMangoNews::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoNews, Title) == 0x000010, "Member 'FMangoNews::Title' has a wrong offset!");
static_assert(offsetof(FMangoNews, Description) == 0x000028, "Member 'FMangoNews::Description' has a wrong offset!");
static_assert(offsetof(FMangoNews, Icon_path) == 0x000040, "Member 'FMangoNews::Icon_path' has a wrong offset!");

// ScriptStruct MangoClient.MangoTreasureBoxOffer
// 0x0028 (0x0028 - 0x0000)
struct FMangoTreasureBoxOffer final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 box_name;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoTreasureBoxOffer) == 0x000008, "Wrong alignment on FMangoTreasureBoxOffer");
static_assert(sizeof(FMangoTreasureBoxOffer) == 0x000028, "Wrong size on FMangoTreasureBoxOffer");
static_assert(offsetof(FMangoTreasureBoxOffer, Lookup_field) == 0x000000, "Member 'FMangoTreasureBoxOffer::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoTreasureBoxOffer, ID) == 0x000010, "Member 'FMangoTreasureBoxOffer::ID' has a wrong offset!");
static_assert(offsetof(FMangoTreasureBoxOffer, box_name) == 0x000018, "Member 'FMangoTreasureBoxOffer::box_name' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetStoreDocResponse
// 0x00C0 (0x00C0 - 0x0000)
struct FMangoGetStoreDocResponse final
{
public:
	TArray<struct FMangoPurchaseOffer>            Offer;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoNativeOffer>              Nativeoffer;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoFeaturedOffer>            Offer_feature_primary;                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoFeaturedOffer>            Offer_feature_secondary;                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoItem>                     Item;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoFreeRotationCharacter>    Item_character_rotation;                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoNews>                     Motd;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoPurchasableCharacter>     Purchasable_characters;                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassSeason>          blastpasses;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassTier>            blastpasstiers;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassReward>          blastpassrewards;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMangoFreePromotionalOffer>     Freepromotionaloffer;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetStoreDocResponse) == 0x000008, "Wrong alignment on FMangoGetStoreDocResponse");
static_assert(sizeof(FMangoGetStoreDocResponse) == 0x0000C0, "Wrong size on FMangoGetStoreDocResponse");
static_assert(offsetof(FMangoGetStoreDocResponse, Offer) == 0x000000, "Member 'FMangoGetStoreDocResponse::Offer' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Nativeoffer) == 0x000010, "Member 'FMangoGetStoreDocResponse::Nativeoffer' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Offer_feature_primary) == 0x000020, "Member 'FMangoGetStoreDocResponse::Offer_feature_primary' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Offer_feature_secondary) == 0x000030, "Member 'FMangoGetStoreDocResponse::Offer_feature_secondary' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Item) == 0x000040, "Member 'FMangoGetStoreDocResponse::Item' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Item_character_rotation) == 0x000050, "Member 'FMangoGetStoreDocResponse::Item_character_rotation' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Motd) == 0x000060, "Member 'FMangoGetStoreDocResponse::Motd' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Purchasable_characters) == 0x000070, "Member 'FMangoGetStoreDocResponse::Purchasable_characters' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, blastpasses) == 0x000080, "Member 'FMangoGetStoreDocResponse::blastpasses' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, blastpasstiers) == 0x000090, "Member 'FMangoGetStoreDocResponse::blastpasstiers' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, blastpassrewards) == 0x0000A0, "Member 'FMangoGetStoreDocResponse::blastpassrewards' has a wrong offset!");
static_assert(offsetof(FMangoGetStoreDocResponse, Freepromotionaloffer) == 0x0000B0, "Member 'FMangoGetStoreDocResponse::Freepromotionaloffer' has a wrong offset!");

// ScriptStruct MangoClient.MangoChestInventory
// 0x0018 (0x0018 - 0x0000)
struct FMangoChestInventory final
{
public:
	class FString                                 CMSChestID;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoChestInventory) == 0x000008, "Wrong alignment on FMangoChestInventory");
static_assert(sizeof(FMangoChestInventory) == 0x000018, "Wrong size on FMangoChestInventory");
static_assert(offsetof(FMangoChestInventory, CMSChestID) == 0x000000, "Member 'FMangoChestInventory::CMSChestID' has a wrong offset!");
static_assert(offsetof(FMangoChestInventory, Count) == 0x000010, "Member 'FMangoChestInventory::Count' has a wrong offset!");

// ScriptStruct MangoClient.MangoDuplicateItem
// 0x0018 (0x0018 - 0x0000)
struct FMangoDuplicateItem final
{
public:
	class FString                                 ItemID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemValue;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoDuplicateItem) == 0x000008, "Wrong alignment on FMangoDuplicateItem");
static_assert(sizeof(FMangoDuplicateItem) == 0x000018, "Wrong size on FMangoDuplicateItem");
static_assert(offsetof(FMangoDuplicateItem, ItemID) == 0x000000, "Member 'FMangoDuplicateItem::ItemID' has a wrong offset!");
static_assert(offsetof(FMangoDuplicateItem, ItemValue) == 0x000010, "Member 'FMangoDuplicateItem::ItemValue' has a wrong offset!");

// ScriptStruct MangoClient.MangoPromotionInventory
// 0x0010 (0x0010 - 0x0000)
struct FMangoPromotionInventory final
{
public:
	class FString                                 PromotionId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPromotionInventory) == 0x000008, "Wrong alignment on FMangoPromotionInventory");
static_assert(sizeof(FMangoPromotionInventory) == 0x000010, "Wrong size on FMangoPromotionInventory");
static_assert(offsetof(FMangoPromotionInventory, PromotionId) == 0x000000, "Member 'FMangoPromotionInventory::PromotionId' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassInventory
// 0x0010 (0x0010 - 0x0000)
struct FMangoBlastPassInventory final
{
public:
	class FString                                 CMSBlastpassID;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassInventory) == 0x000008, "Wrong alignment on FMangoBlastPassInventory");
static_assert(sizeof(FMangoBlastPassInventory) == 0x000010, "Wrong size on FMangoBlastPassInventory");
static_assert(offsetof(FMangoBlastPassInventory, CMSBlastpassID) == 0x000000, "Member 'FMangoBlastPassInventory::CMSBlastpassID' has a wrong offset!");

// ScriptStruct MangoClient.MangoInventory
// 0x0198 (0x0198 - 0x0000)
struct FMangoInventory final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RocketBucks;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RocketParts;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoChestInventory>           Chests;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OneTimeOffers;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoDuplicateItem>            DupeItems;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassInventory>       blastpasses;                                       // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoPromotionInventory>       PromotionsOwned;                                   // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            Characters;                                        // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            MegaBlastTrails;                                   // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            ReturnTrails;                                      // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            Skins;                                             // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemBorders;                                      // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemPatterns;                                     // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemShapes;                                       // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemStands;                                       // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemSymbols;                                      // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemVFXs;                                         // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            TotemCompanions;                                   // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            Artifacts;                                         // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            CoreArtifacts;                                     // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            SecondaryArtifacts;                                // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            UtilityArtifacts;                                  // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            CharacterArtifacts;                                // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            ChatEmote;                                         // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            PreGameEmote;                                      // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemInventory>            VictoryPose;                                       // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoInventory) == 0x000008, "Wrong alignment on FMangoInventory");
static_assert(sizeof(FMangoInventory) == 0x000198, "Wrong size on FMangoInventory");
static_assert(offsetof(FMangoInventory, PlayerId) == 0x000000, "Member 'FMangoInventory::PlayerId' has a wrong offset!");
static_assert(offsetof(FMangoInventory, RocketBucks) == 0x000010, "Member 'FMangoInventory::RocketBucks' has a wrong offset!");
static_assert(offsetof(FMangoInventory, RocketParts) == 0x000014, "Member 'FMangoInventory::RocketParts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, Chests) == 0x000018, "Member 'FMangoInventory::Chests' has a wrong offset!");
static_assert(offsetof(FMangoInventory, OneTimeOffers) == 0x000028, "Member 'FMangoInventory::OneTimeOffers' has a wrong offset!");
static_assert(offsetof(FMangoInventory, DupeItems) == 0x000038, "Member 'FMangoInventory::DupeItems' has a wrong offset!");
static_assert(offsetof(FMangoInventory, blastpasses) == 0x000048, "Member 'FMangoInventory::blastpasses' has a wrong offset!");
static_assert(offsetof(FMangoInventory, PromotionsOwned) == 0x000058, "Member 'FMangoInventory::PromotionsOwned' has a wrong offset!");
static_assert(offsetof(FMangoInventory, Characters) == 0x000068, "Member 'FMangoInventory::Characters' has a wrong offset!");
static_assert(offsetof(FMangoInventory, MegaBlastTrails) == 0x000078, "Member 'FMangoInventory::MegaBlastTrails' has a wrong offset!");
static_assert(offsetof(FMangoInventory, ReturnTrails) == 0x000088, "Member 'FMangoInventory::ReturnTrails' has a wrong offset!");
static_assert(offsetof(FMangoInventory, Skins) == 0x000098, "Member 'FMangoInventory::Skins' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemBorders) == 0x0000A8, "Member 'FMangoInventory::TotemBorders' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemPatterns) == 0x0000B8, "Member 'FMangoInventory::TotemPatterns' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemShapes) == 0x0000C8, "Member 'FMangoInventory::TotemShapes' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemStands) == 0x0000D8, "Member 'FMangoInventory::TotemStands' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemSymbols) == 0x0000E8, "Member 'FMangoInventory::TotemSymbols' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemVFXs) == 0x0000F8, "Member 'FMangoInventory::TotemVFXs' has a wrong offset!");
static_assert(offsetof(FMangoInventory, TotemCompanions) == 0x000108, "Member 'FMangoInventory::TotemCompanions' has a wrong offset!");
static_assert(offsetof(FMangoInventory, Artifacts) == 0x000118, "Member 'FMangoInventory::Artifacts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, CoreArtifacts) == 0x000128, "Member 'FMangoInventory::CoreArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, SecondaryArtifacts) == 0x000138, "Member 'FMangoInventory::SecondaryArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, UtilityArtifacts) == 0x000148, "Member 'FMangoInventory::UtilityArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, CharacterArtifacts) == 0x000158, "Member 'FMangoInventory::CharacterArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoInventory, ChatEmote) == 0x000168, "Member 'FMangoInventory::ChatEmote' has a wrong offset!");
static_assert(offsetof(FMangoInventory, PreGameEmote) == 0x000178, "Member 'FMangoInventory::PreGameEmote' has a wrong offset!");
static_assert(offsetof(FMangoInventory, VictoryPose) == 0x000188, "Member 'FMangoInventory::VictoryPose' has a wrong offset!");

// ScriptStruct MangoClient.MangoOrderResponse
// 0x01E8 (0x01E8 - 0x0000)
struct FMangoOrderResponse final
{
public:
	struct FMangoOrderDetails                     Order;                                             // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoInventory                        Inventory;                                         // 0x0050(0x0198)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoOrderResponse) == 0x000008, "Wrong alignment on FMangoOrderResponse");
static_assert(sizeof(FMangoOrderResponse) == 0x0001E8, "Wrong size on FMangoOrderResponse");
static_assert(offsetof(FMangoOrderResponse, Order) == 0x000000, "Member 'FMangoOrderResponse::Order' has a wrong offset!");
static_assert(offsetof(FMangoOrderResponse, Inventory) == 0x000050, "Member 'FMangoOrderResponse::Inventory' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetBulkInventoryResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoGetBulkInventoryResponse final
{
public:
	TArray<struct FMangoInventory>                Inventories;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetBulkInventoryResponse) == 0x000008, "Wrong alignment on FMangoGetBulkInventoryResponse");
static_assert(sizeof(FMangoGetBulkInventoryResponse) == 0x000010, "Wrong size on FMangoGetBulkInventoryResponse");
static_assert(offsetof(FMangoGetBulkInventoryResponse, Inventories) == 0x000000, "Member 'FMangoGetBulkInventoryResponse::Inventories' has a wrong offset!");

// ScriptStruct MangoClient.MangoConsumeInventoryResponse
// 0x01A0 (0x01A0 - 0x0000)
struct FMangoConsumeInventoryResponse final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMangoInventory                        Inventory;                                         // 0x0008(0x0198)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoConsumeInventoryResponse) == 0x000008, "Wrong alignment on FMangoConsumeInventoryResponse");
static_assert(sizeof(FMangoConsumeInventoryResponse) == 0x0001A0, "Wrong size on FMangoConsumeInventoryResponse");
static_assert(offsetof(FMangoConsumeInventoryResponse, Result) == 0x000000, "Member 'FMangoConsumeInventoryResponse::Result' has a wrong offset!");
static_assert(offsetof(FMangoConsumeInventoryResponse, Inventory) == 0x000008, "Member 'FMangoConsumeInventoryResponse::Inventory' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemFromChest
// 0x0038 (0x0038 - 0x0000)
struct FMangoItemFromChest final
{
public:
	class FString                                 Lookup_field;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item_name;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item_type;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parts_value;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoItemFromChest) == 0x000008, "Wrong alignment on FMangoItemFromChest");
static_assert(sizeof(FMangoItemFromChest) == 0x000038, "Wrong size on FMangoItemFromChest");
static_assert(offsetof(FMangoItemFromChest, Lookup_field) == 0x000000, "Member 'FMangoItemFromChest::Lookup_field' has a wrong offset!");
static_assert(offsetof(FMangoItemFromChest, Item_name) == 0x000010, "Member 'FMangoItemFromChest::Item_name' has a wrong offset!");
static_assert(offsetof(FMangoItemFromChest, Item_type) == 0x000020, "Member 'FMangoItemFromChest::Item_type' has a wrong offset!");
static_assert(offsetof(FMangoItemFromChest, Parts_value) == 0x000030, "Member 'FMangoItemFromChest::Parts_value' has a wrong offset!");

// ScriptStruct MangoClient.MangoConsumeChestResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoConsumeChestResponse final
{
public:
	TArray<struct FMangoItemFromChest>            Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoConsumeChestResponse) == 0x000008, "Wrong alignment on FMangoConsumeChestResponse");
static_assert(sizeof(FMangoConsumeChestResponse) == 0x000010, "Wrong size on FMangoConsumeChestResponse");
static_assert(offsetof(FMangoConsumeChestResponse, Items) == 0x000000, "Member 'FMangoConsumeChestResponse::Items' has a wrong offset!");

// ScriptStruct MangoClient.MangoMappedInventory
// 0x0658 (0x0658 - 0x0000)
struct FMangoMappedInventory final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RocketBucks;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RocketParts;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoChestInventory>           Chests;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         OneTimeOffers;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoDuplicateItem>            DupeItems;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoBlastPassInventory>       blastpasses;                                       // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoPromotionInventory>       PromotionsOwned;                                   // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> Characters;                                        // 0x0068(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> MegaBlastTrails;                                   // 0x00B8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> ReturnTrails;                                      // 0x0108(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> Skins;                                             // 0x0158(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemBorders;                                      // 0x01A8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemPatterns;                                     // 0x01F8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemShapes;                                       // 0x0248(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemStands;                                       // 0x0298(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemSymbols;                                      // 0x02E8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemVFXs;                                         // 0x0338(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> TotemCompanions;                                   // 0x0388(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> Artifacts;                                         // 0x03D8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> CoreArtifacts;                                     // 0x0428(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> SecondaryArtifacts;                                // 0x0478(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> UtilityArtifacts;                                  // 0x04C8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> CharacterArtifacts;                                // 0x0518(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> ChatEmote;                                         // 0x0568(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> PreGameEmote;                                      // 0x05B8(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoItemInventory> VictoryPose;                                       // 0x0608(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMappedInventory) == 0x000008, "Wrong alignment on FMangoMappedInventory");
static_assert(sizeof(FMangoMappedInventory) == 0x000658, "Wrong size on FMangoMappedInventory");
static_assert(offsetof(FMangoMappedInventory, PlayerId) == 0x000000, "Member 'FMangoMappedInventory::PlayerId' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, RocketBucks) == 0x000010, "Member 'FMangoMappedInventory::RocketBucks' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, RocketParts) == 0x000014, "Member 'FMangoMappedInventory::RocketParts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, Chests) == 0x000018, "Member 'FMangoMappedInventory::Chests' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, OneTimeOffers) == 0x000028, "Member 'FMangoMappedInventory::OneTimeOffers' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, DupeItems) == 0x000038, "Member 'FMangoMappedInventory::DupeItems' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, blastpasses) == 0x000048, "Member 'FMangoMappedInventory::blastpasses' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, PromotionsOwned) == 0x000058, "Member 'FMangoMappedInventory::PromotionsOwned' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, Characters) == 0x000068, "Member 'FMangoMappedInventory::Characters' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, MegaBlastTrails) == 0x0000B8, "Member 'FMangoMappedInventory::MegaBlastTrails' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, ReturnTrails) == 0x000108, "Member 'FMangoMappedInventory::ReturnTrails' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, Skins) == 0x000158, "Member 'FMangoMappedInventory::Skins' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemBorders) == 0x0001A8, "Member 'FMangoMappedInventory::TotemBorders' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemPatterns) == 0x0001F8, "Member 'FMangoMappedInventory::TotemPatterns' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemShapes) == 0x000248, "Member 'FMangoMappedInventory::TotemShapes' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemStands) == 0x000298, "Member 'FMangoMappedInventory::TotemStands' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemSymbols) == 0x0002E8, "Member 'FMangoMappedInventory::TotemSymbols' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemVFXs) == 0x000338, "Member 'FMangoMappedInventory::TotemVFXs' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, TotemCompanions) == 0x000388, "Member 'FMangoMappedInventory::TotemCompanions' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, Artifacts) == 0x0003D8, "Member 'FMangoMappedInventory::Artifacts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, CoreArtifacts) == 0x000428, "Member 'FMangoMappedInventory::CoreArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, SecondaryArtifacts) == 0x000478, "Member 'FMangoMappedInventory::SecondaryArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, UtilityArtifacts) == 0x0004C8, "Member 'FMangoMappedInventory::UtilityArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, CharacterArtifacts) == 0x000518, "Member 'FMangoMappedInventory::CharacterArtifacts' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, ChatEmote) == 0x000568, "Member 'FMangoMappedInventory::ChatEmote' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, PreGameEmote) == 0x0005B8, "Member 'FMangoMappedInventory::PreGameEmote' has a wrong offset!");
static_assert(offsetof(FMangoMappedInventory, VictoryPose) == 0x000608, "Member 'FMangoMappedInventory::VictoryPose' has a wrong offset!");

// ScriptStruct MangoClient.MangoBlastPassTierPurchaseRequest
// 0x0004 (0x0004 - 0x0000)
struct FMangoBlastPassTierPurchaseRequest final
{
public:
	int32                                         ExpectedCost;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBlastPassTierPurchaseRequest) == 0x000004, "Wrong alignment on FMangoBlastPassTierPurchaseRequest");
static_assert(sizeof(FMangoBlastPassTierPurchaseRequest) == 0x000004, "Wrong size on FMangoBlastPassTierPurchaseRequest");
static_assert(offsetof(FMangoBlastPassTierPurchaseRequest, ExpectedCost) == 0x000000, "Member 'FMangoBlastPassTierPurchaseRequest::ExpectedCost' has a wrong offset!");

// ScriptStruct MangoClient.MangoArtifactInventory
// 0x0010 (0x0010 - 0x0000)
struct FMangoArtifactInventory final
{
public:
	class FString                                 ArtifactId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoArtifactInventory) == 0x000008, "Wrong alignment on FMangoArtifactInventory");
static_assert(sizeof(FMangoArtifactInventory) == 0x000010, "Wrong size on FMangoArtifactInventory");
static_assert(offsetof(FMangoArtifactInventory, ArtifactId) == 0x000000, "Member 'FMangoArtifactInventory::ArtifactId' has a wrong offset!");

// ScriptStruct MangoClient.MangoOnboardingPayload
// 0x0008 (0x0008 - 0x0000)
struct FMangoOnboardingPayload final
{
public:
	int32                                         OnboardingState;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdvertState;                                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoOnboardingPayload) == 0x000004, "Wrong alignment on FMangoOnboardingPayload");
static_assert(sizeof(FMangoOnboardingPayload) == 0x000008, "Wrong size on FMangoOnboardingPayload");
static_assert(offsetof(FMangoOnboardingPayload, OnboardingState) == 0x000000, "Member 'FMangoOnboardingPayload::OnboardingState' has a wrong offset!");
static_assert(offsetof(FMangoOnboardingPayload, AdvertState) == 0x000004, "Member 'FMangoOnboardingPayload::AdvertState' has a wrong offset!");

// ScriptStruct MangoClient.MangoMatchResult
// 0x0020 (0x0020 - 0x0000)
struct FMangoMatchResult final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchEndJsonData;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMatchResult) == 0x000008, "Wrong alignment on FMangoMatchResult");
static_assert(sizeof(FMangoMatchResult) == 0x000020, "Wrong size on FMangoMatchResult");
static_assert(offsetof(FMangoMatchResult, MatchID) == 0x000000, "Member 'FMangoMatchResult::MatchID' has a wrong offset!");
static_assert(offsetof(FMangoMatchResult, MatchEndJsonData) == 0x000010, "Member 'FMangoMatchResult::MatchEndJsonData' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetMatchHistoryBulkResponse
// 0x0050 (0x0050 - 0x0000)
struct FMangoGetMatchHistoryBulkResponse final
{
public:
	TMap<class FString, struct FMangoMatchResult> Player_matches;                                    // 0x0000(0x0050)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetMatchHistoryBulkResponse) == 0x000008, "Wrong alignment on FMangoGetMatchHistoryBulkResponse");
static_assert(sizeof(FMangoGetMatchHistoryBulkResponse) == 0x000050, "Wrong size on FMangoGetMatchHistoryBulkResponse");
static_assert(offsetof(FMangoGetMatchHistoryBulkResponse, Player_matches) == 0x000000, "Member 'FMangoGetMatchHistoryBulkResponse::Player_matches' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetMatchHistoryResponse
// 0x0020 (0x0020 - 0x0000)
struct FMangoGetMatchHistoryResponse final
{
public:
	struct FMangoMatchResult                      Match_history;                                     // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetMatchHistoryResponse) == 0x000008, "Wrong alignment on FMangoGetMatchHistoryResponse");
static_assert(sizeof(FMangoGetMatchHistoryResponse) == 0x000020, "Wrong size on FMangoGetMatchHistoryResponse");
static_assert(offsetof(FMangoGetMatchHistoryResponse, Match_history) == 0x000000, "Member 'FMangoGetMatchHistoryResponse::Match_history' has a wrong offset!");

// ScriptStruct MangoClient.MangoGetProfileBulkResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoGetProfileBulkResponse final
{
public:
	TArray<struct FMangoProfile>                  Profiles;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoGetProfileBulkResponse) == 0x000008, "Wrong alignment on FMangoGetProfileBulkResponse");
static_assert(sizeof(FMangoGetProfileBulkResponse) == 0x000010, "Wrong size on FMangoGetProfileBulkResponse");
static_assert(offsetof(FMangoGetProfileBulkResponse, Profiles) == 0x000000, "Member 'FMangoGetProfileBulkResponse::Profiles' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquipCharacterRequest
// 0x0050 (0x0050 - 0x0000)
struct FMangoEquipCharacterRequest final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquipmentSet>             EquipmentSets;                                     // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    ChatEmotes;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquippedEmoteWithSlot>    PreGameEmotes;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMangoEquippedEmote                    VictoryPose;                                       // 0x0040(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoEquipCharacterRequest) == 0x000008, "Wrong alignment on FMangoEquipCharacterRequest");
static_assert(sizeof(FMangoEquipCharacterRequest) == 0x000050, "Wrong size on FMangoEquipCharacterRequest");
static_assert(offsetof(FMangoEquipCharacterRequest, CharacterId) == 0x000000, "Member 'FMangoEquipCharacterRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FMangoEquipCharacterRequest, EquipmentSets) == 0x000010, "Member 'FMangoEquipCharacterRequest::EquipmentSets' has a wrong offset!");
static_assert(offsetof(FMangoEquipCharacterRequest, ChatEmotes) == 0x000020, "Member 'FMangoEquipCharacterRequest::ChatEmotes' has a wrong offset!");
static_assert(offsetof(FMangoEquipCharacterRequest, PreGameEmotes) == 0x000030, "Member 'FMangoEquipCharacterRequest::PreGameEmotes' has a wrong offset!");
static_assert(offsetof(FMangoEquipCharacterRequest, VictoryPose) == 0x000040, "Member 'FMangoEquipCharacterRequest::VictoryPose' has a wrong offset!");

// ScriptStruct MangoClient.MangoEquipPayload
// 0x0020 (0x0020 - 0x0000)
struct FMangoEquipPayload final
{
public:
	TArray<struct FMangoEquipCharacterRequest>    CharacterEquip;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoEquipItem>                PlayerEquip;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoEquipPayload) == 0x000008, "Wrong alignment on FMangoEquipPayload");
static_assert(sizeof(FMangoEquipPayload) == 0x000020, "Wrong size on FMangoEquipPayload");
static_assert(offsetof(FMangoEquipPayload, CharacterEquip) == 0x000000, "Member 'FMangoEquipPayload::CharacterEquip' has a wrong offset!");
static_assert(offsetof(FMangoEquipPayload, PlayerEquip) == 0x000010, "Member 'FMangoEquipPayload::PlayerEquip' has a wrong offset!");

// ScriptStruct MangoClient.MangoArtifactUnlockResult
// 0x0050 (0x0050 - 0x0000)
struct FMangoArtifactUnlockResult final
{
public:
	int32                                         XpStart;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpEnd;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelStart;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelEnd;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressStart;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressEnd;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoRewards                          Rewards;                                           // 0x0018(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoArtifactUnlockResult) == 0x000008, "Wrong alignment on FMangoArtifactUnlockResult");
static_assert(sizeof(FMangoArtifactUnlockResult) == 0x000050, "Wrong size on FMangoArtifactUnlockResult");
static_assert(offsetof(FMangoArtifactUnlockResult, XpStart) == 0x000000, "Member 'FMangoArtifactUnlockResult::XpStart' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, XpEnd) == 0x000004, "Member 'FMangoArtifactUnlockResult::XpEnd' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, LevelStart) == 0x000008, "Member 'FMangoArtifactUnlockResult::LevelStart' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, LevelEnd) == 0x00000C, "Member 'FMangoArtifactUnlockResult::LevelEnd' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, ProgressStart) == 0x000010, "Member 'FMangoArtifactUnlockResult::ProgressStart' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, ProgressEnd) == 0x000014, "Member 'FMangoArtifactUnlockResult::ProgressEnd' has a wrong offset!");
static_assert(offsetof(FMangoArtifactUnlockResult, Rewards) == 0x000018, "Member 'FMangoArtifactUnlockResult::Rewards' has a wrong offset!");

// ScriptStruct MangoClient.MangoMatchCharacterProgression
// 0x0018 (0x0018 - 0x0000)
struct FMangoMatchCharacterProgression final
{
public:
	int32                                         XpStart;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpEnd;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelStart;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelEnd;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressStart;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressEnd;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMatchCharacterProgression) == 0x000004, "Wrong alignment on FMangoMatchCharacterProgression");
static_assert(sizeof(FMangoMatchCharacterProgression) == 0x000018, "Wrong size on FMangoMatchCharacterProgression");
static_assert(offsetof(FMangoMatchCharacterProgression, XpStart) == 0x000000, "Member 'FMangoMatchCharacterProgression::XpStart' has a wrong offset!");
static_assert(offsetof(FMangoMatchCharacterProgression, XpEnd) == 0x000004, "Member 'FMangoMatchCharacterProgression::XpEnd' has a wrong offset!");
static_assert(offsetof(FMangoMatchCharacterProgression, LevelStart) == 0x000008, "Member 'FMangoMatchCharacterProgression::LevelStart' has a wrong offset!");
static_assert(offsetof(FMangoMatchCharacterProgression, LevelEnd) == 0x00000C, "Member 'FMangoMatchCharacterProgression::LevelEnd' has a wrong offset!");
static_assert(offsetof(FMangoMatchCharacterProgression, ProgressStart) == 0x000010, "Member 'FMangoMatchCharacterProgression::ProgressStart' has a wrong offset!");
static_assert(offsetof(FMangoMatchCharacterProgression, ProgressEnd) == 0x000014, "Member 'FMangoMatchCharacterProgression::ProgressEnd' has a wrong offset!");

// ScriptStruct MangoClient.MangoCharacterResult
// 0x0060 (0x0060 - 0x0000)
struct FMangoCharacterResult final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoMatchCharacterProgression        CharacterProgression;                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMangoRewards                          Rewards;                                           // 0x0028(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoCharacterResult) == 0x000008, "Wrong alignment on FMangoCharacterResult");
static_assert(sizeof(FMangoCharacterResult) == 0x000060, "Wrong size on FMangoCharacterResult");
static_assert(offsetof(FMangoCharacterResult, CharacterId) == 0x000000, "Member 'FMangoCharacterResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FMangoCharacterResult, CharacterProgression) == 0x000010, "Member 'FMangoCharacterResult::CharacterProgression' has a wrong offset!");
static_assert(offsetof(FMangoCharacterResult, Rewards) == 0x000028, "Member 'FMangoCharacterResult::Rewards' has a wrong offset!");

// ScriptStruct MangoClient.MangoItemResult
// 0x0030 (0x0030 - 0x0000)
struct FMangoItemResult final
{
public:
	class FString                                 Item_id;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMangoItemType                                Item_type;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Xp_start;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp_end;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_start;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_end;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress_start;                                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress_end;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoItemResult) == 0x000008, "Wrong alignment on FMangoItemResult");
static_assert(sizeof(FMangoItemResult) == 0x000030, "Wrong size on FMangoItemResult");
static_assert(offsetof(FMangoItemResult, Item_id) == 0x000000, "Member 'FMangoItemResult::Item_id' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Item_type) == 0x000010, "Member 'FMangoItemResult::Item_type' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Xp_start) == 0x000014, "Member 'FMangoItemResult::Xp_start' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Xp_end) == 0x000018, "Member 'FMangoItemResult::Xp_end' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Level_start) == 0x00001C, "Member 'FMangoItemResult::Level_start' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Level_end) == 0x000020, "Member 'FMangoItemResult::Level_end' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Progress_start) == 0x000024, "Member 'FMangoItemResult::Progress_start' has a wrong offset!");
static_assert(offsetof(FMangoItemResult, Progress_end) == 0x000028, "Member 'FMangoItemResult::Progress_end' has a wrong offset!");

// ScriptStruct MangoClient.MangoBattlePassProgress
// 0x0018 (0x0018 - 0x0000)
struct FMangoBattlePassProgress final
{
public:
	int32                                         XpStart;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpEnd;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelStart;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelEnd;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressStart;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressEnd;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBattlePassProgress) == 0x000004, "Wrong alignment on FMangoBattlePassProgress");
static_assert(sizeof(FMangoBattlePassProgress) == 0x000018, "Wrong size on FMangoBattlePassProgress");
static_assert(offsetof(FMangoBattlePassProgress, XpStart) == 0x000000, "Member 'FMangoBattlePassProgress::XpStart' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassProgress, XpEnd) == 0x000004, "Member 'FMangoBattlePassProgress::XpEnd' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassProgress, LevelStart) == 0x000008, "Member 'FMangoBattlePassProgress::LevelStart' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassProgress, LevelEnd) == 0x00000C, "Member 'FMangoBattlePassProgress::LevelEnd' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassProgress, ProgressStart) == 0x000010, "Member 'FMangoBattlePassProgress::ProgressStart' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassProgress, ProgressEnd) == 0x000014, "Member 'FMangoBattlePassProgress::ProgressEnd' has a wrong offset!");

// ScriptStruct MangoClient.MangoBattlePassResult
// 0x0068 (0x0068 - 0x0000)
struct FMangoBattlePassResult final
{
public:
	class FString                                 BlastPassId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoBattlePassProgress               BpProgression;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMangoRewards                          Rewards;                                           // 0x0028(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         XpBonus;                                           // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyXpBonus;                                      // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoBattlePassResult) == 0x000008, "Wrong alignment on FMangoBattlePassResult");
static_assert(sizeof(FMangoBattlePassResult) == 0x000068, "Wrong size on FMangoBattlePassResult");
static_assert(offsetof(FMangoBattlePassResult, BlastPassId) == 0x000000, "Member 'FMangoBattlePassResult::BlastPassId' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassResult, BpProgression) == 0x000010, "Member 'FMangoBattlePassResult::BpProgression' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassResult, Rewards) == 0x000028, "Member 'FMangoBattlePassResult::Rewards' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassResult, XpBonus) == 0x000060, "Member 'FMangoBattlePassResult::XpBonus' has a wrong offset!");
static_assert(offsetof(FMangoBattlePassResult, PartyXpBonus) == 0x000064, "Member 'FMangoBattlePassResult::PartyXpBonus' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuestsResult
// 0x0030 (0x0030 - 0x0000)
struct FMangoQuestsResult final
{
public:
	TArray<struct FMangoQuestDescription>         Before;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoQuestDescription>         After;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMangoQuestDescription>         Completed;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuestsResult) == 0x000008, "Wrong alignment on FMangoQuestsResult");
static_assert(sizeof(FMangoQuestsResult) == 0x000030, "Wrong size on FMangoQuestsResult");
static_assert(offsetof(FMangoQuestsResult, Before) == 0x000000, "Member 'FMangoQuestsResult::Before' has a wrong offset!");
static_assert(offsetof(FMangoQuestsResult, After) == 0x000010, "Member 'FMangoQuestsResult::After' has a wrong offset!");
static_assert(offsetof(FMangoQuestsResult, Completed) == 0x000020, "Member 'FMangoQuestsResult::Completed' has a wrong offset!");

// ScriptStruct MangoClient.MangoPlaylistResult
// 0x0020 (0x0020 - 0x0000)
struct FMangoPlaylistResult final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillStart;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillEnd;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankStart;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankEnd;                                           // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPlaylistResult) == 0x000008, "Wrong alignment on FMangoPlaylistResult");
static_assert(sizeof(FMangoPlaylistResult) == 0x000020, "Wrong size on FMangoPlaylistResult");
static_assert(offsetof(FMangoPlaylistResult, PlaylistId) == 0x000000, "Member 'FMangoPlaylistResult::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMangoPlaylistResult, SkillStart) == 0x000010, "Member 'FMangoPlaylistResult::SkillStart' has a wrong offset!");
static_assert(offsetof(FMangoPlaylistResult, SkillEnd) == 0x000014, "Member 'FMangoPlaylistResult::SkillEnd' has a wrong offset!");
static_assert(offsetof(FMangoPlaylistResult, RankStart) == 0x000018, "Member 'FMangoPlaylistResult::RankStart' has a wrong offset!");
static_assert(offsetof(FMangoPlaylistResult, RankEnd) == 0x00001C, "Member 'FMangoPlaylistResult::RankEnd' has a wrong offset!");

// ScriptStruct MangoClient.MangoXPBonusType
// 0x0008 (0x0008 - 0x0000)
struct FMangoXPBonusType final
{
public:
	int32                                         Metric;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpGained;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoXPBonusType) == 0x000004, "Wrong alignment on FMangoXPBonusType");
static_assert(sizeof(FMangoXPBonusType) == 0x000008, "Wrong size on FMangoXPBonusType");
static_assert(offsetof(FMangoXPBonusType, Metric) == 0x000000, "Member 'FMangoXPBonusType::Metric' has a wrong offset!");
static_assert(offsetof(FMangoXPBonusType, XpGained) == 0x000004, "Member 'FMangoXPBonusType::XpGained' has a wrong offset!");

// ScriptStruct MangoClient.MangoXPBreakdown
// 0x00A8 (0x00A8 - 0x0000)
struct FMangoXPBreakdown final
{
public:
	int32                                         Base;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FMangoXPBonusType> Personal;                                          // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoXPBonusType> Team;                                              // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoXPBreakdown) == 0x000008, "Wrong alignment on FMangoXPBreakdown");
static_assert(sizeof(FMangoXPBreakdown) == 0x0000A8, "Wrong size on FMangoXPBreakdown");
static_assert(offsetof(FMangoXPBreakdown, Base) == 0x000000, "Member 'FMangoXPBreakdown::Base' has a wrong offset!");
static_assert(offsetof(FMangoXPBreakdown, Personal) == 0x000008, "Member 'FMangoXPBreakdown::Personal' has a wrong offset!");
static_assert(offsetof(FMangoXPBreakdown, Team) == 0x000058, "Member 'FMangoXPBreakdown::Team' has a wrong offset!");

// ScriptStruct MangoClient.MangoPlayerReport
// 0x0268 (0x0268 - 0x0000)
struct FMangoPlayerReport final
{
public:
	class FString                                 Player_id;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMangoArtifactUnlockResult             Artifact_unlock_results;                           // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FMangoItemResult>               Item_results;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMangoCharacterResult                  Character_results;                                 // 0x0070(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoBattlePassResult                 blastpass_results;                                 // 0x00D0(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoQuestsResult                     Quest_results;                                     // 0x0138(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoPlaylistResult                   Playlist_results;                                  // 0x0168(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoRewards                          Global_rewards;                                    // 0x0188(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMangoXPBreakdown                      Xp_breakdown;                                      // 0x01C0(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPlayerReport) == 0x000008, "Wrong alignment on FMangoPlayerReport");
static_assert(sizeof(FMangoPlayerReport) == 0x000268, "Wrong size on FMangoPlayerReport");
static_assert(offsetof(FMangoPlayerReport, Player_id) == 0x000000, "Member 'FMangoPlayerReport::Player_id' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Artifact_unlock_results) == 0x000010, "Member 'FMangoPlayerReport::Artifact_unlock_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Item_results) == 0x000060, "Member 'FMangoPlayerReport::Item_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Character_results) == 0x000070, "Member 'FMangoPlayerReport::Character_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, blastpass_results) == 0x0000D0, "Member 'FMangoPlayerReport::blastpass_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Quest_results) == 0x000138, "Member 'FMangoPlayerReport::Quest_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Playlist_results) == 0x000168, "Member 'FMangoPlayerReport::Playlist_results' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Global_rewards) == 0x000188, "Member 'FMangoPlayerReport::Global_rewards' has a wrong offset!");
static_assert(offsetof(FMangoPlayerReport, Xp_breakdown) == 0x0001C0, "Member 'FMangoPlayerReport::Xp_breakdown' has a wrong offset!");

// ScriptStruct MangoClient.MangoMatchResultResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoMatchResultResponse final
{
public:
	TArray<struct FMangoPlayerReport>             Player_reports;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoMatchResultResponse) == 0x000008, "Wrong alignment on FMangoMatchResultResponse");
static_assert(sizeof(FMangoMatchResultResponse) == 0x000010, "Wrong size on FMangoMatchResultResponse");
static_assert(offsetof(FMangoMatchResultResponse, Player_reports) == 0x000000, "Member 'FMangoMatchResultResponse::Player_reports' has a wrong offset!");

// ScriptStruct MangoClient.MangoOnGetQuestsResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoOnGetQuestsResponse final
{
public:
	TArray<struct FMangoQuestDescription>         Quests;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoOnGetQuestsResponse) == 0x000008, "Wrong alignment on FMangoOnGetQuestsResponse");
static_assert(sizeof(FMangoOnGetQuestsResponse) == 0x000010, "Wrong size on FMangoOnGetQuestsResponse");
static_assert(offsetof(FMangoOnGetQuestsResponse, Quests) == 0x000000, "Member 'FMangoOnGetQuestsResponse::Quests' has a wrong offset!");

// ScriptStruct MangoClient.MangoPlayerQuestMatchResult
// 0x0010 (0x0010 - 0x0000)
struct FMangoPlayerQuestMatchResult final
{
public:
	TArray<struct FMangoQuestDescription>         Quests;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoPlayerQuestMatchResult) == 0x000008, "Wrong alignment on FMangoPlayerQuestMatchResult");
static_assert(sizeof(FMangoPlayerQuestMatchResult) == 0x000010, "Wrong size on FMangoPlayerQuestMatchResult");
static_assert(offsetof(FMangoPlayerQuestMatchResult, Quests) == 0x000000, "Member 'FMangoPlayerQuestMatchResult::Quests' has a wrong offset!");

// ScriptStruct MangoClient.MangoQuestMatchResult
// 0x00B0 (0x00B0 - 0x0000)
struct FMangoQuestMatchResult final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoPlayerQuestMatchResult> Before;                                            // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMangoPlayerQuestMatchResult> After;                                             // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoQuestMatchResult) == 0x000008, "Wrong alignment on FMangoQuestMatchResult");
static_assert(sizeof(FMangoQuestMatchResult) == 0x0000B0, "Wrong size on FMangoQuestMatchResult");
static_assert(offsetof(FMangoQuestMatchResult, MatchID) == 0x000000, "Member 'FMangoQuestMatchResult::MatchID' has a wrong offset!");
static_assert(offsetof(FMangoQuestMatchResult, Before) == 0x000010, "Member 'FMangoQuestMatchResult::Before' has a wrong offset!");
static_assert(offsetof(FMangoQuestMatchResult, After) == 0x000060, "Member 'FMangoQuestMatchResult::After' has a wrong offset!");

// ScriptStruct MangoClient.MangoSessionQuitRequest
// 0x0050 (0x0050 - 0x0000)
struct FMangoSessionQuitRequest final
{
public:
	class FString                                 MangoId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlaylistId;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MatchID;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersAtStart;                                 // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersRemaining;                               // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchSecondsElapsed;                               // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanReason;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoSessionQuitRequest) == 0x000008, "Wrong alignment on FMangoSessionQuitRequest");
static_assert(sizeof(FMangoSessionQuitRequest) == 0x000050, "Wrong size on FMangoSessionQuitRequest");
static_assert(offsetof(FMangoSessionQuitRequest, MangoId) == 0x000000, "Member 'FMangoSessionQuitRequest::MangoId' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, PlaylistId) == 0x000010, "Member 'FMangoSessionQuitRequest::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, MatchID) == 0x000020, "Member 'FMangoSessionQuitRequest::MatchID' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, NumPlayersAtStart) == 0x000030, "Member 'FMangoSessionQuitRequest::NumPlayersAtStart' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, NumPlayersRemaining) == 0x000034, "Member 'FMangoSessionQuitRequest::NumPlayersRemaining' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, MatchSecondsElapsed) == 0x000038, "Member 'FMangoSessionQuitRequest::MatchSecondsElapsed' has a wrong offset!");
static_assert(offsetof(FMangoSessionQuitRequest, BanReason) == 0x000040, "Member 'FMangoSessionQuitRequest::BanReason' has a wrong offset!");

// ScriptStruct MangoClient.MangoCheckLoginQuestResponse
// 0x0020 (0x0020 - 0x0000)
struct FMangoCheckLoginQuestResponse final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Goal;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Updated;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoCheckLoginQuestResponse) == 0x000008, "Wrong alignment on FMangoCheckLoginQuestResponse");
static_assert(sizeof(FMangoCheckLoginQuestResponse) == 0x000020, "Wrong size on FMangoCheckLoginQuestResponse");
static_assert(offsetof(FMangoCheckLoginQuestResponse, QuestId) == 0x000000, "Member 'FMangoCheckLoginQuestResponse::QuestId' has a wrong offset!");
static_assert(offsetof(FMangoCheckLoginQuestResponse, Progress) == 0x000010, "Member 'FMangoCheckLoginQuestResponse::Progress' has a wrong offset!");
static_assert(offsetof(FMangoCheckLoginQuestResponse, Goal) == 0x000014, "Member 'FMangoCheckLoginQuestResponse::Goal' has a wrong offset!");
static_assert(offsetof(FMangoCheckLoginQuestResponse, Updated) == 0x000018, "Member 'FMangoCheckLoginQuestResponse::Updated' has a wrong offset!");

// ScriptStruct MangoClient.MangoSetLoginQuestRewardResponse
// 0x0018 (0x0018 - 0x0000)
struct FMangoSetLoginQuestRewardResponse final
{
public:
	TArray<struct FMangoQuestDescription>         Quests;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   GrantedRewardId;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoSetLoginQuestRewardResponse) == 0x000008, "Wrong alignment on FMangoSetLoginQuestRewardResponse");
static_assert(sizeof(FMangoSetLoginQuestRewardResponse) == 0x000018, "Wrong size on FMangoSetLoginQuestRewardResponse");
static_assert(offsetof(FMangoSetLoginQuestRewardResponse, Quests) == 0x000000, "Member 'FMangoSetLoginQuestRewardResponse::Quests' has a wrong offset!");
static_assert(offsetof(FMangoSetLoginQuestRewardResponse, GrantedRewardId) == 0x000010, "Member 'FMangoSetLoginQuestRewardResponse::GrantedRewardId' has a wrong offset!");

// ScriptStruct MangoClient.MangoClaimQuestRewardResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoClaimQuestRewardResponse final
{
public:
	TArray<struct FMangoQuestDescription>         Quests;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoClaimQuestRewardResponse) == 0x000008, "Wrong alignment on FMangoClaimQuestRewardResponse");
static_assert(sizeof(FMangoClaimQuestRewardResponse) == 0x000010, "Wrong size on FMangoClaimQuestRewardResponse");
static_assert(offsetof(FMangoClaimQuestRewardResponse, Quests) == 0x000000, "Member 'FMangoClaimQuestRewardResponse::Quests' has a wrong offset!");

// ScriptStruct MangoClient.MangoDismissQuestResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoDismissQuestResponse final
{
public:
	TArray<struct FMangoQuestDescription>         Quests;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoDismissQuestResponse) == 0x000008, "Wrong alignment on FMangoDismissQuestResponse");
static_assert(sizeof(FMangoDismissQuestResponse) == 0x000010, "Wrong size on FMangoDismissQuestResponse");
static_assert(offsetof(FMangoDismissQuestResponse, Quests) == 0x000000, "Member 'FMangoDismissQuestResponse::Quests' has a wrong offset!");

// ScriptStruct MangoClient.MangoReportPlayerRequest
// 0x0030 (0x0030 - 0x0000)
struct FMangoReportPlayerRequest final
{
public:
	class FString                                 Reported_player_id;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reported_player_name;                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Report_reason;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoReportPlayerRequest) == 0x000008, "Wrong alignment on FMangoReportPlayerRequest");
static_assert(sizeof(FMangoReportPlayerRequest) == 0x000030, "Wrong size on FMangoReportPlayerRequest");
static_assert(offsetof(FMangoReportPlayerRequest, Reported_player_id) == 0x000000, "Member 'FMangoReportPlayerRequest::Reported_player_id' has a wrong offset!");
static_assert(offsetof(FMangoReportPlayerRequest, Reported_player_name) == 0x000010, "Member 'FMangoReportPlayerRequest::Reported_player_name' has a wrong offset!");
static_assert(offsetof(FMangoReportPlayerRequest, Report_reason) == 0x000020, "Member 'FMangoReportPlayerRequest::Report_reason' has a wrong offset!");

// ScriptStruct MangoClient.MangoRelayVivoxTokenResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoRelayVivoxTokenResponse final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRelayVivoxTokenResponse) == 0x000008, "Wrong alignment on FMangoRelayVivoxTokenResponse");
static_assert(sizeof(FMangoRelayVivoxTokenResponse) == 0x000010, "Wrong size on FMangoRelayVivoxTokenResponse");
static_assert(offsetof(FMangoRelayVivoxTokenResponse, Token) == 0x000000, "Member 'FMangoRelayVivoxTokenResponse::Token' has a wrong offset!");

// ScriptStruct MangoClient.MangoRelayVivoxTokenRequest
// 0x0020 (0x0020 - 0x0000)
struct FMangoRelayVivoxTokenRequest final
{
public:
	class FString                                 Action;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRelayVivoxTokenRequest) == 0x000008, "Wrong alignment on FMangoRelayVivoxTokenRequest");
static_assert(sizeof(FMangoRelayVivoxTokenRequest) == 0x000020, "Wrong size on FMangoRelayVivoxTokenRequest");
static_assert(offsetof(FMangoRelayVivoxTokenRequest, Action) == 0x000000, "Member 'FMangoRelayVivoxTokenRequest::Action' has a wrong offset!");
static_assert(offsetof(FMangoRelayVivoxTokenRequest, ChannelName) == 0x000010, "Member 'FMangoRelayVivoxTokenRequest::ChannelName' has a wrong offset!");

// ScriptStruct MangoClient.MangoRelayRemoveMembersFromGameSessionRequest
// 0x0030 (0x0030 - 0x0000)
struct FMangoRelayRemoveMembersFromGameSessionRequest final
{
public:
	TArray<class FString>                         MemberXuids;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTemplate;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRelayRemoveMembersFromGameSessionRequest) == 0x000008, "Wrong alignment on FMangoRelayRemoveMembersFromGameSessionRequest");
static_assert(sizeof(FMangoRelayRemoveMembersFromGameSessionRequest) == 0x000030, "Wrong size on FMangoRelayRemoveMembersFromGameSessionRequest");
static_assert(offsetof(FMangoRelayRemoveMembersFromGameSessionRequest, MemberXuids) == 0x000000, "Member 'FMangoRelayRemoveMembersFromGameSessionRequest::MemberXuids' has a wrong offset!");
static_assert(offsetof(FMangoRelayRemoveMembersFromGameSessionRequest, SessionName) == 0x000010, "Member 'FMangoRelayRemoveMembersFromGameSessionRequest::SessionName' has a wrong offset!");
static_assert(offsetof(FMangoRelayRemoveMembersFromGameSessionRequest, SessionTemplate) == 0x000020, "Member 'FMangoRelayRemoveMembersFromGameSessionRequest::SessionTemplate' has a wrong offset!");

// ScriptStruct MangoClient.MangoRelayCreateOrUpdateGameSessionResponse
// 0x0010 (0x0010 - 0x0000)
struct FMangoRelayCreateOrUpdateGameSessionResponse final
{
public:
	class FString                                 SessionName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMangoRelayCreateOrUpdateGameSessionResponse) == 0x000008, "Wrong alignment on FMangoRelayCreateOrUpdateGameSessionResponse");
static_assert(sizeof(FMangoRelayCreateOrUpdateGameSessionResponse) == 0x000010, "Wrong size on FMangoRelayCreateOrUpdateGameSessionResponse");
static_assert(offsetof(FMangoRelayCreateOrUpdateGameSessionResponse, SessionName) == 0x000000, "Member 'FMangoRelayCreateOrUpdateGameSessionResponse::SessionName' has a wrong offset!");

// ScriptStruct MangoClient.MangoReward
// 0x0040 (0x0040 - 0x0000)
struct FMangoReward final
{
public:
	struct FMangoLevelRewardItem                  DirectItem;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RocketParts;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rocketfuel;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BpProgress;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpBonus;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpPartyBonus;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsATease;                                          // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMangoReward) == 0x000008, "Wrong alignment on FMangoReward");
static_assert(sizeof(FMangoReward) == 0x000040, "Wrong size on FMangoReward");
static_assert(offsetof(FMangoReward, DirectItem) == 0x000000, "Member 'FMangoReward::DirectItem' has a wrong offset!");
static_assert(offsetof(FMangoReward, RocketParts) == 0x000028, "Member 'FMangoReward::RocketParts' has a wrong offset!");
static_assert(offsetof(FMangoReward, Rocketfuel) == 0x00002C, "Member 'FMangoReward::Rocketfuel' has a wrong offset!");
static_assert(offsetof(FMangoReward, BpProgress) == 0x000030, "Member 'FMangoReward::BpProgress' has a wrong offset!");
static_assert(offsetof(FMangoReward, XpBonus) == 0x000034, "Member 'FMangoReward::XpBonus' has a wrong offset!");
static_assert(offsetof(FMangoReward, XpPartyBonus) == 0x000038, "Member 'FMangoReward::XpPartyBonus' has a wrong offset!");
static_assert(offsetof(FMangoReward, IsATease) == 0x00003C, "Member 'FMangoReward::IsATease' has a wrong offset!");

}

