#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UtilityFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UtilityFunctionLibrary.UtilityFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UUtilityFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetVectorRounded(const struct FVector& InVector, class UObject* __WorldContext, struct FVector* RoundedVector);
	static void GetRotatorFloored(const struct FRotator& InRotator, class UObject* __WorldContext, struct FRotator* RoundedRotator);
	static void GetRandomXForwardUnitVectorInCircle(class UObject* __WorldContext, struct FVector* UnitVector);
	static void LogCollision(class UPrimitiveComponent* Primitive, float Duration, const struct FLinearColor& Color, class UObject* __WorldContext);
	static void DrawCharacterSoundHostility(class UObject* __WorldContext);
	static void DrawDebugCapsule2(const struct FVector& PointA, const struct FVector& PointB, float Radius, const struct FLinearColor& LineColor, float Duration, float Thickness, class UObject* __WorldContext);
	static void DrawDebugCapsuleComp(class UCapsuleComponent* Capsule, const struct FLinearColor& LineColor, float Duration, float Thickness, class UObject* __WorldContext);
	static void LogCharacterMoveTime(class AMarinerCharacter* Character, const class FString& Log, bool bPrintToScreen, class UObject* __WorldContext);

	static void GetXYDistanceSquared(const struct FVector& VectorA, const struct FVector& VectorB, class UObject* __WorldContext, float* XYDistanceSquared);
	static void TruncateRotator(const struct FRotator& RawRotator, class UObject* __WorldContext, struct FRotator* TruncatedRotator);
	static void RotatorToVectorQuantize(const struct FRotator& Rotator, class UObject* __WorldContext, struct FVector_NetQuantize* VecQuantize);
	static void VectorQuantizeToRotator(const struct FVector_NetQuantize& VecQuantize, class UObject* __WorldContext, struct FRotator* Rotator);
	static void RotatorToVector(const struct FRotator& Rotator, class UObject* __WorldContext, struct FVector* Vector);
	static void VectorToRotator(const struct FVector& VecQtor, class UObject* __WorldContext, struct FRotator* Rotator);
	static void LerpRotationRate(const struct FRotator& RotationRateA, const struct FRotator& RotationRateB, float Alpha, class UObject* __WorldContext, struct FRotator* BlendedRotationRate);
	static void LessThanOrEqualToVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* LessThanOrEqualTo);
	static void LessThanVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* LessThan);
	static void GreaterThanOrEqualToVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* GreaterThanOrEqualTo);
	static void GreaterThanVectorDistanceFast(struct FVector& Vector, float Distance, class UObject* __WorldContext, bool* GreaterThan);
	static void GetVectorToTarget(class AActor* From, class AActor* To, class UObject* __WorldContext, struct FVector* Direction);
	static void GetNormalToTarget(class AActor* From, class AActor* To, class UObject* __WorldContext, struct FVector* Normal);
	static void GetMidPointBetweenActors(class AActor* ActorA, class AActor* ActorB, class UObject* __WorldContext, struct FVector* MidPoint);
	static void GetNormalFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Normal);
	static void VectorToQuantized(struct FVector& Vector, class UObject* __WorldContext, struct FVector_NetQuantize* VectorNetQuantized);
	static void GetHitComponentFromHit(struct FHitResult& Hit, class UObject* __WorldContext, class UPrimitiveComponent** HitComponent);
	static void GetLocationFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Location);
	static void GetImpactNormalFromHit(struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Normal);
	static void GetAvgBetweenVectors(const struct FVector& LocA, const struct FVector& LocB, class UObject* __WorldContext, struct FVector* MidPoint);
	static void GetPingMSFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, float* PingMS);
	static void GetPingSecondsFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, float* PingSeconds);
	static void NormalizeRatio(float RawRatio, class UObject* __WorldContext, float* NormalizedRatio);
	static void Draw_Debug_Text_Line(const class FString& Text, const class FString& Prefix, const struct FLinearColor& DrawColor, struct FVector& DrawLocation, float LineSpacing, float Draw_Duration, int32 Tabs, class UObject* __WorldContext);
	static void Draw_Debug_Text_ActorList(const class FString& Title, TArray<class AActor*>& ActorList, const struct FLinearColor& DrawColor, struct FVector& DrawLocation, float LineSpacing, float Draw_Duration, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UtilityFunctionLibrary_C">();
	}
	static class UUtilityFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUtilityFunctionLibrary_C>();
	}
};
static_assert(alignof(UUtilityFunctionLibrary_C) == 0x000008, "Wrong alignment on UUtilityFunctionLibrary_C");
static_assert(sizeof(UUtilityFunctionLibrary_C) == 0x000028, "Wrong size on UUtilityFunctionLibrary_C");

}

