#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PreGame

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "UMG_structs.hpp"
#include "Mariner_structs.hpp"


namespace SDK::Params
{

// Function WBP_PreGame.WBP_PreGame_C.ExecuteUbergraph_WBP_PreGame
// 0x0120 (0x0120 - 0x0000)
struct WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NewState;                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyLayerCamera_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NewPregameState)>  K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName NewPregameState)>  K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State_1;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ApplyLayerCamera_ReturnValue_1;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetPregameState_ReturnValue;              // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFromSubMenu;                         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bToSubLayer;                          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerInputType                              K2Node_Event_InputType;                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State_2;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> K2Node_DynamicCast_AsMariner_Input_Interface;      // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> K2Node_DynamicCast_AsMariner_Input_Interface_1;    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> K2Node_DynamicCast_AsMariner_Input_Interface_2;    // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> K2Node_DynamicCast_AsMariner_Input_Interface_3;    // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsVisible)>              K2Node_CreateDelegate_OutputDelegate_2;            // 0x010C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_Enabled;                        // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame) == 0x000008, "Wrong alignment on WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame");
static_assert(sizeof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame) == 0x000120, "Wrong size on WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, EntryPoint) == 0x000000, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_CustomEvent_NewState) == 0x000004, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_ApplyLayerCamera_ReturnValue) == 0x00000C, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_ApplyLayerCamera_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Game_State) == 0x000038, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_GetGameState_ReturnValue_1) == 0x000048, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Game_State_1) == 0x000050, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Game_State_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_ApplyLayerCamera_ReturnValue_1) == 0x000059, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_ApplyLayerCamera_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_GetPregameState_ReturnValue) == 0x00005C, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_GetPregameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_Event_bFromSubMenu) == 0x000064, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_Event_bFromSubMenu' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_Conv_NameToString_ReturnValue) == 0x000068, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_Event_bToSubLayer) == 0x000088, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_Event_bToSubLayer' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, CallFunc_GetGameState_ReturnValue_2) == 0x000090, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_Event_InputType) == 0x000098, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_Event_InputType' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Game_State_2) == 0x0000A0, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Game_State_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Input_Interface) == 0x0000B0, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Input_Interface' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Input_Interface_1) == 0x0000C8, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Input_Interface_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_4) == 0x0000D8, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Input_Interface_2) == 0x0000E0, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Input_Interface_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_5) == 0x0000F0, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_AsMariner_Input_Interface_3) == 0x0000F8, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_AsMariner_Input_Interface_3' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_DynamicCast_bSuccess_6) == 0x000108, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_CreateDelegate_OutputDelegate_2) == 0x00010C, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame, K2Node_CustomEvent_Enabled) == 0x00011C, "Member 'WBP_PreGame_C_ExecuteUbergraph_WBP_PreGame::K2Node_CustomEvent_Enabled' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.OnCharacterSelectionWorldUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled) == 0x000001, "Wrong alignment on WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled");
static_assert(sizeof(WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled) == 0x000001, "Wrong size on WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled");
static_assert(offsetof(WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled, Enabled) == 0x000000, "Member 'WBP_PreGame_C_OnCharacterSelectionWorldUIEnabled::Enabled' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.HandleInputDeviceChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_PreGame_C_HandleInputDeviceChanged final
{
public:
	EPlayerInputType                              InputType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PreGame_C_HandleInputDeviceChanged) == 0x000001, "Wrong alignment on WBP_PreGame_C_HandleInputDeviceChanged");
static_assert(sizeof(WBP_PreGame_C_HandleInputDeviceChanged) == 0x000001, "Wrong size on WBP_PreGame_C_HandleInputDeviceChanged");
static_assert(offsetof(WBP_PreGame_C_HandleInputDeviceChanged, InputType) == 0x000000, "Member 'WBP_PreGame_C_HandleInputDeviceChanged::InputType' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.BP_OnExited
// 0x0001 (0x0001 - 0x0000)
struct WBP_PreGame_C_BP_OnExited final
{
public:
	bool                                          bToSubLayer;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_BP_OnExited) == 0x000001, "Wrong alignment on WBP_PreGame_C_BP_OnExited");
static_assert(sizeof(WBP_PreGame_C_BP_OnExited) == 0x000001, "Wrong size on WBP_PreGame_C_BP_OnExited");
static_assert(offsetof(WBP_PreGame_C_BP_OnExited, bToSubLayer) == 0x000000, "Member 'WBP_PreGame_C_BP_OnExited::bToSubLayer' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.BP_OnEntered
// 0x0001 (0x0001 - 0x0000)
struct WBP_PreGame_C_BP_OnEntered final
{
public:
	bool                                          bFromSubMenu;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_BP_OnEntered) == 0x000001, "Wrong alignment on WBP_PreGame_C_BP_OnEntered");
static_assert(sizeof(WBP_PreGame_C_BP_OnEntered) == 0x000001, "Wrong size on WBP_PreGame_C_BP_OnEntered");
static_assert(offsetof(WBP_PreGame_C_BP_OnEntered, bFromSubMenu) == 0x000000, "Member 'WBP_PreGame_C_BP_OnEntered::bFromSubMenu' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.OnPregameStateChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_PreGame_C_OnPregameStateChanged final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PreGame_C_OnPregameStateChanged) == 0x000004, "Wrong alignment on WBP_PreGame_C_OnPregameStateChanged");
static_assert(sizeof(WBP_PreGame_C_OnPregameStateChanged) == 0x000008, "Wrong size on WBP_PreGame_C_OnPregameStateChanged");
static_assert(offsetof(WBP_PreGame_C_OnPregameStateChanged, NewState) == 0x000000, "Member 'WBP_PreGame_C_OnPregameStateChanged::NewState' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.GetPreGameHUDVisibility
// 0x0020 (0x0020 - 0x0000)
struct WBP_PreGame_C_GetPreGameHUDVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_GetPreGameHUDVisibility) == 0x000008, "Wrong alignment on WBP_PreGame_C_GetPreGameHUDVisibility");
static_assert(sizeof(WBP_PreGame_C_GetPreGameHUDVisibility) == 0x000020, "Wrong size on WBP_PreGame_C_GetPreGameHUDVisibility");
static_assert(offsetof(WBP_PreGame_C_GetPreGameHUDVisibility, ReturnValue) == 0x000000, "Member 'WBP_PreGame_C_GetPreGameHUDVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_GetPreGameHUDVisibility, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'WBP_PreGame_C_GetPreGameHUDVisibility::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_GetPreGameHUDVisibility, K2Node_DynamicCast_AsMariner_Game_State) == 0x000010, "Member 'WBP_PreGame_C_GetPreGameHUDVisibility::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_GetPreGameHUDVisibility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_PreGame_C_GetPreGameHUDVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_GetPreGameHUDVisibility, K2Node_SwitchName_CmpSuccess) == 0x000019, "Member 'WBP_PreGame_C_GetPreGameHUDVisibility::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.ResolvePreGameState
// 0x0080 (0x0080 - 0x0000)
struct WBP_PreGame_C_ResolvePreGameState final
{
public:
	class FName                                   PregameState;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AnimateActiveWidgetOut_AnimationStarted;  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_AnimateActiveWidgetOut_AnimationStarted_1; // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AnimateActiveWidgetOut_AnimationStarted_2; // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_AnimateActiveWidgetOut_AnimationStarted_3; // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AnimateActiveWidgetOut_AnimationStarted_4; // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameState*                             K2Node_DynamicCast_AsGame_State;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_ResolvePreGameState) == 0x000008, "Wrong alignment on WBP_PreGame_C_ResolvePreGameState");
static_assert(sizeof(WBP_PreGame_C_ResolvePreGameState) == 0x000080, "Wrong size on WBP_PreGame_C_ResolvePreGameState");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, PregameState) == 0x000000, "Member 'WBP_PreGame_C_ResolvePreGameState::PregameState' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_SwitchName_CmpSuccess) == 0x000018, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_AnimateActiveWidgetOut_AnimationStarted) == 0x000019, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_AnimateActiveWidgetOut_AnimationStarted' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_CreateDelegate_OutputDelegate_2) == 0x00002C, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_AnimateActiveWidgetOut_AnimationStarted_1) == 0x00003C, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_AnimateActiveWidgetOut_AnimationStarted_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_AnimateActiveWidgetOut_AnimationStarted_2) == 0x00003D, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_AnimateActiveWidgetOut_AnimationStarted_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_CreateDelegate_OutputDelegate_3) == 0x000040, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_CreateDelegate_OutputDelegate_4) == 0x000050, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_AnimateActiveWidgetOut_AnimationStarted_3) == 0x000060, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_AnimateActiveWidgetOut_AnimationStarted_3' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_AnimateActiveWidgetOut_AnimationStarted_4) == 0x000061, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_AnimateActiveWidgetOut_AnimationStarted_4' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_NotEqual_NameName_ReturnValue) == 0x000062, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_GetGameState_ReturnValue) == 0x000068, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_DynamicCast_AsGame_State) == 0x000070, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_DynamicCast_AsGame_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'WBP_PreGame_C_ResolvePreGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000079, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x00007A, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_ResolvePreGameState, CallFunc_BooleanOR_ReturnValue) == 0x00007B, "Member 'WBP_PreGame_C_ResolvePreGameState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.TransitionToMapSummary
// 0x0040 (0x0040 - 0x0000)
struct WBP_PreGame_C_TransitionToMapSummary final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsVisible)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsMatchMade_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> CallFunc_SetActiveInputWidget_InputWidget_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ApplyLayerCamera_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_TransitionToMapSummary) == 0x000008, "Wrong alignment on WBP_PreGame_C_TransitionToMapSummary");
static_assert(sizeof(WBP_PreGame_C_TransitionToMapSummary) == 0x000040, "Wrong size on WBP_PreGame_C_TransitionToMapSummary");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'WBP_PreGame_C_TransitionToMapSummary::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, K2Node_DynamicCast_AsMariner_Game_State) == 0x000008, "Member 'WBP_PreGame_C_TransitionToMapSummary::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_PreGame_C_TransitionToMapSummary::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'WBP_PreGame_C_TransitionToMapSummary::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, CallFunc_IsMatchMade_ReturnValue) == 0x000024, "Member 'WBP_PreGame_C_TransitionToMapSummary::CallFunc_IsMatchMade_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, CallFunc_SetActiveInputWidget_InputWidget_CastInput) == 0x000028, "Member 'WBP_PreGame_C_TransitionToMapSummary::CallFunc_SetActiveInputWidget_InputWidget_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToMapSummary, CallFunc_ApplyLayerCamera_ReturnValue) == 0x000038, "Member 'WBP_PreGame_C_TransitionToMapSummary::CallFunc_ApplyLayerCamera_ReturnValue' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.TransitionToCharacterSelection
// 0x0050 (0x0050 - 0x0000)
struct WBP_PreGame_C_TransitionToCharacterSelection final
{
public:
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0000(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(bool bIsVisible)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class AMarinerBasePlayerController*           CallFunc_TryAndGetLocalPlayerController_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> CallFunc_SetActiveInputWidget_InputWidget_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_TransitionToCharacterSelection) == 0x000008, "Wrong alignment on WBP_PreGame_C_TransitionToCharacterSelection");
static_assert(sizeof(WBP_PreGame_C_TransitionToCharacterSelection) == 0x000050, "Wrong size on WBP_PreGame_C_TransitionToCharacterSelection");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, Temp_struct_Variable) == 0x000000, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, Temp_delegate_Variable) == 0x000010, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, CallFunc_TryAndGetLocalPlayerController_ReturnValue) == 0x000030, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::CallFunc_TryAndGetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, CallFunc_PostEvent_ReturnValue) == 0x000038, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToCharacterSelection, CallFunc_SetActiveInputWidget_InputWidget_CastInput) == 0x000040, "Member 'WBP_PreGame_C_TransitionToCharacterSelection::CallFunc_SetActiveInputWidget_InputWidget_CastInput' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.TransitionToShowdown
// 0x0060 (0x0060 - 0x0000)
struct WBP_PreGame_C_TransitionToShowdown final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class AMarinerBasePlayerController*           CallFunc_TryAndGetLocalPlayerController_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsVisible)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0028(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> CallFunc_SetActiveInputWidget_InputWidget_CastInput; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ApplyLayerCamera_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PreGame_C_TransitionToShowdown) == 0x000008, "Wrong alignment on WBP_PreGame_C_TransitionToShowdown");
static_assert(sizeof(WBP_PreGame_C_TransitionToShowdown) == 0x000060, "Wrong size on WBP_PreGame_C_TransitionToShowdown");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, Temp_delegate_Variable) == 0x000000, "Member 'WBP_PreGame_C_TransitionToShowdown::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, CallFunc_TryAndGetLocalPlayerController_ReturnValue) == 0x000010, "Member 'WBP_PreGame_C_TransitionToShowdown::CallFunc_TryAndGetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'WBP_PreGame_C_TransitionToShowdown::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, Temp_struct_Variable) == 0x000028, "Member 'WBP_PreGame_C_TransitionToShowdown::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, CallFunc_PostEvent_ReturnValue) == 0x000038, "Member 'WBP_PreGame_C_TransitionToShowdown::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, CallFunc_SetActiveInputWidget_InputWidget_CastInput) == 0x000040, "Member 'WBP_PreGame_C_TransitionToShowdown::CallFunc_SetActiveInputWidget_InputWidget_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, CallFunc_ApplyLayerCamera_ReturnValue) == 0x000050, "Member 'WBP_PreGame_C_TransitionToShowdown::CallFunc_ApplyLayerCamera_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToShowdown, CallFunc_PlayAnimation_ReturnValue) == 0x000058, "Member 'WBP_PreGame_C_TransitionToShowdown::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.TransitionToModeSummary
// 0x0040 (0x0040 - 0x0000)
struct WBP_PreGame_C_TransitionToModeSummary final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsVisible)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsMatchMade_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMarinerInputInterface> CallFunc_SetActiveInputWidget_InputWidget_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ApplyLayerCamera_ReturnValue;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_TransitionToModeSummary) == 0x000008, "Wrong alignment on WBP_PreGame_C_TransitionToModeSummary");
static_assert(sizeof(WBP_PreGame_C_TransitionToModeSummary) == 0x000040, "Wrong size on WBP_PreGame_C_TransitionToModeSummary");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'WBP_PreGame_C_TransitionToModeSummary::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, K2Node_DynamicCast_AsMariner_Game_State) == 0x000008, "Member 'WBP_PreGame_C_TransitionToModeSummary::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_PreGame_C_TransitionToModeSummary::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'WBP_PreGame_C_TransitionToModeSummary::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, CallFunc_IsMatchMade_ReturnValue) == 0x000024, "Member 'WBP_PreGame_C_TransitionToModeSummary::CallFunc_IsMatchMade_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, CallFunc_SetActiveInputWidget_InputWidget_CastInput) == 0x000028, "Member 'WBP_PreGame_C_TransitionToModeSummary::CallFunc_SetActiveInputWidget_InputWidget_CastInput' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_TransitionToModeSummary, CallFunc_ApplyLayerCamera_ReturnValue) == 0x000038, "Member 'WBP_PreGame_C_TransitionToModeSummary::CallFunc_ApplyLayerCamera_ReturnValue' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.AnimateActiveWidgetOut
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_PreGame_C_AnimateActiveWidgetOut final
{
public:
	TDelegate<void()>                             TransitionComplete;                                // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	bool                                          AnimationStarted;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       WidgetAnimation;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            WidgetToAnimate;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0050(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0068(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_AnimateActiveWidgetOut) == 0x000008, "Wrong alignment on WBP_PreGame_C_AnimateActiveWidgetOut");
static_assert(sizeof(WBP_PreGame_C_AnimateActiveWidgetOut) == 0x0000D8, "Wrong size on WBP_PreGame_C_AnimateActiveWidgetOut");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, TransitionComplete) == 0x000000, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::TransitionComplete' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, AnimationStarted) == 0x000010, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::AnimationStarted' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, WidgetAnimation) == 0x000018, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::WidgetAnimation' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, WidgetToAnimate) == 0x000020, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::WidgetToAnimate' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_GetActiveWidget_ReturnValue) == 0x000028, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_IsVisible_ReturnValue) == 0x000030, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_GetDisplayName_ReturnValue) == 0x000038, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_PlayAnimation_ReturnValue) == 0x000048, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_Conv_StringToText_ReturnValue) == 0x000050, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, K2Node_MakeStruct_FormatArgumentData) == 0x000068, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, K2Node_MakeArray_Array) == 0x0000A8, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D0, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0000D1, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0000D2, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_AnimateActiveWidgetOut, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0000D3, "Member 'WBP_PreGame_C_AnimateActiveWidgetOut::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.EnableWorldUI
// 0x0030 (0x0030 - 0x0000)
struct WBP_PreGame_C_EnableWorldUI final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsVisible)>              OnComplete;                                        // 0x0004(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_EnableWorldUI) == 0x000008, "Wrong alignment on WBP_PreGame_C_EnableWorldUI");
static_assert(sizeof(WBP_PreGame_C_EnableWorldUI) == 0x000030, "Wrong size on WBP_PreGame_C_EnableWorldUI");
static_assert(offsetof(WBP_PreGame_C_EnableWorldUI, Enabled) == 0x000000, "Member 'WBP_PreGame_C_EnableWorldUI::Enabled' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_EnableWorldUI, OnComplete) == 0x000004, "Member 'WBP_PreGame_C_EnableWorldUI::OnComplete' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_EnableWorldUI, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'WBP_PreGame_C_EnableWorldUI::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_EnableWorldUI, K2Node_DynamicCast_AsMariner_Game_State) == 0x000020, "Member 'WBP_PreGame_C_EnableWorldUI::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(WBP_PreGame_C_EnableWorldUI, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_PreGame_C_EnableWorldUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_PreGame.WBP_PreGame_C.DummyEvent
// 0x0001 (0x0001 - 0x0000)
struct WBP_PreGame_C_DummyEvent final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_PreGame_C_DummyEvent) == 0x000001, "Wrong alignment on WBP_PreGame_C_DummyEvent");
static_assert(sizeof(WBP_PreGame_C_DummyEvent) == 0x000001, "Wrong size on WBP_PreGame_C_DummyEvent");
static_assert(offsetof(WBP_PreGame_C_DummyEvent, Visible) == 0x000000, "Member 'WBP_PreGame_C_DummyEvent::Visible' has a wrong offset!");

}

