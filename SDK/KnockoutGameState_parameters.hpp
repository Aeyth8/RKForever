#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnockoutGameState

#include "Basic.hpp"


namespace SDK::Params
{

// Function KnockoutGameState.KnockoutGameState_C.OnStockRemovalAnimation__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature final
{
public:
	class AController*                            KilledPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StockCountBeforeKnockout;                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature) == 0x000008, "Wrong alignment on KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature");
static_assert(sizeof(KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature) == 0x000010, "Wrong size on KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature");
static_assert(offsetof(KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature, KilledPlayer) == 0x000000, "Member 'KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature::KilledPlayer' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature, StockCountBeforeKnockout) == 0x000008, "Member 'KnockoutGameState_C_OnStockRemovalAnimation__DelegateSignature::StockCountBeforeKnockout' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.Overtime__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct KnockoutGameState_C_Overtime__DelegateSignature final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_Overtime__DelegateSignature) == 0x000004, "Wrong alignment on KnockoutGameState_C_Overtime__DelegateSignature");
static_assert(sizeof(KnockoutGameState_C_Overtime__DelegateSignature) == 0x000004, "Wrong size on KnockoutGameState_C_Overtime__DelegateSignature");
static_assert(offsetof(KnockoutGameState_C_Overtime__DelegateSignature, NewParam) == 0x000000, "Member 'KnockoutGameState_C_Overtime__DelegateSignature::NewParam' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.OnePlayerWithStockOnTeam__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature) == 0x000004, "Wrong alignment on KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature");
static_assert(sizeof(KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature) == 0x000004, "Wrong size on KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature");
static_assert(offsetof(KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'KnockoutGameState_C_OnePlayerWithStockOnTeam__DelegateSignature::OnePlayerWithStockTeamIndex' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.SetPlayerPinNavpoint__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature) == 0x000008, "Wrong alignment on KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature");
static_assert(sizeof(KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature) == 0x000010, "Wrong size on KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature");
static_assert(offsetof(KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature, PlayerState) == 0x000000, "Member 'KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature::PlayerState' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature, IsEnabled) == 0x000008, "Member 'KnockoutGameState_C_SetPlayerPinNavpoint__DelegateSignature::IsEnabled' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.ExecuteUbergraph_KnockoutGameState
// 0x0050 (0x0050 - 0x0000)
struct KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           K2Node_CustomEvent_PlayerState;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsEnabled;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_CustomEvent_KilledPlayer;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StockCountBeforeKnockout_1;     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA2[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_CustomEvent_KillerPlayer;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StockCountBeforeKnockout;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Seconds_to_Reset;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OnePlayerWithStockTeamIndex_1;  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA3[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerKnockoutPlayerState_C*          K2Node_CustomEvent_LastPlayerWithStock;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OnePlayerWithStockTeamIndex;    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState) == 0x000008, "Wrong alignment on KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState");
static_assert(sizeof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState) == 0x000050, "Wrong size on KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, EntryPoint) == 0x000000, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_PlayerState) == 0x000008, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_PlayerState' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_IsEnabled) == 0x000010, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_IsEnabled' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_KilledPlayer) == 0x000018, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_KilledPlayer' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_StockCountBeforeKnockout_1) == 0x000020, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_StockCountBeforeKnockout_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_KillerPlayer) == 0x000028, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_KillerPlayer' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_StockCountBeforeKnockout) == 0x000030, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_StockCountBeforeKnockout' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_Seconds_to_Reset) == 0x000034, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_Seconds_to_Reset' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_OnePlayerWithStockTeamIndex_1) == 0x000038, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_OnePlayerWithStockTeamIndex_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_LastPlayerWithStock) == 0x000040, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_LastPlayerWithStock' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, K2Node_CustomEvent_OnePlayerWithStockTeamIndex) == 0x000048, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::K2Node_CustomEvent_OnePlayerWithStockTeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'KnockoutGameState_C_ExecuteUbergraph_KnockoutGameState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.MulticastSetPlayerPinNavpoint
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_MulticastSetPlayerPinNavpoint final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_MulticastSetPlayerPinNavpoint) == 0x000008, "Wrong alignment on KnockoutGameState_C_MulticastSetPlayerPinNavpoint");
static_assert(sizeof(KnockoutGameState_C_MulticastSetPlayerPinNavpoint) == 0x000010, "Wrong size on KnockoutGameState_C_MulticastSetPlayerPinNavpoint");
static_assert(offsetof(KnockoutGameState_C_MulticastSetPlayerPinNavpoint, PlayerState) == 0x000000, "Member 'KnockoutGameState_C_MulticastSetPlayerPinNavpoint::PlayerState' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_MulticastSetPlayerPinNavpoint, IsEnabled) == 0x000008, "Member 'KnockoutGameState_C_MulticastSetPlayerPinNavpoint::IsEnabled' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.OnPlayerWithStockLeft
// 0x0004 (0x0004 - 0x0000)
struct KnockoutGameState_C_OnPlayerWithStockLeft final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_OnPlayerWithStockLeft) == 0x000004, "Wrong alignment on KnockoutGameState_C_OnPlayerWithStockLeft");
static_assert(sizeof(KnockoutGameState_C_OnPlayerWithStockLeft) == 0x000004, "Wrong size on KnockoutGameState_C_OnPlayerWithStockLeft");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeft, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'KnockoutGameState_C_OnPlayerWithStockLeft::OnePlayerWithStockTeamIndex' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.MulticastOnePlayerOnTeamWithStock
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerKnockoutPlayerState_C*          LastPlayerWithStock;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock) == 0x000008, "Wrong alignment on KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock");
static_assert(sizeof(KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock) == 0x000010, "Wrong size on KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock");
static_assert(offsetof(KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock::OnePlayerWithStockTeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock, LastPlayerWithStock) == 0x000008, "Member 'KnockoutGameState_C_MulticastOnePlayerOnTeamWithStock::LastPlayerWithStock' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.Event Overtime
// 0x0004 (0x0004 - 0x0000)
struct KnockoutGameState_C_Event_Overtime final
{
public:
	float                                         Seconds_to_Reset;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_Event_Overtime) == 0x000004, "Wrong alignment on KnockoutGameState_C_Event_Overtime");
static_assert(sizeof(KnockoutGameState_C_Event_Overtime) == 0x000004, "Wrong size on KnockoutGameState_C_Event_Overtime");
static_assert(offsetof(KnockoutGameState_C_Event_Overtime, Seconds_to_Reset) == 0x000000, "Member 'KnockoutGameState_C_Event_Overtime::Seconds_to_Reset' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.MulticastStockRemovalAnimation
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_MulticastStockRemovalAnimation final
{
public:
	class AController*                            KillerPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StockCountBeforeKnockout;                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_MulticastStockRemovalAnimation) == 0x000008, "Wrong alignment on KnockoutGameState_C_MulticastStockRemovalAnimation");
static_assert(sizeof(KnockoutGameState_C_MulticastStockRemovalAnimation) == 0x000010, "Wrong size on KnockoutGameState_C_MulticastStockRemovalAnimation");
static_assert(offsetof(KnockoutGameState_C_MulticastStockRemovalAnimation, KillerPlayer) == 0x000000, "Member 'KnockoutGameState_C_MulticastStockRemovalAnimation::KillerPlayer' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_MulticastStockRemovalAnimation, StockCountBeforeKnockout) == 0x000008, "Member 'KnockoutGameState_C_MulticastStockRemovalAnimation::StockCountBeforeKnockout' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.AuthorityStockRemovalAnimation
// 0x0010 (0x0010 - 0x0000)
struct KnockoutGameState_C_AuthorityStockRemovalAnimation final
{
public:
	class AController*                            KilledPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StockCountBeforeKnockout;                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_AuthorityStockRemovalAnimation) == 0x000008, "Wrong alignment on KnockoutGameState_C_AuthorityStockRemovalAnimation");
static_assert(sizeof(KnockoutGameState_C_AuthorityStockRemovalAnimation) == 0x000010, "Wrong size on KnockoutGameState_C_AuthorityStockRemovalAnimation");
static_assert(offsetof(KnockoutGameState_C_AuthorityStockRemovalAnimation, KilledPlayer) == 0x000000, "Member 'KnockoutGameState_C_AuthorityStockRemovalAnimation::KilledPlayer' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_AuthorityStockRemovalAnimation, StockCountBeforeKnockout) == 0x000008, "Member 'KnockoutGameState_C_AuthorityStockRemovalAnimation::StockCountBeforeKnockout' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.GetPlayersOnTeamWithStock
// 0x000C (0x000C - 0x0000)
struct KnockoutGameState_C_GetPlayersOnTeamWithStock final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayersWithStock;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_GetPlayersOnTeamWithStock) == 0x000004, "Wrong alignment on KnockoutGameState_C_GetPlayersOnTeamWithStock");
static_assert(sizeof(KnockoutGameState_C_GetPlayersOnTeamWithStock) == 0x00000C, "Wrong size on KnockoutGameState_C_GetPlayersOnTeamWithStock");
static_assert(offsetof(KnockoutGameState_C_GetPlayersOnTeamWithStock, Team) == 0x000000, "Member 'KnockoutGameState_C_GetPlayersOnTeamWithStock::Team' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetPlayersOnTeamWithStock, PlayersWithStock) == 0x000004, "Member 'KnockoutGameState_C_GetPlayersOnTeamWithStock::PlayersWithStock' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetPlayersOnTeamWithStock, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'KnockoutGameState_C_GetPlayersOnTeamWithStock::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.DecrementTeamStocksLeftByPlayerState
// 0x0028 (0x0028 - 0x0000)
struct KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState final
{
public:
	class AMarinerPlayerState*                    PlayerWhoLostStock;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StocksLeftAfterDecrementing;                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState) == 0x000008, "Wrong alignment on KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState");
static_assert(sizeof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState) == 0x000028, "Wrong size on KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, PlayerWhoLostStock) == 0x000000, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::PlayerWhoLostStock' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, StocksLeftAfterDecrementing) == 0x000008, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::StocksLeftAfterDecrementing' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, Temp_int_Variable) == 0x00000C, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, CallFunc_GetTeamIndex_ReturnValue) == 0x000010, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, Temp_int_Variable_1) == 0x000018, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000020, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByPlayerState::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.IncrementTeamTotalStocksLeft
// 0x000C (0x000C - 0x0000)
struct KnockoutGameState_C_IncrementTeamTotalStocksLeft final
{
public:
	int32                                         Stocks;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_IncrementTeamTotalStocksLeft) == 0x000004, "Wrong alignment on KnockoutGameState_C_IncrementTeamTotalStocksLeft");
static_assert(sizeof(KnockoutGameState_C_IncrementTeamTotalStocksLeft) == 0x00000C, "Wrong size on KnockoutGameState_C_IncrementTeamTotalStocksLeft");
static_assert(offsetof(KnockoutGameState_C_IncrementTeamTotalStocksLeft, Stocks) == 0x000000, "Member 'KnockoutGameState_C_IncrementTeamTotalStocksLeft::Stocks' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementTeamTotalStocksLeft, TeamIndex) == 0x000004, "Member 'KnockoutGameState_C_IncrementTeamTotalStocksLeft::TeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementTeamTotalStocksLeft, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'KnockoutGameState_C_IncrementTeamTotalStocksLeft::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.DecrementTeamStocksLeftByTeamIndex
// 0x001C (0x001C - 0x0000)
struct KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex final
{
public:
	int32                                         TeamIndexOfPlayerWhoLostStock;                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StocksLeftAfterDecrementing;                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex) == 0x000004, "Wrong alignment on KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex");
static_assert(sizeof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex) == 0x00001C, "Wrong size on KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, TeamIndexOfPlayerWhoLostStock) == 0x000000, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::TeamIndexOfPlayerWhoLostStock' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, StocksLeftAfterDecrementing) == 0x000004, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::StocksLeftAfterDecrementing' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, Temp_int_Variable) == 0x000008, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, Temp_int_Variable_1) == 0x000010, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'KnockoutGameState_C_DecrementTeamStocksLeftByTeamIndex::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.SetShouldUsePoolOfLives
// 0x000C (0x000C - 0x0000)
struct KnockoutGameState_C_SetShouldUsePoolOfLives final
{
public:
	bool                                          ShouldUsePoolOfLives;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_SetShouldUsePoolOfLives) == 0x000004, "Wrong alignment on KnockoutGameState_C_SetShouldUsePoolOfLives");
static_assert(sizeof(KnockoutGameState_C_SetShouldUsePoolOfLives) == 0x00000C, "Wrong size on KnockoutGameState_C_SetShouldUsePoolOfLives");
static_assert(offsetof(KnockoutGameState_C_SetShouldUsePoolOfLives, ShouldUsePoolOfLives) == 0x000000, "Member 'KnockoutGameState_C_SetShouldUsePoolOfLives::ShouldUsePoolOfLives' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_SetShouldUsePoolOfLives, TeamIndex) == 0x000004, "Member 'KnockoutGameState_C_SetShouldUsePoolOfLives::TeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_SetShouldUsePoolOfLives, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'KnockoutGameState_C_SetShouldUsePoolOfLives::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.IncrementPlayersWithStock
// 0x001C (0x001C - 0x0000)
struct KnockoutGameState_C_IncrementPlayersWithStock final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpdatedPlayersWithStockOnTeam;                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA8[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_IncrementPlayersWithStock) == 0x000004, "Wrong alignment on KnockoutGameState_C_IncrementPlayersWithStock");
static_assert(sizeof(KnockoutGameState_C_IncrementPlayersWithStock) == 0x00001C, "Wrong size on KnockoutGameState_C_IncrementPlayersWithStock");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, TeamIndex) == 0x000000, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::TeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, UpdatedPlayersWithStockOnTeam) == 0x000004, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::UpdatedPlayersWithStockOnTeam' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, Temp_int_Variable) == 0x000008, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, Temp_int_Variable_1) == 0x000010, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_IncrementPlayersWithStock, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'KnockoutGameState_C_IncrementPlayersWithStock::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.DecrementPlayersWithStock
// 0x001C (0x001C - 0x0000)
struct KnockoutGameState_C_DecrementPlayersWithStock final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpdatedPlayersWithStockOnTeam;                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EA9[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_DecrementPlayersWithStock) == 0x000004, "Wrong alignment on KnockoutGameState_C_DecrementPlayersWithStock");
static_assert(sizeof(KnockoutGameState_C_DecrementPlayersWithStock) == 0x00001C, "Wrong size on KnockoutGameState_C_DecrementPlayersWithStock");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, TeamIndex) == 0x000000, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::TeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, UpdatedPlayersWithStockOnTeam) == 0x000004, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::UpdatedPlayersWithStockOnTeam' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, Temp_int_Variable) == 0x000008, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, Temp_int_Variable_1) == 0x000010, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_DecrementPlayersWithStock, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'KnockoutGameState_C_DecrementPlayersWithStock::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.GetIsUsingPoolOfLives
// 0x0008 (0x0008 - 0x0000)
struct KnockoutGameState_C_GetIsUsingPoolOfLives final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingPoolOfLives;                                // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_GetIsUsingPoolOfLives) == 0x000004, "Wrong alignment on KnockoutGameState_C_GetIsUsingPoolOfLives");
static_assert(sizeof(KnockoutGameState_C_GetIsUsingPoolOfLives) == 0x000008, "Wrong size on KnockoutGameState_C_GetIsUsingPoolOfLives");
static_assert(offsetof(KnockoutGameState_C_GetIsUsingPoolOfLives, TeamIndex) == 0x000000, "Member 'KnockoutGameState_C_GetIsUsingPoolOfLives::TeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetIsUsingPoolOfLives, IsUsingPoolOfLives) == 0x000004, "Member 'KnockoutGameState_C_GetIsUsingPoolOfLives::IsUsingPoolOfLives' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetIsUsingPoolOfLives, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'KnockoutGameState_C_GetIsUsingPoolOfLives::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.OnPlayerWithStockLeftImplementation
// 0x0040 (0x0040 - 0x0000)
struct KnockoutGameState_C_OnPlayerWithStockLeftImplementation final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EAA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   CallFunc_GetPlayersOnTeam_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerKnockoutPlayerState_C*          K2Node_DynamicCast_AsMariner_Knockout_Player_State; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EAB[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EAC[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation) == 0x000008, "Wrong alignment on KnockoutGameState_C_OnPlayerWithStockLeftImplementation");
static_assert(sizeof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation) == 0x000040, "Wrong size on KnockoutGameState_C_OnPlayerWithStockLeftImplementation");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::OnePlayerWithStockTeamIndex' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_GetPlayersOnTeam_ReturnValue) == 0x000008, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_GetPlayersOnTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, Temp_int_Array_Index_Variable) == 0x000018, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_Array_Get_Item) == 0x000020, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, K2Node_DynamicCast_AsMariner_Knockout_Player_State) == 0x000028, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::K2Node_DynamicCast_AsMariner_Knockout_Player_State' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_OnPlayerWithStockLeftImplementation, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'KnockoutGameState_C_OnPlayerWithStockLeftImplementation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function KnockoutGameState.KnockoutGameState_C.GetHealthToRecoverOnKnockout
// 0x0020 (0x0020 - 0x0000)
struct KnockoutGameState_C_GetHealthToRecoverOnKnockout final
{
public:
	class AMarinerPlayerState*                    PlayerStateOfReturningCharacter;                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EAD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerKnockoutPlayerState_C*          K2Node_DynamicCast_AsMariner_Knockout_Player_State; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(KnockoutGameState_C_GetHealthToRecoverOnKnockout) == 0x000008, "Wrong alignment on KnockoutGameState_C_GetHealthToRecoverOnKnockout");
static_assert(sizeof(KnockoutGameState_C_GetHealthToRecoverOnKnockout) == 0x000020, "Wrong size on KnockoutGameState_C_GetHealthToRecoverOnKnockout");
static_assert(offsetof(KnockoutGameState_C_GetHealthToRecoverOnKnockout, PlayerStateOfReturningCharacter) == 0x000000, "Member 'KnockoutGameState_C_GetHealthToRecoverOnKnockout::PlayerStateOfReturningCharacter' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetHealthToRecoverOnKnockout, ReturnValue) == 0x000008, "Member 'KnockoutGameState_C_GetHealthToRecoverOnKnockout::ReturnValue' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetHealthToRecoverOnKnockout, K2Node_DynamicCast_AsMariner_Knockout_Player_State) == 0x000010, "Member 'KnockoutGameState_C_GetHealthToRecoverOnKnockout::K2Node_DynamicCast_AsMariner_Knockout_Player_State' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetHealthToRecoverOnKnockout, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'KnockoutGameState_C_GetHealthToRecoverOnKnockout::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(KnockoutGameState_C_GetHealthToRecoverOnKnockout, CallFunc_Greater_IntInt_ReturnValue) == 0x000019, "Member 'KnockoutGameState_C_GetHealthToRecoverOnKnockout::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

}

