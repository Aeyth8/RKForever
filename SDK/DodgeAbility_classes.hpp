#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DodgeAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Mariner_structs.hpp"
#include "Mariner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DodgeAbility.DodgeAbility_C
// 0x0120 (0x07F8 - 0x06D8)
class UDodgeAbility_C final : public UMarinerAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AMarinerPlayerController*               OwningController;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_CheckProjectiles;                      // 0x06E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_CollisionToggle;                       // 0x06F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDodgeDuration;                                 // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeMinLaunch_Angle;                              // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeStrength;                                     // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeInPlaceVerticalStrength;                      // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AMarinerProjectile*>             OverlappedProjectiles;                             // 0x0708(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         DodgedRockets;                                     // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24F0[0x4];                                     // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             UpdateRocketsDodged;                               // 0x0720(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 NinjaHeadbandAbilityClass;                         // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NinjaHeadbandActive;                               // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F1[0x3];                                     // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionCheckRadiusScalar;                        // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionCheckHeightScalar;                        // 0x0740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingMegablastCooldownReductionArtifact;         // 0x0744(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F2[0x3];                                     // 0x0745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MegablastArtifactCooldownReduction;                // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24F3[0x4];                                     // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         AbilitiesToEndOnDodge;                             // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          DodgeInPlace;                                      // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F4[0x7];                                     // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerFastArenaBounds*                ArenaBounds;                                       // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinValidDistanceFromBounds;                        // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnitKOLaunchScalarSide;                            // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AntiKOLaunchScalarUp;                              // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LatestDodgeDuration;                               // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingDodgeStrengthArtifact;                      // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F5[0x3];                                     // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgeStrengthArtifactMultiplier;                   // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnitKOGeoToBoundsTraceRadius;                      // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24F6[0x4];                                     // 0x078C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      AnitKOGeoToBoundsObjectTypes;                      // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                         MoveAffectingEffects;                              // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                         PredictiveEffects;                                 // 0x07B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          UseEnhancedDirectionality;                         // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F7[0x3];                                     // 0x07C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimUpMoveBack_MaxLaunchAngle_AimZ_Range;           // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimUpMoveBack_MinLaunchAngle_AimZ_Range;           // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeDownStrengthMulltiplier;                      // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugPrintEnhancedDirectionalityInfo;              // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F8[0x3];                                     // 0x07D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownwardAimVector_Grounded_ZClamp;                 // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseClientPredictiveDodge;                         // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableDebugSwitchDodgeSystemsOnReload;            // 0x07D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24F9[0x2];                                     // 0x07DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AntiKOLaunchScalarFloor;                           // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DodgeDownwardLaunchStrengthCurve;                  // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnhancedDodgeMinValidDistanceFromBounds;           // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AntiKOBoundsFloorFailsafeCheckDistance;            // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingDamageIncreaseOnNoCooldownArtifact;         // 0x07F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24FA[0x3];                                     // 0x07F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageIncreaseArtifactCooldownIncrease;            // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateRocketsDodged__DelegateSignature(int32 RocketsDodged);
	void ExecuteUbergraph_DodgeAbility(int32 EntryPoint);
	void ServerToggleDodgeType();
	void BP_OnAnyInputReceived(EMarinerInputActions InputType, EInputEvent EventType);
	void BP_OnAbilityActivated(const struct FGameplayAbilityActorInfo& ActorInfo);
	void OnMegablastStateChangedOwner(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerPlayerState* MegablastInstigator, bool bEnteredState);
	void BP_OnActivationRejectedByServer();
	void BP_OnAbilityEnded(const struct FGameplayAbilityActorInfo& ActorInfo, bool WasCancelled);
	void BP_OnOwningControllerSet();
	void OnPlayerReachedMegablastDanger();
	void ProcessArtifactData(const TMap<class FName, float>& Map);
	void SetNinjaHeadbandSlowDownTimer();
	void SlowDownNinjaHeadbandDodge();
	void DodgeFinished();
	void GetOwningController(class AMarinerPlayerController** OwningControlller);
	void GetNormalizedAcceleration(struct FVector* Acceleration);
	void GetDodgeStrength(float* Param_DodgeStrength);
	struct FVector GetDodgeLaunchVelocity();
	void GetDodgeMinLaunchAngle(float* MinLaunchAngle);
	void ApplyActiveEffects_MoveAffecting();
	void ApplyActiveEffects_Predictive();
	void RemoveActiveEffects_PredictedRejection();
	void RemoveActiveEffects_Predictive();
	void RemoveActiveEffects_MoveAffecting();
	void IncreaseStunBreakStat();
	void HandleNinjaHeadbandSlowDown();
	void HandleInputQueuing();
	void CheckForOverlappingProjectiles();
	void LookForAbilitiesToEnd();
	void PredictDodgeStateApplied();
	void RemoveStun();
	void GetDodgeInPlaceStrength(struct FVector* DodgeInPlaceDir);
	void AntiSelfKOLaunchModifier(const struct FVector& TargetLoc, bool IsDodgeInPlace, struct FVector* AdjustedDodge);
	void UpdateDodgeDuration();
	void CacheIsNinjaHeadbandActive();
	void ApplyCharacterRecovery();
	void GetInputVector(struct FVector* InputVector);
	void GetCharacterForwardVector(struct FVector* ForwardVector);
	void GetAimDirection(struct FVector* AimDirection);
	void CalculateDirectionalLaunchVector(struct FVector* LaunchVector);
	void RotateLaunchVectorByMinLaunchAngle(const struct FVector& CombinedAimInputVector, float CombinedAimInputVectorZ, bool IsPlayerMovingBackwards, const struct FVector& AdjustedAimDirection, struct FVector* ModifiedLaunchVector);
	void GetModifiedLaunchStrength(float CombinedAimInputVectorZ, const struct FVector& CombinedAimInputVector, float* ModifiedLaunchStrength);
	void CalculateCombinedAimInputVector(float InputForwardVectorDot, bool IsPlayerMovingBackwards, const struct FVector& AdjustedAimDirection, struct FVector* CombinedAimInputVector);
	void GetPlayerInputAndActorForwardVectorDot(float* InputForwardVectorDot);
	void GetIsPlayerWalking(bool* IsWalking);
	struct FVector BP_GetLaunchVector();
	void IsLaunchEndLocationArenaBoundsLOS_Blocked(const struct FVector& ClosestPointOnBoundsSurface, bool* bLocked);
	void GetAntiKO_FloorLaunchVector(const struct FVector& TargetLoc, const struct FVector& ClosestBoundsNormal, struct FVector* LaunchVector);
	void IsPlayerCloseEnoughToKOBoundsForProtectionLogic(const struct FVector& PointOnClosestBounds, bool* CloseEnough);
	void GetIsClosestKOBoundsFloor(const struct FVector& ClosestBoundsNormal, bool* IsFloor);
	void GetNonFloorKOBoundsLaunchVector(const struct FVector& ClosestBoundsNormal, const struct FVector& TargetLoc, struct FVector* LaunchVector);
	void GetNonFloorKOBoundsLaunchScalar(bool IsDodgeInPlace, const struct FVector& ClosestBoundsNormal, float* LaunchScalar);
	void DebugDrawAntiKOBoundsChecks(const struct FVector& PointOnClosestBoundsSurface, const struct FVector& ModifiedEndLocationWithBuffer, const struct FVector& ClosestBoundsNormal);
	void GetIsPointOnClosestBoundsValidForProtection(const struct FVector& PointOnClosestBoundsSurface, bool* IsValid);
	void GetArenaBoundsRef(class AMarinerFastArenaBounds** Param_ArenaBounds);

	void IsNinjaHeadbandActive(bool* Param_IsActive) const;
	void GetNinjaHeadbandAbility(class UItem_NinjaHeadband_ItemAbility_C** NinjaHeadbandAbility, bool* CastSuccess) const;
	float GetCooldownDuration() const;
	void GetDodgeDuration(float* DodgeDuration) const;
	float GetAbilityUIDuration(bool* bForceActiveDisplay) const;
	int32 BP_GetCustomTargetingInt() const;
	void IsControlledByAI__Server_Only_(bool* bSuccess) const;
	struct FVector BP_GenerateAIInputVector(class AMarinerAIController* RequestingController, class AMarinerCharacter* RequestingPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DodgeAbility_C">();
	}
	static class UDodgeAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDodgeAbility_C>();
	}
};
static_assert(alignof(UDodgeAbility_C) == 0x000008, "Wrong alignment on UDodgeAbility_C");
static_assert(sizeof(UDodgeAbility_C) == 0x0007F8, "Wrong size on UDodgeAbility_C");
static_assert(offsetof(UDodgeAbility_C, UberGraphFrame) == 0x0006D8, "Member 'UDodgeAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, OwningController) == 0x0006E0, "Member 'UDodgeAbility_C::OwningController' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, TimerHandle_CheckProjectiles) == 0x0006E8, "Member 'UDodgeAbility_C::TimerHandle_CheckProjectiles' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, TimerHandle_CollisionToggle) == 0x0006F0, "Member 'UDodgeAbility_C::TimerHandle_CollisionToggle' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, BaseDodgeDuration) == 0x0006F8, "Member 'UDodgeAbility_C::BaseDodgeDuration' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeMinLaunch_Angle) == 0x0006FC, "Member 'UDodgeAbility_C::DodgeMinLaunch_Angle' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeStrength) == 0x000700, "Member 'UDodgeAbility_C::DodgeStrength' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeInPlaceVerticalStrength) == 0x000704, "Member 'UDodgeAbility_C::DodgeInPlaceVerticalStrength' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, OverlappedProjectiles) == 0x000708, "Member 'UDodgeAbility_C::OverlappedProjectiles' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgedRockets) == 0x000718, "Member 'UDodgeAbility_C::DodgedRockets' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, UpdateRocketsDodged) == 0x000720, "Member 'UDodgeAbility_C::UpdateRocketsDodged' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, NinjaHeadbandAbilityClass) == 0x000730, "Member 'UDodgeAbility_C::NinjaHeadbandAbilityClass' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, NinjaHeadbandActive) == 0x000738, "Member 'UDodgeAbility_C::NinjaHeadbandActive' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, CollisionCheckRadiusScalar) == 0x00073C, "Member 'UDodgeAbility_C::CollisionCheckRadiusScalar' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, CollisionCheckHeightScalar) == 0x000740, "Member 'UDodgeAbility_C::CollisionCheckHeightScalar' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, IsUsingMegablastCooldownReductionArtifact) == 0x000744, "Member 'UDodgeAbility_C::IsUsingMegablastCooldownReductionArtifact' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, MegablastArtifactCooldownReduction) == 0x000748, "Member 'UDodgeAbility_C::MegablastArtifactCooldownReduction' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AbilitiesToEndOnDodge) == 0x000750, "Member 'UDodgeAbility_C::AbilitiesToEndOnDodge' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeInPlace) == 0x000760, "Member 'UDodgeAbility_C::DodgeInPlace' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, ArenaBounds) == 0x000768, "Member 'UDodgeAbility_C::ArenaBounds' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, MinValidDistanceFromBounds) == 0x000770, "Member 'UDodgeAbility_C::MinValidDistanceFromBounds' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AnitKOLaunchScalarSide) == 0x000774, "Member 'UDodgeAbility_C::AnitKOLaunchScalarSide' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AntiKOLaunchScalarUp) == 0x000778, "Member 'UDodgeAbility_C::AntiKOLaunchScalarUp' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, LatestDodgeDuration) == 0x00077C, "Member 'UDodgeAbility_C::LatestDodgeDuration' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, IsUsingDodgeStrengthArtifact) == 0x000780, "Member 'UDodgeAbility_C::IsUsingDodgeStrengthArtifact' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeStrengthArtifactMultiplier) == 0x000784, "Member 'UDodgeAbility_C::DodgeStrengthArtifactMultiplier' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AnitKOGeoToBoundsTraceRadius) == 0x000788, "Member 'UDodgeAbility_C::AnitKOGeoToBoundsTraceRadius' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AnitKOGeoToBoundsObjectTypes) == 0x000790, "Member 'UDodgeAbility_C::AnitKOGeoToBoundsObjectTypes' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, MoveAffectingEffects) == 0x0007A0, "Member 'UDodgeAbility_C::MoveAffectingEffects' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, PredictiveEffects) == 0x0007B0, "Member 'UDodgeAbility_C::PredictiveEffects' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, UseEnhancedDirectionality) == 0x0007C0, "Member 'UDodgeAbility_C::UseEnhancedDirectionality' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AimUpMoveBack_MaxLaunchAngle_AimZ_Range) == 0x0007C4, "Member 'UDodgeAbility_C::AimUpMoveBack_MaxLaunchAngle_AimZ_Range' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AimUpMoveBack_MinLaunchAngle_AimZ_Range) == 0x0007C8, "Member 'UDodgeAbility_C::AimUpMoveBack_MinLaunchAngle_AimZ_Range' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeDownStrengthMulltiplier) == 0x0007CC, "Member 'UDodgeAbility_C::DodgeDownStrengthMulltiplier' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DebugPrintEnhancedDirectionalityInfo) == 0x0007D0, "Member 'UDodgeAbility_C::DebugPrintEnhancedDirectionalityInfo' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DownwardAimVector_Grounded_ZClamp) == 0x0007D4, "Member 'UDodgeAbility_C::DownwardAimVector_Grounded_ZClamp' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, bUseClientPredictiveDodge) == 0x0007D8, "Member 'UDodgeAbility_C::bUseClientPredictiveDodge' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, bEnableDebugSwitchDodgeSystemsOnReload) == 0x0007D9, "Member 'UDodgeAbility_C::bEnableDebugSwitchDodgeSystemsOnReload' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AntiKOLaunchScalarFloor) == 0x0007DC, "Member 'UDodgeAbility_C::AntiKOLaunchScalarFloor' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DodgeDownwardLaunchStrengthCurve) == 0x0007E0, "Member 'UDodgeAbility_C::DodgeDownwardLaunchStrengthCurve' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, EnhancedDodgeMinValidDistanceFromBounds) == 0x0007E8, "Member 'UDodgeAbility_C::EnhancedDodgeMinValidDistanceFromBounds' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, AntiKOBoundsFloorFailsafeCheckDistance) == 0x0007EC, "Member 'UDodgeAbility_C::AntiKOBoundsFloorFailsafeCheckDistance' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, IsUsingDamageIncreaseOnNoCooldownArtifact) == 0x0007F0, "Member 'UDodgeAbility_C::IsUsingDamageIncreaseOnNoCooldownArtifact' has a wrong offset!");
static_assert(offsetof(UDodgeAbility_C, DamageIncreaseArtifactCooldownIncrease) == 0x0007F4, "Member 'UDodgeAbility_C::DamageIncreaseArtifactCooldownIncrease' has a wrong offset!");

}

