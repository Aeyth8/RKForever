#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseImpulseHandler

#include "Basic.hpp"

#include "Mariner_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BaseImpulseHandler.BaseImpulseHandler_C
// 0x0000 (0x0048 - 0x0048)
class UBaseImpulseHandler_C : public UMarinerDamageImpulseHandler
{
public:
	struct FVector GetMinimumLaunchAngleVector(const struct FVector& Direction) const;
	void IsDirectionBelowMinimumAngle(const struct FVector& Direction, bool* Return) const;
	struct FVector BP_OverrideDamageImpulseOrigin(const class AActor* DamagedActor, const struct FVector& DamageOrigin, const struct FVector& DamageHitPoint, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const;
	struct FVector BP_CalculateDamageImpulseVector(const class AActor* DamagedActor, const float DamageImpulse, const struct FVector& DamageOrigin, const struct FVector& DamageDirection, const bool bIsAOEDamage, const class AController* DamageInstigator, const class AActor* DamageSourceActor) const;
	void GetRocketJumpDirectionAdjusted(class APawn* Pawn, const struct FVector& OriginalDirection, struct FVector* NewDirection, float* AdjustedPitchRatio) const;
	void GetRocketJumpCurveToUse(class APawn* Pawn, class UCurveFloat** Curve) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BaseImpulseHandler_C">();
	}
	static class UBaseImpulseHandler_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseImpulseHandler_C>();
	}
};
static_assert(alignof(UBaseImpulseHandler_C) == 0x000008, "Wrong alignment on UBaseImpulseHandler_C");
static_assert(sizeof(UBaseImpulseHandler_C) == 0x000048, "Wrong size on UBaseImpulseHandler_C");

}

