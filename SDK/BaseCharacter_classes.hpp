#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ItemBoxTypes_structs.hpp"
#include "ECharacterStance_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DodgeData_structs.hpp"
#include "Mariner_structs.hpp"
#include "Mariner_classes.hpp"
#include "GameplayAwardTypes_structs.hpp"
#include "DodgeDirections_structs.hpp"
#include "E_ItemActivationTypes_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BaseCharacter.BaseCharacter_C
// 0x0870 (0x28D0 - 0x2060)
class ABaseCharacter_C final : public AMarinerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2060(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               SpawnProtectionEndEmitter;                         // 0x2068(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SpawnProtectionEmitter;                            // 0x2070(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  SharedPostProcess;                                 // 0x2078(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               GroundJumpFX;                                      // 0x2080(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MegaBlastThresholdFX;                              // 0x2088(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMarinerPinComponent*                   MarkedTargetPin;                                   // 0x2090(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               AirJumpFX;                                         // 0x2098(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMarinerPinComponent*                   MarinerPin;                                        // 0x20A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeOut_Weight_51ED12CD422BEA7B9652F98F5B86E971; // 0x20A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeOut_SpeedBlend_51ED12CD422BEA7B9652F98F5B86E971; // 0x20AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeOut_Radius_51ED12CD422BEA7B9652F98F5B86E971; // 0x20B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpeedBoostFadeOut__Direction_51ED12CD422BEA7B9652F98F5B86E971; // 0x20B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2620[0x3];                                     // 0x20B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpeedBoostFadeOut;                                 // 0x20B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeIn_Weight_F65EA4F645E3D4423D41EB863DF61BA1; // 0x20C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeIn_SpeedBlend_F65EA4F645E3D4423D41EB863DF61BA1; // 0x20C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedBoostFadeIn_Radius_F65EA4F645E3D4423D41EB863DF61BA1; // 0x20C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpeedBoostFadeIn__Direction_F65EA4F645E3D4423D41EB863DF61BA1; // 0x20CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2621[0x3];                                     // 0x20CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpeedBoostFadeIn;                                  // 0x20D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RevealOutlinePostProcess_Radius_E5AE7BE84134AA9ED8A1889971411B49; // 0x20D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RevealOutlinePostProcess_OpacityMain_E5AE7BE84134AA9ED8A1889971411B49; // 0x20DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RevealOutlinePostProcess__Direction_E5AE7BE84134AA9ED8A1889971411B49; // 0x20E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2622[0x7];                                     // 0x20E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RevealOutlinePostProcess;                          // 0x20E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactPostProcessFadeOutTimeline_Weight_1C2DD924474EF820FBF85E90BA63D074; // 0x20F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ArtifactPostProcessFadeOutTimeline__Direction_1C2DD924474EF820FBF85E90BA63D074; // 0x20F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2623[0x3];                                     // 0x20F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ArtifactPostProcessFadeOutTimeline;                // 0x20F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactPostProcessFadeInTimeline_Weight_9F468BD5436BFCC893C81EB3972EA3D8; // 0x2100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ArtifactPostProcessFadeInTimeline__Direction_9F468BD5436BFCC893C81EB3972EA3D8; // 0x2104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2624[0x3];                                     // 0x2105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ArtifactPostProcessFadeInTimeline;                 // 0x2108(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessFadeOutTimeline_Weight_AD17075346FE9C53AC27EE8EEB29FA70; // 0x2110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpeedPostProcessFadeOutTimeline__Direction_AD17075346FE9C53AC27EE8EEB29FA70; // 0x2114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2625[0x3];                                     // 0x2115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpeedPostProcessFadeOutTimeline;                   // 0x2118(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessFadeInTimeline_Weight_8F68398541B9A80166EAD0A61CEA0C3D; // 0x2120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpeedPostProcessFadeInTimeline__Direction_8F68398541B9A80166EAD0A61CEA0C3D; // 0x2124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2626[0x3];                                     // 0x2125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpeedPostProcessFadeInTimeline;                    // 0x2128(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeInTimeline_FresnelGate3rd_FEEB93D14E8D226537F3E9AE4721CC31; // 0x2130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeInTimeline_FullGlowIntensity3rd_FEEB93D14E8D226537F3E9AE4721CC31; // 0x2134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeInTimeline_FresnelGate1st_FEEB93D14E8D226537F3E9AE4721CC31; // 0x2138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeInTimeline_FullGlowIntensity1st_FEEB93D14E8D226537F3E9AE4721CC31; // 0x213C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ArtifactFadeInTimeline__Direction_FEEB93D14E8D226537F3E9AE4721CC31; // 0x2140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2627[0x7];                                     // 0x2141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ArtifactFadeInTimeline;                            // 0x2148(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeOutTimeline_FresnelGate3rd_5C623454430A6378544C769F09AA6207; // 0x2150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeOutTimeline_FullGlowIntensity3rd_5C623454430A6378544C769F09AA6207; // 0x2154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeOutTimeline_FresnelGate1st_5C623454430A6378544C769F09AA6207; // 0x2158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactFadeOutTimeline_FullGlowIntensity1st_5C623454430A6378544C769F09AA6207; // 0x215C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ArtifactFadeOutTimeline__Direction_5C623454430A6378544C769F09AA6207; // 0x2160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2628[0x7];                                     // 0x2161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ArtifactFadeOutTimeline;                           // 0x2168(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockoutTimeline_Return_773FA1534BEEC66A91136BB2D6FD8B0A; // 0x2170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockoutTimeline_ArenaReturnKnockoutDecelerationCurve_773FA1534BEEC66A91136BB2D6FD8B0A; // 0x2174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KnockoutTimeline__Direction_773FA1534BEEC66A91136BB2D6FD8B0A; // 0x2178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2629[0x7];                                     // 0x2179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KnockoutTimeline;                                  // 0x2180(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalGroundFriction;                            // 0x2188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalBrakingDecelerationFalling;                // 0x218C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalBrakingDecelerationWalking;                // 0x2190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x2194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IKInterpSpeed;                                     // 0x2198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIK;                                           // 0x219C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262A[0x3];                                     // 0x219D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DropShadowMaxDrawDistance;                         // 0x21A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BigLandingImpactVelocity;                          // 0x21A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BigLandingShake;                                   // 0x21A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 NormalLandingShake;                                // 0x21B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKnockedOut;                                      // 0x21B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSeeAllyHealth;                                  // 0x21B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262B[0x2];                                     // 0x21BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumberOfFreezeFields;                              // 0x21BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            FreezeDebuffHandle;                                // 0x21C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            FreezeSelfBuffHandle;                              // 0x21C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         InputDI;                                           // 0x21D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DIFacingVector;                                    // 0x21D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DITimingWindow;                                    // 0x21E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialShrinkScale;                                // 0x21E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShrinkScaleMultiplier;                             // 0x21F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialShrinkEyeHeight;                            // 0x21F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialShrinkStepHeight;                           // 0x21F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            ShrinkDebuffHandle;                                // 0x21FC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShrunk;                                          // 0x2204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Unshrinking;                                       // 0x2205(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262C[0x2];                                     // 0x2206(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialShrinkLocation;                             // 0x2208(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_262D[0x4];                                     // 0x2214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           KnockedOutTimer;                                   // 0x2218(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             Landed;                                            // 0x2220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             Jumped;                                            // 0x2230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             ReturnedToArena;                                   // 0x2240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             ItemStolen;                                        // 0x2250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             AbilityFail;                                       // 0x2260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             AlternateAbilityIconUpdate;                        // 0x2270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         DefaultEyeHeight;                                  // 0x2280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EyeHeightOffset;                                   // 0x2284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             CriticallyHit;                                     // 0x2288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AController*                            RecentDamageCauser;                                // 0x2298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesMegablastSlomo;                                // 0x22A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsesReducedDamageModifier;                         // 0x22A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262E[0x6];                                     // 0x22A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             KnockedOutEnemy;                                   // 0x22A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UsesCritHitThirdPerson;                            // 0x22B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262F[0x3];                                     // 0x22B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CritHitTrailActivationDelay;                       // 0x22BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CritHitSpeed;                                      // 0x22C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CritHitVector;                                     // 0x22C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCritHitBounces;                             // 0x22D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCritHitBounces;                                 // 0x22D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesEndMatchSlomo;                                 // 0x22D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2630[0x3];                                     // 0x22D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousBounceLoc;                                 // 0x22DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousJumpCount;                                 // 0x22E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2631[0x4];                                     // 0x22EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          StunnedEnemySound2D;                               // 0x22F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TestTimer;                                         // 0x22F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CharacterImpulseMultiplierCurve;                   // 0x2300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             JumpBlocked;                                       // 0x2308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             JumpUnblocked;                                     // 0x2318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UsesImpulseJumpBlock;                              // 0x2328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2632[0x7];                                     // 0x2329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             SpecialAbilityInputPressed;                        // 0x2330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             OnJumpInputPressed;                                // 0x2340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanRegen;                                          // 0x2350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsesRegenSystem;                                   // 0x2351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsesApexForImpulse;                                // 0x2352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2633[0x5];                                     // 0x2353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             AirJump;                                           // 0x2358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector_NetQuantizeNormal              NetAcceleration;                                   // 0x2368(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2634[0x4];                                     // 0x2374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharacterImpulseTimeCurve;                         // 0x2378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          DangerZoneLoopBegin;                               // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          DangerZoneLoopEnd;                                 // 0x2388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DangerZoneLoopRTPC;                                // 0x2390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	ECharacterStance                              ECharacterStance;                                  // 0x23A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2635[0x3];                                     // 0x23A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaggerThreshold;                                  // 0x23A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             WallBounce;                                        // 0x23A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MaxComboCountClamp;                                // 0x23B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2636[0x4];                                     // 0x23BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MegaBlastRegenTimer;                               // 0x23C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MegaBlastRegenEnabled;                             // 0x23C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2637[0x7];                                     // 0x23C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             MegaBlastBleedThrough;                             // 0x23D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MegaBlastMeterMin;                                 // 0x23E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MegaBlastMeterMax;                                 // 0x23E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HealthRegenTimer;                                  // 0x23E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HealthRegenActive;                                 // 0x23F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseDamagePercent;                                  // 0x23F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShieldActive;                                    // 0x23F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2638[0x1];                                     // 0x23F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentShieldItemHealth;                           // 0x23F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             ShieldHealthChanged;                               // 0x23F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ClientShieldItemHealth;                            // 0x2408(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2639[0x4];                                     // 0x240C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             ShieldHealthDepleted;                              // 0x2410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMarinerParticleSystemComponent*        AttachedShield;                                    // 0x2420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MegaBlastDangerEffect;                             // 0x2428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnAdjustTraceDistance;                          // 0x2430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnAdjustHeightDelta;                            // 0x2434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastMegaBlastRotationTimeStamp;                    // 0x2438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BouncedDuringMegaBlast;                            // 0x243C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263A[0x3];                                     // 0x243D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             HitStunDebug;                                      // 0x2440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 KnockedOutEnemyEffect;                             // 0x2450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCausedDamageDebugReadout;                         // 0x2458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263B[0x3];                                     // 0x2459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                KnockoutVelocity;                                  // 0x245C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KnockoutMeshOffset;                                // 0x2468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KnockoutCharacterPosition;                         // 0x2474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bManCannonInitialEffectDone;                       // 0x2480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263C[0x7];                                     // 0x2481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             ArtifactProcOn;                                    // 0x2488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             ArtifactProcOff;                                   // 0x2498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 ManCannonInitialEffect;                            // 0x24A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KnockoutMeshBaseOffset;                            // 0x24B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitilizedArtifactGlowColor;                       // 0x24BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263D[0x3];                                     // 0x24BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ArtifactGlowOrange;                                // 0x24C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ArtifactGlowYellow;                                // 0x24D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ArtifactGlowGreen;                                 // 0x24E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ArtifactGlowPurple;                                // 0x24F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsArtifactDurationActive;                          // 0x2500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableArtifactVisuals;                             // 0x2501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263E[0x6];                                     // 0x2502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      SpeedPostProcessMaterial;                          // 0x2508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SpeedPostProcessMaterialDynamic;                   // 0x2510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ArtifactRemovalDelayTimer;                         // 0x2518(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelOpacity1stPerson;               // 0x2520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelOpacity3rdPerson;               // 0x2524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpeedPostProcessActive;                            // 0x2528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263F[0x3];                                     // 0x2529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedPostProcessDefaultWeight;                     // 0x252C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessMaxWeight;                         // 0x2530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessMaxSpeed;                          // 0x2534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessBoostMinSpeed;                     // 0x2538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessFadeOutDelay;                      // 0x253C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedPostProcessSpeedBlend;                        // 0x2540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSpeedBoostFX;                                   // 0x2544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSpeedPostProcess;                               // 0x2545(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2640[0x2];                                     // 0x2546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SpeedPostProcessDefaultWindColor;                  // 0x2548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SpeedPostProcessDefaultColor;                      // 0x2558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpeedBoostRemovalDelayTimer;                       // 0x2568(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ArtifactPostProcessMaterialDynamic;                // 0x2570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      HealingPostProcessMaterial;                        // 0x2578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      DamagePostProcessMaterial;                         // 0x2580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      UtilityPostProcessMaterial;                        // 0x2588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RefreshPostProcessMaterial;                        // 0x2590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      ItemPickupPostProcessMaterial;                     // 0x2598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RevealOutlinesPulseMaterialInstance;               // 0x25A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseArtifactPostProcess;                            // 0x25A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ArtifactSpeedPostProcessesFXActive;                // 0x25A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2641[0x2];                                     // 0x25AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArtifactGlowAdjustScalar1stPerson;                 // 0x25AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowAdjustScalar3rdPerson;                 // 0x25B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelScaleY1stPerson;                // 0x25B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelScaleY3rdPerson;                // 0x25B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelPanY1stPerson;                  // 0x25BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactGlowFresnelPanY3rdPerson;                  // 0x25C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockoutMaxDistanceCheck;                          // 0x25C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CurrentArtifactGameplayTag;                        // 0x25C8(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ArtifactInstantFadeOutDelay;                       // 0x25D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpawnProtectionFeatureEnabled;                   // 0x25D4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnProtectionEnabledLocalPlayer;                 // 0x25D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnProtectionEnabled;                            // 0x25D6(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2642[0x1];                                     // 0x25D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnProtectionTimer;                              // 0x25D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnProtectionDuration;                           // 0x25E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnProtectionEmitterScale;                       // 0x25E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastInlineDelegateProperty_             OnSpawnProtectionChange;                           // 0x25F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class AController*>                    RecentlyDamagedByControllers;                      // 0x2600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<float>                                 RecentlyDamagedByTimeStamp;                        // 0x2610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         AssistStatTimeLimit;                               // 0x2620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use3rdPersonCamera;                                // 0x2624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor)
	bool                                          ThreerdPersonCameraAdjustmentEnabled;              // 0x2625(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2643[0x2];                                     // 0x2626(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ThirdPersonCameraLocation;                         // 0x2628(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2644[0x4];                                     // 0x2634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_ResetMegablastCount;                   // 0x2638(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SurvivedMegablastDurationCurve;                    // 0x2640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVariableMegablastsEnabled;                        // 0x2648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2645[0x7];                                     // 0x2649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_RemoveMegablast;                       // 0x2650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SurvivedMegablastCount;                            // 0x2658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MegablastHealthScalar;                             // 0x265C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MegablastDurationCurve;                            // 0x2660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MegablastImpulseThreshold;                         // 0x2668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ImpulseMegablastDuration;                          // 0x2670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowImpulseStrength;                               // 0x2678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2646[0x7];                                     // 0x2679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             DodgeStartedNavPin;                                // 0x2680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveFloat*                            DodgeFlashAnim;                                    // 0x2690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnProtectionTeamColorSet;                       // 0x2698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InitialGroundedSpeedApplied;                       // 0x2699(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2647[0x6];                                     // 0x269A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GroundedSpeedEffect;                               // 0x26A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           DebugChosenPlayerstateToView;                      // 0x26A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugChosenPlayerstateToViewOffset;                // 0x26B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2648[0x4];                                     // 0x26B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AViewTargetActor_C*                     ViewTargetActor;                                   // 0x26B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LongshotAwardMinDistance;                          // 0x26C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2649[0x4];                                     // 0x26C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnGameplayAwardGiven;                              // 0x26C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanGiveMegablastHealsAward;                        // 0x26D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_264A[0x7];                                     // 0x26D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RecoveryRewardTimer;                               // 0x26E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BigHitAwardMinimumImpulse;                         // 0x26E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264B[0x4];                                     // 0x26EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerFastArenaBounds*                ArenaBounds;                                       // 0x26F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryAwardUpTraceDistance;                      // 0x26F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryAwardShortDownTraceDistance;               // 0x26FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryAwardLongDownTraceDistance;                // 0x2700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryAwardHorizontalTraceDistance;              // 0x2704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanGiveRecoveryAward;                              // 0x2708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_264C[0x3];                                     // 0x2709(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MegablastHealsAwardThreshold;                      // 0x270C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowCharacterEmotes;                             // 0x2710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_264D[0x7];                                     // 0x2711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         DebugGameplayEffectsToWatch;                       // 0x2718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDebugPrintGameplayEffectLevels;                   // 0x2728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugItemSpawnSucceeded;                          // 0x2729(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrowInputHeld;                                   // 0x272A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRespondedToABounceSinceLastHostileImpulse;        // 0x272B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsDodging;                                        // 0x272C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_264E[0x3];                                     // 0x272D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DodgeCameraShake;                                  // 0x2730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           DodgeIgnoreActorTypes;                             // 0x2738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UForceFeedbackEffect*                   ItemPickupFFE;                                     // 0x2748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   JumpFFE;                                           // 0x2750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   AirJumpFFE;                                        // 0x2758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   MegablastFFE;                                      // 0x2760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   KnockoutFFE;                                       // 0x2768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LandFFE;                                           // 0x2770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   BigLandFFE;                                        // 0x2778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowReturnTravelDebug;                             // 0x2780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableUberCheating;                                // 0x2781(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_264F[0x2];                                     // 0x2782(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugPlaySoundLoopFreqency;                        // 0x2784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DebugPlaySoundName;                                // 0x2788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDebugPlaySoundLoop;                               // 0x2798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2650[0x7];                                     // 0x2799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DebugPlaySoundLoopTimer;                           // 0x27A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UAkAudioEvent*>     DebugSoundMap;                                     // 0x27A8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   DebugSoundShape;                                   // 0x27F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DebugSoundLocationHolder;                          // 0x2800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            DebugSoundShapeMesh;                               // 0x2808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterFadeOutAddedHeight;                       // 0x2810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterFadeOutAddedRadius;                       // 0x2814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   ItemDropFFE;                                       // 0x2818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnProtectionIgnoreInputCancel;                  // 0x2820(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2651[0x3];                                     // 0x2821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgeFlashAnimCycleDuration;                       // 0x2824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDodgeData                             DodgeData;                                         // 0x2828(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         DodgeStartTimeStamp;                               // 0x2834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DodgeMaterialFlashLoopCount;                       // 0x2838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2652[0x4];                                     // 0x283C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BigHitBlockingTags;                                // 0x2840(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Timer_DodgePostProcessInterp;                      // 0x2860(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LastDodgePostProcessBlend;                         // 0x2868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDodgePostProcessTime;                          // 0x286C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DodgePostProcessMaterialDynamic;                   // 0x2870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DodgePostProcessToggle;                            // 0x2878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2653[0x3];                                     // 0x2879(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DodgePostProcessInterpSpeed;                       // 0x287C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebugSavedActorLocation;                           // 0x2880(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DebugSavedActorRotation;                           // 0x288C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsInputActionFireHeld;                            // 0x2898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsInputActionAltFireHeld;                         // 0x2899(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsSpecialAbilityHeld;                             // 0x289A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableFreeze;                                     // 0x289B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	float                                         FreezeDebuffDuration;                              // 0x289C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnProtectionVFXEnabled;                         // 0x28A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2654[0x3];                                     // 0x28A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RecoveriesStatName;                                // 0x28A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultIncrementStatValue;                         // 0x28AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MegablastHealsStatName;                            // 0x28B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BigHitStatName;                                    // 0x28B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpikesStatName;                                    // 0x28C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LongshotStatName;                                  // 0x28C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Landed__DelegateSignature();
	void Jumped__DelegateSignature();
	void ReturnedToArena__DelegateSignature(class AMarinerCharacter* ReturnedCharacter);
	void ItemStolen__DelegateSignature();
	void AbilityFail__DelegateSignature(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags);
	void AlternateAbilityIconUpdate__DelegateSignature(bool UseAlternate, class UClass* AbiltiyClass);
	void CriticallyHit__DelegateSignature();
	void KnockedOutEnemy__DelegateSignature();
	void JumpBlocked__DelegateSignature();
	void JumpUnblocked__DelegateSignature();
	void SpecialAbilityInputPressed__DelegateSignature();
	void OnJumpInputPressed__DelegateSignature();
	void AirJump__DelegateSignature();
	void WallBounce__DelegateSignature(const struct FVector& Direction);
	void MegaBlastBleedThrough__DelegateSignature();
	void ShieldHealthChanged__DelegateSignature();
	void ShieldHealthDepleted__DelegateSignature();
	void HitStunDebug__DelegateSignature();
	void ArtifactProcOn__DelegateSignature();
	void ArtifactProcOff__DelegateSignature();
	void OnSpawnProtectionChange__DelegateSignature(bool IsEnabled, float Duration, float Timestamp);
	void DodgeStartedNavPin__DelegateSignature(float DodgeDuration);
	void OnGameplayAwardGiven__DelegateSignature(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal);
	void ExecuteUbergraph_BaseCharacter(int32 EntryPoint);
	void IncrementPlayerStat(const class FName& StatName, const int32& Value, bool bGiveGameplayAward);
	void PotentialThrowPriorityItemSpoof();
	void HandleDodgeStateRemoved();
	void HandleDodgeStateApplied();
	void BP_OnMoveAffectingGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void BP_OnMoveAffectingGameplayEffectApplied(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void ServerDebugBombMe();
	void DebugBombMe();
	void DebugSetActorRotationOnClientWithRotator(float Pitch, float Yaw, float Roll);
	void DebugSaveClientControlRotation();
	void DebugSetActorRotationOnClient();
	void DebugSetActorRotation(float Pitch, float Yaw, float Roll);
	void DebugSetActorLocation(float X, float Y, float Z);
	void DebugMoveActorToSavedLocation();
	void DebugSaveActorLocation();
	void UpdateDodgePPBlendWeight();
	void ToggleDodgePostProcess(bool AbilityActivated);
	void OnDodgeDataUpdated();
	void InpAxisEvt_AltFire_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_Fire_K2Node_InputAxisEvent_0(float AxisValue);
	void ServerToggleSuppression(bool Suppress);
	void DebugUnsuppressAllCharacters();
	void DebugSuppressAllCharacters();
	void DebugDrawSoundHostility();
	void DebugPlayAnimation(const class FString& Character, const class FString& Number);
	void ServerDebugPlayAnimation(const class FString& Character, const class FString& Number);
	void OnThrowReleasedEvent(class AMarinerCharacter* ThrowingCharacter, EMarinerItemSlot ItemSlot);
	void Try_Reapply_Artifact();
	void Debugprintsoundoptions();
	void Debugstopsoundlocalloop();
	void Debugstopsoundloop();
	void Debugplaysoundlocalloop(const class FString& SoundName, float LoopFrequency);
	void PlayLoopingDebugSound();
	void Debugplaysoundloop(const class FString& SoundName, float LoopFrequency);
	void Multicastdebugplaysound(const class FString& SoundName, bool bLoop, float LoopFrequency);
	void Serverdebugplaysound(const class FString& SoundName, bool bLoop, float LoopFrequency);
	void Debugplaysound(const class FString& SoundName);
	void Debugplaysoundinternal(const class FString& SoundName, bool bLoop, float LoopFrequency);
	void Multicastdebugtogglesoundattach();
	void Serverdebugtogglesoundattach();
	void Debugtogglesoundattach();
	void Debugtogglesoundlocationvisibility();
	void Debugplaysoundlocal(const class FString& SoundName);
	void ServerEnterReality(EMarinerRealityState Reality);
	void DebugEnterReality(const class FString& Reality);
	void OnItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);
	void HandleItemActivation(E_ItemActivationTypes ItemUseType);
	void HandleItemActivationAnims(E_ItemActivationTypes ItemUseType);
	void DebugEnableUberCheating(bool Enable);
	void ServerMegablastEnemyTeam();
	void ToggleReturnTravelDistanceDebug(bool Enable);
	void BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_5_OnCatchCompletedSignature__DelegateSignature(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot);
	void OnJump(uint8 JumpCount);
	void OnLaunchedDelegate_Event_0(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasMegablast);
	void SpoofThrowPriorityItemm();
	void ServerDebugTestGameplayEffect();
	void DebugTestGameplayEffectInternal();
	void DebugTestGameplayEffect();
	void EnableCharacterEmote();
	void Character_Emote_MultiCast(EMarinerInputActions MarinerInputAction);
	void Character_Emote_Server(EMarinerInputActions MarinerInputAction);
	void ServerGiveGamplayAward(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal);
	void ClientGiveGameplayAward(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal);
	void DebugPrintPlayerStateList();
	void DebugPrintControllerList();
	void DebugPrintCharacterList();
	void ServerDebugViewNextCharacter(class APlayerState* PlayerStateToView);
	void DebugViewNextCharacterLocal(class APlayerState* PlayerStateToView);
	void DebugViewNextCharacter();
	void ServerDebugRemoveCooldowns();
	void DebugRemoveCooldowns();
	void AuthorityDebugRemoveCooldowns();
	void ServerDebugGiveItem(const class FString& ItemName);
	void DebugGiveItem(const class FString& ItemName);
	void AuthorityDebugGiveItem(const class FString& ItemName);
	void BndEvt__MarinerCharacterMovement_K2Node_ComponentBoundEvent_2_OnChangesCardinalDirectionSignature__DelegateSignature(EMarinerCardinalDirection NewDirection, EMarinerCardinalDirection PreviousDirection);
	void TriggerDodgeFeedback(EDodgeDirections DodgeDirection, float DodgeDuration);
	void TimerEventDeactivatePlayerLaunchedTrail();
	void OnLocalArenaReturnTeleport();
	void ReceiveTick(float DeltaSeconds);
	void SetImpendingMegablastStance(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast);
	void OnRegenSuppressionEnd();
	void ConsoleTestSpawnProtection(bool IsEnabled, float Param_SpawnProtectionDuration);
	void OnSpawnProtectionTimerEnd();
	void ClientBroadcastRemoveSpawnProtection();
	void OnRoundTransitionChange_Event_0(bool IsEnabled);
	void StopSpeedBoostItemPostProcessFadeOut();
	void StartSpeedBoostItemPostProcessFadeOut();
	void StopSpeedBoostItemPostProcessFadeIn();
	void StartSpeedBoostItemPostProcessFadeIn();
	void OnPostSkinApply();
	void OnAnyKnockout(class AMarinerCharacter* KnockOutInstigator, bool bWasMegablast, const struct FVector& KnockoutDir);
	void BP_OnKnockedOutFromMegablast(class AMarinerCharacter* MegablastInstigator, const struct FVector& KnockOutDirection);
	void BP_OnKnockedOut(class AMarinerCharacter* KnockOutInstigator, const struct FVector& KnockOutDirection);
	void StartRevealOutlinesPostProcess();
	void OnSpeedPostProcessInstantTimeEnd();
	void OnArtifactInstantTimerEnd();
	void StopArtifactPostProcessFadeOut();
	void StartArtifactPostProcessFadeOut();
	void StopArtifactPostProcessFadeIn();
	void StartArtifactPostProcessFadeIn();
	void StartSpeedPostProcess_Loop();
	void StopSpeedPostProcessFadeOut();
	void StartSpeedPostProcessFadeOut();
	void StopSpeedPostProcessFadeIn();
	void StartSpeedPostProcessFadeIn();
	void StopArtifactGlowFadeIn();
	void StartArtifactGlowFadeIn();
	void StopArtifactGlowFadeOut();
	void StartArtifactGlowFadeOut();
	void OnGameplayTagRemoved(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag);
	void OnGameplayTagApplied(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag);
	void RemoveManCannon(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void AddManCannon(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void DamageCaused(class AActor* DamagedActor, bool bDamageWasAOE, bool bDamageWasMegablast, class UClass* DamageType, const struct FVector& ImpulseVector, float Damage);
	void OnMoveAffectingGameplayEffectApplied(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel);
	void OnAirJumpDelegate(uint8 JumpCount);
	void BP_OnHitStunRemoved();
	void StopActiveMontages();
	void DelayedStartingShieldHealth();
	void ClientShieldHealthUpdate(float ShieldHealth);
	void EndShieldAbility();
	void ShieldTest(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BP_MegablastTimedUpdate();
	void BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnMegablastStateChangedSignature__DelegateSignature(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerPlayerState* MegablastInstigator, bool bEnteredState);
	void BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_1_OnAccumulatedDamageChangedEvent__DelegateSignature(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAmount, float OldAmount);
	void SetUpHitStunListeners();
	void BlastedTrailToggled(bool bTrailActive, const struct FVector& CurrentVelocity, bool bMegablasted);
	void OnHitStunApplied(const struct FVector& CurrentVelocity, bool bMegablasted);
	void HitStunRemoved();
	void NetBounceEvent(const struct FVector_NetQuantizeNormal& BounceDirection);
	void CallTempBounceDelegate(const struct FHitResult& BounceHitResult, bool bBouncingWhileMegablasted);
	void BP_OnKnockedOutAuthoritative();
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void ComboMultiplierServer(bool IncreasedCombo);
	void KnockedOutEnemyCameraShake();
	void OnKnockedOtherCharacterOutAuthorityDelegate_Event_0();
	void StopSlomo();
	void EndMatchSlomo();
	void SendNotifyToClient(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags);
	void AbilityFailed(const class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags);
	void ReceiveBeginPlay();
	void ServerSuppressInput(bool Suppress, const class FString& WhoSetME);
	void SuppressInput(bool Suppress, const class FString& WhoSetME);
	void OnCharacterRecovered_Event_0(class AMarinerCharacter* RecoveredCharacter);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePossessed(class AController* NewController);
	void OnJumped();
	void BP_OnEndArenaReturn();
	void BP_OnBeginArenaReturn();
	void ResetInputDI();
	void SetDIServer(int32 Param_InputDI, const struct FRotator& DIRotation);
	void EnableItemInteraction();
	void BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_0_OnStealSignature__DelegateSignature(class AMarinerCharacter* StealingCharacter, class AMarinerCharacter* VictimCharacter, EMarinerItemSlot ItemSlot);
	void OnLanded(const struct FHitResult& Hit);
	void ToggleDodgeCollision(bool Enabled);
	void EndDodgeFlash();
	void InpActEvt_Home_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_End_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_UseItem_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ThrowBall_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_ThrowBall_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_SpecialAbility_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_SpecialAbility_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_AltFire_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_AltFire_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_SpecialAbility_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_10(const struct FKey& Key);
	void SpeedBoostFadeOut__UpdateFunc();
	void SpeedBoostFadeOut__FinishedFunc();
	void SpeedBoostFadeIn__UpdateFunc();
	void SpeedBoostFadeIn__FinishedFunc();
	void RevealOutlinePostProcess__UpdateFunc();
	void RevealOutlinePostProcess__FinishedFunc();
	void ArtifactPostProcessFadeOutTimeline__UpdateFunc();
	void ArtifactPostProcessFadeOutTimeline__FinishedFunc();
	void ArtifactPostProcessFadeInTimeline__UpdateFunc();
	void ArtifactPostProcessFadeInTimeline__FinishedFunc();
	void SpeedPostProcessFadeOutTimeline__UpdateFunc();
	void SpeedPostProcessFadeOutTimeline__FinishedFunc();
	void SpeedPostProcessFadeInTimeline__UpdateFunc();
	void SpeedPostProcessFadeInTimeline__FinishedFunc();
	void ArtifactFadeInTimeline__UpdateFunc();
	void ArtifactFadeInTimeline__FinishedFunc();
	void ArtifactFadeOutTimeline__UpdateFunc();
	void ArtifactFadeOutTimeline__FinishedFunc();
	void KnockoutTimeline__UpdateFunc();
	void KnockoutTimeline__FinishedFunc();
	void FreezeFieldCounter(bool& EnterZone, class APawn*& Param_Instigator);
	void GetKnockoutHealthRecovery(float* HealthToRecover);
	void UpdateStockTimeSinceKnockedOutStat();
	void SetStockKnockedOutTimer();
	void ToggleAlternateAbilityIcon(bool bIsAlternate, class UClass* AbilityClass);
	void UpdateHighestPercentStat();
	void OnRep_ECharacterStance();
	void TeamColorMegaBlastThresholdFX();
	void GetDangerThreshold(float* Threshold);
	void HandleShieldItemDamage(float IncomingDamage, bool* IsShieldDepleted);
	void SetShieldItemStartingHealth(float StartingHealth);
	void EndShieldItemAbility();
	void OnRep_CurrentShieldItemHealth();
	void AdjustSpawnHeight();
	struct FRotator GetMegaBlastControlRotation();
	void ToggleMegaBlastCamera(bool ThirdPerson);
	class UParticleSystemComponent* GetJumpFXParticleSystemComponent(int32 CurrentJumpCount);
	void HandleMoveAffectingGameplayEffectApplied(class UClass* Effect);
	void HandleKnockedOutEnemyEffectApplied();
	void DebugDamageCaused(const class UObject* Object, bool InBool, bool InBool2, class UClass* Param_Class, const struct FVector& InVec, float InFloat);
	void EnableManCannonChangeDirection();
	void HandleManCannonEffectAdded(class UClass* GameplayEffect);
	void HandleManCannonEffectRemoved(class UClass* GameplayEffect);
	void HandleArtifactTagApplication(const struct FGameplayTag& GameplayTag, bool* TagHandled);
	void HandleArtifactTagRemoval(const struct FGameplayTag& GameplayTag, bool* TagHandled);
	void InitializeArtifactGlowValues(const struct FGameplayTag& TagType);
	void SetupSharedPostProcess();
	void HandleGameplayTagApplication(const struct FGameplayTag& GameplayTag, bool* TagHandled);
	void HandleGameplayTagRemoval(const struct FGameplayTag& GameplayTag, bool* TagHandled);
	void InitializeArtifactPostProcess(const struct FGameplayTag& GameplayTag);
	void UpdateSpeedPostProcess();
	void UpdateArtifactGlowFadeIn(float FullGlowIntensity1st, float FresnelGate1st, float FullGlowIntensity3rd, float FresnelGate3rd);
	void UpdateArtifactGlowFadeOut(float FullGlowIntensity1st, float FresnelGate1st, float FullGlowIntensity3rd, float FresnelGate3rd);
	void SetSpeedBoostPostProcessColor(float Radius, float SpeedBlend, float Weight);
	void OnRep_CurrentArtifactGameplayTag();
	void CheckForAppliedArtifactOnBeginPlay();
	void ModifyAttackSpeedMontagePlayRate(class UAnimMontage* Montage);
	void ClearCameraShakes();
	void OnRep_SpawnProtectionEnabled();
	void ServerSetSpawnProtectionEnabled(bool IsEnabled);
	void AddEnemyToRecentlyDamageByList(class AController* DamagedByController);
	void AwardAssistsOnKOed(class AMarinerCharacter* KnockOutInstigator);
	void ClearRecentlyDamagedByList();
	void WasRecentlyDamagedByPlayer(class AController* ControllerToCheck, float TimeLimit, bool* RecentlyDamaged);
	void UpdateRecentlyDamagedOnMegablast();
	void HandleGroundedSpeedEffect(EMovementMode MovementMode);
	void GetGroundedSpeedEffect(class UClass** Param_GroundedSpeedEffect);
	void ActiveGameplayEffectQuerySignature_Cooldown(const struct FActiveGameplayEffect& GameplayEffect, bool* Bool);
	void GetNextDebugViewTarget();
	void GetDebugViewTargetActor(class AViewTargetActor_C** Param_ViewTargetActor);
	void DebugPrintAllOfActorType(class UClass* ActorClass);
	void UpdateAwardsOnDamageCaused(const class AActor* DamagedActor, bool DamageWasAoE, bool DamageWasMegablast, class UClass* DamageType, const struct FVector& ImpulseVector, float Damage);
	void UpdateRecoveryAwardOnHitStunRemoved();
	struct FVector GetJumpParticlesOffset();
	void GetGameplayAwardTypeFromStat(class FName Stat, EGameplayAwardTypes* AwardType);
	void DebugPrintGameplayEffectLevel(class UClass* Effect, float DeltaTime);
	void DebugPrintGameplayEffectLevels(float DeltaTime);
	void DodgeCollisionToggleInternal(bool CollisionEnabled);
	void RemoveDodgeFX();
	void UpdateDodgeMaterial();
	void IgnoreActorTypesForDodge(bool bIgnore);
	void ApplyJumpFFE();
	void ApplyLandedFFE();
	void ApplyKnockoutFFE();
	void StartMegablastFFE();
	void StopMegablastFFE();
	void ApplyItemPickupFFE();
	struct FMarinerCameraPerspective BP_OnChangePerspective(const class FName& PerspectiveName, struct FMarinerCameraPerspective& Perspective);
	void GetOrCreateDebugSoundShape(class UStaticMeshComponent** Param_DebugSoundShape);
	void GetOrCreateDebugSoundHolder(class USceneComponent** DebugSoundHolder);
	void ApplyItemDropFFE();
	void OnRep_DodgeData();
	void SetDodgeData(const struct FDodgeData& Param_DodgeData);
	void DebugTryToSpawnItem(const class FString& DesiredItem);
	void DebugGetFullValidItemTypeArray(TArray<EItemBoxTypes>* ValidItemArray);
	void DebugGetFullValidItemPickupArray(TArray<TSoftClassPtr<class UClass>>* ItemPickupArray);
	void HandleRemoveSpawnProtection();
	void OnRep_bEnableFreeze();
	void ClientSetSpawnProtectionVFXEnabled(bool IsEnabled);
	void OnRep_SpawnProtectionVFXEnabled();
	void ServerSetSpawnProtectionVFXEnabled(bool IsEnabled);
	void DestroyBlastballFXOnDrop(class UParticleSystemComponent*& HoldingBlastballFX);

	void CanInputQueueThrowPriorityItem(bool* bCanInputQueue) const;
	bool ShouldKnockoutInitiateSplat(bool bWasKnockoutDueToMegablast) const;
	bool GetDodgeReplicationTrigger() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BaseCharacter_C">();
	}
	static class ABaseCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABaseCharacter_C>();
	}
};
static_assert(alignof(ABaseCharacter_C) == 0x000010, "Wrong alignment on ABaseCharacter_C");
static_assert(sizeof(ABaseCharacter_C) == 0x0028D0, "Wrong size on ABaseCharacter_C");
static_assert(offsetof(ABaseCharacter_C, UberGraphFrame) == 0x002060, "Member 'ABaseCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionEndEmitter) == 0x002068, "Member 'ABaseCharacter_C::SpawnProtectionEndEmitter' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionEmitter) == 0x002070, "Member 'ABaseCharacter_C::SpawnProtectionEmitter' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SharedPostProcess) == 0x002078, "Member 'ABaseCharacter_C::SharedPostProcess' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, GroundJumpFX) == 0x002080, "Member 'ABaseCharacter_C::GroundJumpFX' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastThresholdFX) == 0x002088, "Member 'ABaseCharacter_C::MegaBlastThresholdFX' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MarkedTargetPin) == 0x002090, "Member 'ABaseCharacter_C::MarkedTargetPin' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AirJumpFX) == 0x002098, "Member 'ABaseCharacter_C::AirJumpFX' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MarinerPin) == 0x0020A0, "Member 'ABaseCharacter_C::MarinerPin' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeOut_Weight_51ED12CD422BEA7B9652F98F5B86E971) == 0x0020A8, "Member 'ABaseCharacter_C::SpeedBoostFadeOut_Weight_51ED12CD422BEA7B9652F98F5B86E971' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeOut_SpeedBlend_51ED12CD422BEA7B9652F98F5B86E971) == 0x0020AC, "Member 'ABaseCharacter_C::SpeedBoostFadeOut_SpeedBlend_51ED12CD422BEA7B9652F98F5B86E971' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeOut_Radius_51ED12CD422BEA7B9652F98F5B86E971) == 0x0020B0, "Member 'ABaseCharacter_C::SpeedBoostFadeOut_Radius_51ED12CD422BEA7B9652F98F5B86E971' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeOut__Direction_51ED12CD422BEA7B9652F98F5B86E971) == 0x0020B4, "Member 'ABaseCharacter_C::SpeedBoostFadeOut__Direction_51ED12CD422BEA7B9652F98F5B86E971' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeOut) == 0x0020B8, "Member 'ABaseCharacter_C::SpeedBoostFadeOut' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeIn_Weight_F65EA4F645E3D4423D41EB863DF61BA1) == 0x0020C0, "Member 'ABaseCharacter_C::SpeedBoostFadeIn_Weight_F65EA4F645E3D4423D41EB863DF61BA1' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeIn_SpeedBlend_F65EA4F645E3D4423D41EB863DF61BA1) == 0x0020C4, "Member 'ABaseCharacter_C::SpeedBoostFadeIn_SpeedBlend_F65EA4F645E3D4423D41EB863DF61BA1' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeIn_Radius_F65EA4F645E3D4423D41EB863DF61BA1) == 0x0020C8, "Member 'ABaseCharacter_C::SpeedBoostFadeIn_Radius_F65EA4F645E3D4423D41EB863DF61BA1' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeIn__Direction_F65EA4F645E3D4423D41EB863DF61BA1) == 0x0020CC, "Member 'ABaseCharacter_C::SpeedBoostFadeIn__Direction_F65EA4F645E3D4423D41EB863DF61BA1' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostFadeIn) == 0x0020D0, "Member 'ABaseCharacter_C::SpeedBoostFadeIn' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RevealOutlinePostProcess_Radius_E5AE7BE84134AA9ED8A1889971411B49) == 0x0020D8, "Member 'ABaseCharacter_C::RevealOutlinePostProcess_Radius_E5AE7BE84134AA9ED8A1889971411B49' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RevealOutlinePostProcess_OpacityMain_E5AE7BE84134AA9ED8A1889971411B49) == 0x0020DC, "Member 'ABaseCharacter_C::RevealOutlinePostProcess_OpacityMain_E5AE7BE84134AA9ED8A1889971411B49' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RevealOutlinePostProcess__Direction_E5AE7BE84134AA9ED8A1889971411B49) == 0x0020E0, "Member 'ABaseCharacter_C::RevealOutlinePostProcess__Direction_E5AE7BE84134AA9ED8A1889971411B49' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RevealOutlinePostProcess) == 0x0020E8, "Member 'ABaseCharacter_C::RevealOutlinePostProcess' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeOutTimeline_Weight_1C2DD924474EF820FBF85E90BA63D074) == 0x0020F0, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeOutTimeline_Weight_1C2DD924474EF820FBF85E90BA63D074' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeOutTimeline__Direction_1C2DD924474EF820FBF85E90BA63D074) == 0x0020F4, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeOutTimeline__Direction_1C2DD924474EF820FBF85E90BA63D074' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeOutTimeline) == 0x0020F8, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeOutTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeInTimeline_Weight_9F468BD5436BFCC893C81EB3972EA3D8) == 0x002100, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeInTimeline_Weight_9F468BD5436BFCC893C81EB3972EA3D8' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeInTimeline__Direction_9F468BD5436BFCC893C81EB3972EA3D8) == 0x002104, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeInTimeline__Direction_9F468BD5436BFCC893C81EB3972EA3D8' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessFadeInTimeline) == 0x002108, "Member 'ABaseCharacter_C::ArtifactPostProcessFadeInTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeOutTimeline_Weight_AD17075346FE9C53AC27EE8EEB29FA70) == 0x002110, "Member 'ABaseCharacter_C::SpeedPostProcessFadeOutTimeline_Weight_AD17075346FE9C53AC27EE8EEB29FA70' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeOutTimeline__Direction_AD17075346FE9C53AC27EE8EEB29FA70) == 0x002114, "Member 'ABaseCharacter_C::SpeedPostProcessFadeOutTimeline__Direction_AD17075346FE9C53AC27EE8EEB29FA70' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeOutTimeline) == 0x002118, "Member 'ABaseCharacter_C::SpeedPostProcessFadeOutTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeInTimeline_Weight_8F68398541B9A80166EAD0A61CEA0C3D) == 0x002120, "Member 'ABaseCharacter_C::SpeedPostProcessFadeInTimeline_Weight_8F68398541B9A80166EAD0A61CEA0C3D' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeInTimeline__Direction_8F68398541B9A80166EAD0A61CEA0C3D) == 0x002124, "Member 'ABaseCharacter_C::SpeedPostProcessFadeInTimeline__Direction_8F68398541B9A80166EAD0A61CEA0C3D' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeInTimeline) == 0x002128, "Member 'ABaseCharacter_C::SpeedPostProcessFadeInTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline_FresnelGate3rd_FEEB93D14E8D226537F3E9AE4721CC31) == 0x002130, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline_FresnelGate3rd_FEEB93D14E8D226537F3E9AE4721CC31' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline_FullGlowIntensity3rd_FEEB93D14E8D226537F3E9AE4721CC31) == 0x002134, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline_FullGlowIntensity3rd_FEEB93D14E8D226537F3E9AE4721CC31' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline_FresnelGate1st_FEEB93D14E8D226537F3E9AE4721CC31) == 0x002138, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline_FresnelGate1st_FEEB93D14E8D226537F3E9AE4721CC31' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline_FullGlowIntensity1st_FEEB93D14E8D226537F3E9AE4721CC31) == 0x00213C, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline_FullGlowIntensity1st_FEEB93D14E8D226537F3E9AE4721CC31' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline__Direction_FEEB93D14E8D226537F3E9AE4721CC31) == 0x002140, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline__Direction_FEEB93D14E8D226537F3E9AE4721CC31' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeInTimeline) == 0x002148, "Member 'ABaseCharacter_C::ArtifactFadeInTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline_FresnelGate3rd_5C623454430A6378544C769F09AA6207) == 0x002150, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline_FresnelGate3rd_5C623454430A6378544C769F09AA6207' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline_FullGlowIntensity3rd_5C623454430A6378544C769F09AA6207) == 0x002154, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline_FullGlowIntensity3rd_5C623454430A6378544C769F09AA6207' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline_FresnelGate1st_5C623454430A6378544C769F09AA6207) == 0x002158, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline_FresnelGate1st_5C623454430A6378544C769F09AA6207' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline_FullGlowIntensity1st_5C623454430A6378544C769F09AA6207) == 0x00215C, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline_FullGlowIntensity1st_5C623454430A6378544C769F09AA6207' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline__Direction_5C623454430A6378544C769F09AA6207) == 0x002160, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline__Direction_5C623454430A6378544C769F09AA6207' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactFadeOutTimeline) == 0x002168, "Member 'ABaseCharacter_C::ArtifactFadeOutTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutTimeline_Return_773FA1534BEEC66A91136BB2D6FD8B0A) == 0x002170, "Member 'ABaseCharacter_C::KnockoutTimeline_Return_773FA1534BEEC66A91136BB2D6FD8B0A' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutTimeline_ArenaReturnKnockoutDecelerationCurve_773FA1534BEEC66A91136BB2D6FD8B0A) == 0x002174, "Member 'ABaseCharacter_C::KnockoutTimeline_ArenaReturnKnockoutDecelerationCurve_773FA1534BEEC66A91136BB2D6FD8B0A' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutTimeline__Direction_773FA1534BEEC66A91136BB2D6FD8B0A) == 0x002178, "Member 'ABaseCharacter_C::KnockoutTimeline__Direction_773FA1534BEEC66A91136BB2D6FD8B0A' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutTimeline) == 0x002180, "Member 'ABaseCharacter_C::KnockoutTimeline' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OriginalGroundFriction) == 0x002188, "Member 'ABaseCharacter_C::OriginalGroundFriction' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OriginalBrakingDecelerationFalling) == 0x00218C, "Member 'ABaseCharacter_C::OriginalBrakingDecelerationFalling' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OriginalBrakingDecelerationWalking) == 0x002190, "Member 'ABaseCharacter_C::OriginalBrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Scale) == 0x002194, "Member 'ABaseCharacter_C::Scale' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IKInterpSpeed) == 0x002198, "Member 'ABaseCharacter_C::IKInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugIK) == 0x00219C, "Member 'ABaseCharacter_C::DebugIK' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DropShadowMaxDrawDistance) == 0x0021A0, "Member 'ABaseCharacter_C::DropShadowMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigLandingImpactVelocity) == 0x0021A4, "Member 'ABaseCharacter_C::BigLandingImpactVelocity' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigLandingShake) == 0x0021A8, "Member 'ABaseCharacter_C::BigLandingShake' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, NormalLandingShake) == 0x0021B0, "Member 'ABaseCharacter_C::NormalLandingShake' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IsKnockedOut) == 0x0021B8, "Member 'ABaseCharacter_C::IsKnockedOut' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CanSeeAllyHealth) == 0x0021B9, "Member 'ABaseCharacter_C::CanSeeAllyHealth' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, NumberOfFreezeFields) == 0x0021BC, "Member 'ABaseCharacter_C::NumberOfFreezeFields' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, FreezeDebuffHandle) == 0x0021C0, "Member 'ABaseCharacter_C::FreezeDebuffHandle' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, FreezeSelfBuffHandle) == 0x0021C8, "Member 'ABaseCharacter_C::FreezeSelfBuffHandle' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InputDI) == 0x0021D0, "Member 'ABaseCharacter_C::InputDI' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DIFacingVector) == 0x0021D4, "Member 'ABaseCharacter_C::DIFacingVector' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DITimingWindow) == 0x0021E0, "Member 'ABaseCharacter_C::DITimingWindow' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitialShrinkScale) == 0x0021E4, "Member 'ABaseCharacter_C::InitialShrinkScale' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShrinkScaleMultiplier) == 0x0021F0, "Member 'ABaseCharacter_C::ShrinkScaleMultiplier' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitialShrinkEyeHeight) == 0x0021F4, "Member 'ABaseCharacter_C::InitialShrinkEyeHeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitialShrinkStepHeight) == 0x0021F8, "Member 'ABaseCharacter_C::InitialShrinkStepHeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShrinkDebuffHandle) == 0x0021FC, "Member 'ABaseCharacter_C::ShrinkDebuffHandle' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IsShrunk) == 0x002204, "Member 'ABaseCharacter_C::IsShrunk' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Unshrinking) == 0x002205, "Member 'ABaseCharacter_C::Unshrinking' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitialShrinkLocation) == 0x002208, "Member 'ABaseCharacter_C::InitialShrinkLocation' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockedOutTimer) == 0x002218, "Member 'ABaseCharacter_C::KnockedOutTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Landed) == 0x002220, "Member 'ABaseCharacter_C::Landed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Jumped) == 0x002230, "Member 'ABaseCharacter_C::Jumped' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ReturnedToArena) == 0x002240, "Member 'ABaseCharacter_C::ReturnedToArena' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ItemStolen) == 0x002250, "Member 'ABaseCharacter_C::ItemStolen' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AbilityFail) == 0x002260, "Member 'ABaseCharacter_C::AbilityFail' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AlternateAbilityIconUpdate) == 0x002270, "Member 'ABaseCharacter_C::AlternateAbilityIconUpdate' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DefaultEyeHeight) == 0x002280, "Member 'ABaseCharacter_C::DefaultEyeHeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, EyeHeightOffset) == 0x002284, "Member 'ABaseCharacter_C::EyeHeightOffset' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CriticallyHit) == 0x002288, "Member 'ABaseCharacter_C::CriticallyHit' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecentDamageCauser) == 0x002298, "Member 'ABaseCharacter_C::RecentDamageCauser' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesMegablastSlomo) == 0x0022A0, "Member 'ABaseCharacter_C::UsesMegablastSlomo' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesReducedDamageModifier) == 0x0022A1, "Member 'ABaseCharacter_C::UsesReducedDamageModifier' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockedOutEnemy) == 0x0022A8, "Member 'ABaseCharacter_C::KnockedOutEnemy' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesCritHitThirdPerson) == 0x0022B8, "Member 'ABaseCharacter_C::UsesCritHitThirdPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CritHitTrailActivationDelay) == 0x0022BC, "Member 'ABaseCharacter_C::CritHitTrailActivationDelay' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CritHitSpeed) == 0x0022C0, "Member 'ABaseCharacter_C::CritHitSpeed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CritHitVector) == 0x0022C4, "Member 'ABaseCharacter_C::CritHitVector' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CurrentCritHitBounces) == 0x0022D0, "Member 'ABaseCharacter_C::CurrentCritHitBounces' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MaxCritHitBounces) == 0x0022D4, "Member 'ABaseCharacter_C::MaxCritHitBounces' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesEndMatchSlomo) == 0x0022D8, "Member 'ABaseCharacter_C::UsesEndMatchSlomo' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, PreviousBounceLoc) == 0x0022DC, "Member 'ABaseCharacter_C::PreviousBounceLoc' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, PreviousJumpCount) == 0x0022E8, "Member 'ABaseCharacter_C::PreviousJumpCount' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, StunnedEnemySound2D) == 0x0022F0, "Member 'ABaseCharacter_C::StunnedEnemySound2D' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, TestTimer) == 0x0022F8, "Member 'ABaseCharacter_C::TestTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CharacterImpulseMultiplierCurve) == 0x002300, "Member 'ABaseCharacter_C::CharacterImpulseMultiplierCurve' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, JumpBlocked) == 0x002308, "Member 'ABaseCharacter_C::JumpBlocked' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, JumpUnblocked) == 0x002318, "Member 'ABaseCharacter_C::JumpUnblocked' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesImpulseJumpBlock) == 0x002328, "Member 'ABaseCharacter_C::UsesImpulseJumpBlock' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpecialAbilityInputPressed) == 0x002330, "Member 'ABaseCharacter_C::SpecialAbilityInputPressed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OnJumpInputPressed) == 0x002340, "Member 'ABaseCharacter_C::OnJumpInputPressed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CanRegen) == 0x002350, "Member 'ABaseCharacter_C::CanRegen' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesRegenSystem) == 0x002351, "Member 'ABaseCharacter_C::UsesRegenSystem' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UsesApexForImpulse) == 0x002352, "Member 'ABaseCharacter_C::UsesApexForImpulse' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AirJump) == 0x002358, "Member 'ABaseCharacter_C::AirJump' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, NetAcceleration) == 0x002368, "Member 'ABaseCharacter_C::NetAcceleration' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CharacterImpulseTimeCurve) == 0x002378, "Member 'ABaseCharacter_C::CharacterImpulseTimeCurve' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DangerZoneLoopBegin) == 0x002380, "Member 'ABaseCharacter_C::DangerZoneLoopBegin' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DangerZoneLoopEnd) == 0x002388, "Member 'ABaseCharacter_C::DangerZoneLoopEnd' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DangerZoneLoopRTPC) == 0x002390, "Member 'ABaseCharacter_C::DangerZoneLoopRTPC' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ECharacterStance) == 0x0023A0, "Member 'ABaseCharacter_C::ECharacterStance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, StaggerThreshold) == 0x0023A4, "Member 'ABaseCharacter_C::StaggerThreshold' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, WallBounce) == 0x0023A8, "Member 'ABaseCharacter_C::WallBounce' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MaxComboCountClamp) == 0x0023B8, "Member 'ABaseCharacter_C::MaxComboCountClamp' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastRegenTimer) == 0x0023C0, "Member 'ABaseCharacter_C::MegaBlastRegenTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastRegenEnabled) == 0x0023C8, "Member 'ABaseCharacter_C::MegaBlastRegenEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastBleedThrough) == 0x0023D0, "Member 'ABaseCharacter_C::MegaBlastBleedThrough' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastMeterMin) == 0x0023E0, "Member 'ABaseCharacter_C::MegaBlastMeterMin' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastMeterMax) == 0x0023E4, "Member 'ABaseCharacter_C::MegaBlastMeterMax' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, HealthRegenTimer) == 0x0023E8, "Member 'ABaseCharacter_C::HealthRegenTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, HealthRegenActive) == 0x0023F0, "Member 'ABaseCharacter_C::HealthRegenActive' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UseDamagePercent) == 0x0023F1, "Member 'ABaseCharacter_C::UseDamagePercent' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IsShieldActive) == 0x0023F2, "Member 'ABaseCharacter_C::IsShieldActive' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CurrentShieldItemHealth) == 0x0023F4, "Member 'ABaseCharacter_C::CurrentShieldItemHealth' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShieldHealthChanged) == 0x0023F8, "Member 'ABaseCharacter_C::ShieldHealthChanged' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ClientShieldItemHealth) == 0x002408, "Member 'ABaseCharacter_C::ClientShieldItemHealth' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShieldHealthDepleted) == 0x002410, "Member 'ABaseCharacter_C::ShieldHealthDepleted' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AttachedShield) == 0x002420, "Member 'ABaseCharacter_C::AttachedShield' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegaBlastDangerEffect) == 0x002428, "Member 'ABaseCharacter_C::MegaBlastDangerEffect' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnAdjustTraceDistance) == 0x002430, "Member 'ABaseCharacter_C::SpawnAdjustTraceDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnAdjustHeightDelta) == 0x002434, "Member 'ABaseCharacter_C::SpawnAdjustHeightDelta' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LastMegaBlastRotationTimeStamp) == 0x002438, "Member 'ABaseCharacter_C::LastMegaBlastRotationTimeStamp' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BouncedDuringMegaBlast) == 0x00243C, "Member 'ABaseCharacter_C::BouncedDuringMegaBlast' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, HitStunDebug) == 0x002440, "Member 'ABaseCharacter_C::HitStunDebug' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockedOutEnemyEffect) == 0x002450, "Member 'ABaseCharacter_C::KnockedOutEnemyEffect' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bCausedDamageDebugReadout) == 0x002458, "Member 'ABaseCharacter_C::bCausedDamageDebugReadout' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutVelocity) == 0x00245C, "Member 'ABaseCharacter_C::KnockoutVelocity' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutMeshOffset) == 0x002468, "Member 'ABaseCharacter_C::KnockoutMeshOffset' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutCharacterPosition) == 0x002474, "Member 'ABaseCharacter_C::KnockoutCharacterPosition' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bManCannonInitialEffectDone) == 0x002480, "Member 'ABaseCharacter_C::bManCannonInitialEffectDone' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactProcOn) == 0x002488, "Member 'ABaseCharacter_C::ArtifactProcOn' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactProcOff) == 0x002498, "Member 'ABaseCharacter_C::ArtifactProcOff' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ManCannonInitialEffect) == 0x0024A8, "Member 'ABaseCharacter_C::ManCannonInitialEffect' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutMeshBaseOffset) == 0x0024B0, "Member 'ABaseCharacter_C::KnockoutMeshBaseOffset' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitilizedArtifactGlowColor) == 0x0024BC, "Member 'ABaseCharacter_C::InitilizedArtifactGlowColor' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowOrange) == 0x0024C0, "Member 'ABaseCharacter_C::ArtifactGlowOrange' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowYellow) == 0x0024D0, "Member 'ABaseCharacter_C::ArtifactGlowYellow' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowGreen) == 0x0024E0, "Member 'ABaseCharacter_C::ArtifactGlowGreen' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowPurple) == 0x0024F0, "Member 'ABaseCharacter_C::ArtifactGlowPurple' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IsArtifactDurationActive) == 0x002500, "Member 'ABaseCharacter_C::IsArtifactDurationActive' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, EnableArtifactVisuals) == 0x002501, "Member 'ABaseCharacter_C::EnableArtifactVisuals' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessMaterial) == 0x002508, "Member 'ABaseCharacter_C::SpeedPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessMaterialDynamic) == 0x002510, "Member 'ABaseCharacter_C::SpeedPostProcessMaterialDynamic' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactRemovalDelayTimer) == 0x002518, "Member 'ABaseCharacter_C::ArtifactRemovalDelayTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelOpacity1stPerson) == 0x002520, "Member 'ABaseCharacter_C::ArtifactGlowFresnelOpacity1stPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelOpacity3rdPerson) == 0x002524, "Member 'ABaseCharacter_C::ArtifactGlowFresnelOpacity3rdPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessActive) == 0x002528, "Member 'ABaseCharacter_C::SpeedPostProcessActive' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessDefaultWeight) == 0x00252C, "Member 'ABaseCharacter_C::SpeedPostProcessDefaultWeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessMaxWeight) == 0x002530, "Member 'ABaseCharacter_C::SpeedPostProcessMaxWeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessMaxSpeed) == 0x002534, "Member 'ABaseCharacter_C::SpeedPostProcessMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessBoostMinSpeed) == 0x002538, "Member 'ABaseCharacter_C::SpeedPostProcessBoostMinSpeed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessFadeOutDelay) == 0x00253C, "Member 'ABaseCharacter_C::SpeedPostProcessFadeOutDelay' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessSpeedBlend) == 0x002540, "Member 'ABaseCharacter_C::SpeedPostProcessSpeedBlend' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UseSpeedBoostFX) == 0x002544, "Member 'ABaseCharacter_C::UseSpeedBoostFX' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UseSpeedPostProcess) == 0x002545, "Member 'ABaseCharacter_C::UseSpeedPostProcess' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessDefaultWindColor) == 0x002548, "Member 'ABaseCharacter_C::SpeedPostProcessDefaultWindColor' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedPostProcessDefaultColor) == 0x002558, "Member 'ABaseCharacter_C::SpeedPostProcessDefaultColor' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpeedBoostRemovalDelayTimer) == 0x002568, "Member 'ABaseCharacter_C::SpeedBoostRemovalDelayTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactPostProcessMaterialDynamic) == 0x002570, "Member 'ABaseCharacter_C::ArtifactPostProcessMaterialDynamic' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, HealingPostProcessMaterial) == 0x002578, "Member 'ABaseCharacter_C::HealingPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DamagePostProcessMaterial) == 0x002580, "Member 'ABaseCharacter_C::DamagePostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UtilityPostProcessMaterial) == 0x002588, "Member 'ABaseCharacter_C::UtilityPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RefreshPostProcessMaterial) == 0x002590, "Member 'ABaseCharacter_C::RefreshPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ItemPickupPostProcessMaterial) == 0x002598, "Member 'ABaseCharacter_C::ItemPickupPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RevealOutlinesPulseMaterialInstance) == 0x0025A0, "Member 'ABaseCharacter_C::RevealOutlinesPulseMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, UseArtifactPostProcess) == 0x0025A8, "Member 'ABaseCharacter_C::UseArtifactPostProcess' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactSpeedPostProcessesFXActive) == 0x0025A9, "Member 'ABaseCharacter_C::ArtifactSpeedPostProcessesFXActive' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowAdjustScalar1stPerson) == 0x0025AC, "Member 'ABaseCharacter_C::ArtifactGlowAdjustScalar1stPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowAdjustScalar3rdPerson) == 0x0025B0, "Member 'ABaseCharacter_C::ArtifactGlowAdjustScalar3rdPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelScaleY1stPerson) == 0x0025B4, "Member 'ABaseCharacter_C::ArtifactGlowFresnelScaleY1stPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelScaleY3rdPerson) == 0x0025B8, "Member 'ABaseCharacter_C::ArtifactGlowFresnelScaleY3rdPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelPanY1stPerson) == 0x0025BC, "Member 'ABaseCharacter_C::ArtifactGlowFresnelPanY1stPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactGlowFresnelPanY3rdPerson) == 0x0025C0, "Member 'ABaseCharacter_C::ArtifactGlowFresnelPanY3rdPerson' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutMaxDistanceCheck) == 0x0025C4, "Member 'ABaseCharacter_C::KnockoutMaxDistanceCheck' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CurrentArtifactGameplayTag) == 0x0025C8, "Member 'ABaseCharacter_C::CurrentArtifactGameplayTag' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArtifactInstantFadeOutDelay) == 0x0025D0, "Member 'ABaseCharacter_C::ArtifactInstantFadeOutDelay' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, IsSpawnProtectionFeatureEnabled) == 0x0025D4, "Member 'ABaseCharacter_C::IsSpawnProtectionFeatureEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionEnabledLocalPlayer) == 0x0025D5, "Member 'ABaseCharacter_C::SpawnProtectionEnabledLocalPlayer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionEnabled) == 0x0025D6, "Member 'ABaseCharacter_C::SpawnProtectionEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionTimer) == 0x0025D8, "Member 'ABaseCharacter_C::SpawnProtectionTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionDuration) == 0x0025E0, "Member 'ABaseCharacter_C::SpawnProtectionDuration' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionEmitterScale) == 0x0025E4, "Member 'ABaseCharacter_C::SpawnProtectionEmitterScale' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OnSpawnProtectionChange) == 0x0025F0, "Member 'ABaseCharacter_C::OnSpawnProtectionChange' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecentlyDamagedByControllers) == 0x002600, "Member 'ABaseCharacter_C::RecentlyDamagedByControllers' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecentlyDamagedByTimeStamp) == 0x002610, "Member 'ABaseCharacter_C::RecentlyDamagedByTimeStamp' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AssistStatTimeLimit) == 0x002620, "Member 'ABaseCharacter_C::AssistStatTimeLimit' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Use3rdPersonCamera) == 0x002624, "Member 'ABaseCharacter_C::Use3rdPersonCamera' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ThreerdPersonCameraAdjustmentEnabled) == 0x002625, "Member 'ABaseCharacter_C::ThreerdPersonCameraAdjustmentEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ThirdPersonCameraLocation) == 0x002628, "Member 'ABaseCharacter_C::ThirdPersonCameraLocation' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, TimerHandle_ResetMegablastCount) == 0x002638, "Member 'ABaseCharacter_C::TimerHandle_ResetMegablastCount' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SurvivedMegablastDurationCurve) == 0x002640, "Member 'ABaseCharacter_C::SurvivedMegablastDurationCurve' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bVariableMegablastsEnabled) == 0x002648, "Member 'ABaseCharacter_C::bVariableMegablastsEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, TimerHandle_RemoveMegablast) == 0x002650, "Member 'ABaseCharacter_C::TimerHandle_RemoveMegablast' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SurvivedMegablastCount) == 0x002658, "Member 'ABaseCharacter_C::SurvivedMegablastCount' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastHealthScalar) == 0x00265C, "Member 'ABaseCharacter_C::MegablastHealthScalar' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastDurationCurve) == 0x002660, "Member 'ABaseCharacter_C::MegablastDurationCurve' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastImpulseThreshold) == 0x002668, "Member 'ABaseCharacter_C::MegablastImpulseThreshold' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ImpulseMegablastDuration) == 0x002670, "Member 'ABaseCharacter_C::ImpulseMegablastDuration' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShowImpulseStrength) == 0x002678, "Member 'ABaseCharacter_C::ShowImpulseStrength' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeStartedNavPin) == 0x002680, "Member 'ABaseCharacter_C::DodgeStartedNavPin' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeFlashAnim) == 0x002690, "Member 'ABaseCharacter_C::DodgeFlashAnim' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionTeamColorSet) == 0x002698, "Member 'ABaseCharacter_C::SpawnProtectionTeamColorSet' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, InitialGroundedSpeedApplied) == 0x002699, "Member 'ABaseCharacter_C::InitialGroundedSpeedApplied' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, GroundedSpeedEffect) == 0x0026A0, "Member 'ABaseCharacter_C::GroundedSpeedEffect' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugChosenPlayerstateToView) == 0x0026A8, "Member 'ABaseCharacter_C::DebugChosenPlayerstateToView' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugChosenPlayerstateToViewOffset) == 0x0026B0, "Member 'ABaseCharacter_C::DebugChosenPlayerstateToViewOffset' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ViewTargetActor) == 0x0026B8, "Member 'ABaseCharacter_C::ViewTargetActor' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LongshotAwardMinDistance) == 0x0026C0, "Member 'ABaseCharacter_C::LongshotAwardMinDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, OnGameplayAwardGiven) == 0x0026C8, "Member 'ABaseCharacter_C::OnGameplayAwardGiven' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CanGiveMegablastHealsAward) == 0x0026D8, "Member 'ABaseCharacter_C::CanGiveMegablastHealsAward' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveryRewardTimer) == 0x0026E0, "Member 'ABaseCharacter_C::RecoveryRewardTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigHitAwardMinimumImpulse) == 0x0026E8, "Member 'ABaseCharacter_C::BigHitAwardMinimumImpulse' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ArenaBounds) == 0x0026F0, "Member 'ABaseCharacter_C::ArenaBounds' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveryAwardUpTraceDistance) == 0x0026F8, "Member 'ABaseCharacter_C::RecoveryAwardUpTraceDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveryAwardShortDownTraceDistance) == 0x0026FC, "Member 'ABaseCharacter_C::RecoveryAwardShortDownTraceDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveryAwardLongDownTraceDistance) == 0x002700, "Member 'ABaseCharacter_C::RecoveryAwardLongDownTraceDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveryAwardHorizontalTraceDistance) == 0x002704, "Member 'ABaseCharacter_C::RecoveryAwardHorizontalTraceDistance' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CanGiveRecoveryAward) == 0x002708, "Member 'ABaseCharacter_C::CanGiveRecoveryAward' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastHealsAwardThreshold) == 0x00270C, "Member 'ABaseCharacter_C::MegablastHealsAwardThreshold' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bAllowCharacterEmotes) == 0x002710, "Member 'ABaseCharacter_C::bAllowCharacterEmotes' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugGameplayEffectsToWatch) == 0x002718, "Member 'ABaseCharacter_C::DebugGameplayEffectsToWatch' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bDebugPrintGameplayEffectLevels) == 0x002728, "Member 'ABaseCharacter_C::bDebugPrintGameplayEffectLevels' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bDebugItemSpawnSucceeded) == 0x002729, "Member 'ABaseCharacter_C::bDebugItemSpawnSucceeded' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bThrowInputHeld) == 0x00272A, "Member 'ABaseCharacter_C::bThrowInputHeld' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bRespondedToABounceSinceLastHostileImpulse) == 0x00272B, "Member 'ABaseCharacter_C::bRespondedToABounceSinceLastHostileImpulse' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bIsDodging) == 0x00272C, "Member 'ABaseCharacter_C::bIsDodging' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeCameraShake) == 0x002730, "Member 'ABaseCharacter_C::DodgeCameraShake' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeIgnoreActorTypes) == 0x002738, "Member 'ABaseCharacter_C::DodgeIgnoreActorTypes' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ItemPickupFFE) == 0x002748, "Member 'ABaseCharacter_C::ItemPickupFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, JumpFFE) == 0x002750, "Member 'ABaseCharacter_C::JumpFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, AirJumpFFE) == 0x002758, "Member 'ABaseCharacter_C::AirJumpFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastFFE) == 0x002760, "Member 'ABaseCharacter_C::MegablastFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, KnockoutFFE) == 0x002768, "Member 'ABaseCharacter_C::KnockoutFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LandFFE) == 0x002770, "Member 'ABaseCharacter_C::LandFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigLandFFE) == 0x002778, "Member 'ABaseCharacter_C::BigLandFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ShowReturnTravelDebug) == 0x002780, "Member 'ABaseCharacter_C::ShowReturnTravelDebug' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, EnableUberCheating) == 0x002781, "Member 'ABaseCharacter_C::EnableUberCheating' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugPlaySoundLoopFreqency) == 0x002784, "Member 'ABaseCharacter_C::DebugPlaySoundLoopFreqency' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugPlaySoundName) == 0x002788, "Member 'ABaseCharacter_C::DebugPlaySoundName' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bDebugPlaySoundLoop) == 0x002798, "Member 'ABaseCharacter_C::bDebugPlaySoundLoop' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugPlaySoundLoopTimer) == 0x0027A0, "Member 'ABaseCharacter_C::DebugPlaySoundLoopTimer' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSoundMap) == 0x0027A8, "Member 'ABaseCharacter_C::DebugSoundMap' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSoundShape) == 0x0027F8, "Member 'ABaseCharacter_C::DebugSoundShape' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSoundLocationHolder) == 0x002800, "Member 'ABaseCharacter_C::DebugSoundLocationHolder' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSoundShapeMesh) == 0x002808, "Member 'ABaseCharacter_C::DebugSoundShapeMesh' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CharacterFadeOutAddedHeight) == 0x002810, "Member 'ABaseCharacter_C::CharacterFadeOutAddedHeight' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, CharacterFadeOutAddedRadius) == 0x002814, "Member 'ABaseCharacter_C::CharacterFadeOutAddedRadius' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, ItemDropFFE) == 0x002818, "Member 'ABaseCharacter_C::ItemDropFFE' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionIgnoreInputCancel) == 0x002820, "Member 'ABaseCharacter_C::SpawnProtectionIgnoreInputCancel' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeFlashAnimCycleDuration) == 0x002824, "Member 'ABaseCharacter_C::DodgeFlashAnimCycleDuration' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeData) == 0x002828, "Member 'ABaseCharacter_C::DodgeData' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeStartTimeStamp) == 0x002834, "Member 'ABaseCharacter_C::DodgeStartTimeStamp' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgeMaterialFlashLoopCount) == 0x002838, "Member 'ABaseCharacter_C::DodgeMaterialFlashLoopCount' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigHitBlockingTags) == 0x002840, "Member 'ABaseCharacter_C::BigHitBlockingTags' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, Timer_DodgePostProcessInterp) == 0x002860, "Member 'ABaseCharacter_C::Timer_DodgePostProcessInterp' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LastDodgePostProcessBlend) == 0x002868, "Member 'ABaseCharacter_C::LastDodgePostProcessBlend' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LastDodgePostProcessTime) == 0x00286C, "Member 'ABaseCharacter_C::LastDodgePostProcessTime' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgePostProcessMaterialDynamic) == 0x002870, "Member 'ABaseCharacter_C::DodgePostProcessMaterialDynamic' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgePostProcessToggle) == 0x002878, "Member 'ABaseCharacter_C::DodgePostProcessToggle' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DodgePostProcessInterpSpeed) == 0x00287C, "Member 'ABaseCharacter_C::DodgePostProcessInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSavedActorLocation) == 0x002880, "Member 'ABaseCharacter_C::DebugSavedActorLocation' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DebugSavedActorRotation) == 0x00288C, "Member 'ABaseCharacter_C::DebugSavedActorRotation' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bIsInputActionFireHeld) == 0x002898, "Member 'ABaseCharacter_C::bIsInputActionFireHeld' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bIsInputActionAltFireHeld) == 0x002899, "Member 'ABaseCharacter_C::bIsInputActionAltFireHeld' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bIsSpecialAbilityHeld) == 0x00289A, "Member 'ABaseCharacter_C::bIsSpecialAbilityHeld' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, bEnableFreeze) == 0x00289B, "Member 'ABaseCharacter_C::bEnableFreeze' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, FreezeDebuffDuration) == 0x00289C, "Member 'ABaseCharacter_C::FreezeDebuffDuration' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpawnProtectionVFXEnabled) == 0x0028A0, "Member 'ABaseCharacter_C::SpawnProtectionVFXEnabled' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, RecoveriesStatName) == 0x0028A4, "Member 'ABaseCharacter_C::RecoveriesStatName' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, DefaultIncrementStatValue) == 0x0028AC, "Member 'ABaseCharacter_C::DefaultIncrementStatValue' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, MegablastHealsStatName) == 0x0028B0, "Member 'ABaseCharacter_C::MegablastHealsStatName' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, BigHitStatName) == 0x0028B8, "Member 'ABaseCharacter_C::BigHitStatName' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, SpikesStatName) == 0x0028C0, "Member 'ABaseCharacter_C::SpikesStatName' has a wrong offset!");
static_assert(offsetof(ABaseCharacter_C, LongshotStatName) == 0x0028C8, "Member 'ABaseCharacter_C::LongshotStatName' has a wrong offset!");

}

