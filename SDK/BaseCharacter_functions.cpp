#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseCharacter

#include "Basic.hpp"

#include "BaseCharacter_classes.hpp"
#include "BaseCharacter_parameters.hpp"


namespace SDK
{

// Function BaseCharacter.BaseCharacter_C.Landed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Landed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Landed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.Jumped__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Jumped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Jumped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ReturnedToArena__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                ReturnedCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ReturnedToArena__DelegateSignature(class AMarinerCharacter* ReturnedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ReturnedToArena__DelegateSignature");

	Params::BaseCharacter_C_ReturnedToArena__DelegateSignature Parms{};

	Parms.ReturnedCharacter = ReturnedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ItemStolen__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ItemStolen__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ItemStolen__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.AbilityFail__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameplayAbility*                 Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            FailTags                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABaseCharacter_C::AbilityFail__DelegateSignature(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AbilityFail__DelegateSignature");

	Params::BaseCharacter_C_AbilityFail__DelegateSignature Parms{};

	Parms.Ability = Ability;
	Parms.FailTags = std::move(FailTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AlternateAbilityIconUpdate__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseAlternate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           AbiltiyClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::AlternateAbilityIconUpdate__DelegateSignature(bool UseAlternate, class UClass* AbiltiyClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AlternateAbilityIconUpdate__DelegateSignature");

	Params::BaseCharacter_C_AlternateAbilityIconUpdate__DelegateSignature Parms{};

	Parms.UseAlternate = UseAlternate;
	Parms.AbiltiyClass = AbiltiyClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.CriticallyHit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::CriticallyHit__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "CriticallyHit__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.KnockedOutEnemy__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::KnockedOutEnemy__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "KnockedOutEnemy__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.JumpBlocked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::JumpBlocked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "JumpBlocked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.JumpUnblocked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::JumpUnblocked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "JumpUnblocked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpecialAbilityInputPressed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::SpecialAbilityInputPressed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpecialAbilityInputPressed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnJumpInputPressed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnJumpInputPressed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnJumpInputPressed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.AirJump__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::AirJump__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AirJump__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.WallBounce__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::WallBounce__DelegateSignature(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "WallBounce__DelegateSignature");

	Params::BaseCharacter_C_WallBounce__DelegateSignature Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.MegaBlastBleedThrough__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::MegaBlastBleedThrough__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "MegaBlastBleedThrough__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ShieldHealthChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ShieldHealthChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ShieldHealthChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ShieldHealthDepleted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ShieldHealthDepleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ShieldHealthDepleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HitStunDebug__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HitStunDebug__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HitStunDebug__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactProcOn__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ArtifactProcOn__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactProcOn__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactProcOff__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ArtifactProcOff__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactProcOff__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnSpawnProtectionChange__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Timestamp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnSpawnProtectionChange__DelegateSignature(bool IsEnabled, float Duration, float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnSpawnProtectionChange__DelegateSignature");

	Params::BaseCharacter_C_OnSpawnProtectionChange__DelegateSignature Parms{};

	Parms.IsEnabled = IsEnabled;
	Parms.Duration = Duration;
	Parms.Timestamp = Timestamp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DodgeStartedNavPin__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DodgeDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DodgeStartedNavPin__DelegateSignature(float DodgeDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DodgeStartedNavPin__DelegateSignature");

	Params::BaseCharacter_C_DodgeStartedNavPin__DelegateSignature Parms{};

	Parms.DodgeDuration = DodgeDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnGameplayAwardGiven__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayAwardTypes                     AwardType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StatTotal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnGameplayAwardGiven__DelegateSignature(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnGameplayAwardGiven__DelegateSignature");

	Params::BaseCharacter_C_OnGameplayAwardGiven__DelegateSignature Parms{};

	Parms.AwardType = AwardType;
	Parms.Value = Value;
	Parms.StatTotal = StatTotal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ExecuteUbergraph_BaseCharacter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ExecuteUbergraph_BaseCharacter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ExecuteUbergraph_BaseCharacter");

	Params::BaseCharacter_C_ExecuteUbergraph_BaseCharacter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.IncrementPlayerStat
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StatName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGiveGameplayAward                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::IncrementPlayerStat(const class FName& StatName, const int32& Value, bool bGiveGameplayAward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "IncrementPlayerStat");

	Params::BaseCharacter_C_IncrementPlayerStat Parms{};

	Parms.StatName = StatName;
	Parms.Value = Value;
	Parms.bGiveGameplayAward = bGiveGameplayAward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.PotentialThrowPriorityItemSpoof
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::PotentialThrowPriorityItemSpoof()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "PotentialThrowPriorityItemSpoof");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HandleDodgeStateRemoved
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HandleDodgeStateRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleDodgeStateRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HandleDodgeStateApplied
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HandleDodgeStateApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleDodgeStateApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnMoveAffectingGameplayEffectRemoved
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// int32                                   PriorGameplayEffectCount                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GameplayEffectLevel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BP_OnMoveAffectingGameplayEffectRemoved(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnMoveAffectingGameplayEffectRemoved");

	Params::BaseCharacter_C_BP_OnMoveAffectingGameplayEffectRemoved Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnMoveAffectingGameplayEffectApplied
// (Event, Public, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameplayEffect>      GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// int32                                   PriorGameplayEffectCount                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GameplayEffectLevel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BP_OnMoveAffectingGameplayEffectApplied(TSubclassOf<class UGameplayEffect> GameplayEffect, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnMoveAffectingGameplayEffectApplied");

	Params::BaseCharacter_C_BP_OnMoveAffectingGameplayEffectApplied Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugBombMe
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ServerDebugBombMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugBombMe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugBombMe
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugBombMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugBombMe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugSetActorRotationOnClientWithRotator
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Roll                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugSetActorRotationOnClientWithRotator(float Pitch, float Yaw, float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSetActorRotationOnClientWithRotator");

	Params::BaseCharacter_C_DebugSetActorRotationOnClientWithRotator Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugSaveClientControlRotation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugSaveClientControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSaveClientControlRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugSetActorRotationOnClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugSetActorRotationOnClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSetActorRotationOnClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugSetActorRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Roll                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugSetActorRotation(float Pitch, float Yaw, float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSetActorRotation");

	Params::BaseCharacter_C_DebugSetActorRotation Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugSetActorLocation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   X                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugSetActorLocation(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSetActorLocation");

	Params::BaseCharacter_C_DebugSetActorLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugMoveActorToSavedLocation
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugMoveActorToSavedLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugMoveActorToSavedLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugSaveActorLocation
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugSaveActorLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSaveActorLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.UpdateDodgePPBlendWeight
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateDodgePPBlendWeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateDodgePPBlendWeight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ToggleDodgePostProcess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AbilityActivated                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ToggleDodgePostProcess(bool AbilityActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ToggleDodgePostProcess");

	Params::BaseCharacter_C_ToggleDodgePostProcess Parms{};

	Parms.AbilityActivated = AbilityActivated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnDodgeDataUpdated
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnDodgeDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnDodgeDataUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.InpAxisEvt_AltFire_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::InpAxisEvt_AltFire_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpAxisEvt_AltFire_K2Node_InputAxisEvent_1");

	Params::BaseCharacter_C_InpAxisEvt_AltFire_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpAxisEvt_Fire_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::InpAxisEvt_Fire_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpAxisEvt_Fire_K2Node_InputAxisEvent_0");

	Params::BaseCharacter_C_InpAxisEvt_Fire_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerToggleSuppression
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Suppress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ServerToggleSuppression(bool Suppress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerToggleSuppression");

	Params::BaseCharacter_C_ServerToggleSuppression Parms{};

	Parms.Suppress = Suppress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugUnsuppressAllCharacters
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugUnsuppressAllCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugUnsuppressAllCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugSuppressAllCharacters
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugSuppressAllCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugSuppressAllCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugDrawSoundHostility
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugDrawSoundHostility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugDrawSoundHostility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugPlayAnimation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Number                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugPlayAnimation(const class FString& Character, const class FString& Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPlayAnimation");

	Params::BaseCharacter_C_DebugPlayAnimation Parms{};

	Parms.Character = std::move(Character);
	Parms.Number = std::move(Number);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugPlayAnimation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Number                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerDebugPlayAnimation(const class FString& Character, const class FString& Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugPlayAnimation");

	Params::BaseCharacter_C_ServerDebugPlayAnimation Parms{};

	Parms.Character = std::move(Character);
	Parms.Number = std::move(Number);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnThrowReleasedEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                ThrowingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarinerItemSlot                        ItemSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnThrowReleasedEvent(class AMarinerCharacter* ThrowingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnThrowReleasedEvent");

	Params::BaseCharacter_C_OnThrowReleasedEvent Parms{};

	Parms.ThrowingCharacter = ThrowingCharacter;
	Parms.ItemSlot = ItemSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.Try Reapply Artifact
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Try_Reapply_Artifact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Try Reapply Artifact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugprintsoundoptions
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Debugprintsoundoptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugprintsoundoptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugstopsoundlocalloop
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Debugstopsoundlocalloop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugstopsoundlocalloop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugstopsoundloop
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Debugstopsoundloop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugstopsoundloop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugplaysoundlocalloop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   LoopFrequency                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Debugplaysoundlocalloop(const class FString& SoundName, float LoopFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugplaysoundlocalloop");

	Params::BaseCharacter_C_Debugplaysoundlocalloop Parms{};

	Parms.SoundName = std::move(SoundName);
	Parms.LoopFrequency = LoopFrequency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.PlayLoopingDebugSound
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::PlayLoopingDebugSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "PlayLoopingDebugSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugplaysoundloop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   LoopFrequency                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Debugplaysoundloop(const class FString& SoundName, float LoopFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugplaysoundloop");

	Params::BaseCharacter_C_Debugplaysoundloop Parms{};

	Parms.SoundName = std::move(SoundName);
	Parms.LoopFrequency = LoopFrequency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.Multicastdebugplaysound
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bLoop                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LoopFrequency                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Multicastdebugplaysound(const class FString& SoundName, bool bLoop, float LoopFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Multicastdebugplaysound");

	Params::BaseCharacter_C_Multicastdebugplaysound Parms{};

	Parms.SoundName = std::move(SoundName);
	Parms.bLoop = bLoop;
	Parms.LoopFrequency = LoopFrequency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.serverdebugplaysound
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bLoop                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LoopFrequency                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Serverdebugplaysound(const class FString& SoundName, bool bLoop, float LoopFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "serverdebugplaysound");

	Params::BaseCharacter_C_Serverdebugplaysound Parms{};

	Parms.SoundName = std::move(SoundName);
	Parms.bLoop = bLoop;
	Parms.LoopFrequency = LoopFrequency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.debugplaysound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::Debugplaysound(const class FString& SoundName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugplaysound");

	Params::BaseCharacter_C_Debugplaysound Parms{};

	Parms.SoundName = std::move(SoundName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.debugplaysoundinternal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bLoop                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   LoopFrequency                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Debugplaysoundinternal(const class FString& SoundName, bool bLoop, float LoopFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugplaysoundinternal");

	Params::BaseCharacter_C_Debugplaysoundinternal Parms{};

	Parms.SoundName = std::move(SoundName);
	Parms.bLoop = bLoop;
	Parms.LoopFrequency = LoopFrequency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.multicastdebugtogglesoundattach
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Multicastdebugtogglesoundattach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "multicastdebugtogglesoundattach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.serverdebugtogglesoundattach
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Serverdebugtogglesoundattach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "serverdebugtogglesoundattach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugtogglesoundattach
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Debugtogglesoundattach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugtogglesoundattach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugtogglesoundlocationvisibility
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::Debugtogglesoundlocationvisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugtogglesoundlocationvisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.debugplaysoundlocal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SoundName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::Debugplaysoundlocal(const class FString& SoundName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "debugplaysoundlocal");

	Params::BaseCharacter_C_Debugplaysoundlocal Parms{};

	Parms.SoundName = std::move(SoundName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerEnterReality
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerRealityState                    Reality                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerEnterReality(EMarinerRealityState Reality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerEnterReality");

	Params::BaseCharacter_C_ServerEnterReality Parms{};

	Parms.Reality = Reality;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugEnterReality
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Reality                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugEnterReality(const class FString& Reality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugEnterReality");

	Params::BaseCharacter_C_DebugEnterReality Parms{};

	Parms.Reality = std::move(Reality);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnItemPickedUp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarinerItemSlot                        ItemSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnItemPickedUp(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnItemPickedUp");

	Params::BaseCharacter_C_OnItemPickedUp Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HandleItemActivation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ItemActivationTypes                   ItemUseType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleItemActivation(E_ItemActivationTypes ItemUseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleItemActivation");

	Params::BaseCharacter_C_HandleItemActivation Parms{};

	Parms.ItemUseType = ItemUseType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HandleItemActivationAnims
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ItemActivationTypes                   ItemUseType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleItemActivationAnims(E_ItemActivationTypes ItemUseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleItemActivationAnims");

	Params::BaseCharacter_C_HandleItemActivationAnims Parms{};

	Parms.ItemUseType = ItemUseType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugEnableUberCheating
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::DebugEnableUberCheating(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugEnableUberCheating");

	Params::BaseCharacter_C_DebugEnableUberCheating Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerMegablastEnemyTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ServerMegablastEnemyTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerMegablastEnemyTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ToggleReturnTravelDistanceDebug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ToggleReturnTravelDistanceDebug(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ToggleReturnTravelDistanceDebug");

	Params::BaseCharacter_C_ToggleReturnTravelDistanceDebug Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_5_OnCatchCompletedSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                CatchingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarinerItemSlot                        ItemSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_5_OnCatchCompletedSignature__DelegateSignature(class AMarinerCharacter* CatchingCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_5_OnCatchCompletedSignature__DelegateSignature");

	Params::BaseCharacter_C_BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_5_OnCatchCompletedSignature__DelegateSignature Parms{};

	Parms.CatchingCharacter = CatchingCharacter;
	Parms.ItemSlot = ItemSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnJump
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   JumpCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnJump(uint8 JumpCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnJump");

	Params::BaseCharacter_C_OnJump Parms{};

	Parms.JumpCount = JumpCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnLaunchedDelegate_Event_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          PostLaunchVelocity                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLaunchContainedHostileImpulse                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLaunchWasMegablast                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::OnLaunchedDelegate_Event_0(const struct FVector& PostLaunchVelocity, bool bLaunchContainedHostileImpulse, bool bLaunchWasMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnLaunchedDelegate_Event_0");

	Params::BaseCharacter_C_OnLaunchedDelegate_Event_0 Parms{};

	Parms.PostLaunchVelocity = std::move(PostLaunchVelocity);
	Parms.bLaunchContainedHostileImpulse = bLaunchContainedHostileImpulse;
	Parms.bLaunchWasMegablast = bLaunchWasMegablast;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SpoofThrowPriorityItemm
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::SpoofThrowPriorityItemm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpoofThrowPriorityItemm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugTestGameplayEffect
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ServerDebugTestGameplayEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugTestGameplayEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugTestGameplayEffectInternal
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugTestGameplayEffectInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugTestGameplayEffectInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugTestGameplayEffect
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugTestGameplayEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugTestGameplayEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.EnableCharacterEmote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EnableCharacterEmote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EnableCharacterEmote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.Character_Emote_MultiCast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    MarinerInputAction                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Character_Emote_MultiCast(EMarinerInputActions MarinerInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Character_Emote_MultiCast");

	Params::BaseCharacter_C_Character_Emote_MultiCast Parms{};

	Parms.MarinerInputAction = MarinerInputAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.Character_Emote_Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMarinerInputActions                    MarinerInputAction                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::Character_Emote_Server(EMarinerInputActions MarinerInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "Character_Emote_Server");

	Params::BaseCharacter_C_Character_Emote_Server Parms{};

	Parms.MarinerInputAction = MarinerInputAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ServerGiveGamplayAward
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayAwardTypes                     AwardType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StatTotal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerGiveGamplayAward(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerGiveGamplayAward");

	Params::BaseCharacter_C_ServerGiveGamplayAward Parms{};

	Parms.AwardType = AwardType;
	Parms.Value = Value;
	Parms.StatTotal = StatTotal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ClientGiveGameplayAward
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayAwardTypes                     AwardType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StatTotal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ClientGiveGameplayAward(EGameplayAwardTypes AwardType, int32 Value, int32 StatTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClientGiveGameplayAward");

	Params::BaseCharacter_C_ClientGiveGameplayAward Parms{};

	Parms.AwardType = AwardType;
	Parms.Value = Value;
	Parms.StatTotal = StatTotal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintPlayerStateList
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugPrintPlayerStateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintPlayerStateList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintControllerList
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugPrintControllerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintControllerList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintCharacterList
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugPrintCharacterList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintCharacterList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugViewNextCharacter
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerStateToView                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerDebugViewNextCharacter(class APlayerState* PlayerStateToView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugViewNextCharacter");

	Params::BaseCharacter_C_ServerDebugViewNextCharacter Parms{};

	Parms.PlayerStateToView = PlayerStateToView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugViewNextCharacterLocal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerStateToView                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugViewNextCharacterLocal(class APlayerState* PlayerStateToView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugViewNextCharacterLocal");

	Params::BaseCharacter_C_DebugViewNextCharacterLocal Parms{};

	Parms.PlayerStateToView = PlayerStateToView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugViewNextCharacter
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugViewNextCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugViewNextCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugRemoveCooldowns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ServerDebugRemoveCooldowns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugRemoveCooldowns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugRemoveCooldowns
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DebugRemoveCooldowns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugRemoveCooldowns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.AuthorityDebugRemoveCooldowns
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::AuthorityDebugRemoveCooldowns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AuthorityDebugRemoveCooldowns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerDebugGiveItem
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerDebugGiveItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerDebugGiveItem");

	Params::BaseCharacter_C_ServerDebugGiveItem Parms{};

	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugGiveItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugGiveItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugGiveItem");

	Params::BaseCharacter_C_DebugGiveItem Parms{};

	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AuthorityDebugGiveItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::AuthorityDebugGiveItem(const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AuthorityDebugGiveItem");

	Params::BaseCharacter_C_AuthorityDebugGiveItem Parms{};

	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BndEvt__MarinerCharacterMovement_K2Node_ComponentBoundEvent_2_OnChangesCardinalDirectionSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// EMarinerCardinalDirection               NewDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarinerCardinalDirection               PreviousDirection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BndEvt__MarinerCharacterMovement_K2Node_ComponentBoundEvent_2_OnChangesCardinalDirectionSignature__DelegateSignature(EMarinerCardinalDirection NewDirection, EMarinerCardinalDirection PreviousDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BndEvt__MarinerCharacterMovement_K2Node_ComponentBoundEvent_2_OnChangesCardinalDirectionSignature__DelegateSignature");

	Params::BaseCharacter_C_BndEvt__MarinerCharacterMovement_K2Node_ComponentBoundEvent_2_OnChangesCardinalDirectionSignature__DelegateSignature Parms{};

	Parms.NewDirection = NewDirection;
	Parms.PreviousDirection = PreviousDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.TriggerDodgeFeedback
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDodgeDirections                        DodgeDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DodgeDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::TriggerDodgeFeedback(EDodgeDirections DodgeDirection, float DodgeDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "TriggerDodgeFeedback");

	Params::BaseCharacter_C_TriggerDodgeFeedback Parms{};

	Parms.DodgeDirection = DodgeDirection;
	Parms.DodgeDuration = DodgeDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.TimerEventDeactivatePlayerLaunchedTrail
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::TimerEventDeactivatePlayerLaunchedTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "TimerEventDeactivatePlayerLaunchedTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnLocalArenaReturnTeleport
// (Event, Public, BlueprintEvent)

void ABaseCharacter_C::OnLocalArenaReturnTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnLocalArenaReturnTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ReceiveTick");

	Params::BaseCharacter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SetImpendingMegablastStance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                CharacterExpectingMegablast                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::SetImpendingMegablastStance(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerCharacter* CharacterExpectingMegablast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetImpendingMegablastStance");

	Params::BaseCharacter_C_SetImpendingMegablastStance Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.CharacterExpectingMegablast = CharacterExpectingMegablast;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnRegenSuppressionEnd
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRegenSuppressionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRegenSuppressionEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ConsoleTestSpawnProtection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Param_SpawnProtectionDuration                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ConsoleTestSpawnProtection(bool IsEnabled, float Param_SpawnProtectionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ConsoleTestSpawnProtection");

	Params::BaseCharacter_C_ConsoleTestSpawnProtection Parms{};

	Parms.IsEnabled = IsEnabled;
	Parms.Param_SpawnProtectionDuration = Param_SpawnProtectionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnSpawnProtectionTimerEnd
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnSpawnProtectionTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnSpawnProtectionTimerEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ClientBroadcastRemoveSpawnProtection
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ClientBroadcastRemoveSpawnProtection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClientBroadcastRemoveSpawnProtection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRoundTransitionChange_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::OnRoundTransitionChange_Event_0(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRoundTransitionChange_Event_0");

	Params::BaseCharacter_C_OnRoundTransitionChange_Event_0 Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.StopSpeedBoostItemPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopSpeedBoostItemPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopSpeedBoostItemPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartSpeedBoostItemPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartSpeedBoostItemPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartSpeedBoostItemPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopSpeedBoostItemPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopSpeedBoostItemPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopSpeedBoostItemPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartSpeedBoostItemPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartSpeedBoostItemPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartSpeedBoostItemPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnPostSkinApply
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnPostSkinApply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnPostSkinApply");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnAnyKnockout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                KnockOutInstigator                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWasMegablast                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          KnockoutDir                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnAnyKnockout(class AMarinerCharacter* KnockOutInstigator, bool bWasMegablast, const struct FVector& KnockoutDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnAnyKnockout");

	Params::BaseCharacter_C_OnAnyKnockout Parms{};

	Parms.KnockOutInstigator = KnockOutInstigator;
	Parms.bWasMegablast = bWasMegablast;
	Parms.KnockoutDir = std::move(KnockoutDir);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnKnockedOutFromMegablast
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                MegablastInstigator                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          KnockOutDirection                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BP_OnKnockedOutFromMegablast(class AMarinerCharacter* MegablastInstigator, const struct FVector& KnockOutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnKnockedOutFromMegablast");

	Params::BaseCharacter_C_BP_OnKnockedOutFromMegablast Parms{};

	Parms.MegablastInstigator = MegablastInstigator;
	Parms.KnockOutDirection = std::move(KnockOutDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnKnockedOut
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                KnockOutInstigator                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          KnockOutDirection                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BP_OnKnockedOut(class AMarinerCharacter* KnockOutInstigator, const struct FVector& KnockOutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnKnockedOut");

	Params::BaseCharacter_C_BP_OnKnockedOut Parms{};

	Parms.KnockOutInstigator = KnockOutInstigator;
	Parms.KnockOutDirection = std::move(KnockOutDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.StartRevealOutlinesPostProcess
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartRevealOutlinesPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartRevealOutlinesPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnSpeedPostProcessInstantTimeEnd
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnSpeedPostProcessInstantTimeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnSpeedPostProcessInstantTimeEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnArtifactInstantTimerEnd
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnArtifactInstantTimerEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnArtifactInstantTimerEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopArtifactPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopArtifactPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopArtifactPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartArtifactPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartArtifactPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartArtifactPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopArtifactPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopArtifactPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopArtifactPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartArtifactPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartArtifactPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartArtifactPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartSpeedPostProcess Loop
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartSpeedPostProcess_Loop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartSpeedPostProcess Loop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopSpeedPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopSpeedPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopSpeedPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartSpeedPostProcessFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartSpeedPostProcessFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartSpeedPostProcessFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopSpeedPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopSpeedPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopSpeedPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartSpeedPostProcessFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartSpeedPostProcessFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartSpeedPostProcessFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopArtifactGlowFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopArtifactGlowFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopArtifactGlowFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartArtifactGlowFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartArtifactGlowFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartArtifactGlowFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopArtifactGlowFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopArtifactGlowFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopArtifactGlowFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartArtifactGlowFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartArtifactGlowFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartArtifactGlowFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnGameplayTagRemoved
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     GameplayTag                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnGameplayTagRemoved(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnGameplayTagRemoved");

	Params::BaseCharacter_C_OnGameplayTagRemoved Parms{};

	Parms.Character = Character;
	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnGameplayTagApplied
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     GameplayTag                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnGameplayTagApplied(class AMarinerCharacter* Character, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnGameplayTagApplied");

	Params::BaseCharacter_C_OnGameplayTagApplied Parms{};

	Parms.Character = Character;
	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.RemoveManCannon
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PriorGameplayEffectCount                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GameplayEffectLevel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::RemoveManCannon(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "RemoveManCannon");

	Params::BaseCharacter_C_RemoveManCannon Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.Character = Character;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AddManCannon
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PriorGameplayEffectCount                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GameplayEffectLevel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::AddManCannon(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AddManCannon");

	Params::BaseCharacter_C_AddManCannon Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.Character = Character;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DamageCaused
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDamageWasAOE                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageWasMegablast                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseVector                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DamageCaused(class AActor* DamagedActor, bool bDamageWasAOE, bool bDamageWasMegablast, class UClass* DamageType, const struct FVector& ImpulseVector, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DamageCaused");

	Params::BaseCharacter_C_DamageCaused Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.bDamageWasAOE = bDamageWasAOE;
	Parms.bDamageWasMegablast = bDamageWasMegablast;
	Parms.DamageType = DamageType;
	Parms.ImpulseVector = std::move(ImpulseVector);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnMoveAffectingGameplayEffectApplied
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PriorGameplayEffectCount                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GameplayEffectLevel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnMoveAffectingGameplayEffectApplied(class UClass* GameplayEffect, class AMarinerCharacter* Character, int32 PriorGameplayEffectCount, int32 GameplayEffectLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnMoveAffectingGameplayEffectApplied");

	Params::BaseCharacter_C_OnMoveAffectingGameplayEffectApplied Parms{};

	Parms.GameplayEffect = GameplayEffect;
	Parms.Character = Character;
	Parms.PriorGameplayEffectCount = PriorGameplayEffectCount;
	Parms.GameplayEffectLevel = GameplayEffectLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnAirJumpDelegate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   JumpCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnAirJumpDelegate(uint8 JumpCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnAirJumpDelegate");

	Params::BaseCharacter_C_OnAirJumpDelegate Parms{};

	Parms.JumpCount = JumpCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnHitStunRemoved
// (Event, Public, BlueprintEvent)

void ABaseCharacter_C::BP_OnHitStunRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnHitStunRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopActiveMontages
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopActiveMontages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopActiveMontages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DelayedStartingShieldHealth
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::DelayedStartingShieldHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DelayedStartingShieldHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ClientShieldHealthUpdate
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ShieldHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ClientShieldHealthUpdate(float ShieldHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClientShieldHealthUpdate");

	Params::BaseCharacter_C_ClientShieldHealthUpdate Parms{};

	Parms.ShieldHealth = ShieldHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.EndShieldAbility
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EndShieldAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EndShieldAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ShieldTest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ShieldTest(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ShieldTest");

	Params::BaseCharacter_C_ShieldTest Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_MegablastTimedUpdate
// (Event, Public, BlueprintEvent)

void ABaseCharacter_C::BP_MegablastTimedUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_MegablastTimedUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnMegablastStateChangedSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerPlayerState*              MegablastInstigator                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnteredState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnMegablastStateChangedSignature__DelegateSignature(const class UMarinerDamageableComponent* RelevantDamageableComponent, const class AMarinerPlayerState* MegablastInstigator, bool bEnteredState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnMegablastStateChangedSignature__DelegateSignature");

	Params::BaseCharacter_C_BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnMegablastStateChangedSignature__DelegateSignature Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.MegablastInstigator = MegablastInstigator;
	Parms.bEnteredState = bEnteredState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_1_OnAccumulatedDamageChangedEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UMarinerDamageableComponent*      RelevantDamageableComponent                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OldAmount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_1_OnAccumulatedDamageChangedEvent__DelegateSignature(const class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAmount, float OldAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_1_OnAccumulatedDamageChangedEvent__DelegateSignature");

	Params::BaseCharacter_C_BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_1_OnAccumulatedDamageChangedEvent__DelegateSignature Parms{};

	Parms.RelevantDamageableComponent = RelevantDamageableComponent;
	Parms.NewAmount = NewAmount;
	Parms.OldAmount = OldAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SetUpHitStunListeners
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::SetUpHitStunListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetUpHitStunListeners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BlastedTrailToggled
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTrailActive                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          CurrentVelocity                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMegablasted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::BlastedTrailToggled(bool bTrailActive, const struct FVector& CurrentVelocity, bool bMegablasted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BlastedTrailToggled");

	Params::BaseCharacter_C_BlastedTrailToggled Parms{};

	Parms.bTrailActive = bTrailActive;
	Parms.CurrentVelocity = std::move(CurrentVelocity);
	Parms.bMegablasted = bMegablasted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnHitStunApplied
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CurrentVelocity                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bMegablasted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::OnHitStunApplied(const struct FVector& CurrentVelocity, bool bMegablasted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnHitStunApplied");

	Params::BaseCharacter_C_OnHitStunApplied Parms{};

	Parms.CurrentVelocity = std::move(CurrentVelocity);
	Parms.bMegablasted = bMegablasted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HitStunRemoved
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HitStunRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HitStunRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.NetBounceEvent
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector_NetQuantizeNormal        BounceDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::NetBounceEvent(const struct FVector_NetQuantizeNormal& BounceDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "NetBounceEvent");

	Params::BaseCharacter_C_NetBounceEvent Parms{};

	Parms.BounceDirection = std::move(BounceDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.CallTempBounceDelegate
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       BounceHitResult                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    bBouncingWhileMegablasted                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::CallTempBounceDelegate(const struct FHitResult& BounceHitResult, bool bBouncingWhileMegablasted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "CallTempBounceDelegate");

	Params::BaseCharacter_C_CallTempBounceDelegate Parms{};

	Parms.BounceHitResult = std::move(BounceHitResult);
	Parms.bBouncingWhileMegablasted = bBouncingWhileMegablasted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnKnockedOutAuthoritative
// (Event, Protected, BlueprintEvent)

void ABaseCharacter_C::BP_OnKnockedOutAuthoritative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnKnockedOutAuthoritative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "K2_OnMovementModeChanged");

	Params::BaseCharacter_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ComboMultiplierServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IncreasedCombo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ComboMultiplierServer(bool IncreasedCombo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ComboMultiplierServer");

	Params::BaseCharacter_C_ComboMultiplierServer Parms{};

	Parms.IncreasedCombo = IncreasedCombo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.KnockedOutEnemyCameraShake
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::KnockedOutEnemyCameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "KnockedOutEnemyCameraShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnKnockedOtherCharacterOutAuthorityDelegate_Event_0
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnKnockedOtherCharacterOutAuthorityDelegate_Event_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnKnockedOtherCharacterOutAuthorityDelegate_Event_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopSlomo
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopSlomo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopSlomo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.EndMatchSlomo
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EndMatchSlomo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EndMatchSlomo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SendNotifyToClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameplayAbility*                 Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            FailTags                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABaseCharacter_C::SendNotifyToClient(class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SendNotifyToClient");

	Params::BaseCharacter_C_SendNotifyToClient Parms{};

	Parms.Ability = Ability;
	Parms.FailTags = std::move(FailTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AbilityFailed
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameplayAbility*                 Ability                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            FailTags                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABaseCharacter_C::AbilityFailed(const class UGameplayAbility* Ability, const struct FGameplayTagContainer& FailTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AbilityFailed");

	Params::BaseCharacter_C_AbilityFailed Parms{};

	Parms.Ability = Ability;
	Parms.FailTags = std::move(FailTags);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABaseCharacter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerSuppressInput
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Suppress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           WhoSetME                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::ServerSuppressInput(bool Suppress, const class FString& WhoSetME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerSuppressInput");

	Params::BaseCharacter_C_ServerSuppressInput Parms{};

	Parms.Suppress = Suppress;
	Parms.WhoSetME = std::move(WhoSetME);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SuppressInput
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Suppress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           WhoSetME                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::SuppressInput(bool Suppress, const class FString& WhoSetME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SuppressInput");

	Params::BaseCharacter_C_SuppressInput Parms{};

	Parms.Suppress = Suppress;
	Parms.WhoSetME = std::move(WhoSetME);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnCharacterRecovered_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                RecoveredCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::OnCharacterRecovered_Event_0(class AMarinerCharacter* RecoveredCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnCharacterRecovered_Event_0");

	Params::BaseCharacter_C_OnCharacterRecovered_Event_0 Parms{};

	Parms.RecoveredCharacter = RecoveredCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ReceiveAnyDamage");

	Params::BaseCharacter_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ReceivePossessed");

	Params::BaseCharacter_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnJumped
// (Event, Public, BlueprintEvent)

void ABaseCharacter_C::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnEndArenaReturn
// (Event, Protected, BlueprintEvent)

void ABaseCharacter_C::BP_OnEndArenaReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnEndArenaReturn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnBeginArenaReturn
// (Event, Protected, BlueprintEvent)

void ABaseCharacter_C::BP_OnBeginArenaReturn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnBeginArenaReturn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ResetInputDI
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ResetInputDI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ResetInputDI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SetDIServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_InputDI                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         DIRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::SetDIServer(int32 Param_InputDI, const struct FRotator& DIRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetDIServer");

	Params::BaseCharacter_C_SetDIServer Parms{};

	Parms.Param_InputDI = Param_InputDI;
	Parms.DIRotation = std::move(DIRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.EnableItemInteraction
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EnableItemInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EnableItemInteraction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_0_OnStealSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                StealingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMarinerCharacter*                VictimCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarinerItemSlot                        ItemSlot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_0_OnStealSignature__DelegateSignature(class AMarinerCharacter* StealingCharacter, class AMarinerCharacter* VictimCharacter, EMarinerItemSlot ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_0_OnStealSignature__DelegateSignature");

	Params::BaseCharacter_C_BndEvt__ItemInteractionComponent_K2Node_ComponentBoundEvent_0_OnStealSignature__DelegateSignature Parms{};

	Parms.StealingCharacter = StealingCharacter;
	Parms.VictimCharacter = VictimCharacter;
	Parms.ItemSlot = ItemSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABaseCharacter_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnLanded");

	Params::BaseCharacter_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ToggleDodgeCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ToggleDodgeCollision(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ToggleDodgeCollision");

	Params::BaseCharacter_C_ToggleDodgeCollision Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.EndDodgeFlash
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EndDodgeFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EndDodgeFlash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_Home_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_Home_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_Home_K2Node_InputKeyEvent_0");

	Params::BaseCharacter_C_InpActEvt_Home_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_End_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_End_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_End_K2Node_InputKeyEvent_1");

	Params::BaseCharacter_C_InpActEvt_End_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_UseItem_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_UseItem_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_UseItem_K2Node_InputActionEvent_0");

	Params::BaseCharacter_C_InpActEvt_UseItem_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_ThrowBall_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_ThrowBall_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_ThrowBall_K2Node_InputActionEvent_1");

	Params::BaseCharacter_C_InpActEvt_ThrowBall_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_ThrowBall_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_ThrowBall_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_ThrowBall_K2Node_InputActionEvent_2");

	Params::BaseCharacter_C_InpActEvt_ThrowBall_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_SpecialAbility_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_SpecialAbility_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_SpecialAbility_K2Node_InputActionEvent_3");

	Params::BaseCharacter_C_InpActEvt_SpecialAbility_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_SpecialAbility_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_SpecialAbility_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_SpecialAbility_K2Node_InputActionEvent_4");

	Params::BaseCharacter_C_InpActEvt_SpecialAbility_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_AltFire_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_AltFire_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_AltFire_K2Node_InputActionEvent_5");

	Params::BaseCharacter_C_InpActEvt_AltFire_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_AltFire_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_AltFire_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_AltFire_K2Node_InputActionEvent_6");

	Params::BaseCharacter_C_InpActEvt_AltFire_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_Fire_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_Fire_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_Fire_K2Node_InputActionEvent_7");

	Params::BaseCharacter_C_InpActEvt_Fire_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_Fire_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_Fire_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_Fire_K2Node_InputActionEvent_8");

	Params::BaseCharacter_C_InpActEvt_Fire_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_SpecialAbility_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_SpecialAbility_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_SpecialAbility_K2Node_InputActionEvent_9");

	Params::BaseCharacter_C_InpActEvt_SpecialAbility_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.InpActEvt_Jump_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABaseCharacter_C::InpActEvt_Jump_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InpActEvt_Jump_K2Node_InputActionEvent_10");

	Params::BaseCharacter_C_InpActEvt_Jump_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SpeedBoostFadeOut__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedBoostFadeOut__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedBoostFadeOut__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedBoostFadeOut__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedBoostFadeOut__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedBoostFadeOut__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedBoostFadeIn__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedBoostFadeIn__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedBoostFadeIn__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedBoostFadeIn__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedBoostFadeIn__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedBoostFadeIn__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.RevealOutlinePostProcess__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::RevealOutlinePostProcess__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "RevealOutlinePostProcess__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.RevealOutlinePostProcess__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::RevealOutlinePostProcess__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "RevealOutlinePostProcess__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactPostProcessFadeOutTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactPostProcessFadeOutTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactPostProcessFadeOutTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactPostProcessFadeOutTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactPostProcessFadeOutTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactPostProcessFadeOutTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactPostProcessFadeInTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactPostProcessFadeInTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactPostProcessFadeInTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactPostProcessFadeInTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactPostProcessFadeInTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactPostProcessFadeInTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedPostProcessFadeOutTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedPostProcessFadeOutTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedPostProcessFadeOutTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedPostProcessFadeOutTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedPostProcessFadeOutTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedPostProcessFadeOutTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedPostProcessFadeInTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedPostProcessFadeInTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedPostProcessFadeInTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SpeedPostProcessFadeInTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::SpeedPostProcessFadeInTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SpeedPostProcessFadeInTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactFadeInTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactFadeInTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactFadeInTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactFadeInTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactFadeInTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactFadeInTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactFadeOutTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactFadeOutTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactFadeOutTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ArtifactFadeOutTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::ArtifactFadeOutTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ArtifactFadeOutTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.KnockoutTimeline__UpdateFunc
// (BlueprintEvent)

void ABaseCharacter_C::KnockoutTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "KnockoutTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.KnockoutTimeline__FinishedFunc
// (BlueprintEvent)

void ABaseCharacter_C::KnockoutTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "KnockoutTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.FreezeFieldCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnterZone                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class APawn*                            Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::FreezeFieldCounter(bool& EnterZone, class APawn*& Param_Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "FreezeFieldCounter");

	Params::BaseCharacter_C_FreezeFieldCounter Parms{};

	Parms.EnterZone = EnterZone;
	Parms.Param_Instigator = Param_Instigator;

	UObject::ProcessEvent(Func, &Parms);

	EnterZone = Parms.EnterZone;
	Param_Instigator = Parms.Param_Instigator;
}


// Function BaseCharacter.BaseCharacter_C.GetKnockoutHealthRecovery
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HealthToRecover                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetKnockoutHealthRecovery(float* HealthToRecover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetKnockoutHealthRecovery");

	Params::BaseCharacter_C_GetKnockoutHealthRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HealthToRecover != nullptr)
		*HealthToRecover = Parms.HealthToRecover;
}


// Function BaseCharacter.BaseCharacter_C.UpdateStockTimeSinceKnockedOutStat
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateStockTimeSinceKnockedOutStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateStockTimeSinceKnockedOutStat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SetStockKnockedOutTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::SetStockKnockedOutTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetStockKnockedOutTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ToggleAlternateAbilityIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsAlternate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           AbilityClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ToggleAlternateAbilityIcon(bool bIsAlternate, class UClass* AbilityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ToggleAlternateAbilityIcon");

	Params::BaseCharacter_C_ToggleAlternateAbilityIcon Parms{};

	Parms.bIsAlternate = bIsAlternate;
	Parms.AbilityClass = AbilityClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.UpdateHighestPercentStat
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateHighestPercentStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateHighestPercentStat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_ECharacterStance
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_ECharacterStance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_ECharacterStance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.TeamColorMegaBlastThresholdFX
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::TeamColorMegaBlastThresholdFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "TeamColorMegaBlastThresholdFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.GetDangerThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Threshold                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetDangerThreshold(float* Threshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetDangerThreshold");

	Params::BaseCharacter_C_GetDangerThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Threshold != nullptr)
		*Threshold = Parms.Threshold;
}


// Function BaseCharacter.BaseCharacter_C.HandleShieldItemDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   IncomingDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsShieldDepleted                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::HandleShieldItemDamage(float IncomingDamage, bool* IsShieldDepleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleShieldItemDamage");

	Params::BaseCharacter_C_HandleShieldItemDamage Parms{};

	Parms.IncomingDamage = IncomingDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShieldDepleted != nullptr)
		*IsShieldDepleted = Parms.IsShieldDepleted;
}


// Function BaseCharacter.BaseCharacter_C.SetShieldItemStartingHealth
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartingHealth                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::SetShieldItemStartingHealth(float StartingHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetShieldItemStartingHealth");

	Params::BaseCharacter_C_SetShieldItemStartingHealth Parms{};

	Parms.StartingHealth = StartingHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.EndShieldItemAbility
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EndShieldItemAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EndShieldItemAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_CurrentShieldItemHealth
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_CurrentShieldItemHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_CurrentShieldItemHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.AdjustSpawnHeight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::AdjustSpawnHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AdjustSpawnHeight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.GetMegaBlastControlRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABaseCharacter_C::GetMegaBlastControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetMegaBlastControlRotation");

	Params::BaseCharacter_C_GetMegaBlastControlRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseCharacter.BaseCharacter_C.ToggleMegaBlastCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThirdPerson                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ToggleMegaBlastCamera(bool ThirdPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ToggleMegaBlastCamera");

	Params::BaseCharacter_C_ToggleMegaBlastCamera Parms{};

	Parms.ThirdPerson = ThirdPerson;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.GetJumpFXParticleSystemComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentJumpCount                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystemComponent*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UParticleSystemComponent* ABaseCharacter_C::GetJumpFXParticleSystemComponent(int32 CurrentJumpCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetJumpFXParticleSystemComponent");

	Params::BaseCharacter_C_GetJumpFXParticleSystemComponent Parms{};

	Parms.CurrentJumpCount = CurrentJumpCount;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseCharacter.BaseCharacter_C.HandleMoveAffectingGameplayEffectApplied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleMoveAffectingGameplayEffectApplied(class UClass* Effect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleMoveAffectingGameplayEffectApplied");

	Params::BaseCharacter_C_HandleMoveAffectingGameplayEffectApplied Parms{};

	Parms.Effect = Effect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HandleKnockedOutEnemyEffectApplied
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HandleKnockedOutEnemyEffectApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleKnockedOutEnemyEffectApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.DebugDamageCaused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InBool                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    InBool2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InVec                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InFloat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugDamageCaused(const class UObject* Object, bool InBool, bool InBool2, class UClass* Param_Class, const struct FVector& InVec, float InFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugDamageCaused");

	Params::BaseCharacter_C_DebugDamageCaused Parms{};

	Parms.Object = Object;
	Parms.InBool = InBool;
	Parms.InBool2 = InBool2;
	Parms.Param_Class = Param_Class;
	Parms.InVec = std::move(InVec);
	Parms.InFloat = InFloat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.EnableManCannonChangeDirection
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::EnableManCannonChangeDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "EnableManCannonChangeDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HandleManCannonEffectAdded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleManCannonEffectAdded(class UClass* GameplayEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleManCannonEffectAdded");

	Params::BaseCharacter_C_HandleManCannonEffectAdded Parms{};

	Parms.GameplayEffect = GameplayEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HandleManCannonEffectRemoved
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleManCannonEffectRemoved(class UClass* GameplayEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleManCannonEffectRemoved");

	Params::BaseCharacter_C_HandleManCannonEffectRemoved Parms{};

	Parms.GameplayEffect = GameplayEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.HandleArtifactTagApplication
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagHandled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::HandleArtifactTagApplication(const struct FGameplayTag& GameplayTag, bool* TagHandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleArtifactTagApplication");

	Params::BaseCharacter_C_HandleArtifactTagApplication Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	if (TagHandled != nullptr)
		*TagHandled = Parms.TagHandled;
}


// Function BaseCharacter.BaseCharacter_C.HandleArtifactTagRemoval
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagHandled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::HandleArtifactTagRemoval(const struct FGameplayTag& GameplayTag, bool* TagHandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleArtifactTagRemoval");

	Params::BaseCharacter_C_HandleArtifactTagRemoval Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	if (TagHandled != nullptr)
		*TagHandled = Parms.TagHandled;
}


// Function BaseCharacter.BaseCharacter_C.InitializeArtifactGlowValues
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     TagType                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::InitializeArtifactGlowValues(const struct FGameplayTag& TagType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InitializeArtifactGlowValues");

	Params::BaseCharacter_C_InitializeArtifactGlowValues Parms{};

	Parms.TagType = std::move(TagType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SetupSharedPostProcess
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::SetupSharedPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetupSharedPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HandleGameplayTagApplication
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagHandled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::HandleGameplayTagApplication(const struct FGameplayTag& GameplayTag, bool* TagHandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleGameplayTagApplication");

	Params::BaseCharacter_C_HandleGameplayTagApplication Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	if (TagHandled != nullptr)
		*TagHandled = Parms.TagHandled;
}


// Function BaseCharacter.BaseCharacter_C.HandleGameplayTagRemoval
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    TagHandled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::HandleGameplayTagRemoval(const struct FGameplayTag& GameplayTag, bool* TagHandled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleGameplayTagRemoval");

	Params::BaseCharacter_C_HandleGameplayTagRemoval Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);

	if (TagHandled != nullptr)
		*TagHandled = Parms.TagHandled;
}


// Function BaseCharacter.BaseCharacter_C.InitializeArtifactPostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::InitializeArtifactPostProcess(const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "InitializeArtifactPostProcess");

	Params::BaseCharacter_C_InitializeArtifactPostProcess Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.UpdateSpeedPostProcess
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateSpeedPostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateSpeedPostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.UpdateArtifactGlowFadeIn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FullGlowIntensity1st                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FresnelGate1st                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FullGlowIntensity3rd                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FresnelGate3rd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::UpdateArtifactGlowFadeIn(float FullGlowIntensity1st, float FresnelGate1st, float FullGlowIntensity3rd, float FresnelGate3rd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateArtifactGlowFadeIn");

	Params::BaseCharacter_C_UpdateArtifactGlowFadeIn Parms{};

	Parms.FullGlowIntensity1st = FullGlowIntensity1st;
	Parms.FresnelGate1st = FresnelGate1st;
	Parms.FullGlowIntensity3rd = FullGlowIntensity3rd;
	Parms.FresnelGate3rd = FresnelGate3rd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.UpdateArtifactGlowFadeOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FullGlowIntensity1st                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FresnelGate1st                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FullGlowIntensity3rd                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FresnelGate3rd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::UpdateArtifactGlowFadeOut(float FullGlowIntensity1st, float FresnelGate1st, float FullGlowIntensity3rd, float FresnelGate3rd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateArtifactGlowFadeOut");

	Params::BaseCharacter_C_UpdateArtifactGlowFadeOut Parms{};

	Parms.FullGlowIntensity1st = FullGlowIntensity1st;
	Parms.FresnelGate1st = FresnelGate1st;
	Parms.FullGlowIntensity3rd = FullGlowIntensity3rd;
	Parms.FresnelGate3rd = FresnelGate3rd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.SetSpeedBoostPostProcessColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpeedBlend                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Weight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::SetSpeedBoostPostProcessColor(float Radius, float SpeedBlend, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetSpeedBoostPostProcessColor");

	Params::BaseCharacter_C_SetSpeedBoostPostProcessColor Parms{};

	Parms.Radius = Radius;
	Parms.SpeedBlend = SpeedBlend;
	Parms.Weight = Weight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_CurrentArtifactGameplayTag
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_CurrentArtifactGameplayTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_CurrentArtifactGameplayTag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.CheckForAppliedArtifactOnBeginPlay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::CheckForAppliedArtifactOnBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "CheckForAppliedArtifactOnBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ModifyAttackSpeedMontagePlayRate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::ModifyAttackSpeedMontagePlayRate(class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ModifyAttackSpeedMontagePlayRate");

	Params::BaseCharacter_C_ModifyAttackSpeedMontagePlayRate Parms{};

	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ClearCameraShakes
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ClearCameraShakes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClearCameraShakes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_SpawnProtectionEnabled
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_SpawnProtectionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_SpawnProtectionEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerSetSpawnProtectionEnabled
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ServerSetSpawnProtectionEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerSetSpawnProtectionEnabled");

	Params::BaseCharacter_C_ServerSetSpawnProtectionEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AddEnemyToRecentlyDamageByList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      DamagedByController                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::AddEnemyToRecentlyDamageByList(class AController* DamagedByController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AddEnemyToRecentlyDamageByList");

	Params::BaseCharacter_C_AddEnemyToRecentlyDamageByList Parms{};

	Parms.DamagedByController = DamagedByController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.AwardAssistsOnKOed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarinerCharacter*                KnockOutInstigator                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::AwardAssistsOnKOed(class AMarinerCharacter* KnockOutInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "AwardAssistsOnKOed");

	Params::BaseCharacter_C_AwardAssistsOnKOed Parms{};

	Parms.KnockOutInstigator = KnockOutInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ClearRecentlyDamagedByList
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ClearRecentlyDamagedByList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClearRecentlyDamagedByList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.WasRecentlyDamagedByPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      ControllerToCheck                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TimeLimit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RecentlyDamaged                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::WasRecentlyDamagedByPlayer(class AController* ControllerToCheck, float TimeLimit, bool* RecentlyDamaged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "WasRecentlyDamagedByPlayer");

	Params::BaseCharacter_C_WasRecentlyDamagedByPlayer Parms{};

	Parms.ControllerToCheck = ControllerToCheck;
	Parms.TimeLimit = TimeLimit;

	UObject::ProcessEvent(Func, &Parms);

	if (RecentlyDamaged != nullptr)
		*RecentlyDamaged = Parms.RecentlyDamaged;
}


// Function BaseCharacter.BaseCharacter_C.UpdateRecentlyDamagedOnMegablast
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateRecentlyDamagedOnMegablast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateRecentlyDamagedOnMegablast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.HandleGroundedSpeedEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           MovementMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::HandleGroundedSpeedEffect(EMovementMode MovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleGroundedSpeedEffect");

	Params::BaseCharacter_C_HandleGroundedSpeedEffect Parms{};

	Parms.MovementMode = MovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.GetGroundedSpeedEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Param_GroundedSpeedEffect                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetGroundedSpeedEffect(class UClass** Param_GroundedSpeedEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetGroundedSpeedEffect");

	Params::BaseCharacter_C_GetGroundedSpeedEffect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_GroundedSpeedEffect != nullptr)
		*Param_GroundedSpeedEffect = Parms.Param_GroundedSpeedEffect;
}


// Function BaseCharacter.BaseCharacter_C.ActiveGameplayEffectQuerySignature_Cooldown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActiveGameplayEffect            GameplayEffect                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ActiveGameplayEffectQuerySignature_Cooldown(const struct FActiveGameplayEffect& GameplayEffect, bool* Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ActiveGameplayEffectQuerySignature_Cooldown");

	Params::BaseCharacter_C_ActiveGameplayEffectQuerySignature_Cooldown Parms{};

	Parms.GameplayEffect = std::move(GameplayEffect);

	UObject::ProcessEvent(Func, &Parms);

	if (Bool != nullptr)
		*Bool = Parms.Bool;
}


// Function BaseCharacter.BaseCharacter_C.GetNextDebugViewTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::GetNextDebugViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetNextDebugViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.GetDebugViewTargetActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AViewTargetActor_C*               Param_ViewTargetActor                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetDebugViewTargetActor(class AViewTargetActor_C** Param_ViewTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetDebugViewTargetActor");

	Params::BaseCharacter_C_GetDebugViewTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ViewTargetActor != nullptr)
		*Param_ViewTargetActor = Parms.Param_ViewTargetActor;
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintAllOfActorType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ActorClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugPrintAllOfActorType(class UClass* ActorClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintAllOfActorType");

	Params::BaseCharacter_C_DebugPrintAllOfActorType Parms{};

	Parms.ActorClass = ActorClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.UpdateAwardsOnDamageCaused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DamageWasAoE                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    DamageWasMegablast                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpulseVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::UpdateAwardsOnDamageCaused(const class AActor* DamagedActor, bool DamageWasAoE, bool DamageWasMegablast, class UClass* DamageType, const struct FVector& ImpulseVector, float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateAwardsOnDamageCaused");

	Params::BaseCharacter_C_UpdateAwardsOnDamageCaused Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageWasAoE = DamageWasAoE;
	Parms.DamageWasMegablast = DamageWasMegablast;
	Parms.DamageType = DamageType;
	Parms.ImpulseVector = std::move(ImpulseVector);
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.UpdateRecoveryAwardOnHitStunRemoved
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateRecoveryAwardOnHitStunRemoved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateRecoveryAwardOnHitStunRemoved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.GetJumpParticlesOffset
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABaseCharacter_C::GetJumpParticlesOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetJumpParticlesOffset");

	Params::BaseCharacter_C_GetJumpParticlesOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseCharacter.BaseCharacter_C.GetGameplayAwardTypeFromStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGameplayAwardTypes                     AwardType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetGameplayAwardTypeFromStat(class FName Stat, EGameplayAwardTypes* AwardType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetGameplayAwardTypeFromStat");

	Params::BaseCharacter_C_GetGameplayAwardTypeFromStat Parms{};

	Parms.Stat = Stat;

	UObject::ProcessEvent(Func, &Parms);

	if (AwardType != nullptr)
		*AwardType = Parms.AwardType;
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintGameplayEffectLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Effect                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugPrintGameplayEffectLevel(class UClass* Effect, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintGameplayEffectLevel");

	Params::BaseCharacter_C_DebugPrintGameplayEffectLevel Parms{};

	Parms.Effect = Effect;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugPrintGameplayEffectLevels
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugPrintGameplayEffectLevels(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugPrintGameplayEffectLevels");

	Params::BaseCharacter_C_DebugPrintGameplayEffectLevels Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DodgeCollisionToggleInternal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CollisionEnabled                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::DodgeCollisionToggleInternal(bool CollisionEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DodgeCollisionToggleInternal");

	Params::BaseCharacter_C_DodgeCollisionToggleInternal Parms{};

	Parms.CollisionEnabled = CollisionEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.RemoveDodgeFX
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::RemoveDodgeFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "RemoveDodgeFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.UpdateDodgeMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::UpdateDodgeMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "UpdateDodgeMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.IgnoreActorTypesForDodge
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnore                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::IgnoreActorTypesForDodge(bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "IgnoreActorTypesForDodge");

	Params::BaseCharacter_C_IgnoreActorTypesForDodge Parms{};

	Parms.bIgnore = bIgnore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.ApplyJumpFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ApplyJumpFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ApplyJumpFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ApplyLandedFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ApplyLandedFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ApplyLandedFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ApplyKnockoutFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ApplyKnockoutFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ApplyKnockoutFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StartMegablastFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StartMegablastFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StartMegablastFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.StopMegablastFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::StopMegablastFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "StopMegablastFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ApplyItemPickupFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ApplyItemPickupFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ApplyItemPickupFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.BP_OnChangePerspective
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PerspectiveName                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMarinerCameraPerspective        Perspective                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FMarinerCameraPerspective        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor)

struct FMarinerCameraPerspective ABaseCharacter_C::BP_OnChangePerspective(const class FName& PerspectiveName, struct FMarinerCameraPerspective& Perspective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "BP_OnChangePerspective");

	Params::BaseCharacter_C_BP_OnChangePerspective Parms{};

	Parms.PerspectiveName = PerspectiveName;
	Parms.Perspective = std::move(Perspective);

	UObject::ProcessEvent(Func, &Parms);

	Perspective = std::move(Parms.Perspective);

	return Parms.ReturnValue;
}


// Function BaseCharacter.BaseCharacter_C.GetOrCreateDebugSoundShape
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             Param_DebugSoundShape                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetOrCreateDebugSoundShape(class UStaticMeshComponent** Param_DebugSoundShape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetOrCreateDebugSoundShape");

	Params::BaseCharacter_C_GetOrCreateDebugSoundShape Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DebugSoundShape != nullptr)
		*Param_DebugSoundShape = Parms.Param_DebugSoundShape;
}


// Function BaseCharacter.BaseCharacter_C.GetOrCreateDebugSoundHolder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  DebugSoundHolder                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::GetOrCreateDebugSoundHolder(class USceneComponent** DebugSoundHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetOrCreateDebugSoundHolder");

	Params::BaseCharacter_C_GetOrCreateDebugSoundHolder Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DebugSoundHolder != nullptr)
		*DebugSoundHolder = Parms.DebugSoundHolder;
}


// Function BaseCharacter.BaseCharacter_C.ApplyItemDropFFE
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::ApplyItemDropFFE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ApplyItemDropFFE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_DodgeData
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_DodgeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_DodgeData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.SetDodgeData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDodgeData                       Param_DodgeData                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::SetDodgeData(const struct FDodgeData& Param_DodgeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "SetDodgeData");

	Params::BaseCharacter_C_SetDodgeData Parms{};

	Parms.Param_DodgeData = std::move(Param_DodgeData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugTryToSpawnItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           DesiredItem                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABaseCharacter_C::DebugTryToSpawnItem(const class FString& DesiredItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugTryToSpawnItem");

	Params::BaseCharacter_C_DebugTryToSpawnItem Parms{};

	Parms.DesiredItem = std::move(DesiredItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DebugGetFullValidItemTypeArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<EItemBoxTypes>                   ValidItemArray                                         (Parm, OutParm, ZeroConstructor)

void ABaseCharacter_C::DebugGetFullValidItemTypeArray(TArray<EItemBoxTypes>* ValidItemArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugGetFullValidItemTypeArray");

	Params::BaseCharacter_C_DebugGetFullValidItemTypeArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ValidItemArray != nullptr)
		*ValidItemArray = std::move(Parms.ValidItemArray);
}


// Function BaseCharacter.BaseCharacter_C.DebugGetFullValidItemPickupArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<TSoftClassPtr<class UClass>>     ItemPickupArray                                        (Parm, OutParm, ZeroConstructor)

void ABaseCharacter_C::DebugGetFullValidItemPickupArray(TArray<TSoftClassPtr<class UClass>>* ItemPickupArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DebugGetFullValidItemPickupArray");

	Params::BaseCharacter_C_DebugGetFullValidItemPickupArray Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemPickupArray != nullptr)
		*ItemPickupArray = std::move(Parms.ItemPickupArray);
}


// Function BaseCharacter.BaseCharacter_C.HandleRemoveSpawnProtection
// (Public, BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::HandleRemoveSpawnProtection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "HandleRemoveSpawnProtection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_bEnableFreeze
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_bEnableFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_bEnableFreeze");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ClientSetSpawnProtectionVFXEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ClientSetSpawnProtectionVFXEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ClientSetSpawnProtectionVFXEnabled");

	Params::BaseCharacter_C_ClientSetSpawnProtectionVFXEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.OnRep_SpawnProtectionVFXEnabled
// (BlueprintCallable, BlueprintEvent)

void ABaseCharacter_C::OnRep_SpawnProtectionVFXEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "OnRep_SpawnProtectionVFXEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BaseCharacter.BaseCharacter_C.ServerSetSpawnProtectionVFXEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::ServerSetSpawnProtectionVFXEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ServerSetSpawnProtectionVFXEnabled");

	Params::BaseCharacter_C_ServerSetSpawnProtectionVFXEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BaseCharacter.BaseCharacter_C.DestroyBlastballFXOnDrop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystemComponent*         HoldingBlastballFX                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABaseCharacter_C::DestroyBlastballFXOnDrop(class UParticleSystemComponent*& HoldingBlastballFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "DestroyBlastballFXOnDrop");

	Params::BaseCharacter_C_DestroyBlastballFXOnDrop Parms{};

	Parms.HoldingBlastballFX = HoldingBlastballFX;

	UObject::ProcessEvent(Func, &Parms);

	HoldingBlastballFX = Parms.HoldingBlastballFX;
}


// Function BaseCharacter.BaseCharacter_C.CanInputQueueThrowPriorityItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bCanInputQueue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABaseCharacter_C::CanInputQueueThrowPriorityItem(bool* bCanInputQueue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "CanInputQueueThrowPriorityItem");

	Params::BaseCharacter_C_CanInputQueueThrowPriorityItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanInputQueue != nullptr)
		*bCanInputQueue = Parms.bCanInputQueue;
}


// Function BaseCharacter.BaseCharacter_C.ShouldKnockoutInitiateSplat
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    bWasKnockoutDueToMegablast                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABaseCharacter_C::ShouldKnockoutInitiateSplat(bool bWasKnockoutDueToMegablast) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "ShouldKnockoutInitiateSplat");

	Params::BaseCharacter_C_ShouldKnockoutInitiateSplat Parms{};

	Parms.bWasKnockoutDueToMegablast = bWasKnockoutDueToMegablast;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BaseCharacter.BaseCharacter_C.GetDodgeReplicationTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABaseCharacter_C::GetDodgeReplicationTrigger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseCharacter_C", "GetDodgeReplicationTrigger");

	Params::BaseCharacter_C_GetDodgeReplicationTrigger Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

