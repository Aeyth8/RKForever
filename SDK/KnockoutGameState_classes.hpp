#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KnockoutGameState

#include "Basic.hpp"

#include "BP_MarinerGameState_classes.hpp"
#include "Engine_structs.hpp"
#include "CaptureZoneStates_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass KnockoutGameState.KnockoutGameState_C
// 0x0090 (0x0AB8 - 0x0A28)
class AKnockoutGameState_C final : public ABP_MarinerGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_KnockoutGameState_C;                // 0x0A28(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Team0PlayersWithStock;                             // 0x0A30(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team1PlayersWithStock;                             // 0x0A34(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InGameTime;                                        // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3C[0x4];                                      // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OnStockRemovalAnimation;                           // 0x0A40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Team0TotalStocksLeft;                              // 0x0A50(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team1TotalStocksLeft;                              // 0x0A54(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeam1UsingPoolOfLives;                           // 0x0A58(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsTeam0UsingPoolOfLives;                           // 0x0A59(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5A[0x6];                                      // 0x0A5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             Overtime;                                          // 0x0A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         SecondsToReset;                                    // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A74[0x4];                                      // 0x0A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastInlineDelegateProperty_             OvertimeUIChanges;                                 // 0x0A78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             OnePlayerWithStockOnTeam;                          // 0x0A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastInlineDelegateProperty_             SetPlayerPinNavpoint;                              // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BadgeStealMode;                                    // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA9[0x3];                                      // 0x0AA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumKOsToRefillBadge;                               // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CaptureZoneMode;                                   // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECaptureZoneStates                            CurrentCaptureState;                               // 0x0AB1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void OnStockRemovalAnimation__DelegateSignature(class AController* KilledPlayer, int32 StockCountBeforeKnockout);
	void Overtime__DelegateSignature(float NewParam);
	void OvertimeUIChanges__DelegateSignature();
	void OnePlayerWithStockOnTeam__DelegateSignature(int32 OnePlayerWithStockTeamIndex);
	void SetPlayerPinNavpoint__DelegateSignature(class APlayerState* PlayerState, bool IsEnabled);
	void ExecuteUbergraph_KnockoutGameState(int32 EntryPoint);
	void MulticastSetPlayerPinNavpoint(class APlayerState* PlayerState, bool IsEnabled);
	void OnPlayerWithStockLeft(int32 OnePlayerWithStockTeamIndex);
	void MulticastOnePlayerOnTeamWithStock(int32 OnePlayerWithStockTeamIndex, class AMarinerKnockoutPlayerState_C* LastPlayerWithStock);
	void OvertimeUILogic();
	void Event_Overtime(float Seconds_to_Reset);
	void MulticastStockRemovalAnimation(class AController* KillerPlayer, int32 StockCountBeforeKnockout);
	void AuthorityStockRemovalAnimation(class AController* KilledPlayer, int32 StockCountBeforeKnockout);
	void GetPlayersOnTeamWithStock(int32 Team, int32* PlayersWithStock);
	void DecrementTeamStocksLeftByPlayerState(class AMarinerPlayerState* PlayerWhoLostStock, int32* StocksLeftAfterDecrementing);
	void IncrementTeamTotalStocksLeft(int32 Stocks, int32 TeamIndex);
	void DecrementTeamStocksLeftByTeamIndex(int32 TeamIndexOfPlayerWhoLostStock, int32* StocksLeftAfterDecrementing);
	void SetShouldUsePoolOfLives(bool ShouldUsePoolOfLives, int32 TeamIndex);
	void IncrementPlayersWithStock(int32 TeamIndex, int32* UpdatedPlayersWithStockOnTeam);
	void DecrementPlayersWithStock(int32 TeamIndex, int32* UpdatedPlayersWithStockOnTeam);
	void GetIsUsingPoolOfLives(int32 TeamIndex, bool* IsUsingPoolOfLives);
	void OnPlayerWithStockLeftImplementation(int32 OnePlayerWithStockTeamIndex);
	void OnRep_CurrentCaptureState();
	void ReceiveBeginPlay();

	float GetHealthToRecoverOnKnockout(class AMarinerPlayerState* PlayerStateOfReturningCharacter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KnockoutGameState_C">();
	}
	static class AKnockoutGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKnockoutGameState_C>();
	}
};
static_assert(alignof(AKnockoutGameState_C) == 0x000008, "Wrong alignment on AKnockoutGameState_C");
static_assert(sizeof(AKnockoutGameState_C) == 0x000AB8, "Wrong size on AKnockoutGameState_C");
static_assert(offsetof(AKnockoutGameState_C, UberGraphFrame_KnockoutGameState_C) == 0x000A28, "Member 'AKnockoutGameState_C::UberGraphFrame_KnockoutGameState_C' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, Team0PlayersWithStock) == 0x000A30, "Member 'AKnockoutGameState_C::Team0PlayersWithStock' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, Team1PlayersWithStock) == 0x000A34, "Member 'AKnockoutGameState_C::Team1PlayersWithStock' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, InGameTime) == 0x000A38, "Member 'AKnockoutGameState_C::InGameTime' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, OnStockRemovalAnimation) == 0x000A40, "Member 'AKnockoutGameState_C::OnStockRemovalAnimation' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, Team0TotalStocksLeft) == 0x000A50, "Member 'AKnockoutGameState_C::Team0TotalStocksLeft' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, Team1TotalStocksLeft) == 0x000A54, "Member 'AKnockoutGameState_C::Team1TotalStocksLeft' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, IsTeam1UsingPoolOfLives) == 0x000A58, "Member 'AKnockoutGameState_C::IsTeam1UsingPoolOfLives' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, IsTeam0UsingPoolOfLives) == 0x000A59, "Member 'AKnockoutGameState_C::IsTeam0UsingPoolOfLives' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, Overtime) == 0x000A60, "Member 'AKnockoutGameState_C::Overtime' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, SecondsToReset) == 0x000A70, "Member 'AKnockoutGameState_C::SecondsToReset' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, OvertimeUIChanges) == 0x000A78, "Member 'AKnockoutGameState_C::OvertimeUIChanges' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, OnePlayerWithStockOnTeam) == 0x000A88, "Member 'AKnockoutGameState_C::OnePlayerWithStockOnTeam' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, SetPlayerPinNavpoint) == 0x000A98, "Member 'AKnockoutGameState_C::SetPlayerPinNavpoint' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, BadgeStealMode) == 0x000AA8, "Member 'AKnockoutGameState_C::BadgeStealMode' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, NumKOsToRefillBadge) == 0x000AAC, "Member 'AKnockoutGameState_C::NumKOsToRefillBadge' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, CaptureZoneMode) == 0x000AB0, "Member 'AKnockoutGameState_C::CaptureZoneMode' has a wrong offset!");
static_assert(offsetof(AKnockoutGameState_C, CurrentCaptureState) == 0x000AB1, "Member 'AKnockoutGameState_C::CurrentCaptureState' has a wrong offset!");

}

