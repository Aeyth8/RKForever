#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterCommonPin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameModeEnums_structs.hpp"
#include "Mariner_structs.hpp"


namespace SDK::Params
{

// Function CharacterCommonPin.CharacterCommonPin_C.ExecuteUbergraph_CharacterCommonPin
// 0x0210 (0x0210 - 0x0000)
struct CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWidgetAnimationState                         CallFunc_GetWidgetAnimationState_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetOnTimerCompleted_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AMarinerCharacter*                      CallFunc_GetCharacterReference_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEdgeOfScreen;                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHasLineOfSight;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerArenaReturnState                      K2Node_Event_PreviousState;                        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarinerArenaReturnState                      K2Node_Event_NewState;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Event_GameModeWidget;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_Event_PlayerState;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerPinGameModeWidget*              CallFunc_CreateGameModeWidget_WidgetInstance;      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_Event_Brush;                                // 0x0050(0x0088)(ConstParm)
	bool                                          K2Node_Event_bForcesPinVisible;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bImageCanDim;                         // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerGameState*                      K2Node_DynamicCast_AsMariner_Game_State;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInNameViewCone;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageableComponent*            Temp_object_Variable;                              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMegablasted_ReturnValue;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bForcedOn;                            // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_Text;                                 // 0x0100(0x0018)(ConstParm)
	int32                                         K2Node_CustomEvent_OnePlayerWithStockTeamIndex;    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    K2Node_Event_MegablastInstigator;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0128(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_NewActorReference;                    // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      K2Node_DynamicCast_AsMariner_Character;            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlastbarNavpinMegablast_C*             CallFunc_CreateMegablastWidget_BlastbarWidget;     // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_1;                           // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IMarinerDamageableObjectInterface> K2Node_DynamicCast_AsMariner_Damageable_Object_Interface; // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerDamageableComponent*            CallFunc_BP_GetDamageableComponent_ReturnValue;    // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ForceHide;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMarinerDamageableComponent*      K2Node_CustomEvent_RelevantDamageableComponent;    // 0x01E8(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewAmount;                      // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_OldAmount;                      // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01FC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetMatchStatus_CanPlayMessages;           // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin) == 0x000008, "Wrong alignment on CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin");
static_assert(sizeof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin) == 0x000210, "Wrong size on CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, EntryPoint) == 0x000000, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::EntryPoint' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, Temp_bool_Variable) == 0x000004, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetWidgetAnimationState_ReturnValue) == 0x000005, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetWidgetAnimationState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_SetOnTimerCompleted_ReturnValue) == 0x000006, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_SetOnTimerCompleted_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000007, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetCharacterReference_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetCharacterReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bEdgeOfScreen) == 0x000010, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bEdgeOfScreen' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bHasLineOfSight) == 0x000011, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bHasLineOfSight' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_PreviousState) == 0x000012, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_PreviousState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_NewState) == 0x000013, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Select_Default) == 0x000018, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000020, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_GameModeWidget) == 0x000030, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_GameModeWidget' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_PlayerState) == 0x000038, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_PlayerState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_CreateGameModeWidget_WidgetInstance) == 0x000040, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_CreateGameModeWidget_WidgetInstance' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetGameState_ReturnValue) == 0x000048, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_Brush) == 0x000050, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_Brush' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bForcesPinVisible) == 0x0000D8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bForcesPinVisible' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bImageCanDim) == 0x0000D9, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bImageCanDim' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_AsMariner_Game_State) == 0x0000E0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_AsMariner_Game_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bInNameViewCone) == 0x0000E9, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bInNameViewCone' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, Temp_object_Variable) == 0x0000F0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_IsMegablasted_ReturnValue) == 0x0000F8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_IsMegablasted_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_bForcedOn) == 0x0000F9, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_bForcedOn' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_Text) == 0x000100, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_Text' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CustomEvent_OnePlayerWithStockTeamIndex) == 0x000118, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CustomEvent_OnePlayerWithStockTeamIndex' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_MegablastInstigator) == 0x000120, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_MegablastInstigator' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_MyGeometry) == 0x000128, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_InDeltaTime) == 0x000160, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Event_NewActorReference) == 0x000168, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Event_NewActorReference' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_AsMariner_Character) == 0x000170, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_AsMariner_Character' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_bSuccess_1) == 0x000178, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_MakeVector2D_ReturnValue) == 0x00017C, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_AsMariner_Player_State) == 0x000188, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_bSuccess_2) == 0x000190, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_CreateMegablastWidget_BlastbarWidget) == 0x000198, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_CreateMegablastWidget_BlastbarWidget' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetOwningPlayer_ReturnValue) == 0x0001A0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, Temp_bool_Variable_1) == 0x0001A8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001A9, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_Select_Default_1) == 0x0001B0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x0001B8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_AsMariner_Damageable_Object_Interface) == 0x0001C0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_AsMariner_Damageable_Object_Interface' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_DynamicCast_bSuccess_3) == 0x0001D0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_BP_GetDamageableComponent_ReturnValue) == 0x0001D8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_BP_GetDamageableComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CustomEvent_ForceHide) == 0x0001E0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CustomEvent_ForceHide' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CustomEvent_RelevantDamageableComponent) == 0x0001E8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CustomEvent_RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CustomEvent_NewAmount) == 0x0001F0, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CustomEvent_NewAmount' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CustomEvent_OldAmount) == 0x0001F4, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CustomEvent_OldAmount' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001F8, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, K2Node_CreateDelegate_OutputDelegate) == 0x0001FC, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin, CallFunc_GetMatchStatus_CanPlayMessages) == 0x00020C, "Member 'CharacterCommonPin_C_ExecuteUbergraph_CharacterCommonPin::CallFunc_GetMatchStatus_CanPlayMessages' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnDamaged
// 0x0010 (0x0010 - 0x0000)
struct CharacterCommonPin_C_OnDamaged final
{
public:
	const class UMarinerDamageableComponent*      RelevantDamageableComponent;                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewAmount;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldAmount;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_OnDamaged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnDamaged");
static_assert(sizeof(CharacterCommonPin_C_OnDamaged) == 0x000010, "Wrong size on CharacterCommonPin_C_OnDamaged");
static_assert(offsetof(CharacterCommonPin_C_OnDamaged, RelevantDamageableComponent) == 0x000000, "Member 'CharacterCommonPin_C_OnDamaged::RelevantDamageableComponent' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnDamaged, NewAmount) == 0x000008, "Member 'CharacterCommonPin_C_OnDamaged::NewAmount' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnDamaged, OldAmount) == 0x00000C, "Member 'CharacterCommonPin_C_OnDamaged::OldAmount' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetForceHideDamage
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommonPin_C_SetForceHideDamage final
{
public:
	bool                                          ForceHide;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_SetForceHideDamage) == 0x000001, "Wrong alignment on CharacterCommonPin_C_SetForceHideDamage");
static_assert(sizeof(CharacterCommonPin_C_SetForceHideDamage) == 0x000001, "Wrong size on CharacterCommonPin_C_SetForceHideDamage");
static_assert(offsetof(CharacterCommonPin_C_SetForceHideDamage, ForceHide) == 0x000000, "Member 'CharacterCommonPin_C_SetForceHideDamage::ForceHide' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnActorReferenceChanged
// 0x0008 (0x0008 - 0x0000)
struct CharacterCommonPin_C_OnActorReferenceChanged final
{
public:
	class AActor*                                 NewActorReference;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_OnActorReferenceChanged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnActorReferenceChanged");
static_assert(sizeof(CharacterCommonPin_C_OnActorReferenceChanged) == 0x000008, "Wrong size on CharacterCommonPin_C_OnActorReferenceChanged");
static_assert(offsetof(CharacterCommonPin_C_OnActorReferenceChanged, NewActorReference) == 0x000000, "Member 'CharacterCommonPin_C_OnActorReferenceChanged::NewActorReference' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.Tick
// 0x003C (0x003C - 0x0000)
struct CharacterCommonPin_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_Tick) == 0x000004, "Wrong alignment on CharacterCommonPin_C_Tick");
static_assert(sizeof(CharacterCommonPin_C_Tick) == 0x00003C, "Wrong size on CharacterCommonPin_C_Tick");
static_assert(offsetof(CharacterCommonPin_C_Tick, MyGeometry) == 0x000000, "Member 'CharacterCommonPin_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_Tick, InDeltaTime) == 0x000038, "Member 'CharacterCommonPin_C_Tick::InDeltaTime' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.HandleMegablastEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterCommonPin_C_HandleMegablastEvent final
{
public:
	class AMarinerPlayerState*                    MegablastInstigator;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_HandleMegablastEvent) == 0x000008, "Wrong alignment on CharacterCommonPin_C_HandleMegablastEvent");
static_assert(sizeof(CharacterCommonPin_C_HandleMegablastEvent) == 0x000008, "Wrong size on CharacterCommonPin_C_HandleMegablastEvent");
static_assert(offsetof(CharacterCommonPin_C_HandleMegablastEvent, MegablastInstigator) == 0x000000, "Member 'CharacterCommonPin_C_HandleMegablastEvent::MegablastInstigator' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.FlashLastPlayerPin
// 0x0004 (0x0004 - 0x0000)
struct CharacterCommonPin_C_FlashLastPlayerPin final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_FlashLastPlayerPin) == 0x000004, "Wrong alignment on CharacterCommonPin_C_FlashLastPlayerPin");
static_assert(sizeof(CharacterCommonPin_C_FlashLastPlayerPin) == 0x000004, "Wrong size on CharacterCommonPin_C_FlashLastPlayerPin");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerPin, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'CharacterCommonPin_C_FlashLastPlayerPin::OnePlayerWithStockTeamIndex' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetActionText
// 0x0018 (0x0018 - 0x0000)
struct CharacterCommonPin_C_SetActionText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(CharacterCommonPin_C_SetActionText) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SetActionText");
static_assert(sizeof(CharacterCommonPin_C_SetActionText) == 0x000018, "Wrong size on CharacterCommonPin_C_SetActionText");
static_assert(offsetof(CharacterCommonPin_C_SetActionText, Text) == 0x000000, "Member 'CharacterCommonPin_C_SetActionText::Text' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetForcedOn
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommonPin_C_SetForcedOn final
{
public:
	bool                                          bForcedOn;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_SetForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_SetForcedOn");
static_assert(sizeof(CharacterCommonPin_C_SetForcedOn) == 0x000001, "Wrong size on CharacterCommonPin_C_SetForcedOn");
static_assert(offsetof(CharacterCommonPin_C_SetForcedOn, bForcedOn) == 0x000000, "Member 'CharacterCommonPin_C_SetForcedOn::bForcedOn' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetIcon
// 0x0090 (0x0090 - 0x0000)
struct CharacterCommonPin_C_SetIcon final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bForcesPinVisible;                                 // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bImageCanDim;                                      // 0x0089(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_SetIcon) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SetIcon");
static_assert(sizeof(CharacterCommonPin_C_SetIcon) == 0x000090, "Wrong size on CharacterCommonPin_C_SetIcon");
static_assert(offsetof(CharacterCommonPin_C_SetIcon, Brush) == 0x000000, "Member 'CharacterCommonPin_C_SetIcon::Brush' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetIcon, bForcesPinVisible) == 0x000088, "Member 'CharacterCommonPin_C_SetIcon::bForcesPinVisible' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetIcon, bImageCanDim) == 0x000089, "Member 'CharacterCommonPin_C_SetIcon::bImageCanDim' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetGameModeWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterCommonPin_C_SetGameModeWidget final
{
public:
	TSubclassOf<class UMarinerPinGameModeWidget>  GameModeWidget_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SetGameModeWidget) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SetGameModeWidget");
static_assert(sizeof(CharacterCommonPin_C_SetGameModeWidget) == 0x000010, "Wrong size on CharacterCommonPin_C_SetGameModeWidget");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidget, GameModeWidget_0) == 0x000000, "Member 'CharacterCommonPin_C_SetGameModeWidget::GameModeWidget_0' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidget, PlayerState) == 0x000008, "Member 'CharacterCommonPin_C_SetGameModeWidget::PlayerState' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnCharacterArenaReturnStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CharacterCommonPin_C_OnCharacterArenaReturnStateChanged final
{
public:
	EMarinerArenaReturnState                      PreviousState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarinerArenaReturnState                      NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_OnCharacterArenaReturnStateChanged) == 0x000001, "Wrong alignment on CharacterCommonPin_C_OnCharacterArenaReturnStateChanged");
static_assert(sizeof(CharacterCommonPin_C_OnCharacterArenaReturnStateChanged) == 0x000002, "Wrong size on CharacterCommonPin_C_OnCharacterArenaReturnStateChanged");
static_assert(offsetof(CharacterCommonPin_C_OnCharacterArenaReturnStateChanged, PreviousState) == 0x000000, "Member 'CharacterCommonPin_C_OnCharacterArenaReturnStateChanged::PreviousState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnCharacterArenaReturnStateChanged, NewState) == 0x000001, "Member 'CharacterCommonPin_C_OnCharacterArenaReturnStateChanged::NewState' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnHasLineOfSightToActorChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommonPin_C_OnHasLineOfSightToActorChanged final
{
public:
	bool                                          bHasLineOfSight;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnHasLineOfSightToActorChanged) == 0x000001, "Wrong alignment on CharacterCommonPin_C_OnHasLineOfSightToActorChanged");
static_assert(sizeof(CharacterCommonPin_C_OnHasLineOfSightToActorChanged) == 0x000001, "Wrong size on CharacterCommonPin_C_OnHasLineOfSightToActorChanged");
static_assert(offsetof(CharacterCommonPin_C_OnHasLineOfSightToActorChanged, bHasLineOfSight) == 0x000000, "Member 'CharacterCommonPin_C_OnHasLineOfSightToActorChanged::bHasLineOfSight' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnIsAtEdgeOfScreenChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged final
{
public:
	bool                                          bEdgeOfScreen;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged) == 0x000001, "Wrong alignment on CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged");
static_assert(sizeof(CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged) == 0x000001, "Wrong size on CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged");
static_assert(offsetof(CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged, bEdgeOfScreen) == 0x000000, "Member 'CharacterCommonPin_C_OnIsAtEdgeOfScreenChanged::bEdgeOfScreen' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnInNameViewConeChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommonPin_C_OnInNameViewConeChanged final
{
public:
	bool                                          bInNameViewCone;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnInNameViewConeChanged) == 0x000001, "Wrong alignment on CharacterCommonPin_C_OnInNameViewConeChanged");
static_assert(sizeof(CharacterCommonPin_C_OnInNameViewConeChanged) == 0x000001, "Wrong size on CharacterCommonPin_C_OnInNameViewConeChanged");
static_assert(offsetof(CharacterCommonPin_C_OnInNameViewConeChanged, bInNameViewCone) == 0x000000, "Member 'CharacterCommonPin_C_OnInNameViewConeChanged::bInNameViewCone' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.RefreshAll
// 0x0078 (0x0078 - 0x0000)
struct CharacterCommonPin_C_RefreshAll final
{
public:
	TDelegate<void(class UMarinerAnimatedWidget* Instance, EWidgetAnimationState NewState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UMarinerAnimatedWidget* Instance, EWidgetAnimationState NewState)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class AMarinerCharacter*                      CallFunc_GetCharacterReference_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           CallFunc_GetProfileObjectManager_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State_1;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerSkinUIData*                     CallFunc_GetSkinUIData_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMarinerHostility                             CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue; // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMarinerTeamColorbyHostility_bIsValid;  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 CallFunc_GetMarinerTeamColorbyHostility_ReturnValue; // 0x0060(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAccumulatedDamage_ReturnValue;         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_RefreshAll) == 0x000008, "Wrong alignment on CharacterCommonPin_C_RefreshAll");
static_assert(sizeof(CharacterCommonPin_C_RefreshAll) == 0x000078, "Wrong size on CharacterCommonPin_C_RefreshAll");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetCharacterReference_ReturnValue) == 0x000020, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetCharacterReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_DynamicCast_AsMariner_Player_State) == 0x000028, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetProfileObjectManager_ReturnValue) == 0x000038, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetProfileObjectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_DynamicCast_AsMariner_Player_State_1) == 0x000040, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_DynamicCast_AsMariner_Player_State_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'CharacterCommonPin_C_RefreshAll::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetSkinUIData_ReturnValue) == 0x000050, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetSkinUIData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetTeamIndex_ReturnValue) == 0x000058, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue) == 0x00005D, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetMarinerTeamColorbyHostility_bIsValid) == 0x00005E, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetMarinerTeamColorbyHostility_bIsValid' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetMarinerTeamColorbyHostility_ReturnValue) == 0x000060, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetMarinerTeamColorbyHostility_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000064, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_RefreshAll, CallFunc_GetAccumulatedDamage_ReturnValue) == 0x000074, "Member 'CharacterCommonPin_C_RefreshAll::CallFunc_GetAccumulatedDamage_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateNameForcedOn
// 0x0010 (0x0010 - 0x0000)
struct CharacterCommonPin_C_UpdateNameForcedOn final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetWidgetActive_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetWidgetActive_ReturnValue_1;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetWidgetActive_ReturnValue_2;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateNameForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateNameForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateNameForcedOn) == 0x000010, "Wrong size on CharacterCommonPin_C_UpdateNameForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_GetWidgetActive_ReturnValue) == 0x000001, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_GetWidgetActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000004, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_GetWidgetActive_ReturnValue_1) == 0x000005, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_GetWidgetActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue_2) == 0x000006, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_GetWidgetActive_ReturnValue_2) == 0x000007, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_GetWidgetActive_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue_3) == 0x000008, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue_4) == 0x000009, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_Not_PreBool_ReturnValue_5) == 0x00000B, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanAND_ReturnValue_2) == 0x00000D, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanAND_ReturnValue_3) == 0x00000E, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateNameForcedOn, CallFunc_BooleanAND_ReturnValue_4) == 0x00000F, "Member 'CharacterCommonPin_C_UpdateNameForcedOn::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateGameModeForcedOn
// 0x000D (0x000D - 0x0000)
struct CharacterCommonPin_C_UpdateGameModeForcedOn final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_1;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateGameModeForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateGameModeForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateGameModeForcedOn) == 0x00000D, "Wrong size on CharacterCommonPin_C_UpdateGameModeForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue_1) == 0x000002, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_Not_PreBool_ReturnValue_2) == 0x000005, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_Not_PreBool_ReturnValue_3) == 0x000007, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanOR_ReturnValue_1) == 0x000008, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_Not_PreBool_ReturnValue_4) == 0x000009, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanAND_ReturnValue_2) == 0x00000B, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGameModeForcedOn, CallFunc_BooleanAND_ReturnValue_3) == 0x00000C, "Member 'CharacterCommonPin_C_UpdateGameModeForcedOn::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnGutterWidgetAnimationStateChanged
// 0x0018 (0x0018 - 0x0000)
struct CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged final
{
public:
	class UMarinerAnimatedWidget*                 Instance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWidgetAnimationState                         Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged");
static_assert(sizeof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged) == 0x000018, "Wrong size on CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Instance) == 0x000000, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Instance' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, NewState) == 0x000008, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_byte_Variable) == 0x000009, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable) == 0x00000A, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable_1) == 0x00000B, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable_2) == 0x00000C, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable_3) == 0x00000D, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable_4) == 0x00000E, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, Temp_bool_Variable_5) == 0x00000F, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged, K2Node_Select_Default) == 0x000010, "Member 'CharacterCommonPin_C_OnGutterWidgetAnimationStateChanged::K2Node_Select_Default' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.ReactToMatchStateChanged
// 0x0018 (0x0018 - 0x0000)
struct CharacterCommonPin_C_ReactToMatchStateChanged final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_ReactToMatchStateChanged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_ReactToMatchStateChanged");
static_assert(sizeof(CharacterCommonPin_C_ReactToMatchStateChanged) == 0x000018, "Wrong size on CharacterCommonPin_C_ReactToMatchStateChanged");
static_assert(offsetof(CharacterCommonPin_C_ReactToMatchStateChanged, InName) == 0x000000, "Member 'CharacterCommonPin_C_ReactToMatchStateChanged::InName' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ReactToMatchStateChanged, CallFunc_Conv_NameToString_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_ReactToMatchStateChanged::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.ToggleMegaBlastThresholdAnim
// 0x0020 (0x0020 - 0x0000)
struct CharacterCommonPin_C_ToggleMegaBlastThresholdAnim final
{
public:
	class AMarinerCharacter*                      CallFunc_GetCharacterReference_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAccumulatedDamage_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim) == 0x000008, "Wrong alignment on CharacterCommonPin_C_ToggleMegaBlastThresholdAnim");
static_assert(sizeof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim) == 0x000020, "Wrong size on CharacterCommonPin_C_ToggleMegaBlastThresholdAnim");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_GetCharacterReference_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_GetCharacterReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_GetAccumulatedDamage_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_GetAccumulatedDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_IsAnimationPlaying_ReturnValue) == 0x00001A, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_Not_PreBool_ReturnValue) == 0x00001B, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_ToggleMegaBlastThresholdAnim, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'CharacterCommonPin_C_ToggleMegaBlastThresholdAnim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.FlashLastPlayerNavInStock
// 0x0040 (0x0040 - 0x0000)
struct CharacterCommonPin_C_FlashLastPlayerNavInStock final
{
public:
	int32                                         OnePlayerWithStockTeamIndex;                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerKnockoutPlayerState_C*          K2Node_DynamicCast_AsMariner_Knockout_Player_State; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKnockoutGameState_C*                   K2Node_DynamicCast_AsKnockout_Game_State;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayersOnTeamWithStock_PlayersWithStock; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_FlashLastPlayerNavInStock) == 0x000008, "Wrong alignment on CharacterCommonPin_C_FlashLastPlayerNavInStock");
static_assert(sizeof(CharacterCommonPin_C_FlashLastPlayerNavInStock) == 0x000040, "Wrong size on CharacterCommonPin_C_FlashLastPlayerNavInStock");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, OnePlayerWithStockTeamIndex) == 0x000000, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::OnePlayerWithStockTeamIndex' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, K2Node_DynamicCast_AsMariner_Knockout_Player_State) == 0x000008, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::K2Node_DynamicCast_AsMariner_Knockout_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_GetTeamIndex_ReturnValue) == 0x000014, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_Greater_IntInt_ReturnValue) == 0x000019, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_GetGameState_ReturnValue) == 0x000020, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, K2Node_DynamicCast_AsKnockout_Game_State) == 0x000028, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::K2Node_DynamicCast_AsKnockout_Game_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_GetPlayersOnTeamWithStock_PlayersWithStock) == 0x000034, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_GetPlayersOnTeamWithStock_PlayersWithStock' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000038, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_FlashLastPlayerNavInStock, CallFunc_BooleanAND_ReturnValue_1) == 0x00003A, "Member 'CharacterCommonPin_C_FlashLastPlayerNavInStock::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnDamageWidgetAnimationStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged final
{
public:
	class UMarinerAnimatedWidget*                 Instance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWidgetAnimationState                         NewState;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged");
static_assert(sizeof(CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged) == 0x000010, "Wrong size on CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged");
static_assert(offsetof(CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged, Instance) == 0x000000, "Member 'CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged::Instance' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged, NewState) == 0x000008, "Member 'CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'CharacterCommonPin_C_OnDamageWidgetAnimationStateChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateDamageForcedOn
// 0x000E (0x000E - 0x0000)
struct CharacterCommonPin_C_UpdateDamageForcedOn final
{
public:
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_1;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_2;     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateDamageForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateDamageForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateDamageForcedOn) == 0x00000E, "Wrong size on CharacterCommonPin_C_UpdateDamageForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_1) == 0x000003, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_2) == 0x000004, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_3) == 0x000005, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_4) == 0x000006, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_5) == 0x000007, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue_1) == 0x000008, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_6) == 0x000009, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue_2) == 0x00000A, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_7) == 0x00000C, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateDamageForcedOn, CallFunc_BooleanAND_ReturnValue_8) == 0x00000D, "Member 'CharacterCommonPin_C_UpdateDamageForcedOn::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.StartLastInteractionTimer
// 0x0018 (0x0018 - 0x0000)
struct CharacterCommonPin_C_StartLastInteractionTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_StartLastInteractionTimer) == 0x000008, "Wrong alignment on CharacterCommonPin_C_StartLastInteractionTimer");
static_assert(sizeof(CharacterCommonPin_C_StartLastInteractionTimer) == 0x000018, "Wrong size on CharacterCommonPin_C_StartLastInteractionTimer");
static_assert(offsetof(CharacterCommonPin_C_StartLastInteractionTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharacterCommonPin_C_StartLastInteractionTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_StartLastInteractionTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_StartLastInteractionTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.StartLastDamageTimers
// 0x0030 (0x0030 - 0x0000)
struct CharacterCommonPin_C_StartLastDamageTimers final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_StartLastDamageTimers) == 0x000008, "Wrong alignment on CharacterCommonPin_C_StartLastDamageTimers");
static_assert(sizeof(CharacterCommonPin_C_StartLastDamageTimers) == 0x000030, "Wrong size on CharacterCommonPin_C_StartLastDamageTimers");
static_assert(offsetof(CharacterCommonPin_C_StartLastDamageTimers, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharacterCommonPin_C_StartLastDamageTimers::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_StartLastDamageTimers, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_StartLastDamageTimers::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_StartLastDamageTimers, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'CharacterCommonPin_C_StartLastDamageTimers::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_StartLastDamageTimers, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000028, "Member 'CharacterCommonPin_C_StartLastDamageTimers::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateGutterForcedOn
// 0x0007 (0x0007 - 0x0000)
struct CharacterCommonPin_C_UpdateGutterForcedOn final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateGutterForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateGutterForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateGutterForcedOn) == 0x000007, "Wrong size on CharacterCommonPin_C_UpdateGutterForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000003, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterForcedOn, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'CharacterCommonPin_C_UpdateGutterForcedOn::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateActionTextForcedOn
// 0x0002 (0x0002 - 0x0000)
struct CharacterCommonPin_C_UpdateActionTextForcedOn final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateActionTextForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateActionTextForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateActionTextForcedOn) == 0x000002, "Wrong size on CharacterCommonPin_C_UpdateActionTextForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateActionTextForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateActionTextForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateActionTextForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'CharacterCommonPin_C_UpdateActionTextForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateIconForcedOn
// 0x000E (0x000E - 0x0000)
struct CharacterCommonPin_C_UpdateIconForcedOn final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWidgetActive_ReturnValue;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetWidgetActive_ReturnValue_1;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_UpdateIconForcedOn) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateIconForcedOn");
static_assert(sizeof(CharacterCommonPin_C_UpdateIconForcedOn) == 0x00000E, "Wrong size on CharacterCommonPin_C_UpdateIconForcedOn");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_bool_Variable) == 0x000000, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_byte_Variable) == 0x000001, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_byte_Variable_1) == 0x000002, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_bool_Variable_1) == 0x000003, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_byte_Variable_2) == 0x000004, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, Temp_byte_Variable_3) == 0x000005, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_GetWidgetActive_ReturnValue) == 0x000006, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_GetWidgetActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, K2Node_Select_Default) == 0x000007, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_GetWidgetActive_ReturnValue_1) == 0x000009, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_GetWidgetActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000A, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, CallFunc_BooleanAND_ReturnValue_1) == 0x00000C, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateIconForcedOn, K2Node_Select_Default_1) == 0x00000D, "Member 'CharacterCommonPin_C_UpdateIconForcedOn::K2Node_Select_Default_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateTeam
// 0x0040 (0x0040 - 0x0000)
struct CharacterCommonPin_C_UpdateTeam final
{
public:
	TDelegate<void(class AMarinerPlayerState* PlayerChangedTeam)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamIndex_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarinerHostility                             CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamIndex_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateTeam) == 0x000008, "Wrong alignment on CharacterCommonPin_C_UpdateTeam");
static_assert(sizeof(CharacterCommonPin_C_UpdateTeam) == 0x000040, "Wrong size on CharacterCommonPin_C_UpdateTeam");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharacterCommonPin_C_UpdateTeam::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_GetTeamIndex_ReturnValue) == 0x000014, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_GetTeamIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_TryAndGetHostilityRelativeToLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000019, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_GetOwningPlayer_ReturnValue) == 0x000020, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, K2Node_DynamicCast_AsMariner_Player_State) == 0x000028, "Member 'CharacterCommonPin_C_UpdateTeam::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharacterCommonPin_C_UpdateTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_GetTeamIndex_ReturnValue_1) == 0x000034, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_GetTeamIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000038, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateTeam, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'CharacterCommonPin_C_UpdateTeam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateBindings
// 0x00C0 (0x00C0 - 0x0000)
struct CharacterCommonPin_C_UpdateBindings final
{
public:
	TDelegate<void(int32 OnePlayerWithStockTeamIndex)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AKnockoutGameState_C*                   K2Node_DynamicCast_AsKnockout_Game_State;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           CallFunc_GetProfileObjectManager_ReturnValue;      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameModeEnums                                CallFunc_GetGameModeViaGameState_GameMode;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UMarinerDamageableComponent* RelevantDamageableComponent, float NewAmount, float OldAmount)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AMarinerPlayerController* ControllerHostingState)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarinerCharacter*                      CallFunc_TryAndGetControlledCharacter_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerDamageableComponent*            CallFunc_BP_GetDamageableComponent_ReturnValue;    // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NewMatchState)>    K2Node_CreateDelegate_OutputDelegate_4;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerController*               K2Node_DynamicCast_AsMariner_Player_Controller;    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerHUD*                            K2Node_DynamicCast_AsMariner_HUD;                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateBindings) == 0x000008, "Wrong alignment on CharacterCommonPin_C_UpdateBindings");
static_assert(sizeof(CharacterCommonPin_C_UpdateBindings) == 0x0000C0, "Wrong size on CharacterCommonPin_C_UpdateBindings");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_AsKnockout_Game_State) == 0x000018, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_AsKnockout_Game_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_GetProfileObjectManager_ReturnValue) == 0x000028, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_GetProfileObjectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_GetGameModeViaGameState_GameMode) == 0x000030, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_GetGameModeViaGameState_GameMode' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000034, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_SwitchEnum_CmpSuccess) == 0x000044, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_CreateDelegate_OutputDelegate_2) == 0x000048, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_CreateDelegate_OutputDelegate_3) == 0x000058, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_TryAndGetControlledCharacter_ReturnValue) == 0x000070, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_TryAndGetControlledCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_BP_GetDamageableComponent_ReturnValue) == 0x000078, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_BP_GetDamageableComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_CreateDelegate_OutputDelegate_4) == 0x000080, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_GetOwningPlayer_ReturnValue) == 0x000090, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_AsMariner_Player_Controller) == 0x000098, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_AsMariner_Player_Controller' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, CallFunc_GetHUD_ReturnValue) == 0x0000A8, "Member 'CharacterCommonPin_C_UpdateBindings::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_AsMariner_HUD) == 0x0000B0, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_AsMariner_HUD' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateBindings, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'CharacterCommonPin_C_UpdateBindings::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnPlayerStateReplicated
// 0x0040 (0x0040 - 0x0000)
struct CharacterCommonPin_C_OnPlayerStateReplicated final
{
public:
	class AMarinerPlayerController*               PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerProfileObjectManager*           CallFunc_GetProfileObjectManager_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_OnPlayerStateReplicated) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnPlayerStateReplicated");
static_assert(sizeof(CharacterCommonPin_C_OnPlayerStateReplicated) == 0x000040, "Wrong size on CharacterCommonPin_C_OnPlayerStateReplicated");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, PlayerController) == 0x000000, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::PlayerController' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, K2Node_DynamicCast_AsMariner_Player_State) == 0x000020, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, CallFunc_GetProfileObjectManager_ReturnValue) == 0x000030, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::CallFunc_GetProfileObjectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateReplicated, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'CharacterCommonPin_C_OnPlayerStateReplicated::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetRenderScalar
// 0x0004 (0x0004 - 0x0000)
struct CharacterCommonPin_C_SetRenderScalar final
{
public:
	float                                         NewScalar;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SetRenderScalar) == 0x000004, "Wrong alignment on CharacterCommonPin_C_SetRenderScalar");
static_assert(sizeof(CharacterCommonPin_C_SetRenderScalar) == 0x000004, "Wrong size on CharacterCommonPin_C_SetRenderScalar");
static_assert(offsetof(CharacterCommonPin_C_SetRenderScalar, NewScalar) == 0x000000, "Member 'CharacterCommonPin_C_SetRenderScalar::NewScalar' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.CreateMegablastWidget
// 0x0038 (0x0038 - 0x0000)
struct CharacterCommonPin_C_CreateMegablastWidget final
{
public:
	class UBlastbarNavpinMegablast_C*             BlastbarWidget;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerMenuManager*                    CallFunc_GetMenuManager_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerCharacter*                      CallFunc_GetCharacterReference_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerWidgetPool*                     CallFunc_GetWidgetPool_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetWidgetFromPool_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlastbarNavpinMegablast_C*             K2Node_DynamicCast_AsBlastbar_Navpin_Megablast;    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_CreateMegablastWidget) == 0x000008, "Wrong alignment on CharacterCommonPin_C_CreateMegablastWidget");
static_assert(sizeof(CharacterCommonPin_C_CreateMegablastWidget) == 0x000038, "Wrong size on CharacterCommonPin_C_CreateMegablastWidget");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, BlastbarWidget) == 0x000000, "Member 'CharacterCommonPin_C_CreateMegablastWidget::BlastbarWidget' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, CallFunc_GetMenuManager_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_CreateMegablastWidget::CallFunc_GetMenuManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, CallFunc_GetCharacterReference_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_CreateMegablastWidget::CallFunc_GetCharacterReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, CallFunc_GetWidgetPool_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_CreateMegablastWidget::CallFunc_GetWidgetPool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, CallFunc_GetWidgetFromPool_ReturnValue) == 0x000020, "Member 'CharacterCommonPin_C_CreateMegablastWidget::CallFunc_GetWidgetFromPool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, K2Node_DynamicCast_AsBlastbar_Navpin_Megablast) == 0x000028, "Member 'CharacterCommonPin_C_CreateMegablastWidget::K2Node_DynamicCast_AsBlastbar_Navpin_Megablast' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_CreateMegablastWidget, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CharacterCommonPin_C_CreateMegablastWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateVisibility
// 0x0005 (0x0005 - 0x0000)
struct CharacterCommonPin_C_UpdateVisibility final
{
public:
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateVisibility) == 0x000001, "Wrong alignment on CharacterCommonPin_C_UpdateVisibility");
static_assert(sizeof(CharacterCommonPin_C_UpdateVisibility) == 0x000005, "Wrong size on CharacterCommonPin_C_UpdateVisibility");
static_assert(offsetof(CharacterCommonPin_C_UpdateVisibility, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateVisibility::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateVisibility, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000001, "Member 'CharacterCommonPin_C_UpdateVisibility::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'CharacterCommonPin_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue_1) == 0x000003, "Member 'CharacterCommonPin_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateVisibility, CallFunc_BooleanOR_ReturnValue_2) == 0x000004, "Member 'CharacterCommonPin_C_UpdateVisibility::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetGameModeWidgetScale
// 0x0088 (0x0088 - 0x0000)
struct CharacterCommonPin_C_SetGameModeWidgetScale final
{
public:
	float                                         NewScalar;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionTextExtraSpace;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_2;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SetGameModeWidgetScale) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SetGameModeWidgetScale");
static_assert(sizeof(CharacterCommonPin_C_SetGameModeWidgetScale) == 0x000088, "Wrong size on CharacterCommonPin_C_SetGameModeWidgetScale");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, NewScalar) == 0x000000, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::NewScalar' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, ActionTextExtraSpace) == 0x000004, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::ActionTextExtraSpace' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_BreakVector2D_X) == 0x000010, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_BreakVector2D_X_1) == 0x00001C, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_MakeVector2D_ReturnValue) == 0x000024, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00002C, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000034, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Abs_ReturnValue_1) == 0x000040, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000048, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000050, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000054, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000058, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_MakeVector2D_ReturnValue_1) == 0x000060, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x000068, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_MakeVector2D_ReturnValue_2) == 0x00006C, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000078, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGameModeWidgetScale, CallFunc_Multiply_Vector2DFloat_ReturnValue_2) == 0x000080, "Member 'CharacterCommonPin_C_SetGameModeWidgetScale::CallFunc_Multiply_Vector2DFloat_ReturnValue_2' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SaveGameModeWidgetScale
// 0x0040 (0x0040 - 0x0000)
struct CharacterCommonPin_C_SaveGameModeWidgetScale final
{
public:
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue_1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SaveGameModeWidgetScale) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SaveGameModeWidgetScale");
static_assert(sizeof(CharacterCommonPin_C_SaveGameModeWidgetScale) == 0x000040, "Wrong size on CharacterCommonPin_C_SaveGameModeWidgetScale");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000008, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_GetPosition_ReturnValue) == 0x000010, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_GetPosition_ReturnValue_1) == 0x000018, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_GetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000020, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000028, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_GetSize_ReturnValue) == 0x000030, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SaveGameModeWidgetScale, CallFunc_GetSize_ReturnValue_1) == 0x000038, "Member 'CharacterCommonPin_C_SaveGameModeWidgetScale::CallFunc_GetSize_ReturnValue_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetActionTextFontSize
// 0x0058 (0x0058 - 0x0000)
struct CharacterCommonPin_C_SetActionTextFontSize final
{
public:
	int32                                         FontSize;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0050)(HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SetActionTextFontSize) == 0x000008, "Wrong alignment on CharacterCommonPin_C_SetActionTextFontSize");
static_assert(sizeof(CharacterCommonPin_C_SetActionTextFontSize) == 0x000058, "Wrong size on CharacterCommonPin_C_SetActionTextFontSize");
static_assert(offsetof(CharacterCommonPin_C_SetActionTextFontSize, FontSize) == 0x000000, "Member 'CharacterCommonPin_C_SetActionTextFontSize::FontSize' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetActionTextFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'CharacterCommonPin_C_SetActionTextFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.SetGutterWidgetTextVisibility
// 0x0005 (0x0005 - 0x0000)
struct CharacterCommonPin_C_SetGutterWidgetTextVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_SetGutterWidgetTextVisibility) == 0x000001, "Wrong alignment on CharacterCommonPin_C_SetGutterWidgetTextVisibility");
static_assert(sizeof(CharacterCommonPin_C_SetGutterWidgetTextVisibility) == 0x000005, "Wrong size on CharacterCommonPin_C_SetGutterWidgetTextVisibility");
static_assert(offsetof(CharacterCommonPin_C_SetGutterWidgetTextVisibility, IsVisible_0) == 0x000000, "Member 'CharacterCommonPin_C_SetGutterWidgetTextVisibility::IsVisible_0' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGutterWidgetTextVisibility, Temp_bool_Variable) == 0x000001, "Member 'CharacterCommonPin_C_SetGutterWidgetTextVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGutterWidgetTextVisibility, Temp_byte_Variable) == 0x000002, "Member 'CharacterCommonPin_C_SetGutterWidgetTextVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGutterWidgetTextVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'CharacterCommonPin_C_SetGutterWidgetTextVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_SetGutterWidgetTextVisibility, K2Node_Select_Default) == 0x000004, "Member 'CharacterCommonPin_C_SetGutterWidgetTextVisibility::K2Node_Select_Default' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnPlayerStateTeamChanged
// 0x0008 (0x0008 - 0x0000)
struct CharacterCommonPin_C_OnPlayerStateTeamChanged final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_OnPlayerStateTeamChanged) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnPlayerStateTeamChanged");
static_assert(sizeof(CharacterCommonPin_C_OnPlayerStateTeamChanged) == 0x000008, "Wrong size on CharacterCommonPin_C_OnPlayerStateTeamChanged");
static_assert(offsetof(CharacterCommonPin_C_OnPlayerStateTeamChanged, PlayerState) == 0x000000, "Member 'CharacterCommonPin_C_OnPlayerStateTeamChanged::PlayerState' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.OnSmallPortraitFinishLoad
// 0x0088 (0x0088 - 0x0000)
struct CharacterCommonPin_C_OnSmallPortraitFinishLoad final
{
public:
	struct FSlateBrush                            LoadedPortrait;                                    // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(CharacterCommonPin_C_OnSmallPortraitFinishLoad) == 0x000008, "Wrong alignment on CharacterCommonPin_C_OnSmallPortraitFinishLoad");
static_assert(sizeof(CharacterCommonPin_C_OnSmallPortraitFinishLoad) == 0x000088, "Wrong size on CharacterCommonPin_C_OnSmallPortraitFinishLoad");
static_assert(offsetof(CharacterCommonPin_C_OnSmallPortraitFinishLoad, LoadedPortrait) == 0x000000, "Member 'CharacterCommonPin_C_OnSmallPortraitFinishLoad::LoadedPortrait' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.GetMatchStatus
// 0x0038 (0x0038 - 0x0000)
struct CharacterCommonPin_C_GetMatchStatus final
{
public:
	bool                                          CanPlayMessages;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MarinerTrialsGameState_C*           K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MarinerGameState_C*                 K2Node_DynamicCast_AsBP_Mariner_Game_State;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRoundTransition_bIsInRoundTransition;   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_GetMatchStatus) == 0x000008, "Wrong alignment on CharacterCommonPin_C_GetMatchStatus");
static_assert(sizeof(CharacterCommonPin_C_GetMatchStatus) == 0x000038, "Wrong size on CharacterCommonPin_C_GetMatchStatus");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CanPlayMessages) == 0x000000, "Member 'CharacterCommonPin_C_GetMatchStatus::CanPlayMessages' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_GetGameState_ReturnValue_1) == 0x000010, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State) == 0x000018, "Member 'CharacterCommonPin_C_GetMatchStatus::K2Node_DynamicCast_AsBP_Mariner_Trials_Game_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'CharacterCommonPin_C_GetMatchStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, K2Node_DynamicCast_AsBP_Mariner_Game_State) == 0x000028, "Member 'CharacterCommonPin_C_GetMatchStatus::K2Node_DynamicCast_AsBP_Mariner_Game_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'CharacterCommonPin_C_GetMatchStatus::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_IsRoundTransition_bIsInRoundTransition) == 0x000031, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_IsRoundTransition_bIsInRoundTransition' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000032, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_Not_PreBool_ReturnValue) == 0x000033, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_Not_PreBool_ReturnValue_1) == 0x000034, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000035, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_BooleanAND_ReturnValue) == 0x000036, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_GetMatchStatus, CallFunc_BooleanAND_ReturnValue_1) == 0x000037, "Member 'CharacterCommonPin_C_GetMatchStatus::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.HandleGutterIcon
// 0x0080 (0x0080 - 0x0000)
struct CharacterCommonPin_C_HandleGutterIcon final
{
public:
	class AMarinerPlayerState*                    PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 SkinIndex)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> CallFunc_GetFakeBotActiveSkin_ReturnValue;         // 0x0018(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerProfileObjectManager*           CallFunc_GetProfileObjectManager_ReturnValue;      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerSkinCollectionDataAsset*        K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarinerSkinCollectionDataAsset*        CallFunc_GetSkinCollection_ReturnValue;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBotTreatedLikePlayer_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FSlateBrush& Brush)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_HandleGutterIcon) == 0x000008, "Wrong alignment on CharacterCommonPin_C_HandleGutterIcon");
static_assert(sizeof(CharacterCommonPin_C_HandleGutterIcon) == 0x000080, "Wrong size on CharacterCommonPin_C_HandleGutterIcon");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, PlayerState) == 0x000000, "Member 'CharacterCommonPin_C_HandleGutterIcon::PlayerState' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'CharacterCommonPin_C_HandleGutterIcon::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, CallFunc_GetFakeBotActiveSkin_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_HandleGutterIcon::CallFunc_GetFakeBotActiveSkin_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000040, "Member 'CharacterCommonPin_C_HandleGutterIcon::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, CallFunc_GetProfileObjectManager_ReturnValue) == 0x000048, "Member 'CharacterCommonPin_C_HandleGutterIcon::CallFunc_GetProfileObjectManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset) == 0x000050, "Member 'CharacterCommonPin_C_HandleGutterIcon::K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'CharacterCommonPin_C_HandleGutterIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, CallFunc_GetSkinCollection_ReturnValue) == 0x000060, "Member 'CharacterCommonPin_C_HandleGutterIcon::CallFunc_GetSkinCollection_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, CallFunc_IsBotTreatedLikePlayer_ReturnValue) == 0x000068, "Member 'CharacterCommonPin_C_HandleGutterIcon::CallFunc_IsBotTreatedLikePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleGutterIcon, K2Node_CreateDelegate_OutputDelegate_1) == 0x00006C, "Member 'CharacterCommonPin_C_HandleGutterIcon::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.HandleBotFakeSkin
// 0x0058 (0x0058 - 0x0000)
struct CharacterCommonPin_C_HandleBotFakeSkin final
{
public:
	int32                                         BotSkinIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FSlateBrush& Brush)>    K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMarinerSkinCollectionDataAsset> CallFunc_GetFakeBotActiveSkin_ReturnValue;         // 0x0018(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMarinerSkinCollectionDataAsset*        K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_HandleBotFakeSkin) == 0x000008, "Wrong alignment on CharacterCommonPin_C_HandleBotFakeSkin");
static_assert(sizeof(CharacterCommonPin_C_HandleBotFakeSkin) == 0x000058, "Wrong size on CharacterCommonPin_C_HandleBotFakeSkin");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, BotSkinIndex) == 0x000000, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::BotSkinIndex' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, CallFunc_GetFakeBotActiveSkin_ReturnValue) == 0x000018, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::CallFunc_GetFakeBotActiveSkin_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000040, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset) == 0x000048, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::K2Node_DynamicCast_AsMariner_Skin_Collection_Data_Asset' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_HandleBotFakeSkin, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'CharacterCommonPin_C_HandleBotFakeSkin::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.UpdateGutterIcon
// 0x0018 (0x0018 - 0x0000)
struct CharacterCommonPin_C_UpdateGutterIcon final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMarinerPlayerState*                    K2Node_DynamicCast_AsMariner_Player_State;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CharacterCommonPin_C_UpdateGutterIcon) == 0x000008, "Wrong alignment on CharacterCommonPin_C_UpdateGutterIcon");
static_assert(sizeof(CharacterCommonPin_C_UpdateGutterIcon) == 0x000018, "Wrong size on CharacterCommonPin_C_UpdateGutterIcon");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterIcon, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_UpdateGutterIcon::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterIcon, K2Node_DynamicCast_AsMariner_Player_State) == 0x000008, "Member 'CharacterCommonPin_C_UpdateGutterIcon::K2Node_DynamicCast_AsMariner_Player_State' has a wrong offset!");
static_assert(offsetof(CharacterCommonPin_C_UpdateGutterIcon, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'CharacterCommonPin_C_UpdateGutterIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CharacterCommonPin.CharacterCommonPin_C.GetRenderScalar
// 0x0004 (0x0004 - 0x0000)
struct CharacterCommonPin_C_GetRenderScalar final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CharacterCommonPin_C_GetRenderScalar) == 0x000004, "Wrong alignment on CharacterCommonPin_C_GetRenderScalar");
static_assert(sizeof(CharacterCommonPin_C_GetRenderScalar) == 0x000004, "Wrong size on CharacterCommonPin_C_GetRenderScalar");
static_assert(offsetof(CharacterCommonPin_C_GetRenderScalar, ReturnValue) == 0x000000, "Member 'CharacterCommonPin_C_GetRenderScalar::ReturnValue' has a wrong offset!");

}

